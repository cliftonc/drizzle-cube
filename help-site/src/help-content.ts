// Auto-generated help content - do not edit manually

export interface HelpTopic {
  slug: string;
  title: string;
  content: string;
  path: string;
}

export const helpContent: HelpTopic[] = [
  {
    "slug": "adapters/custom",
    "title": "Custom Adapters",
    "content": "<h1 id=\"custom-adapters\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Custom Adapters</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube&#39;s adapter system allows you to integrate the semantic layer with any web framework or runtime. Custom adapters provide the bridge between your application&#39;s HTTP layer and Drizzle Cube&#39;s query execution engine.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">An adapter is a framework-specific wrapper that:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Exposes Cube.js-compatible API endpoints</li><li class=\"leading-relaxed\">Handles HTTP requests and responses</li><li class=\"leading-relaxed\">Extracts security context from your application</li><li class=\"leading-relaxed\">Manages CORS and authentication</li><li class=\"leading-relaxed\">Provides error handling and logging</li></ul><h2 id=\"adapter-architecture\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Adapter Architecture</h2><h3 id=\"core-components\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Core Components</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Required adapter interface\ninterface DrizzleCubeAdapter {\n  // HTTP route handlers\n  handleLoad: (request: Request) =&gt; Promise&lt;Response&gt;\n  handleMeta: (request: Request) =&gt; Promise&lt;Response&gt;\n  \n  // Security context extraction\n  getSecurityContext: (request: Request) =&gt; Promise&lt;SecurityContext&gt;\n  \n  // Optional: Custom error handling\n  handleError?: (error: Error, request: Request) =&gt; Response\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Required adapter interface\ninterface DrizzleCubeAdapter {\n  // HTTP route handlers\n  handleLoad: (request: Request) =&gt; Promise&lt;Response&gt;\n  handleMeta: (request: Request) =&gt; Promise&lt;Response&gt;\n  \n  // Security context extraction\n  getSecurityContext: (request: Request) =&gt; Promise&lt;SecurityContext&gt;\n  \n  // Optional: Custom error handling\n  handleError?: (error: Error, request: Request) =&gt; Response\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"base-adapter-structure\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Base Adapter Structure</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { SemanticLayerCompiler, SecurityContext } from &#39;drizzle-cube/server&#39;\nimport type { DrizzleDatabase } from &#39;drizzle-cube/server&#39;\n\nexport interface AdapterOptions&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt; {\n  semanticLayer: SemanticLayerCompiler&lt;TSchema&gt;\n  drizzle: DrizzleDatabase&lt;TSchema&gt;\n  schema?: TSchema\n  getSecurityContext: (context: any) =&gt; SecurityContext | Promise&lt;SecurityContext&gt;\n  cors?: CorsOptions\n}\n\nexport abstract class BaseAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt; {\n  protected semanticLayer: SemanticLayerCompiler&lt;TSchema&gt;\n  protected drizzle: DrizzleDatabase&lt;TSchema&gt;\n  protected schema?: TSchema\n  protected getSecurityContext: (context: any) =&gt; SecurityContext | Promise&lt;SecurityContext&gt;\n\n  constructor(options: AdapterOptions&lt;TSchema&gt;) {\n    this.semanticLayer = options.semanticLayer\n    this.drizzle = options.drizzle\n    this.schema = options.schema\n    this.getSecurityContext = options.getSecurityContext\n  }\n\n  abstract setupRoutes(): void\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { SemanticLayerCompiler, SecurityContext } from &#39;drizzle-cube/server&#39;\nimport type { DrizzleDatabase } from &#39;drizzle-cube/server&#39;\n\nexport interface AdapterOptions&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt; {\n  semanticLayer: SemanticLayerCompiler&lt;TSchema&gt;\n  drizzle: DrizzleDatabase&lt;TSchema&gt;\n  schema?: TSchema\n  getSecurityContext: (context: any) =&gt; SecurityContext | Promise&lt;SecurityContext&gt;\n  cors?: CorsOptions\n}\n\nexport abstract class BaseAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt; {\n  protected semanticLayer: SemanticLayerCompiler&lt;TSchema&gt;\n  protected drizzle: DrizzleDatabase&lt;TSchema&gt;\n  protected schema?: TSchema\n  protected getSecurityContext: (context: any) =&gt; SecurityContext | Promise&lt;SecurityContext&gt;\n\n  constructor(options: AdapterOptions&lt;TSchema&gt;) {\n    this.semanticLayer = options.semanticLayer\n    this.drizzle = options.drizzle\n    this.schema = options.schema\n    this.getSecurityContext = options.getSecurityContext\n  }\n\n  abstract setupRoutes(): void\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"creating-a-custom-adapter\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Creating a Custom Adapter</h2><h3 id=\"step-1-define-adapter-interface\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Step 1: Define Adapter Interface</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// adapters/fastify/index.ts\nimport { FastifyInstance, FastifyRequest, FastifyReply } from &#39;fastify&#39;\nimport { BaseAdapter, AdapterOptions } from &#39;drizzle-cube/server&#39;\n\nexport interface FastifyAdapterOptions&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends AdapterOptions&lt;TSchema&gt; {\n  prefix?: string  // API route prefix\n  corsOrigin?: string | string[]\n}\n\nexport class FastifyAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends BaseAdapter&lt;TSchema&gt; {\n  private app: FastifyInstance\n  private prefix: string\n\n  constructor(app: FastifyInstance, options: FastifyAdapterOptions&lt;TSchema&gt;) {\n    super(options)\n    this.app = app\n    this.prefix = options.prefix || &#39;/cubejs-api/v1&#39;\n  }\n\n  setupRoutes() {\n    // Register Cube.js API endpoints\n    this.app.post(`${this.prefix}/load`, this.handleLoad.bind(this))\n    this.app.get(`${this.prefix}/meta`, this.handleMeta.bind(this))\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// adapters/fastify/index.ts\nimport { FastifyInstance, FastifyRequest, FastifyReply } from &#39;fastify&#39;\nimport { BaseAdapter, AdapterOptions } from &#39;drizzle-cube/server&#39;\n\nexport interface FastifyAdapterOptions&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends AdapterOptions&lt;TSchema&gt; {\n  prefix?: string  // API route prefix\n  corsOrigin?: string | string[]\n}\n\nexport class FastifyAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends BaseAdapter&lt;TSchema&gt; {\n  private app: FastifyInstance\n  private prefix: string\n\n  constructor(app: FastifyInstance, options: FastifyAdapterOptions&lt;TSchema&gt;) {\n    super(options)\n    this.app = app\n    this.prefix = options.prefix || &#39;/cubejs-api/v1&#39;\n  }\n\n  setupRoutes() {\n    // Register Cube.js API endpoints\n    this.app.post(`${this.prefix}/load`, this.handleLoad.bind(this))\n    this.app.get(`${this.prefix}/meta`, this.handleMeta.bind(this))\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"step-2-implement-route-handlers\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Step 2: Implement Route Handlers</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export class FastifyAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  async handleLoad(request: FastifyRequest, reply: FastifyReply) {\n    try {\n      // Extract security context from Fastify request\n      const securityContext = await this.getSecurityContext(request)\n      \n      // Parse query from request body\n      const query = request.body as SemanticQuery\n      \n      // Execute query using semantic layer\n      const result = await this.semanticLayer.load(query, securityContext)\n      \n      // Return Cube.js-compatible response\n      reply.send({\n        query,\n        data: result.rawData(),\n        annotation: result.annotation(),\n        lastRefreshTime: new Date().toISOString()\n      })\n      \n    } catch (error) {\n      reply.status(400).send({\n        error: error.message,\n        type: error.constructor.name\n      })\n    }\n  }\n\n  async handleMeta(request: FastifyRequest, reply: FastifyReply) {\n    try {\n      // Extract security context\n      const securityContext = await this.getSecurityContext(request)\n      \n      // Get cube metadata\n      const cubes = await this.semanticLayer.getMetadata(securityContext)\n      \n      reply.send({ cubes })\n      \n    } catch (error) {\n      reply.status(400).send({\n        error: error.message,\n        type: error.constructor.name\n      })\n    }\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export class FastifyAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  async handleLoad(request: FastifyRequest, reply: FastifyReply) {\n    try {\n      // Extract security context from Fastify request\n      const securityContext = await this.getSecurityContext(request)\n      \n      // Parse query from request body\n      const query = request.body as SemanticQuery\n      \n      // Execute query using semantic layer\n      const result = await this.semanticLayer.load(query, securityContext)\n      \n      // Return Cube.js-compatible response\n      reply.send({\n        query,\n        data: result.rawData(),\n        annotation: result.annotation(),\n        lastRefreshTime: new Date().toISOString()\n      })\n      \n    } catch (error) {\n      reply.status(400).send({\n        error: error.message,\n        type: error.constructor.name\n      })\n    }\n  }\n\n  async handleMeta(request: FastifyRequest, reply: FastifyReply) {\n    try {\n      // Extract security context\n      const securityContext = await this.getSecurityContext(request)\n      \n      // Get cube metadata\n      const cubes = await this.semanticLayer.getMetadata(securityContext)\n      \n      reply.send({ cubes })\n      \n    } catch (error) {\n      reply.status(400).send({\n        error: error.message,\n        type: error.constructor.name\n      })\n    }\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"step-3-security-context-extraction\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Step 3: Security Context Extraction</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export class FastifyAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  constructor(app: FastifyInstance, options: FastifyAdapterOptions&lt;TSchema&gt;) {\n    super(options)\n    this.app = app\n    this.prefix = options.prefix || &#39;/cubejs-api/v1&#39;\n    \n    // Setup CORS if configured\n    if (options.corsOrigin) {\n      this.app.register(require(&#39;@fastify/cors&#39;), {\n        origin: options.corsOrigin\n      })\n    }\n  }\n\n  // Example security context extraction\n  private async extractSecurityContext(request: FastifyRequest): Promise&lt;SecurityContext&gt; {\n    // Extract JWT token from Authorization header\n    const authHeader = request.headers.authorization\n    if (!authHeader?.startsWith(&#39;Bearer &#39;)) {\n      throw new Error(&#39;Missing or invalid authorization header&#39;)\n    }\n\n    const token = authHeader.substring(7)\n    const payload = await validateJWT(token)\n\n    return {\n      organisationId: payload.orgId,    // REQUIRED for multi-tenant security\n      userId: payload.userId,\n      userRole: payload.role,\n      permissions: payload.permissions\n    }\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export class FastifyAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  constructor(app: FastifyInstance, options: FastifyAdapterOptions&lt;TSchema&gt;) {\n    super(options)\n    this.app = app\n    this.prefix = options.prefix || &#39;/cubejs-api/v1&#39;\n    \n    // Setup CORS if configured\n    if (options.corsOrigin) {\n      this.app.register(require(&#39;@fastify/cors&#39;), {\n        origin: options.corsOrigin\n      })\n    }\n  }\n\n  // Example security context extraction\n  private async extractSecurityContext(request: FastifyRequest): Promise&lt;SecurityContext&gt; {\n    // Extract JWT token from Authorization header\n    const authHeader = request.headers.authorization\n    if (!authHeader?.startsWith(&#39;Bearer &#39;)) {\n      throw new Error(&#39;Missing or invalid authorization header&#39;)\n    }\n\n    const token = authHeader.substring(7)\n    const payload = await validateJWT(token)\n\n    return {\n      organisationId: payload.orgId,    // REQUIRED for multi-tenant security\n      userId: payload.userId,\n      userRole: payload.role,\n      permissions: payload.permissions\n    }\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"step-4-factory-function\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Step 4: Factory Function</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Export a factory function for easy setup\nexport function createFastifyAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;(\n  app: FastifyInstance,\n  options: FastifyAdapterOptions&lt;TSchema&gt;\n): FastifyAdapter&lt;TSchema&gt; {\n  const adapter = new FastifyAdapter(app, options)\n  adapter.setupRoutes()\n  return adapter\n}\n\n// Usage\nimport { createFastifyAdapter } from &#39;./adapters/fastify&#39;\n\nconst adapter = createFastifyAdapter(fastifyApp, {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; ({\n    organisationId: request.user.organisationId,\n    userId: request.user.id,\n    userRole: request.user.role\n  }),\n  prefix: &#39;/api/cube&#39;,\n  corsOrigin: [&#39;http://localhost:3000&#39;]\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Export a factory function for easy setup\nexport function createFastifyAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;(\n  app: FastifyInstance,\n  options: FastifyAdapterOptions&lt;TSchema&gt;\n): FastifyAdapter&lt;TSchema&gt; {\n  const adapter = new FastifyAdapter(app, options)\n  adapter.setupRoutes()\n  return adapter\n}\n\n// Usage\nimport { createFastifyAdapter } from &#39;./adapters/fastify&#39;\n\nconst adapter = createFastifyAdapter(fastifyApp, {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; ({\n    organisationId: request.user.organisationId,\n    userId: request.user.id,\n    userRole: request.user.role\n  }),\n  prefix: &#39;/api/cube&#39;,\n  corsOrigin: [&#39;http://localhost:3000&#39;]\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"framework-specific-examples\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Framework-Specific Examples</h2><h3 id=\"expressjs-adapter\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Express.js Adapter</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// adapters/express/index.ts\nimport express, { Request, Response, NextFunction } from &#39;express&#39;\nimport cors from &#39;cors&#39;\n\nexport class ExpressAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends BaseAdapter&lt;TSchema&gt; {\n  private app: express.Application\n  private router: express.Router\n\n  constructor(app: express.Application, options: AdapterOptions&lt;TSchema&gt;) {\n    super(options)\n    this.app = app\n    this.router = express.Router()\n    \n    // Setup middleware\n    this.router.use(express.json())\n    this.router.use(cors())\n  }\n\n  setupRoutes() {\n    this.router.post(&#39;/load&#39;, this.handleLoad.bind(this))\n    this.router.get(&#39;/meta&#39;, this.handleMeta.bind(this))\n    \n    // Mount router\n    this.app.use(&#39;/cubejs-api/v1&#39;, this.router)\n  }\n\n  async handleLoad(req: Request, res: Response, next: NextFunction) {\n    try {\n      const securityContext = await this.getSecurityContext(req)\n      const result = await this.semanticLayer.load(req.body, securityContext)\n      \n      res.json({\n        query: req.body,\n        data: result.rawData(),\n        annotation: result.annotation()\n      })\n    } catch (error) {\n      next(error)  // Express error handling\n    }\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// adapters/express/index.ts\nimport express, { Request, Response, NextFunction } from &#39;express&#39;\nimport cors from &#39;cors&#39;\n\nexport class ExpressAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends BaseAdapter&lt;TSchema&gt; {\n  private app: express.Application\n  private router: express.Router\n\n  constructor(app: express.Application, options: AdapterOptions&lt;TSchema&gt;) {\n    super(options)\n    this.app = app\n    this.router = express.Router()\n    \n    // Setup middleware\n    this.router.use(express.json())\n    this.router.use(cors())\n  }\n\n  setupRoutes() {\n    this.router.post(&#39;/load&#39;, this.handleLoad.bind(this))\n    this.router.get(&#39;/meta&#39;, this.handleMeta.bind(this))\n    \n    // Mount router\n    this.app.use(&#39;/cubejs-api/v1&#39;, this.router)\n  }\n\n  async handleLoad(req: Request, res: Response, next: NextFunction) {\n    try {\n      const securityContext = await this.getSecurityContext(req)\n      const result = await this.semanticLayer.load(req.body, securityContext)\n      \n      res.json({\n        query: req.body,\n        data: result.rawData(),\n        annotation: result.annotation()\n      })\n    } catch (error) {\n      next(error)  // Express error handling\n    }\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"nextjs-api-routes-adapter\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Next.js API Routes Adapter</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// adapters/nextjs/index.ts\nimport { NextApiRequest, NextApiResponse } from &#39;next&#39;\n\nexport class NextJSAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends BaseAdapter&lt;TSchema&gt; {\n\n  // Next.js API route handler factory\n  createLoadHandler() {\n    return async (req: NextApiRequest, res: NextApiResponse) =&gt; {\n      if (req.method !== &#39;POST&#39;) {\n        return res.status(405).json({ error: &#39;Method not allowed&#39; })\n      }\n\n      try {\n        const securityContext = await this.getSecurityContext(req)\n        const result = await this.semanticLayer.load(req.body, securityContext)\n        \n        res.json({\n          query: req.body,\n          data: result.rawData(),\n          annotation: result.annotation()\n        })\n      } catch (error) {\n        res.status(400).json({\n          error: error.message,\n          type: error.constructor.name\n        })\n      }\n    }\n  }\n\n  createMetaHandler() {\n    return async (req: NextApiRequest, res: NextApiResponse) =&gt; {\n      if (req.method !== &#39;GET&#39;) {\n        return res.status(405).json({ error: &#39;Method not allowed&#39; })\n      }\n\n      try {\n        const securityContext = await this.getSecurityContext(req)\n        const cubes = await this.semanticLayer.getMetadata(securityContext)\n        res.json({ cubes })\n      } catch (error) {\n        res.status(400).json({ error: error.message })\n      }\n    }\n  }\n}\n\n// Usage in pages/api/cubejs-api/v1/load.ts\nimport { NextJSAdapter } from &#39;../../../adapters/nextjs&#39;\n\nconst adapter = new NextJSAdapter({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; {\n    const token = req.headers.authorization?.substring(7)\n    const user = await validateToken(token)\n    return {\n      organisationId: user.organisationId,\n      userId: user.id\n    }\n  }\n})\n\nexport default adapter.createLoadHandler()</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// adapters/nextjs/index.ts\nimport { NextApiRequest, NextApiResponse } from &#39;next&#39;\n\nexport class NextJSAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends BaseAdapter&lt;TSchema&gt; {\n\n  // Next.js API route handler factory\n  createLoadHandler() {\n    return async (req: NextApiRequest, res: NextApiResponse) =&gt; {\n      if (req.method !== &#39;POST&#39;) {\n        return res.status(405).json({ error: &#39;Method not allowed&#39; })\n      }\n\n      try {\n        const securityContext = await this.getSecurityContext(req)\n        const result = await this.semanticLayer.load(req.body, securityContext)\n        \n        res.json({\n          query: req.body,\n          data: result.rawData(),\n          annotation: result.annotation()\n        })\n      } catch (error) {\n        res.status(400).json({\n          error: error.message,\n          type: error.constructor.name\n        })\n      }\n    }\n  }\n\n  createMetaHandler() {\n    return async (req: NextApiRequest, res: NextApiResponse) =&gt; {\n      if (req.method !== &#39;GET&#39;) {\n        return res.status(405).json({ error: &#39;Method not allowed&#39; })\n      }\n\n      try {\n        const securityContext = await this.getSecurityContext(req)\n        const cubes = await this.semanticLayer.getMetadata(securityContext)\n        res.json({ cubes })\n      } catch (error) {\n        res.status(400).json({ error: error.message })\n      }\n    }\n  }\n}\n\n// Usage in pages/api/cubejs-api/v1/load.ts\nimport { NextJSAdapter } from &#39;../../../adapters/nextjs&#39;\n\nconst adapter = new NextJSAdapter({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; {\n    const token = req.headers.authorization?.substring(7)\n    const user = await validateToken(token)\n    return {\n      organisationId: user.organisationId,\n      userId: user.id\n    }\n  }\n})\n\nexport default adapter.createLoadHandler()\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"cloudflare-workers-adapter\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Cloudflare Workers Adapter</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// adapters/cloudflare/index.ts\nexport class CloudflareWorkerAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends BaseAdapter&lt;TSchema&gt; {\n\n  async handleRequest(request: Request, env: any): Promise&lt;Response&gt; {\n    const url = new URL(request.url)\n    \n    // Route requests\n    if (url.pathname.endsWith(&#39;/load&#39;) &amp;&amp; request.method === &#39;POST&#39;) {\n      return this.handleLoad(request, env)\n    }\n    \n    if (url.pathname.endsWith(&#39;/meta&#39;) &amp;&amp; request.method === &#39;GET&#39;) {\n      return this.handleMeta(request, env)\n    }\n\n    return new Response(&#39;Not Found&#39;, { status: 404 })\n  }\n\n  async handleLoad(request: Request, env: any): Promise&lt;Response&gt; {\n    try {\n      const query = await request.json()\n      const securityContext = await this.getSecurityContext({ request, env })\n      \n      const result = await this.semanticLayer.load(query, securityContext)\n      \n      return new Response(JSON.stringify({\n        query,\n        data: result.rawData(),\n        annotation: result.annotation()\n      }), {\n        headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }\n      })\n      \n    } catch (error) {\n      return new Response(JSON.stringify({\n        error: error.message\n      }), {\n        status: 400,\n        headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }\n      })\n    }\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// adapters/cloudflare/index.ts\nexport class CloudflareWorkerAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends BaseAdapter&lt;TSchema&gt; {\n\n  async handleRequest(request: Request, env: any): Promise&lt;Response&gt; {\n    const url = new URL(request.url)\n    \n    // Route requests\n    if (url.pathname.endsWith(&#39;/load&#39;) &amp;&amp; request.method === &#39;POST&#39;) {\n      return this.handleLoad(request, env)\n    }\n    \n    if (url.pathname.endsWith(&#39;/meta&#39;) &amp;&amp; request.method === &#39;GET&#39;) {\n      return this.handleMeta(request, env)\n    }\n\n    return new Response(&#39;Not Found&#39;, { status: 404 })\n  }\n\n  async handleLoad(request: Request, env: any): Promise&lt;Response&gt; {\n    try {\n      const query = await request.json()\n      const securityContext = await this.getSecurityContext({ request, env })\n      \n      const result = await this.semanticLayer.load(query, securityContext)\n      \n      return new Response(JSON.stringify({\n        query,\n        data: result.rawData(),\n        annotation: result.annotation()\n      }), {\n        headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }\n      })\n      \n    } catch (error) {\n      return new Response(JSON.stringify({\n        error: error.message\n      }), {\n        status: 400,\n        headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }\n      })\n    }\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-features\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Features</h2><h3 id=\"custom-error-handling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Error Handling</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export class CustomAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  protected handleError(error: Error, context: any): Response {\n    // Log error\n    console.error(&#39;Drizzle Cube Error:&#39;, {\n      message: error.message,\n      stack: error.stack,\n      timestamp: new Date().toISOString(),\n      context: this.sanitizeContext(context)\n    })\n\n    // Return user-friendly error\n    if (error.message.includes(&#39;Access denied&#39;)) {\n      return this.errorResponse(403, &#39;Insufficient permissions&#39;)\n    }\n    \n    if (error.message.includes(&#39;organisationId&#39;)) {\n      return this.errorResponse(400, &#39;Invalid organization context&#39;)\n    }\n\n    return this.errorResponse(500, &#39;Internal server error&#39;)\n  }\n\n  private errorResponse(status: number, message: string) {\n    return new Response(JSON.stringify({ error: message }), {\n      status,\n      headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }\n    })\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export class CustomAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  protected handleError(error: Error, context: any): Response {\n    // Log error\n    console.error(&#39;Drizzle Cube Error:&#39;, {\n      message: error.message,\n      stack: error.stack,\n      timestamp: new Date().toISOString(),\n      context: this.sanitizeContext(context)\n    })\n\n    // Return user-friendly error\n    if (error.message.includes(&#39;Access denied&#39;)) {\n      return this.errorResponse(403, &#39;Insufficient permissions&#39;)\n    }\n    \n    if (error.message.includes(&#39;organisationId&#39;)) {\n      return this.errorResponse(400, &#39;Invalid organization context&#39;)\n    }\n\n    return this.errorResponse(500, &#39;Internal server error&#39;)\n  }\n\n  private errorResponse(status: number, message: string) {\n    return new Response(JSON.stringify({ error: message }), {\n      status,\n      headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }\n    })\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"request-middleware\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Request Middleware</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export class EnhancedAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  private async applyMiddleware(request: any, handler: Function) {\n    // Rate limiting\n    await this.checkRateLimit(request)\n    \n    // Request validation\n    await this.validateRequest(request)\n    \n    // Audit logging\n    await this.logRequest(request)\n    \n    // Execute handler\n    return handler(request)\n  }\n\n  private async checkRateLimit(request: any) {\n    const clientId = await this.getClientId(request)\n    const isAllowed = await this.rateLimiter.check(clientId)\n    \n    if (!isAllowed) {\n      throw new Error(&#39;Rate limit exceeded&#39;)\n    }\n  }\n\n  private async logRequest(request: any) {\n    const securityContext = await this.getSecurityContext(request)\n    \n    await this.auditLogger.log({\n      type: &#39;CUBE_QUERY&#39;,\n      userId: securityContext.userId,\n      organisationId: securityContext.organisationId,\n      timestamp: new Date(),\n      query: request.body\n    })\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export class EnhancedAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  private async applyMiddleware(request: any, handler: Function) {\n    // Rate limiting\n    await this.checkRateLimit(request)\n    \n    // Request validation\n    await this.validateRequest(request)\n    \n    // Audit logging\n    await this.logRequest(request)\n    \n    // Execute handler\n    return handler(request)\n  }\n\n  private async checkRateLimit(request: any) {\n    const clientId = await this.getClientId(request)\n    const isAllowed = await this.rateLimiter.check(clientId)\n    \n    if (!isAllowed) {\n      throw new Error(&#39;Rate limit exceeded&#39;)\n    }\n  }\n\n  private async logRequest(request: any) {\n    const securityContext = await this.getSecurityContext(request)\n    \n    await this.auditLogger.log({\n      type: &#39;CUBE_QUERY&#39;,\n      userId: securityContext.userId,\n      organisationId: securityContext.organisationId,\n      timestamp: new Date(),\n      query: request.body\n    })\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"response-caching\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Response Caching</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export class CachedAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  private cache: Map&lt;string, { data: any; timestamp: number }&gt; = new Map()\n\n  async handleLoad(request: any): Promise&lt;any&gt; {\n    const cacheKey = this.getCacheKey(request.body, await this.getSecurityContext(request))\n    \n    // Check cache\n    const cached = this.cache.get(cacheKey)\n    if (cached &amp;&amp; Date.now() - cached.timestamp &lt; 300000) { // 5 minutes\n      return cached.data\n    }\n\n    // Execute query\n    const result = await super.handleLoad(request)\n    \n    // Cache result\n    this.cache.set(cacheKey, {\n      data: result,\n      timestamp: Date.now()\n    })\n\n    return result\n  }\n\n  private getCacheKey(query: any, context: any): string {\n    return `${context.organisationId}:${JSON.stringify(query)}`\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export class CachedAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  private cache: Map&lt;string, { data: any; timestamp: number }&gt; = new Map()\n\n  async handleLoad(request: any): Promise&lt;any&gt; {\n    const cacheKey = this.getCacheKey(request.body, await this.getSecurityContext(request))\n    \n    // Check cache\n    const cached = this.cache.get(cacheKey)\n    if (cached &amp;&amp; Date.now() - cached.timestamp &lt; 300000) { // 5 minutes\n      return cached.data\n    }\n\n    // Execute query\n    const result = await super.handleLoad(request)\n    \n    // Cache result\n    this.cache.set(cacheKey, {\n      data: result,\n      timestamp: Date.now()\n    })\n\n    return result\n  }\n\n  private getCacheKey(query: any, context: any): string {\n    return `${context.organisationId}:${JSON.stringify(query)}`\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"testing-adapters\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Adapters</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { describe, it, expect, beforeEach } from &#39;vitest&#39;\nimport { createMockRequest, createMockContext } from &#39;./test-helpers&#39;\n\ndescribe(&#39;CustomAdapter&#39;, () =&gt; {\n  let adapter: CustomAdapter\n  let mockSemanticLayer: jest.Mocked&lt;SemanticLayerCompiler&gt;\n\n  beforeEach(() =&gt; {\n    mockSemanticLayer = createMockSemanticLayer()\n    adapter = new CustomAdapter({\n      semanticLayer: mockSemanticLayer,\n      drizzle: mockDb,\n      getSecurityContext: async () =&gt; ({\n        organisationId: &#39;test-org&#39;,\n        userId: &#39;test-user&#39;\n      })\n    })\n  })\n\n  it(&#39;should handle load requests&#39;, async () =&gt; {\n    const query = { measures: [&#39;Employees.count&#39;] }\n    const request = createMockRequest(&#39;POST&#39;, &#39;/load&#39;, query)\n    \n    mockSemanticLayer.load.mockResolvedValue(createMockResultSet())\n    \n    const response = await adapter.handleLoad(request)\n    \n    expect(response.status).toBe(200)\n    expect(mockSemanticLayer.load).toHaveBeenCalledWith(\n      query,\n      { organisationId: &#39;test-org&#39;, userId: &#39;test-user&#39; }\n    )\n  })\n\n  it(&#39;should handle security context errors&#39;, async () =&gt; {\n    adapter = new CustomAdapter({\n      semanticLayer: mockSemanticLayer,\n      drizzle: mockDb,\n      getSecurityContext: async () =&gt; {\n        throw new Error(&#39;Invalid token&#39;)\n      }\n    })\n\n    const request = createMockRequest(&#39;POST&#39;, &#39;/load&#39;, {})\n    const response = await adapter.handleLoad(request)\n    \n    expect(response.status).toBe(400)\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { describe, it, expect, beforeEach } from &#39;vitest&#39;\nimport { createMockRequest, createMockContext } from &#39;./test-helpers&#39;\n\ndescribe(&#39;CustomAdapter&#39;, () =&gt; {\n  let adapter: CustomAdapter\n  let mockSemanticLayer: jest.Mocked&lt;SemanticLayerCompiler&gt;\n\n  beforeEach(() =&gt; {\n    mockSemanticLayer = createMockSemanticLayer()\n    adapter = new CustomAdapter({\n      semanticLayer: mockSemanticLayer,\n      drizzle: mockDb,\n      getSecurityContext: async () =&gt; ({\n        organisationId: &#39;test-org&#39;,\n        userId: &#39;test-user&#39;\n      })\n    })\n  })\n\n  it(&#39;should handle load requests&#39;, async () =&gt; {\n    const query = { measures: [&#39;Employees.count&#39;] }\n    const request = createMockRequest(&#39;POST&#39;, &#39;/load&#39;, query)\n    \n    mockSemanticLayer.load.mockResolvedValue(createMockResultSet())\n    \n    const response = await adapter.handleLoad(request)\n    \n    expect(response.status).toBe(200)\n    expect(mockSemanticLayer.load).toHaveBeenCalledWith(\n      query,\n      { organisationId: &#39;test-org&#39;, userId: &#39;test-user&#39; }\n    )\n  })\n\n  it(&#39;should handle security context errors&#39;, async () =&gt; {\n    adapter = new CustomAdapter({\n      semanticLayer: mockSemanticLayer,\n      drizzle: mockDb,\n      getSecurityContext: async () =&gt; {\n        throw new Error(&#39;Invalid token&#39;)\n      }\n    })\n\n    const request = createMockRequest(&#39;POST&#39;, &#39;/load&#39;, {})\n    const response = await adapter.handleLoad(request)\n    \n    expect(response.status).toBe(400)\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security First</strong>: Always validate and sanitize security context</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Error Handling</strong>: Provide comprehensive error handling and logging</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type Safety</strong>: Use TypeScript for all adapter components</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Performance</strong>: Implement caching and rate limiting</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Testing</strong>: Write comprehensive tests for all adapter functionality</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Documentation</strong>: Document adapter-specific configuration options</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Monitoring</strong>: Add metrics and health checks for production deployment</li></ol><h2 id=\"deployment-considerations\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Deployment Considerations</h2><h3 id=\"environment-configuration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Environment Configuration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Environment-based configuration\nexport interface AdapterConfig {\n  apiUrl: string\n  corsOrigin: string[]\n  jwtSecret: string\n  rateLimitRpm?: number\n  cacheTimeout?: number\n  logLevel?: &#39;debug&#39; | &#39;info&#39; | &#39;warn&#39; | &#39;error&#39;\n}\n\nexport function createConfigFromEnv(): AdapterConfig {\n  return {\n    apiUrl: process.env.CUBE_API_URL || &#39;/cubejs-api/v1&#39;,\n    corsOrigin: process.env.CORS_ORIGIN?.split(&#39;,&#39;) || [&#39;*&#39;],\n    jwtSecret: process.env.JWT_SECRET || &#39;default-secret&#39;,\n    rateLimitRpm: parseInt(process.env.RATE_LIMIT_RPM || &#39;100&#39;),\n    cacheTimeout: parseInt(process.env.CACHE_TIMEOUT || &#39;300&#39;),\n    logLevel: (process.env.LOG_LEVEL as any) || &#39;info&#39;\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Environment-based configuration\nexport interface AdapterConfig {\n  apiUrl: string\n  corsOrigin: string[]\n  jwtSecret: string\n  rateLimitRpm?: number\n  cacheTimeout?: number\n  logLevel?: &#39;debug&#39; | &#39;info&#39; | &#39;warn&#39; | &#39;error&#39;\n}\n\nexport function createConfigFromEnv(): AdapterConfig {\n  return {\n    apiUrl: process.env.CUBE_API_URL || &#39;/cubejs-api/v1&#39;,\n    corsOrigin: process.env.CORS_ORIGIN?.split(&#39;,&#39;) || [&#39;*&#39;],\n    jwtSecret: process.env.JWT_SECRET || &#39;default-secret&#39;,\n    rateLimitRpm: parseInt(process.env.RATE_LIMIT_RPM || &#39;100&#39;),\n    cacheTimeout: parseInt(process.env.CACHE_TIMEOUT || &#39;300&#39;),\n    logLevel: (process.env.LOG_LEVEL as any) || &#39;info&#39;\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"health-checks\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Health Checks</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export class ProductionAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  setupHealthCheck() {\n    this.router.get(&#39;/health&#39;, async (req, res) =&gt; {\n      try {\n        // Test database connection\n        await this.drizzle.execute(sql`SELECT 1`)\n        \n        // Test semantic layer\n        await this.semanticLayer.getMetadata({ organisationId: &#39;health-check&#39; })\n        \n        res.json({\n          status: &#39;healthy&#39;,\n          timestamp: new Date().toISOString(),\n          version: process.env.npm_package_version\n        })\n      } catch (error) {\n        res.status(503).json({\n          status: &#39;unhealthy&#39;,\n          error: error.message\n        })\n      }\n    })\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export class ProductionAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  setupHealthCheck() {\n    this.router.get(&#39;/health&#39;, async (req, res) =&gt; {\n      try {\n        // Test database connection\n        await this.drizzle.execute(sql`SELECT 1`)\n        \n        // Test semantic layer\n        await this.semanticLayer.getMetadata({ organisationId: &#39;health-check&#39; })\n        \n        res.json({\n          status: &#39;healthy&#39;,\n          timestamp: new Date().toISOString(),\n          version: process.env.npm_package_version\n        })\n      } catch (error) {\n        res.status(503).json({\n          status: &#39;unhealthy&#39;,\n          error: error.message\n        })\n      }\n    })\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Review the <a href=\"#\" data-help-link=\"adapters/hono\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Hono Adapter</a> implementation</li><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Security</a> context patterns</li><li class=\"leading-relaxed\">Explore deployment options for your chosen framework</li><li class=\"leading-relaxed\">Check out adapter examples in the repository</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Adapter generator CLI tool</li><li class=\"leading-relaxed\">Standard adapter middleware library</li><li class=\"leading-relaxed\">Adapter performance benchmarking tools</li><li class=\"leading-relaxed\">GraphQL adapter for Cube.js compatibility</li><li class=\"leading-relaxed\">WebSocket adapter for real-time queries</li><li class=\"leading-relaxed\">Serverless adapter optimizations</li></ul>",
    "path": "adapters/custom.md"
  },
  {
    "slug": "adapters/express",
    "title": "Express Adapter",
    "content": "<h1 id=\"express-adapter\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Express Adapter</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">The Express adapter provides Cube.js-compatible API endpoints for Express.js applications, offering a familiar and flexible integration path for Node.js web applications.</p><h2 id=\"installation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Installation</h2><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install drizzle-cube express cors</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install drizzle-cube express cors\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"setup-guide\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Setup Guide</h2><h3 id=\"1-define-your-schema\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">1. Define Your Schema</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// schema.ts\nimport { pgTable, integer, text, real, boolean, timestamp } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  email: text(&#39;email&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  departmentId: integer(&#39;department_id&#39;),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  salary: real(&#39;salary&#39;),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  budget: real(&#39;budget&#39;)\n})\n\nexport const schema = { employees, departments }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// schema.ts\nimport { pgTable, integer, text, real, boolean, timestamp } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  email: text(&#39;email&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  departmentId: integer(&#39;department_id&#39;),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  salary: real(&#39;salary&#39;),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  budget: real(&#39;budget&#39;)\n})\n\nexport const schema = { employees, departments }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"2-define-your-cubes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">2. Define Your Cubes</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// cubes.ts\nimport { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    isActive: {\n      name: &#39;isActive&#39;,\n      title: &#39;Active Status&#39;,\n      type: &#39;boolean&#39;,\n      sql: employees.active\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary\n    }\n  }\n})\n\nexport const departmentsCube = defineCube(&#39;Departments&#39;, {\n  title: &#39;Department Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: departments,\n    where: eq(departments.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Department Name&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Department Count&#39;,\n      type: &#39;count&#39;,\n      sql: departments.id\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// cubes.ts\nimport { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    isActive: {\n      name: &#39;isActive&#39;,\n      title: &#39;Active Status&#39;,\n      type: &#39;boolean&#39;,\n      sql: employees.active\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary\n    }\n  }\n})\n\nexport const departmentsCube = defineCube(&#39;Departments&#39;, {\n  title: &#39;Department Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: departments,\n    where: eq(departments.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Department Name&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Department Count&#39;,\n      type: &#39;count&#39;,\n      sql: departments.id\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"quick-start\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Quick Start</h2><h3 id=\"router-integration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Router Integration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import express from &#39;express&#39;\nimport { createCubeRouter } from &#39;drizzle-cube/adapters/express&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39; // Your Drizzle schema\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39; // Your cube definitions\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = express()\n\nconst cubeRouter = createCubeRouter({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (req, res) =&gt; {\n    // Called for EVERY API request - extract user permissions\n    const token = req.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await verifyJWT(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\napp.use(&#39;/&#39;, cubeRouter) // defaults to /cubejs-api/v1\napp.listen(3000)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import express from &#39;express&#39;\nimport { createCubeRouter } from &#39;drizzle-cube/adapters/express&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39; // Your Drizzle schema\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39; // Your cube definitions\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = express()\n\nconst cubeRouter = createCubeRouter({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (req, res) =&gt; {\n    // Called for EVERY API request - extract user permissions\n    const token = req.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await verifyJWT(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\napp.use(&#39;/&#39;, cubeRouter) // defaults to /cubejs-api/v1\napp.listen(3000)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"standalone-app\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Standalone App</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { createCubeApp } from &#39;drizzle-cube/adapters/express&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = createCubeApp({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (req, res) =&gt; {\n    const token = req.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await validateTokenAndGetContext(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\napp.listen(3000, () =&gt; {\n  console.log(&#39;Cube API server running on port 3000&#39;) // defaults to /cubejs-api/v1\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { createCubeApp } from &#39;drizzle-cube/adapters/express&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = createCubeApp({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (req, res) =&gt; {\n    const token = req.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await validateTokenAndGetContext(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\napp.listen(3000, () =&gt; {\n  console.log(&#39;Cube API server running on port 3000&#39;) // defaults to /cubejs-api/v1\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"mount-on-existing-app\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Mount on Existing App</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import express from &#39;express&#39;\nimport { mountCubeRoutes } from &#39;drizzle-cube/adapters/express&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = express()\n\n// Your existing routes\napp.get(&#39;/&#39;, (req, res) =&gt; {\n  res.json({ message: &#39;Hello World&#39; })\n})\n\n// Mount cube routes\nmountCubeRoutes(app, {\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (req, res) =&gt; {\n    const orgId = req.headers[&#39;x-org-id&#39;]\n    return { organisationId: orgId }\n  },\n  basePath: &#39;/analytics&#39; // Custom base path\n})\n\napp.listen(3000)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import express from &#39;express&#39;\nimport { mountCubeRoutes } from &#39;drizzle-cube/adapters/express&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = express()\n\n// Your existing routes\napp.get(&#39;/&#39;, (req, res) =&gt; {\n  res.json({ message: &#39;Hello World&#39; })\n})\n\n// Mount cube routes\nmountCubeRoutes(app, {\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (req, res) =&gt; {\n    const orgId = req.headers[&#39;x-org-id&#39;]\n    return { organisationId: orgId }\n  },\n  basePath: &#39;/analytics&#39; // Custom base path\n})\n\napp.listen(3000)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"configuration-options\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Configuration Options</h2><h3 id=\"expressadapteroptions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">ExpressAdapterOptions</h3><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Option</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Type</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Required</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Default</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Description</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`cubes`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`Cube[]`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Array of cube definitions to register</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`drizzle`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`DrizzleDatabase`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Fully connected Drizzle database instance</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`schema`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`TSchema`</td><td class=\"px-4 py-3 text-sm text-gray-600\">⚠️</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Database schema for type inference (recommended)</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`extractSecurityContext`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`Function`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Extract security context from HTTP requests (called for every request)</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`engineType`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`'postgres'|'mysql'|'sqlite'`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">auto-detected</td><td class=\"px-4 py-3 text-sm text-gray-600\">Database engine type</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`getSecurityContext`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`Function`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Function to extract security context from request</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`cors`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`CorsOptions`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">CORS configuration</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`basePath`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`string`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">`/cubejs-api/v1`</td><td class=\"px-4 py-3 text-sm text-gray-600\">API base path</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`jsonLimit`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`string`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">`'10mb'`</td><td class=\"px-4 py-3 text-sm text-gray-600\">JSON body parser limit</td></tr></tbody>\n    </table>\n  </div><h3 id=\"security-context-function\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Security Context Function</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">getSecurityContext</code> function receives the Express request and should return a <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">SecurityContext</code>:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const getSecurityContext = async (req: Request): Promise&lt;SecurityContext&gt; =&gt; {\n  // Extract from headers\n  const orgId = req.headers[&#39;x-organization-id&#39;]\n  \n  // Or from authenticated user\n  const user = req.user // From passport, express-jwt, etc.\n  \n  return {\n    organisationId: user.orgId,\n    userId: user.id,\n    roles: user.roles\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const getSecurityContext = async (req: Request): Promise&lt;SecurityContext&gt; =&gt; {\n  // Extract from headers\n  const orgId = req.headers[&#39;x-organization-id&#39;]\n  \n  // Or from authenticated user\n  const user = req.user // From passport, express-jwt, etc.\n  \n  return {\n    organisationId: user.orgId,\n    userId: user.id,\n    roles: user.roles\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-configuration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Configuration</h2><h3 id=\"with-cors-and-authentication\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">With CORS and Authentication</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import express from &#39;express&#39;\nimport jwt from &#39;express-jwt&#39;\nimport cors from &#39;cors&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/express&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; {\n    const user = req.user as any\n    return {\n      organisationId: user.orgId,\n      userId: user.sub,\n      roles: user.roles\n    }\n  },\n  cors: {\n    origin: process.env.ALLOWED_ORIGINS?.split(&#39;,&#39;) || [&#39;http://localhost:3000&#39;],\n    credentials: true,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;, &#39;x-organization-id&#39;]\n  },\n  jsonLimit: &#39;15mb&#39;\n})\n\n// Global JWT authentication\napp.use(jwt({\n  secret: process.env.JWT_SECRET,\n  algorithms: [&#39;HS256&#39;]\n}))\n\napp.listen(3000)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import express from &#39;express&#39;\nimport jwt from &#39;express-jwt&#39;\nimport cors from &#39;cors&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/express&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; {\n    const user = req.user as any\n    return {\n      organisationId: user.orgId,\n      userId: user.sub,\n      roles: user.roles\n    }\n  },\n  cors: {\n    origin: process.env.ALLOWED_ORIGINS?.split(&#39;,&#39;) || [&#39;http://localhost:3000&#39;],\n    credentials: true,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;, &#39;x-organization-id&#39;]\n  },\n  jsonLimit: &#39;15mb&#39;\n})\n\n// Global JWT authentication\napp.use(jwt({\n  secret: process.env.JWT_SECRET,\n  algorithms: [&#39;HS256&#39;]\n}))\n\napp.listen(3000)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"custom-middleware\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Middleware</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import express from &#39;express&#39;\nimport { createCubeRouter } from &#39;drizzle-cube/adapters/express&#39;\n\nconst app = express()\n\n// Global middleware\napp.use(express.json({ limit: &#39;20mb&#39; }))\napp.use(cors())\n\n// Custom authentication middleware\nconst authenticateUser = async (req: Request, res: Response, next: NextFunction) =&gt; {\n  try {\n    const token = req.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    req.user = await validateToken(token)\n    next()\n  } catch (error) {\n    res.status(401).json({ error: &#39;Unauthorized&#39; })\n  }\n}\n\napp.use(&#39;/api&#39;, authenticateUser)\n\nconst cubeRouter = createCubeRouter({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; ({\n    organisationId: req.user.organisationId,\n    userId: req.user.id\n  })\n})\n\napp.use(&#39;/api&#39;, cubeRouter)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import express from &#39;express&#39;\nimport { createCubeRouter } from &#39;drizzle-cube/adapters/express&#39;\n\nconst app = express()\n\n// Global middleware\napp.use(express.json({ limit: &#39;20mb&#39; }))\napp.use(cors())\n\n// Custom authentication middleware\nconst authenticateUser = async (req: Request, res: Response, next: NextFunction) =&gt; {\n  try {\n    const token = req.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    req.user = await validateToken(token)\n    next()\n  } catch (error) {\n    res.status(401).json({ error: &#39;Unauthorized&#39; })\n  }\n}\n\napp.use(&#39;/api&#39;, authenticateUser)\n\nconst cubeRouter = createCubeRouter({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; ({\n    organisationId: req.user.organisationId,\n    userId: req.user.id\n  })\n})\n\napp.use(&#39;/api&#39;, cubeRouter)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"performance-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Performance Optimization</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import express from &#39;express&#39;\nimport compression from &#39;compression&#39;\nimport helmet from &#39;helmet&#39;\nimport rateLimit from &#39;express-rate-limit&#39;\n\nconst app = express()\n\n// Security and performance middleware\napp.use(helmet())\napp.use(compression())\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100 // limit each IP to 100 requests per windowMs\n})\napp.use(&#39;/api&#39;, limiter)\n\n// Trust proxy (important for rate limiting behind reverse proxy)\napp.set(&#39;trust proxy&#39;, 1)\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext,\n  jsonLimit: &#39;15mb&#39;\n})\n\napp.use(&#39;/api&#39;, cubeApp)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import express from &#39;express&#39;\nimport compression from &#39;compression&#39;\nimport helmet from &#39;helmet&#39;\nimport rateLimit from &#39;express-rate-limit&#39;\n\nconst app = express()\n\n// Security and performance middleware\napp.use(helmet())\napp.use(compression())\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100 // limit each IP to 100 requests per windowMs\n})\napp.use(&#39;/api&#39;, limiter)\n\n// Trust proxy (important for rate limiting behind reverse proxy)\napp.set(&#39;trust proxy&#39;, 1)\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext,\n  jsonLimit: &#39;15mb&#39;\n})\n\napp.use(&#39;/api&#39;, cubeApp)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"api-endpoints\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">API Endpoints</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The Express adapter provides the same Cube.js-compatible endpoints as other adapters:</p><h3 id=\"post-cubejs-apiv1load\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">POST /cubejs-api/v1/load</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Execute analytical queries.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Request Body:</strong></p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;measures&quot;: [&quot;Orders.count&quot;, &quot;Orders.totalAmount&quot;],\n  &quot;dimensions&quot;: [&quot;Orders.status&quot;, &quot;Users.city&quot;],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Orders.status&quot;,\n    &quot;operator&quot;: &quot;equals&quot;,\n    &quot;values&quot;: [&quot;completed&quot;]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;measures&quot;: [&quot;Orders.count&quot;, &quot;Orders.totalAmount&quot;],\n  &quot;dimensions&quot;: [&quot;Orders.status&quot;, &quot;Users.city&quot;],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Orders.status&quot;,\n    &quot;operator&quot;: &quot;equals&quot;,\n    &quot;values&quot;: [&quot;completed&quot;]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"get-cubejs-apiv1loadqueryencoded_query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/load?query={encoded_query}</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Execute queries via GET with query string parameter.</p><h3 id=\"get-cubejs-apiv1meta\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/meta</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Get cube metadata and schema information.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Response:</strong></p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;cubes&quot;: [{\n    &quot;name&quot;: &quot;Orders&quot;,\n    &quot;measures&quot;: [...],\n    &quot;dimensions&quot;: [...],\n    &quot;segments&quot;: [...]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;cubes&quot;: [{\n    &quot;name&quot;: &quot;Orders&quot;,\n    &quot;measures&quot;: [...],\n    &quot;dimensions&quot;: [...],\n    &quot;segments&quot;: [...]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"post-cubejs-apiv1sql\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">POST /cubejs-api/v1/sql</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Generate SQL without execution (dry-run).</p><h3 id=\"get-cubejs-apiv1sqlqueryencoded_query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/sql?query={encoded_query}</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Generate SQL via GET request.</p><h3 id=\"post-cubejs-apiv1dry-run\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">POST /cubejs-api/v1/dry-run</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Validate queries and analyze complexity.</p><h3 id=\"get-cubejs-apiv1dry-runqueryencoded_query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/dry-run?query={encoded_query}</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Validate queries via GET request.</p><h2 id=\"error-handling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Handling</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The adapter includes comprehensive error handling with Express v5 async error support:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Automatic async error handling (Express v5)\napp.use((error: Error, req: Request, res: Response, next: NextFunction) =&gt; {\n  console.error(&#39;Express cube adapter error:&#39;, error)\n  \n  if (res.headersSent) {\n    return next(error)\n  }\n  \n  const status = (error as any).status || (error as any).statusCode || 500\n  res.status(status).json({\n    error: error.message || &#39;Internal server error&#39;,\n    status\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Automatic async error handling (Express v5)\napp.use((error: Error, req: Request, res: Response, next: NextFunction) =&gt; {\n  console.error(&#39;Express cube adapter error:&#39;, error)\n  \n  if (res.headersSent) {\n    return next(error)\n  }\n  \n  const status = (error as any).status || (error as any).statusCode || 500\n  res.status(status).json({\n    error: error.message || &#39;Internal server error&#39;,\n    status\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">Error responses follow this format:</p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;error&quot;: &quot;Query validation failed: measure Orders.invalidMeasure not found&quot;,\n  &quot;status&quot;: 400\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;error&quot;: &quot;Query validation failed: measure Orders.invalidMeasure not found&quot;,\n  &quot;status&quot;: 400\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"typescript-support\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">TypeScript Support</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The adapter provides full TypeScript support:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import type { ExpressAdapterOptions } from &#39;drizzle-cube/adapters/express&#39;\nimport type { Request, Response } from &#39;express&#39;\n\nconst options: ExpressAdapterOptions&lt;typeof schema&gt; = {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req: Request) =&gt; ({\n    organisationId: req.user?.organisationId\n  })\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import type { ExpressAdapterOptions } from &#39;drizzle-cube/adapters/express&#39;\nimport type { Request, Response } from &#39;express&#39;\n\nconst options: ExpressAdapterOptions&lt;typeof schema&gt; = {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req: Request) =&gt; ({\n    organisationId: req.user?.organisationId\n  })\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"middleware-integration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Middleware Integration</h2><h3 id=\"passportjs\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Passport.js</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import passport from &#39;passport&#39;\nimport { Strategy as JwtStrategy, ExtractJwt } from &#39;passport-jwt&#39;\n\npassport.use(new JwtStrategy({\n  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n  secretOrKey: process.env.JWT_SECRET\n}, async (payload, done) =&gt; {\n  try {\n    const user = await findUserById(payload.sub)\n    return done(null, user)\n  } catch (error) {\n    return done(error, false)\n  }\n}))\n\napp.use(passport.initialize())\napp.use(&#39;/api&#39;, passport.authenticate(&#39;jwt&#39;, { session: false }))\n\nconst cubeRouter = createCubeRouter({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; ({\n    organisationId: req.user.organisationId,\n    userId: req.user.id\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import passport from &#39;passport&#39;\nimport { Strategy as JwtStrategy, ExtractJwt } from &#39;passport-jwt&#39;\n\npassport.use(new JwtStrategy({\n  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n  secretOrKey: process.env.JWT_SECRET\n}, async (payload, done) =&gt; {\n  try {\n    const user = await findUserById(payload.sub)\n    return done(null, user)\n  } catch (error) {\n    return done(error, false)\n  }\n}))\n\napp.use(passport.initialize())\napp.use(&#39;/api&#39;, passport.authenticate(&#39;jwt&#39;, { session: false }))\n\nconst cubeRouter = createCubeRouter({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; ({\n    organisationId: req.user.organisationId,\n    userId: req.user.id\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"express-session\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Express Session</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import session from &#39;express-session&#39;\nimport connectRedis from &#39;connect-redis&#39;\nimport redis from &#39;redis&#39;\n\nconst RedisStore = connectRedis(session)\nconst redisClient = redis.createClient()\n\napp.use(session({\n  store: new RedisStore({ client: redisClient }),\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: false,\n  cookie: { secure: process.env.NODE_ENV === &#39;production&#39; }\n}))\n\nconst cubeRouter = createCubeRouter({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; ({\n    organisationId: req.session.user?.organisationId,\n    userId: req.session.user?.id\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import session from &#39;express-session&#39;\nimport connectRedis from &#39;connect-redis&#39;\nimport redis from &#39;redis&#39;\n\nconst RedisStore = connectRedis(session)\nconst redisClient = redis.createClient()\n\napp.use(session({\n  store: new RedisStore({ client: redisClient }),\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: false,\n  cookie: { secure: process.env.NODE_ENV === &#39;production&#39; }\n}))\n\nconst cubeRouter = createCubeRouter({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; ({\n    organisationId: req.session.user?.organisationId,\n    userId: req.session.user?.id\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Familiar API</strong>: Leverages Express.js ecosystem</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Middleware support</strong>: Full Express middleware compatibility</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Flexible routing</strong>: Router, app mounting, and standalone options</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">JSON parsing</strong>: Configurable body limits</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Error handling</strong>: Express v5 async error support</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security</strong>: Helmet, rate limiting, and CORS support</li></ul><h2 id=\"testing\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Use Express testing utilities like Supertest:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import request from &#39;supertest&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/express&#39;\n\ndescribe(&#39;Cube API&#39;, () =&gt; {\n  const app = createCubeApp({\n    semanticLayer,\n    drizzle: db,\n    schema,\n    getSecurityContext: async () =&gt; ({ organisationId: &#39;test-org&#39; })\n  })\n\n  it(&#39;should return metadata&#39;, async () =&gt; {\n    const response = await request(app)\n      .get(&#39;/cubejs-api/v1/meta&#39;)\n      .expect(200)\n    \n    expect(response.body.cubes).toBeDefined()\n  })\n\n  it(&#39;should execute queries&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Orders.count&#39;],\n      dimensions: [&#39;Orders.status&#39;]\n    }\n\n    const response = await request(app)\n      .post(&#39;/cubejs-api/v1/load&#39;)\n      .send(query)\n      .expect(200)\n    \n    expect(response.body.data).toBeDefined()\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import request from &#39;supertest&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/express&#39;\n\ndescribe(&#39;Cube API&#39;, () =&gt; {\n  const app = createCubeApp({\n    semanticLayer,\n    drizzle: db,\n    schema,\n    getSecurityContext: async () =&gt; ({ organisationId: &#39;test-org&#39; })\n  })\n\n  it(&#39;should return metadata&#39;, async () =&gt; {\n    const response = await request(app)\n      .get(&#39;/cubejs-api/v1/meta&#39;)\n      .expect(200)\n    \n    expect(response.body.cubes).toBeDefined()\n  })\n\n  it(&#39;should execute queries&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Orders.count&#39;],\n      dimensions: [&#39;Orders.status&#39;]\n    }\n\n    const response = await request(app)\n      .post(&#39;/cubejs-api/v1/load&#39;)\n      .send(query)\n      .expect(200)\n    \n    expect(response.body.data).toBeDefined()\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"deployment\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Deployment</h2><h3 id=\"docker\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Docker</h3><div class=\"relative group\">\n    <pre class=\"language-docker rounded-lg overflow-x-auto mb-4\"><code class=\"language-docker\">FROM node:18-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\nCOPY . .\nEXPOSE 3000\nCMD [&quot;node&quot;, &quot;server.js&quot;]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"FROM node:18-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\nCOPY . .\nEXPOSE 3000\nCMD [&quot;node&quot;, &quot;server.js&quot;]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"pm2\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">PM2</h3><div class=\"relative group\">\n    <pre class=\"language-javascript rounded-lg overflow-x-auto mb-4\"><code class=\"language-javascript\">// ecosystem.config.js\nmodule.exports = {\n  apps: [{\n    name: &#39;cube-express-api&#39;,\n    script: &#39;./server.js&#39;,\n    instances: &#39;max&#39;,\n    exec_mode: &#39;cluster&#39;,\n    env: {\n      NODE_ENV: &#39;production&#39;,\n      PORT: 3000\n    },\n    env_production: {\n      NODE_ENV: &#39;production&#39;,\n      PORT: 80\n    }\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// ecosystem.config.js\nmodule.exports = {\n  apps: [{\n    name: &#39;cube-express-api&#39;,\n    script: &#39;./server.js&#39;,\n    instances: &#39;max&#39;,\n    exec_mode: &#39;cluster&#39;,\n    env: {\n      NODE_ENV: &#39;production&#39;,\n      PORT: 3000\n    },\n    env_production: {\n      NODE_ENV: &#39;production&#39;,\n      PORT: 80\n    }\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"nginx-reverse-proxy\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Nginx Reverse Proxy</h3><div class=\"relative group\">\n    <pre class=\"language-nginx rounded-lg overflow-x-auto mb-4\"><code class=\"language-nginx\">server {\n    listen 80;\n    server_name your-domain.com;\n    \n    location /api/ {\n        proxy_pass http://localhost:3000/;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &#39;upgrade&#39;;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"server {\n    listen 80;\n    server_name your-domain.com;\n    \n    location /api/ {\n        proxy_pass http://localhost:3000/;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &#39;upgrade&#39;;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"comparison-with-other-adapters\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Comparison with Other Adapters</h2><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Feature</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Express</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Fastify</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Hono</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Next.js</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Performance</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">TypeScript</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Middleware Ecosystem</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Learning Curve</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Bundle Size</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Community</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td></tr></tbody>\n    </table>\n  </div><h2 id=\"migration-from-other-adapters\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Migration from Other Adapters</h2><h3 id=\"from-fastify\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">From Fastify</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Key differences when migrating from Fastify:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Middleware</strong>: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">app.use()</code> instead of <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">server.register()</code></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Request/Response</strong>: Standard Express req/res objects</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Error handling</strong>: Traditional Express error middleware</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Body parsing</strong>: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">express.json()</code> explicitly</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Validation</strong>: Manual or third-party validation libraries</li></ol><h3 id=\"from-hono\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">From Hono</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Key differences when migrating from Hono:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Context</strong>: Express req/res instead of Hono context</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Middleware</strong>: Express middleware system</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Routing</strong>: Express Router patterns</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Environment</strong>: Node.js only (no edge runtime)</li></ol><h2 id=\"troubleshooting\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Troubleshooting</h2><h3 id=\"common-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Common Issues</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Body parsing errors:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Make sure express.json() is configured\napp.use(express.json({ limit: &#39;10mb&#39; }))</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Make sure express.json() is configured\napp.use(express.json({ limit: &#39;10mb&#39; }))\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">CORS issues:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Install and configure CORS middleware\nnpm install cors\napp.use(cors({\n  origin: [&#39;http://localhost:3000&#39;],\n  credentials: true\n}))</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Install and configure CORS middleware\nnpm install cors\napp.use(cors({\n  origin: [&#39;http://localhost:3000&#39;],\n  credentials: true\n}))\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Async error handling:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// For Express v4, use express-async-errors\nnpm install express-async-errors\nrequire(&#39;express-async-errors&#39;)\n\n// Or wrap async handlers manually\nconst asyncHandler = (fn) =&gt; (req, res, next) =&gt; {\n  Promise.resolve(fn(req, res, next)).catch(next)\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// For Express v4, use express-async-errors\nnpm install express-async-errors\nrequire(&#39;express-async-errors&#39;)\n\n// Or wrap async handlers manually\nconst asyncHandler = (fn) =&gt; (req, res, next) =&gt; {\n  Promise.resolve(fn(req, res, next)).catch(next)\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Route conflicts:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Mount cube routes after other routes\napp.use(&#39;/other-routes&#39;, otherRouter)\napp.use(&#39;/api&#39;, cubeRouter) // Mount last</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Mount cube routes after other routes\napp.use(&#39;/other-routes&#39;, otherRouter)\napp.use(&#39;/api&#39;, cubeRouter) // Mount last\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security context issues:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Ensure middleware runs before cube routes\napp.use(authenticationMiddleware)\napp.use(&#39;/api&#39;, cubeRouter)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Ensure middleware runs before cube routes\napp.use(authenticationMiddleware)\napp.use(&#39;/api&#39;, cubeRouter)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"support\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Support</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Framework</strong>: Express.js 4.x, 5.x</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Node.js</strong>: 18+</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">TypeScript</strong>: 4.5+</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dependencies</strong>: <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">cors</code> (optional), <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">helmet</code> (recommended)</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">For Express-specific issues, please check:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Middleware execution order</li><li class=\"leading-relaxed\">Express version compatibility</li><li class=\"leading-relaxed\">Error handling configuration</li><li class=\"leading-relaxed\">Body parsing setup</li></ol>",
    "path": "external:../src/adapters/express/README.md"
  },
  {
    "slug": "adapters/fastify",
    "title": "Fastify Adapter",
    "content": "<h1 id=\"fastify-adapter\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Fastify Adapter</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">The Fastify adapter provides Cube.js-compatible API endpoints as a Fastify plugin, leveraging the high performance and TypeScript-first approach of Fastify v5.</p><h2 id=\"installation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Installation</h2><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install drizzle-cube fastify @fastify/cors</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install drizzle-cube fastify @fastify/cors\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"setup-guide\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Setup Guide</h2><h3 id=\"1-define-your-schema\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">1. Define Your Schema</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// schema.ts\nimport { pgTable, integer, text, real, boolean, timestamp } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  email: text(&#39;email&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  departmentId: integer(&#39;department_id&#39;),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  salary: real(&#39;salary&#39;),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  budget: real(&#39;budget&#39;)\n})\n\nexport const schema = { employees, departments }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// schema.ts\nimport { pgTable, integer, text, real, boolean, timestamp } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  email: text(&#39;email&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  departmentId: integer(&#39;department_id&#39;),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  salary: real(&#39;salary&#39;),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  budget: real(&#39;budget&#39;)\n})\n\nexport const schema = { employees, departments }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"2-define-your-cubes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">2. Define Your Cubes</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// cubes.ts\nimport { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    isActive: {\n      name: &#39;isActive&#39;,\n      title: &#39;Active Status&#39;,\n      type: &#39;boolean&#39;,\n      sql: employees.active\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary\n    }\n  }\n})\n\nexport const departmentsCube = defineCube(&#39;Departments&#39;, {\n  title: &#39;Department Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: departments,\n    where: eq(departments.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Department Name&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Department Count&#39;,\n      type: &#39;count&#39;,\n      sql: departments.id\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// cubes.ts\nimport { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    isActive: {\n      name: &#39;isActive&#39;,\n      title: &#39;Active Status&#39;,\n      type: &#39;boolean&#39;,\n      sql: employees.active\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary\n    }\n  }\n})\n\nexport const departmentsCube = defineCube(&#39;Departments&#39;, {\n  title: &#39;Department Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: departments,\n    where: eq(departments.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Department Name&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Department Count&#39;,\n      type: &#39;count&#39;,\n      sql: departments.id\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"quick-start\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Quick Start</h2><h3 id=\"plugin-registration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Plugin Registration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import fastify from &#39;fastify&#39;\nimport { cubePlugin } from &#39;drizzle-cube/adapters/fastify&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39; // Your Drizzle schema\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39; // Your cube definitions\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst server = fastify({\n  logger: true\n})\n\nawait server.register(cubePlugin, {\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request) =&gt; {\n    // Called for EVERY API request - extract user permissions\n    const token = request.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await verifyJWT(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\nawait server.listen({ port: 3000 })</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import fastify from &#39;fastify&#39;\nimport { cubePlugin } from &#39;drizzle-cube/adapters/fastify&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39; // Your Drizzle schema\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39; // Your cube definitions\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst server = fastify({\n  logger: true\n})\n\nawait server.register(cubePlugin, {\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request) =&gt; {\n    // Called for EVERY API request - extract user permissions\n    const token = request.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await verifyJWT(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\nawait server.listen({ port: 3000 })\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"standalone-app\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Standalone App</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { createCubeApp } from &#39;drizzle-cube/adapters/fastify&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = createCubeApp({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request) =&gt; {\n    const token = request.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await validateTokenAndGetContext(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\nawait app.listen({ port: 3000 })</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { createCubeApp } from &#39;drizzle-cube/adapters/fastify&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = createCubeApp({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request) =&gt; {\n    const token = request.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await validateTokenAndGetContext(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\nawait app.listen({ port: 3000 })\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"manual-registration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Manual Registration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import fastify from &#39;fastify&#39;\nimport { registerCubeRoutes } from &#39;drizzle-cube/adapters/fastify&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst server = fastify()\n\n// Your existing routes\nserver.get(&#39;/&#39;, async (request, reply) =&gt; {\n  return { hello: &#39;world&#39; }\n})\n\n// Register cube routes\nawait registerCubeRoutes(server, {\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request) =&gt; {\n    const orgId = request.headers[&#39;x-org-id&#39;]\n    return { organisationId: orgId }\n  }\n})\n\nawait server.listen({ port: 3000 })</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import fastify from &#39;fastify&#39;\nimport { registerCubeRoutes } from &#39;drizzle-cube/adapters/fastify&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst server = fastify()\n\n// Your existing routes\nserver.get(&#39;/&#39;, async (request, reply) =&gt; {\n  return { hello: &#39;world&#39; }\n})\n\n// Register cube routes\nawait registerCubeRoutes(server, {\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request) =&gt; {\n    const orgId = request.headers[&#39;x-org-id&#39;]\n    return { organisationId: orgId }\n  }\n})\n\nawait server.listen({ port: 3000 })\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"configuration-options\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Configuration Options</h2><h3 id=\"fastifyadapteroptions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">FastifyAdapterOptions</h3><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Option</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Type</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Required</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Default</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Description</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`cubes`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`Cube[]`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Array of cube definitions to register</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`drizzle`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`DrizzleDatabase`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Fully connected Drizzle database instance</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`schema`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`TSchema`</td><td class=\"px-4 py-3 text-sm text-gray-600\">⚠️</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Database schema for type inference (recommended)</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`extractSecurityContext`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`Function`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Extract security context from HTTP requests (called for every request)</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`engineType`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`'postgres'|'mysql'|'sqlite'`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">auto-detected</td><td class=\"px-4 py-3 text-sm text-gray-600\">Database engine type</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`cors`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`FastifyCorsOptions`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">CORS configuration</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`basePath`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`string`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">`/cubejs-api/v1`</td><td class=\"px-4 py-3 text-sm text-gray-600\">API base path</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`bodyLimit`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`number`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">`10485760`</td><td class=\"px-4 py-3 text-sm text-gray-600\">JSON body parser limit (10MB)</td></tr></tbody>\n    </table>\n  </div><h3 id=\"security-context-function\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Security Context Function</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">getSecurityContext</code> function receives the Fastify request and should return a <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">SecurityContext</code>:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const getSecurityContext = async (request: FastifyRequest): Promise&lt;SecurityContext&gt; =&gt; {\n  // Extract from headers\n  const orgId = request.headers[&#39;x-organization-id&#39;]\n  \n  // Or from authenticated user\n  const user = await request.jwtVerify()\n  \n  return {\n    organisationId: user.orgId,\n    userId: user.sub,\n    roles: user.roles\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const getSecurityContext = async (request: FastifyRequest): Promise&lt;SecurityContext&gt; =&gt; {\n  // Extract from headers\n  const orgId = request.headers[&#39;x-organization-id&#39;]\n  \n  // Or from authenticated user\n  const user = await request.jwtVerify()\n  \n  return {\n    organisationId: user.orgId,\n    userId: user.sub,\n    roles: user.roles\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-configuration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Configuration</h2><h3 id=\"with-cors-and-authentication\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">With CORS and Authentication</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import fastify from &#39;fastify&#39;\nimport jwt from &#39;@fastify/jwt&#39;\nimport { cubePlugin } from &#39;drizzle-cube/adapters/fastify&#39;\n\nconst server = fastify({ logger: true })\n\n// Register JWT plugin\nawait server.register(jwt, {\n  secret: process.env.JWT_SECRET\n})\n\n// Authentication hook\nserver.addHook(&#39;onRequest&#39;, async (request, reply) =&gt; {\n  try {\n    await request.jwtVerify()\n  } catch (err) {\n    reply.send(err)\n  }\n})\n\nawait server.register(cubePlugin, {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; {\n    const user = request.user as any\n    return {\n      organisationId: user.orgId,\n      userId: user.sub,\n      roles: user.roles\n    }\n  },\n  cors: {\n    origin: (origin, callback) =&gt; {\n      const allowedOrigins = process.env.ALLOWED_ORIGINS?.split(&#39;,&#39;) || []\n      callback(null, allowedOrigins.includes(origin))\n    },\n    credentials: true\n  },\n  bodyLimit: 15 * 1024 * 1024 // 15MB\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import fastify from &#39;fastify&#39;\nimport jwt from &#39;@fastify/jwt&#39;\nimport { cubePlugin } from &#39;drizzle-cube/adapters/fastify&#39;\n\nconst server = fastify({ logger: true })\n\n// Register JWT plugin\nawait server.register(jwt, {\n  secret: process.env.JWT_SECRET\n})\n\n// Authentication hook\nserver.addHook(&#39;onRequest&#39;, async (request, reply) =&gt; {\n  try {\n    await request.jwtVerify()\n  } catch (err) {\n    reply.send(err)\n  }\n})\n\nawait server.register(cubePlugin, {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; {\n    const user = request.user as any\n    return {\n      organisationId: user.orgId,\n      userId: user.sub,\n      roles: user.roles\n    }\n  },\n  cors: {\n    origin: (origin, callback) =&gt; {\n      const allowedOrigins = process.env.ALLOWED_ORIGINS?.split(&#39;,&#39;) || []\n      callback(null, allowedOrigins.includes(origin))\n    },\n    credentials: true\n  },\n  bodyLimit: 15 * 1024 * 1024 // 15MB\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"custom-base-path\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Base Path</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">await server.register(cubePlugin, {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext,\n  basePath: &#39;/api/analytics&#39; // Custom API path\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"await server.register(cubePlugin, {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext,\n  basePath: &#39;/api/analytics&#39; // Custom API path\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"performance-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Performance Optimization</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const server = fastify({\n  logger: {\n    level: &#39;info&#39;,\n    prettyPrint: process.env.NODE_ENV === &#39;development&#39;\n  },\n  bodyLimit: 20 * 1024 * 1024, // 20MB\n  trustProxy: true,\n  keepAliveTimeout: 5000,\n  connectionTimeout: 10000\n})\n\nawait server.register(cubePlugin, {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext,\n  bodyLimit: 15 * 1024 * 1024\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const server = fastify({\n  logger: {\n    level: &#39;info&#39;,\n    prettyPrint: process.env.NODE_ENV === &#39;development&#39;\n  },\n  bodyLimit: 20 * 1024 * 1024, // 20MB\n  trustProxy: true,\n  keepAliveTimeout: 5000,\n  connectionTimeout: 10000\n})\n\nawait server.register(cubePlugin, {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext,\n  bodyLimit: 15 * 1024 * 1024\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"api-endpoints\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">API Endpoints</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The Fastify adapter provides the same Cube.js-compatible endpoints as other adapters:</p><h3 id=\"post-cubejs-apiv1load\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">POST /cubejs-api/v1/load</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Execute analytical queries.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Request Body:</strong></p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;measures&quot;: [&quot;Orders.count&quot;, &quot;Orders.totalAmount&quot;],\n  &quot;dimensions&quot;: [&quot;Orders.status&quot;, &quot;Users.city&quot;],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Orders.status&quot;,\n    &quot;operator&quot;: &quot;equals&quot;,\n    &quot;values&quot;: [&quot;completed&quot;]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;measures&quot;: [&quot;Orders.count&quot;, &quot;Orders.totalAmount&quot;],\n  &quot;dimensions&quot;: [&quot;Orders.status&quot;, &quot;Users.city&quot;],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Orders.status&quot;,\n    &quot;operator&quot;: &quot;equals&quot;,\n    &quot;values&quot;: [&quot;completed&quot;]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"get-cubejs-apiv1loadqueryencoded_query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/load?query={encoded_query}</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Execute queries via GET with query string parameter.</p><h3 id=\"get-cubejs-apiv1meta\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/meta</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Get cube metadata and schema information.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Response:</strong></p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;cubes&quot;: [{\n    &quot;name&quot;: &quot;Orders&quot;,\n    &quot;measures&quot;: [...],\n    &quot;dimensions&quot;: [...],\n    &quot;segments&quot;: [...]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;cubes&quot;: [{\n    &quot;name&quot;: &quot;Orders&quot;,\n    &quot;measures&quot;: [...],\n    &quot;dimensions&quot;: [...],\n    &quot;segments&quot;: [...]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"post-cubejs-apiv1sql\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">POST /cubejs-api/v1/sql</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Generate SQL without execution (dry-run).</p><h3 id=\"get-cubejs-apiv1sqlqueryencoded_query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/sql?query={encoded_query}</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Generate SQL via GET request.</p><h3 id=\"post-cubejs-apiv1dry-run\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">POST /cubejs-api/v1/dry-run</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Validate queries and analyze complexity.</p><h3 id=\"get-cubejs-apiv1dry-runqueryencoded_query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/dry-run?query={encoded_query}</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Validate queries via GET request.</p><h2 id=\"schema-validation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Schema Validation</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Fastify&#39;s built-in schema validation is used for request validation:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Automatic validation for all endpoints\n{\n  body: {\n    type: &#39;object&#39;,\n    additionalProperties: true\n  }\n}\n\n{\n  querystring: {\n    type: &#39;object&#39;,\n    properties: {\n      query: { type: &#39;string&#39; }\n    },\n    required: [&#39;query&#39;]\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Automatic validation for all endpoints\n{\n  body: {\n    type: &#39;object&#39;,\n    additionalProperties: true\n  }\n}\n\n{\n  querystring: {\n    type: &#39;object&#39;,\n    properties: {\n      query: { type: &#39;string&#39; }\n    },\n    required: [&#39;query&#39;]\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"error-handling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Handling</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The adapter includes comprehensive error handling:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Global error handler\nfastify.setErrorHandler(async (error, request, reply) =&gt; {\n  request.log.error(error, &#39;Fastify cube adapter error&#39;)\n  \n  if (reply.statusCode &lt; 400) {\n    reply.status(500)\n  }\n  \n  return formatErrorResponse(error, reply.statusCode)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Global error handler\nfastify.setErrorHandler(async (error, request, reply) =&gt; {\n  request.log.error(error, &#39;Fastify cube adapter error&#39;)\n  \n  if (reply.statusCode &lt; 400) {\n    reply.status(500)\n  }\n  \n  return formatErrorResponse(error, reply.statusCode)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">Error responses follow this format:</p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;error&quot;: &quot;Query validation failed: measure Orders.invalidMeasure not found&quot;,\n  &quot;status&quot;: 400\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;error&quot;: &quot;Query validation failed: measure Orders.invalidMeasure not found&quot;,\n  &quot;status&quot;: 400\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"typescript-support\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">TypeScript Support</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The adapter provides full TypeScript support:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import type { FastifyAdapterOptions } from &#39;drizzle-cube/adapters/fastify&#39;\n\nconst options: FastifyAdapterOptions&lt;typeof schema&gt; = {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; ({\n    organisationId: request.user?.organisationId\n  })\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import type { FastifyAdapterOptions } from &#39;drizzle-cube/adapters/fastify&#39;\n\nconst options: FastifyAdapterOptions&lt;typeof schema&gt; = {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; ({\n    organisationId: request.user?.organisationId\n  })\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Fast startup</strong>: Leverages Fastify&#39;s optimized routing</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Low memory</strong>: Efficient request handling</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">High throughput</strong>: Built for high-load scenarios</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">JSON parsing</strong>: Optimized with custom body limits</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Schema validation</strong>: Built-in request validation</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Logging</strong>: Structured logging with Pino</li></ul><h2 id=\"testing\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Use Fastify&#39;s built-in testing utilities:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { test } from &#39;tap&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/fastify&#39;\n\ntest(&#39;cube API&#39;, async (t) =&gt; {\n  const app = createCubeApp({ ... })\n  \n  const response = await app.inject({\n    method: &#39;GET&#39;,\n    url: &#39;/cubejs-api/v1/meta&#39;\n  })\n  \n  t.equal(response.statusCode, 200)\n  const data = JSON.parse(response.payload)\n  t.ok(data.cubes)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { test } from &#39;tap&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/fastify&#39;\n\ntest(&#39;cube API&#39;, async (t) =&gt; {\n  const app = createCubeApp({ ... })\n  \n  const response = await app.inject({\n    method: &#39;GET&#39;,\n    url: &#39;/cubejs-api/v1/meta&#39;\n  })\n  \n  t.equal(response.statusCode, 200)\n  const data = JSON.parse(response.payload)\n  t.ok(data.cubes)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"deployment\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Deployment</h2><h3 id=\"docker\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Docker</h3><div class=\"relative group\">\n    <pre class=\"language-docker rounded-lg overflow-x-auto mb-4\"><code class=\"language-docker\">FROM node:18-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\nCOPY . .\nEXPOSE 3000\nCMD [&quot;node&quot;, &quot;server.js&quot;]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"FROM node:18-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\nCOPY . .\nEXPOSE 3000\nCMD [&quot;node&quot;, &quot;server.js&quot;]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"pm2\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">PM2</h3><div class=\"relative group\">\n    <pre class=\"language-javascript rounded-lg overflow-x-auto mb-4\"><code class=\"language-javascript\">// ecosystem.config.js\nmodule.exports = {\n  apps: [{\n    name: &#39;cube-api&#39;,\n    script: &#39;./server.js&#39;,\n    instances: &#39;max&#39;,\n    exec_mode: &#39;cluster&#39;,\n    env: {\n      NODE_ENV: &#39;production&#39;,\n      PORT: 3000\n    }\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// ecosystem.config.js\nmodule.exports = {\n  apps: [{\n    name: &#39;cube-api&#39;,\n    script: &#39;./server.js&#39;,\n    instances: &#39;max&#39;,\n    exec_mode: &#39;cluster&#39;,\n    env: {\n      NODE_ENV: &#39;production&#39;,\n      PORT: 3000\n    }\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"comparison-with-other-adapters\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Comparison with Other Adapters</h2><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Feature</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Fastify</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Express</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Hono</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Performance</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">TypeScript</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Schema Validation</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Plugin Ecosystem</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Bundle Size</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Learning Curve</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr></tbody>\n    </table>\n  </div><h2 id=\"migration-from-express\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Migration from Express</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Key differences when migrating from Express:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Plugin system</strong>: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">server.register()</code> instead of <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">app.use()</code></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Request/Reply</strong>: Different API surface</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Schema validation</strong>: Built-in validation</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Async/await</strong>: Required for all handlers</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Error handling</strong>: Uses <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">setErrorHandler()</code></li></ol><h2 id=\"troubleshooting\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Troubleshooting</h2><h3 id=\"common-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Common Issues</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Plugin registration fails:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// ❌ Wrong\nfastify.register(cubePlugin, options)\n\n// ✅ Correct\nawait fastify.register(cubePlugin, options)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// ❌ Wrong\nfastify.register(cubePlugin, options)\n\n// ✅ Correct\nawait fastify.register(cubePlugin, options)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">CORS not working:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Make sure @fastify/cors is installed\nnpm install @fastify/cors</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Make sure @fastify/cors is installed\nnpm install @fastify/cors\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Body parsing errors:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Increase body limit if needed\n{\n  bodyLimit: 50 * 1024 * 1024 // 50MB\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Increase body limit if needed\n{\n  bodyLimit: 50 * 1024 * 1024 // 50MB\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">TypeScript errors:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Use type assertion for complex cases\nawait fastify.register(cubePlugin as any, options)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Use type assertion for complex cases\nawait fastify.register(cubePlugin as any, options)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"support\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Support</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Framework</strong>: <a href=\"https://fastify.dev/\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Fastify v5+</a></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Node.js</strong>: 18+</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">TypeScript</strong>: 4.5+</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dependencies</strong>: <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">@fastify/cors</code> (optional)</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">For issues specific to the Fastify adapter, please check:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Fastify version compatibility</li><li class=\"leading-relaxed\">Plugin registration order</li><li class=\"leading-relaxed\">Request/response handling differences</li><li class=\"leading-relaxed\">Schema validation rules</li></ol>",
    "path": "external:../src/adapters/fastify/README.md"
  },
  {
    "slug": "adapters/hono",
    "title": "Hono Adapter",
    "content": "<h1 id=\"hono-adapter\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Hono Adapter</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">The Hono adapter provides Cube.js-compatible API endpoints for Hono applications, offering high performance and edge runtime compatibility with a modern TypeScript-first API.</p><h2 id=\"installation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Installation</h2><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install drizzle-cube hono</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install drizzle-cube hono\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"setup-guide\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Setup Guide</h2><h3 id=\"1-define-your-schema\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">1. Define Your Schema</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// schema.ts\nimport { pgTable, integer, text, real, boolean, timestamp } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  email: text(&#39;email&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  departmentId: integer(&#39;department_id&#39;),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  salary: real(&#39;salary&#39;),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  budget: real(&#39;budget&#39;)\n})\n\nexport const schema = { employees, departments }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// schema.ts\nimport { pgTable, integer, text, real, boolean, timestamp } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  email: text(&#39;email&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  departmentId: integer(&#39;department_id&#39;),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  salary: real(&#39;salary&#39;),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  budget: real(&#39;budget&#39;)\n})\n\nexport const schema = { employees, departments }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"2-define-your-cubes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">2. Define Your Cubes</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// cubes.ts\nimport { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    isActive: {\n      name: &#39;isActive&#39;,\n      title: &#39;Active Status&#39;,\n      type: &#39;boolean&#39;,\n      sql: employees.active\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary\n    }\n  }\n})\n\nexport const departmentsCube = defineCube(&#39;Departments&#39;, {\n  title: &#39;Department Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: departments,\n    where: eq(departments.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Department Name&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Department Count&#39;,\n      type: &#39;count&#39;,\n      sql: departments.id\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// cubes.ts\nimport { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    isActive: {\n      name: &#39;isActive&#39;,\n      title: &#39;Active Status&#39;,\n      type: &#39;boolean&#39;,\n      sql: employees.active\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary\n    }\n  }\n})\n\nexport const departmentsCube = defineCube(&#39;Departments&#39;, {\n  title: &#39;Department Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: departments,\n    where: eq(departments.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Department Name&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Department Count&#39;,\n      type: &#39;count&#39;,\n      sql: departments.id\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"quick-start\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Quick Start</h2><h3 id=\"basic-integration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Integration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { Hono } from &#39;hono&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39; // Your Drizzle schema\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39; // Your cube definitions\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = createCubeApp({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (c) =&gt; {\n    // Called for EVERY API request - extract user permissions\n    const token = c.req.header(&#39;Authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await verifyJWT(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\nexport default app</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { Hono } from &#39;hono&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39; // Your Drizzle schema\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39; // Your cube definitions\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = createCubeApp({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (c) =&gt; {\n    // Called for EVERY API request - extract user permissions\n    const token = c.req.header(&#39;Authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await verifyJWT(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\nexport default app\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"mount-on-existing-app\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Mount on Existing App</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { Hono } from &#39;hono&#39;\nimport { createCubeRoutes } from &#39;drizzle-cube/adapters/hono&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = new Hono()\n\n// Your existing routes\napp.get(&#39;/&#39;, (c) =&gt; c.json({ message: &#39;Hello Hono!&#39; }))\n\n// Mount cube routes\nconst cubeRoutes = createCubeRoutes({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (c) =&gt; {\n    // Extract organisation ID from headers\n    const orgId = c.req.header(&#39;x-org-id&#39;)\n    return { organisationId: orgId }\n  }\n})\n\napp.route(&#39;/api&#39;, cubeRoutes)\n\nexport default app</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { Hono } from &#39;hono&#39;\nimport { createCubeRoutes } from &#39;drizzle-cube/adapters/hono&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = new Hono()\n\n// Your existing routes\napp.get(&#39;/&#39;, (c) =&gt; c.json({ message: &#39;Hello Hono!&#39; }))\n\n// Mount cube routes\nconst cubeRoutes = createCubeRoutes({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (c) =&gt; {\n    // Extract organisation ID from headers\n    const orgId = c.req.header(&#39;x-org-id&#39;)\n    return { organisationId: orgId }\n  }\n})\n\napp.route(&#39;/api&#39;, cubeRoutes)\n\nexport default app\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"custom-base-path\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Base Path</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const cubeApp = createCubeApp({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (c) =&gt; {\n    const user = c.get(&#39;user&#39;)\n    return { organisationId: user?.organisationId }\n  },\n  basePath: &#39;/analytics&#39; // Custom API path\n})\n\n// Routes will be available at:\n// /analytics/load, /analytics/meta, etc.</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const cubeApp = createCubeApp({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (c) =&gt; {\n    const user = c.get(&#39;user&#39;)\n    return { organisationId: user?.organisationId }\n  },\n  basePath: &#39;/analytics&#39; // Custom API path\n})\n\n// Routes will be available at:\n// /analytics/load, /analytics/meta, etc.\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"configuration-options\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Configuration Options</h2><h3 id=\"honoadapteroptions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">HonoAdapterOptions</h3><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Option</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Type</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Required</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Default</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Description</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`cubes`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`Cube[]`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Array of cube definitions to register</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`drizzle`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`DrizzleDatabase`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Fully connected Drizzle database instance</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`schema`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`TSchema`</td><td class=\"px-4 py-3 text-sm text-gray-600\">⚠️</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Database schema for type inference (recommended)</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`extractSecurityContext`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`Function`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Extract security context from HTTP requests (called for every request)</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`engineType`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`'postgres'|'mysql'|'sqlite'`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">auto-detected</td><td class=\"px-4 py-3 text-sm text-gray-600\">Database engine type</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`cors`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`CorsOptions`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">CORS configuration</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`basePath`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`string`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">`/cubejs-api/v1`</td><td class=\"px-4 py-3 text-sm text-gray-600\">API base path</td></tr></tbody>\n    </table>\n  </div><h3 id=\"security-context-function\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Security Context Function</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">extractSecurityContext</code> function is <strong class=\"font-semibold text-slate-700\">called for every API request</strong> and extracts security information from the HTTP request. This is your security boundary for multi-tenant applications:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const extractSecurityContext = async (c: Context): Promise&lt;SecurityContext&gt; =&gt; {\n  // Extract from headers\n  const orgId = c.req.header(&#39;x-organization-id&#39;)\n  \n  // Or from authenticated user (set by middleware)\n  const user = c.get(&#39;user&#39;)\n  \n  // Or from JWT payload\n  const payload = c.get(&#39;jwtPayload&#39;)\n  \n  return {\n    organisationId: user?.orgId || orgId,\n    userId: user?.id || payload?.sub,\n    roles: user?.roles || payload?.roles\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const extractSecurityContext = async (c: Context): Promise&lt;SecurityContext&gt; =&gt; {\n  // Extract from headers\n  const orgId = c.req.header(&#39;x-organization-id&#39;)\n  \n  // Or from authenticated user (set by middleware)\n  const user = c.get(&#39;user&#39;)\n  \n  // Or from JWT payload\n  const payload = c.get(&#39;jwtPayload&#39;)\n  \n  return {\n    organisationId: user?.orgId || orgId,\n    userId: user?.id || payload?.sub,\n    roles: user?.roles || payload?.roles\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Important</strong>: This function must return consistent security context for the same user across all requests, as it&#39;s used to filter data in every database query.</p><h2 id=\"advanced-configuration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Configuration</h2><h3 id=\"with-jwt-authentication\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">With JWT Authentication</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { Hono } from &#39;hono&#39;\nimport { jwt } from &#39;hono/jwt&#39;\nimport { cors } from &#39;hono/cors&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = new Hono()\n\n// CORS middleware\napp.use(&#39;/api/*&#39;, cors({\n  origin: process.env.ALLOWED_ORIGINS?.split(&#39;,&#39;) || [&#39;http://localhost:3000&#39;],\n  allowHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;, &#39;x-organization-id&#39;],\n  allowMethods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n  credentials: true\n}))\n\n// JWT authentication\napp.use(&#39;/api/*&#39;, jwt({\n  secret: process.env.JWT_SECRET!\n}))\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    const payload = c.get(&#39;jwtPayload&#39;)\n    return {\n      organisationId: payload.orgId,\n      userId: payload.sub,\n      roles: payload.roles\n    }\n  }\n})\n\napp.route(&#39;/api&#39;, cubeApp)\n\nexport default app</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { Hono } from &#39;hono&#39;\nimport { jwt } from &#39;hono/jwt&#39;\nimport { cors } from &#39;hono/cors&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = new Hono()\n\n// CORS middleware\napp.use(&#39;/api/*&#39;, cors({\n  origin: process.env.ALLOWED_ORIGINS?.split(&#39;,&#39;) || [&#39;http://localhost:3000&#39;],\n  allowHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;, &#39;x-organization-id&#39;],\n  allowMethods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n  credentials: true\n}))\n\n// JWT authentication\napp.use(&#39;/api/*&#39;, jwt({\n  secret: process.env.JWT_SECRET!\n}))\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    const payload = c.get(&#39;jwtPayload&#39;)\n    return {\n      organisationId: payload.orgId,\n      userId: payload.sub,\n      roles: payload.roles\n    }\n  }\n})\n\napp.route(&#39;/api&#39;, cubeApp)\n\nexport default app\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"custom-authentication-middleware\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Authentication Middleware</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { Hono } from &#39;hono&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = new Hono()\n\n// Custom auth middleware\napp.use(&#39;/api/*&#39;, async (c, next) =&gt; {\n  const token = c.req.header(&#39;Authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n  \n  if (!token) {\n    return c.json({ error: &#39;Unauthorized&#39; }, 401)\n  }\n  \n  try {\n    const user = await validateToken(token)\n    c.set(&#39;user&#39;, user)\n    await next()\n  } catch (error) {\n    return c.json({ error: &#39;Invalid token&#39; }, 401)\n  }\n})\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    const user = c.get(&#39;user&#39;)\n    return {\n      organisationId: user.organisationId,\n      userId: user.id,\n      roles: user.roles\n    }\n  }\n})\n\napp.route(&#39;/api&#39;, cubeApp)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { Hono } from &#39;hono&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = new Hono()\n\n// Custom auth middleware\napp.use(&#39;/api/*&#39;, async (c, next) =&gt; {\n  const token = c.req.header(&#39;Authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n  \n  if (!token) {\n    return c.json({ error: &#39;Unauthorized&#39; }, 401)\n  }\n  \n  try {\n    const user = await validateToken(token)\n    c.set(&#39;user&#39;, user)\n    await next()\n  } catch (error) {\n    return c.json({ error: &#39;Invalid token&#39; }, 401)\n  }\n})\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    const user = c.get(&#39;user&#39;)\n    return {\n      organisationId: user.organisationId,\n      userId: user.id,\n      roles: user.roles\n    }\n  }\n})\n\napp.route(&#39;/api&#39;, cubeApp)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"edge-runtime-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Edge Runtime Optimization</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { Hono } from &#39;hono&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db, // Use edge-compatible database\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    // Optimized for edge runtime\n    const orgId = c.req.header(&#39;x-org-id&#39;)\n    return { organisationId: orgId }\n  }\n})\n\n// Export for various edge platforms\nexport default app\n\n// Cloudflare Workers\nexport default {\n  fetch: app.fetch\n}\n\n// Vercel Edge Runtime\nexport const runtime = &#39;edge&#39;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { Hono } from &#39;hono&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db, // Use edge-compatible database\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    // Optimized for edge runtime\n    const orgId = c.req.header(&#39;x-org-id&#39;)\n    return { organisationId: orgId }\n  }\n})\n\n// Export for various edge platforms\nexport default app\n\n// Cloudflare Workers\nexport default {\n  fetch: app.fetch\n}\n\n// Vercel Edge Runtime\nexport const runtime = &#39;edge&#39;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"api-endpoints\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">API Endpoints</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The Hono adapter provides the same Cube.js-compatible endpoints as other adapters:</p><h3 id=\"post-cubejs-apiv1load\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">POST /cubejs-api/v1/load</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Execute analytical queries.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Request Body:</strong></p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;measures&quot;: [&quot;Orders.count&quot;, &quot;Orders.totalAmount&quot;],\n  &quot;dimensions&quot;: [&quot;Orders.status&quot;, &quot;Users.city&quot;],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Orders.status&quot;,\n    &quot;operator&quot;: &quot;equals&quot;,\n    &quot;values&quot;: [&quot;completed&quot;]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;measures&quot;: [&quot;Orders.count&quot;, &quot;Orders.totalAmount&quot;],\n  &quot;dimensions&quot;: [&quot;Orders.status&quot;, &quot;Users.city&quot;],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Orders.status&quot;,\n    &quot;operator&quot;: &quot;equals&quot;,\n    &quot;values&quot;: [&quot;completed&quot;]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"get-cubejs-apiv1loadqueryencoded_query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/load?query={encoded_query}</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Execute queries via GET with query string parameter.</p><h3 id=\"get-cubejs-apiv1meta\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/meta</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Get cube metadata and schema information.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Response:</strong></p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;cubes&quot;: [{\n    &quot;name&quot;: &quot;Orders&quot;,\n    &quot;measures&quot;: [...],\n    &quot;dimensions&quot;: [...],\n    &quot;segments&quot;: [...]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;cubes&quot;: [{\n    &quot;name&quot;: &quot;Orders&quot;,\n    &quot;measures&quot;: [...],\n    &quot;dimensions&quot;: [...],\n    &quot;segments&quot;: [...]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"post-cubejs-apiv1sql\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">POST /cubejs-api/v1/sql</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Generate SQL without execution (dry-run).</p><h3 id=\"get-cubejs-apiv1sqlqueryencoded_query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/sql?query={encoded_query}</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Generate SQL via GET request.</p><h3 id=\"post-cubejs-apiv1dry-run\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">POST /cubejs-api/v1/dry-run</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Validate queries and analyze complexity.</p><h3 id=\"get-cubejs-apiv1dry-runqueryencoded_query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/dry-run?query={encoded_query}</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Validate queries via GET request.</p><h2 id=\"error-handling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Handling</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The adapter includes comprehensive error handling with Hono&#39;s error handling patterns:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { HTTPException } from &#39;hono/http-exception&#39;\n\n// Error responses follow this format:\n{\n  &quot;error&quot;: &quot;Query validation failed: measure Orders.invalidMeasure not found&quot;,\n  &quot;status&quot;: 400\n}\n\n// Custom error handling\napp.onError((err, c) =&gt; {\n  console.error(&#39;Hono cube adapter error:&#39;, err)\n  \n  if (err instanceof HTTPException) {\n    return c.json({\n      error: err.message,\n      status: err.status\n    }, err.status)\n  }\n  \n  return c.json({\n    error: &#39;Internal server error&#39;,\n    status: 500\n  }, 500)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { HTTPException } from &#39;hono/http-exception&#39;\n\n// Error responses follow this format:\n{\n  &quot;error&quot;: &quot;Query validation failed: measure Orders.invalidMeasure not found&quot;,\n  &quot;status&quot;: 400\n}\n\n// Custom error handling\napp.onError((err, c) =&gt; {\n  console.error(&#39;Hono cube adapter error:&#39;, err)\n  \n  if (err instanceof HTTPException) {\n    return c.json({\n      error: err.message,\n      status: err.status\n    }, err.status)\n  }\n  \n  return c.json({\n    error: &#39;Internal server error&#39;,\n    status: 500\n  }, 500)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"typescript-support\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">TypeScript Support</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The adapter provides full TypeScript support with Hono&#39;s type system:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import type { HonoAdapterOptions } from &#39;drizzle-cube/adapters/hono&#39;\nimport type { Context } from &#39;hono&#39;\n\n// Type-safe configuration\nconst options: HonoAdapterOptions&lt;typeof schema&gt; = {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c: Context) =&gt; ({\n    organisationId: c.get(&#39;user&#39;)?.organisationId\n  })\n}\n\n// Type-safe context access\ntype Variables = {\n  user: { id: string; organisationId: string }\n  jwtPayload: { sub: string; orgId: string }\n}\n\nconst app = new Hono&lt;{ Variables: Variables }&gt;()</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import type { HonoAdapterOptions } from &#39;drizzle-cube/adapters/hono&#39;\nimport type { Context } from &#39;hono&#39;\n\n// Type-safe configuration\nconst options: HonoAdapterOptions&lt;typeof schema&gt; = {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c: Context) =&gt; ({\n    organisationId: c.get(&#39;user&#39;)?.organisationId\n  })\n}\n\n// Type-safe context access\ntype Variables = {\n  user: { id: string; organisationId: string }\n  jwtPayload: { sub: string; orgId: string }\n}\n\nconst app = new Hono&lt;{ Variables: Variables }&gt;()\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"middleware-integration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Middleware Integration</h2><h3 id=\"built-in-hono-middleware\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Built-in Hono Middleware</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { Hono } from &#39;hono&#39;\nimport { logger } from &#39;hono/logger&#39;\nimport { timing } from &#39;hono/timing&#39;\nimport { requestId } from &#39;hono/request-id&#39;\nimport { compress } from &#39;hono/compress&#39;\n\nconst app = new Hono()\n\n// Performance and observability\napp.use(&#39;*&#39;, logger())\napp.use(&#39;*&#39;, timing())\napp.use(&#39;*&#39;, requestId())\napp.use(&#39;*&#39;, compress())\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\napp.route(&#39;/api&#39;, cubeApp)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { Hono } from &#39;hono&#39;\nimport { logger } from &#39;hono/logger&#39;\nimport { timing } from &#39;hono/timing&#39;\nimport { requestId } from &#39;hono/request-id&#39;\nimport { compress } from &#39;hono/compress&#39;\n\nconst app = new Hono()\n\n// Performance and observability\napp.use(&#39;*&#39;, logger())\napp.use(&#39;*&#39;, timing())\napp.use(&#39;*&#39;, requestId())\napp.use(&#39;*&#39;, compress())\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\napp.route(&#39;/api&#39;, cubeApp)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"rate-limiting\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Rate Limiting</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { Hono } from &#39;hono&#39;\nimport { rateLimiter } from &#39;hono/rate-limiter&#39;\n\nconst app = new Hono()\n\n// Rate limiting middleware\napp.use(&#39;/api/*&#39;, rateLimiter({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  limit: 100, // limit each IP to 100 requests per windowMs\n  keyGenerator: (c) =&gt; c.req.header(&#39;x-forwarded-for&#39;) || &#39;unknown&#39;\n}))\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\napp.route(&#39;/api&#39;, cubeApp)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { Hono } from &#39;hono&#39;\nimport { rateLimiter } from &#39;hono/rate-limiter&#39;\n\nconst app = new Hono()\n\n// Rate limiting middleware\napp.use(&#39;/api/*&#39;, rateLimiter({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  limit: 100, // limit each IP to 100 requests per windowMs\n  keyGenerator: (c) =&gt; c.req.header(&#39;x-forwarded-for&#39;) || &#39;unknown&#39;\n}))\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\napp.route(&#39;/api&#39;, cubeApp)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">High performance</strong>: Optimized for speed and low latency</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Edge runtime</strong>: Compatible with Cloudflare Workers, Vercel Edge</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Small bundle</strong>: Minimal overhead and dependencies</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Tree shaking</strong>: Only includes used functionality</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Streaming</strong>: Supports streaming responses</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Modern APIs</strong>: Uses modern Web APIs</li></ul><h2 id=\"platform-deployment\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Platform Deployment</h2><h3 id=\"cloudflare-workers\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Cloudflare Workers</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// wrangler.toml\nname = &quot;cube-api&quot;\nmain = &quot;src/index.ts&quot;\ncompatibility_date = &quot;2024-01-01&quot;\n\n[env.production.vars]\nDATABASE_URL = &quot;your-database-url&quot;\nJWT_SECRET = &quot;your-jwt-secret&quot;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// wrangler.toml\nname = &quot;cube-api&quot;\nmain = &quot;src/index.ts&quot;\ncompatibility_date = &quot;2024-01-01&quot;\n\n[env.production.vars]\nDATABASE_URL = &quot;your-database-url&quot;\nJWT_SECRET = &quot;your-jwt-secret&quot;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// src/index.ts\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    const token = c.req.header(&#39;Authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    return await getContextFromToken(token)\n  }\n})\n\nexport default app</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// src/index.ts\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    const token = c.req.header(&#39;Authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    return await getContextFromToken(token)\n  }\n})\n\nexport default app\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"vercel-edge-runtime\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Vercel Edge Runtime</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// api/cube/[...route].ts\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\nimport { handle } from &#39;hono/vercel&#39;\n\nexport const runtime = &#39;edge&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\nexport const GET = handle(app)\nexport const POST = handle(app)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// api/cube/[...route].ts\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\nimport { handle } from &#39;hono/vercel&#39;\n\nexport const runtime = &#39;edge&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\nexport const GET = handle(app)\nexport const POST = handle(app)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"deno-deploy\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Deno Deploy</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// main.ts\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\nDeno.serve(app.fetch)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// main.ts\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\nDeno.serve(app.fetch)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"bun\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Bun</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// server.ts\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\nexport default {\n  port: 3000,\n  fetch: app.fetch\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// server.ts\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\nexport default {\n  port: 3000,\n  fetch: app.fetch\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"testing\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Use Hono&#39;s testing utilities:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { testClient } from &#39;hono/testing&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\ndescribe(&#39;Cube API&#39;, () =&gt; {\n  const app = createCubeApp({\n    semanticLayer,\n    drizzle: db,\n    schema,\n    getSecurityContext: async () =&gt; ({ organisationId: &#39;test-org&#39; })\n  })\n  \n  const client = testClient(app)\n\n  it(&#39;should return metadata&#39;, async () =&gt; {\n    const res = await client.meta.$get()\n    expect(res.status).toBe(200)\n    \n    const data = await res.json()\n    expect(data.cubes).toBeDefined()\n  })\n\n  it(&#39;should execute queries&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Orders.count&#39;],\n      dimensions: [&#39;Orders.status&#39;]\n    }\n\n    const res = await client.load.$post({ json: query })\n    expect(res.status).toBe(200)\n    \n    const data = await res.json()\n    expect(data.data).toBeDefined()\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { testClient } from &#39;hono/testing&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\ndescribe(&#39;Cube API&#39;, () =&gt; {\n  const app = createCubeApp({\n    semanticLayer,\n    drizzle: db,\n    schema,\n    getSecurityContext: async () =&gt; ({ organisationId: &#39;test-org&#39; })\n  })\n  \n  const client = testClient(app)\n\n  it(&#39;should return metadata&#39;, async () =&gt; {\n    const res = await client.meta.$get()\n    expect(res.status).toBe(200)\n    \n    const data = await res.json()\n    expect(data.cubes).toBeDefined()\n  })\n\n  it(&#39;should execute queries&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Orders.count&#39;],\n      dimensions: [&#39;Orders.status&#39;]\n    }\n\n    const res = await client.load.$post({ json: query })\n    expect(res.status).toBe(200)\n    \n    const data = await res.json()\n    expect(data.data).toBeDefined()\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"comparison-with-other-adapters\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Comparison with Other Adapters</h2><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Feature</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Hono</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Express</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Fastify</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Next.js</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Performance</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">TypeScript</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Edge Runtime</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Bundle Size</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Learning Curve</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Platform Support</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr></tbody>\n    </table>\n  </div><h2 id=\"migration-from-other-adapters\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Migration from Other Adapters</h2><h3 id=\"from-express\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">From Express</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Key differences when migrating from Express:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Context API</strong>: Use Hono&#39;s <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">c</code> context instead of <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">req</code>/<code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">res</code></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Middleware</strong>: Different middleware system and patterns</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Routing</strong>: Hono&#39;s routing API</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Edge compatibility</strong>: Async/await patterns optimized for edge</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type safety</strong>: Enhanced TypeScript support</li></ol><h3 id=\"from-fastify\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">From Fastify</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Key differences when migrating from Fastify:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Plugin system</strong>: No plugin registration, direct middleware</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Context</strong>: Single context object instead of request/reply</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Schema validation</strong>: Manual validation or third-party libraries</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Edge runtime</strong>: Edge-first design patterns</li></ol><h2 id=\"troubleshooting\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Troubleshooting</h2><h3 id=\"common-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Common Issues</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Edge runtime compatibility:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Use edge-compatible database connections\nimport { neon } from &#39;@neondatabase/serverless&#39;\nconst db = drizzle(neon(process.env.DATABASE_URL))</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Use edge-compatible database connections\nimport { neon } from &#39;@neondatabase/serverless&#39;\nconst db = drizzle(neon(process.env.DATABASE_URL))\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Context access:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Access context correctly\nconst getSecurityContext = async (c) =&gt; {\n  const user = c.get(&#39;user&#39;) // From middleware\n  const header = c.req.header(&#39;x-org-id&#39;) // From headers\n  return { organisationId: user?.orgId || header }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Access context correctly\nconst getSecurityContext = async (c) =&gt; {\n  const user = c.get(&#39;user&#39;) // From middleware\n  const header = c.req.header(&#39;x-org-id&#39;) // From headers\n  return { organisationId: user?.orgId || header }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">CORS issues:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Configure CORS properly for your platform\nimport { cors } from &#39;hono/cors&#39;\n\napp.use(&#39;/api/*&#39;, cors({\n  origin: [&#39;https://your-domain.com&#39;],\n  credentials: true\n}))</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Configure CORS properly for your platform\nimport { cors } from &#39;hono/cors&#39;\n\napp.use(&#39;/api/*&#39;, cors({\n  origin: [&#39;https://your-domain.com&#39;],\n  credentials: true\n}))\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Bundle size:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Tree shake unused functionality\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n// Don&#39;t import entire Hono unless needed</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Tree shake unused functionality\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n// Don&#39;t import entire Hono unless needed\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"support\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Support</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Framework</strong>: Hono v4+</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Runtime</strong>: Node.js 18+, Deno, Bun, Cloudflare Workers, Vercel Edge</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">TypeScript</strong>: 4.5+</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dependencies</strong>: None (Hono is peer dependency)</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">For Hono-specific issues, please check:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Runtime compatibility (edge vs Node.js)</li><li class=\"leading-relaxed\">Context access patterns</li><li class=\"leading-relaxed\">Middleware execution order</li><li class=\"leading-relaxed\">Platform-specific configurations</li></ol>",
    "path": "external:../src/adapters/hono/README.md"
  },
  {
    "slug": "adapters/nextjs",
    "title": "Next.js Adapter for Drizzle Cube",
    "content": "<h1 id=\"nextjs-adapter-for-drizzle-cube\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Next.js Adapter for Drizzle Cube</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">The Next.js adapter provides seamless integration between Drizzle Cube and Next.js 15 applications using the App Router. It creates route handlers that expose Cube.js-compatible API endpoints for your analytics and dashboard applications.</p><h2 id=\"features\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Features</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">🚀 <strong class=\"font-semibold text-slate-700\">App Router Support</strong> - Full Next.js 15 App Router integration</li><li class=\"leading-relaxed\">🔒 <strong class=\"font-semibold text-slate-700\">Type Safety</strong> - Complete TypeScript support with Drizzle schema inference</li><li class=\"leading-relaxed\">⚡ <strong class=\"font-semibold text-slate-700\">Edge Runtime</strong> - Optional Edge Runtime support for global deployment</li><li class=\"leading-relaxed\">🌐 <strong class=\"font-semibold text-slate-700\">CORS Support</strong> - Built-in CORS handling for cross-origin requests</li><li class=\"leading-relaxed\">🛡️ <strong class=\"font-semibold text-slate-700\">Security Context</strong> - Flexible authentication and authorization integration</li><li class=\"leading-relaxed\">📊 <strong class=\"font-semibold text-slate-700\">Cube.js Compatible</strong> - Drop-in replacement for Cube.js API endpoints</li><li class=\"leading-relaxed\">🔄 <strong class=\"font-semibold text-slate-700\">Multiple Formats</strong> - Support for both GET and POST requests</li></ul><h2 id=\"installation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Installation</h2><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install drizzle-cube next</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install drizzle-cube next\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"setup-guide\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Setup Guide</h2><h3 id=\"1-define-your-schema\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">1. Define Your Schema</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// lib/schema.ts\nimport { pgTable, integer, text, real, boolean, timestamp } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  email: text(&#39;email&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  departmentId: integer(&#39;department_id&#39;),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  salary: real(&#39;salary&#39;),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  budget: real(&#39;budget&#39;)\n})\n\nexport const schema = { employees, departments }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// lib/schema.ts\nimport { pgTable, integer, text, real, boolean, timestamp } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  email: text(&#39;email&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  departmentId: integer(&#39;department_id&#39;),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  salary: real(&#39;salary&#39;),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  budget: real(&#39;budget&#39;)\n})\n\nexport const schema = { employees, departments }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"2-define-your-cubes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">2. Define Your Cubes</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// lib/cubes.ts\nimport { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    isActive: {\n      name: &#39;isActive&#39;,\n      title: &#39;Active Status&#39;,\n      type: &#39;boolean&#39;,\n      sql: employees.active\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary\n    }\n  }\n})\n\nexport const departmentsCube = defineCube(&#39;Departments&#39;, {\n  title: &#39;Department Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: departments,\n    where: eq(departments.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Department Name&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Department Count&#39;,\n      type: &#39;count&#39;,\n      sql: departments.id\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// lib/cubes.ts\nimport { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    isActive: {\n      name: &#39;isActive&#39;,\n      title: &#39;Active Status&#39;,\n      type: &#39;boolean&#39;,\n      sql: employees.active\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary\n    }\n  }\n})\n\nexport const departmentsCube = defineCube(&#39;Departments&#39;, {\n  title: &#39;Department Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: departments,\n    where: eq(departments.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Department Name&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Department Count&#39;,\n      type: &#39;count&#39;,\n      sql: departments.id\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"quick-start\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Quick Start</h2><h3 id=\"1-create-route-handlers\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">1. Create Route Handlers</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create API route handlers in your Next.js app directory:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// app/api/cubejs/v1/load/route.ts\nimport { createLoadHandler } from &#39;drizzle-cube/adapters/nextjs&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;@/lib/schema&#39;\nimport { employeesCube, departmentsCube } from &#39;@/lib/cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst handler = createLoadHandler({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request) =&gt; {\n    // Called for EVERY API request - extract user permissions\n    const token = request.headers.get(&#39;authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await validateToken(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\nexport { handler as GET, handler as POST }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// app/api/cubejs/v1/load/route.ts\nimport { createLoadHandler } from &#39;drizzle-cube/adapters/nextjs&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;@/lib/schema&#39;\nimport { employeesCube, departmentsCube } from &#39;@/lib/cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst handler = createLoadHandler({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request) =&gt; {\n    // Called for EVERY API request - extract user permissions\n    const token = request.headers.get(&#39;authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await validateToken(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\nexport { handler as GET, handler as POST }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"2-create-all-endpoints\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">2. Create All Endpoints</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">For a complete setup, create all four Cube.js API endpoints:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// app/api/cubejs/v1/[...endpoint]/route.ts\nimport { createCubeHandlers } from &#39;drizzle-cube/adapters/nextjs&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;@/lib/schema&#39;\nimport { employeesCube, departmentsCube } from &#39;@/lib/cubes&#39;\nimport { getServerSession } from &#39;next-auth&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst handlers = createCubeHandlers({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request, context) =&gt; {\n    const session = await getServerSession()\n    const token = request.headers.get(&#39;authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await validateToken(token)\n    \n    return {\n      organisationId: session?.user?.organisationId || decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  },\n  cors: {\n    origin: [&#39;http://localhost:3000&#39;, &#39;https://yourdomain.com&#39;],\n    credentials: true,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;]\n  }\n})\n\nexport async function GET(request: NextRequest, context: RouteContext) {\n  const { endpoint } = context.params\n  \n  switch (endpoint[0]) {\n    case &#39;load&#39;:\n      return handlers.load(request, context)\n    case &#39;meta&#39;:\n      return handlers.meta(request, context)\n    case &#39;sql&#39;:\n      return handlers.sql(request, context)\n    case &#39;dry-run&#39;:\n      return handlers.dryRun(request, context)\n    default:\n      return NextResponse.json({ error: &#39;Not found&#39; }, { status: 404 })\n  }\n}\n\nexport async function POST(request: NextRequest, context: RouteContext) {\n  const { endpoint } = context.params\n  \n  switch (endpoint[0]) {\n    case &#39;load&#39;:\n      return handlers.load(request, context)\n    case &#39;sql&#39;:\n      return handlers.sql(request, context)\n    case &#39;dry-run&#39;:\n      return handlers.dryRun(request, context)\n    default:\n      return NextResponse.json({ error: &#39;Method not allowed&#39; }, { status: 405 })\n  }\n}\n\n// Handle CORS preflight requests\nexport async function OPTIONS(request: NextRequest) {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      &#39;Access-Control-Allow-Origin&#39;: &#39;*&#39;,\n      &#39;Access-Control-Allow-Methods&#39;: &#39;GET, POST, OPTIONS&#39;,\n      &#39;Access-Control-Allow-Headers&#39;: &#39;Content-Type, Authorization&#39;\n    }\n  })\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// app/api/cubejs/v1/[...endpoint]/route.ts\nimport { createCubeHandlers } from &#39;drizzle-cube/adapters/nextjs&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;@/lib/schema&#39;\nimport { employeesCube, departmentsCube } from &#39;@/lib/cubes&#39;\nimport { getServerSession } from &#39;next-auth&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst handlers = createCubeHandlers({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request, context) =&gt; {\n    const session = await getServerSession()\n    const token = request.headers.get(&#39;authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await validateToken(token)\n    \n    return {\n      organisationId: session?.user?.organisationId || decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  },\n  cors: {\n    origin: [&#39;http://localhost:3000&#39;, &#39;https://yourdomain.com&#39;],\n    credentials: true,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;]\n  }\n})\n\nexport async function GET(request: NextRequest, context: RouteContext) {\n  const { endpoint } = context.params\n  \n  switch (endpoint[0]) {\n    case &#39;load&#39;:\n      return handlers.load(request, context)\n    case &#39;meta&#39;:\n      return handlers.meta(request, context)\n    case &#39;sql&#39;:\n      return handlers.sql(request, context)\n    case &#39;dry-run&#39;:\n      return handlers.dryRun(request, context)\n    default:\n      return NextResponse.json({ error: &#39;Not found&#39; }, { status: 404 })\n  }\n}\n\nexport async function POST(request: NextRequest, context: RouteContext) {\n  const { endpoint } = context.params\n  \n  switch (endpoint[0]) {\n    case &#39;load&#39;:\n      return handlers.load(request, context)\n    case &#39;sql&#39;:\n      return handlers.sql(request, context)\n    case &#39;dry-run&#39;:\n      return handlers.dryRun(request, context)\n    default:\n      return NextResponse.json({ error: &#39;Method not allowed&#39; }, { status: 405 })\n  }\n}\n\n// Handle CORS preflight requests\nexport async function OPTIONS(request: NextRequest) {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      &#39;Access-Control-Allow-Origin&#39;: &#39;*&#39;,\n      &#39;Access-Control-Allow-Methods&#39;: &#39;GET, POST, OPTIONS&#39;,\n      &#39;Access-Control-Allow-Headers&#39;: &#39;Content-Type, Authorization&#39;\n    }\n  })\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"3-semantic-layer-configuration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">3. Semantic Layer Configuration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// lib/cube-config.ts\nimport { SemanticLayerCompiler } from &#39;drizzle-cube/server&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst connectionString = process.env.DATABASE_URL!\nconst client = postgres(connectionString)\nexport const db = drizzle(client, { schema })\n\n// Create semantic layer and register cubes\nexport const semanticLayer = new SemanticLayerCompiler({\n  drizzle: db,\n  schema,\n  engineType: &#39;postgres&#39;\n})\n\n// Register your cubes\nsemanticLayer.registerCube(employeesCube)\nsemanticLayer.registerCube(departmentsCube)\n\nexport { schema }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// lib/cube-config.ts\nimport { SemanticLayerCompiler } from &#39;drizzle-cube/server&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst connectionString = process.env.DATABASE_URL!\nconst client = postgres(connectionString)\nexport const db = drizzle(client, { schema })\n\n// Create semantic layer and register cubes\nexport const semanticLayer = new SemanticLayerCompiler({\n  drizzle: db,\n  schema,\n  engineType: &#39;postgres&#39;\n})\n\n// Register your cubes\nsemanticLayer.registerCube(employeesCube)\nsemanticLayer.registerCube(departmentsCube)\n\nexport { schema }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"api-reference\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">API Reference</h2><h3 id=\"route-handler-functions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Route Handler Functions</h3><h4 id=\"createloadhandleroptions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">createLoadHandler(options)</code></h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Creates a route handler for query execution (<code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">/load</code> endpoint).</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const loadHandler = createLoadHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\nexport { loadHandler as GET, loadHandler as POST }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const loadHandler = createLoadHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\nexport { loadHandler as GET, loadHandler as POST }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"createmetahandleroptions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">createMetaHandler(options)</code></h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Creates a route handler for metadata retrieval (<code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">/meta</code> endpoint).</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const metaHandler = createMetaHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\nexport { metaHandler as GET }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const metaHandler = createMetaHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\nexport { metaHandler as GET }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"createsqlhandleroptions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">createSqlHandler(options)</code></h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Creates a route handler for SQL generation (<code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">/sql</code> endpoint).</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const sqlHandler = createSqlHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\nexport { sqlHandler as GET, sqlHandler as POST }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const sqlHandler = createSqlHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\nexport { sqlHandler as GET, sqlHandler as POST }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"createdryrunhandleroptions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">createDryRunHandler(options)</code></h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Creates a route handler for query validation (<code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">/dry-run</code> endpoint).</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const dryRunHandler = createDryRunHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\nexport { dryRunHandler as GET, dryRunHandler as POST }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const dryRunHandler = createDryRunHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\nexport { dryRunHandler as GET, dryRunHandler as POST }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"createcubehandlersoptions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">createCubeHandlers(options)</code></h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Convenience function that creates all four handlers at once.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const { load, meta, sql, dryRun } = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\n// Use in individual route files\nexport { load as GET, load as POST }  // In load/route.ts\nexport { meta as GET }                // In meta/route.ts</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const { load, meta, sql, dryRun } = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\n// Use in individual route files\nexport { load as GET, load as POST }  // In load/route.ts\nexport { meta as GET }                // In meta/route.ts\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"configuration-options\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Configuration Options</h3><h4 id=\"nextadapteroptions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">NextAdapterOptions</code></h4><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface NextAdapterOptions&lt;TSchema&gt; {\n  semanticLayer: SemanticLayerCompiler&lt;TSchema&gt;  // Semantic layer instance with registered cubes\n  drizzle: DrizzleDatabase&lt;TSchema&gt;              // Fully connected Drizzle database instance\n  schema?: TSchema                               // Database schema for type inference (recommended)\n  getSecurityContext: (request: NextRequest, context?: RouteContext) =&gt; SecurityContext | Promise&lt;SecurityContext&gt;\n  cors?: NextCorsOptions                         // CORS configuration\n  runtime?: &#39;edge&#39; | &#39;nodejs&#39;                   // Runtime environment\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface NextAdapterOptions&lt;TSchema&gt; {\n  semanticLayer: SemanticLayerCompiler&lt;TSchema&gt;  // Semantic layer instance with registered cubes\n  drizzle: DrizzleDatabase&lt;TSchema&gt;              // Fully connected Drizzle database instance\n  schema?: TSchema                               // Database schema for type inference (recommended)\n  getSecurityContext: (request: NextRequest, context?: RouteContext) =&gt; SecurityContext | Promise&lt;SecurityContext&gt;\n  cors?: NextCorsOptions                         // CORS configuration\n  runtime?: &#39;edge&#39; | &#39;nodejs&#39;                   // Runtime environment\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"nextcorsoptions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">NextCorsOptions</code></h4><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface NextCorsOptions {\n  origin?: string | string[] | ((origin: string) =&gt; boolean)\n  methods?: string[]\n  allowedHeaders?: string[]\n  credentials?: boolean\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface NextCorsOptions {\n  origin?: string | string[] | ((origin: string) =&gt; boolean)\n  methods?: string[]\n  allowedHeaders?: string[]\n  credentials?: boolean\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"usage-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Usage Patterns</h2><h3 id=\"individual-route-files\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Individual Route Files</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create separate route files for each endpoint:</p><div class=\"relative group\">\n    <pre class=\"language-text rounded-lg overflow-x-auto mb-4\"><code class=\"language-text\">app/api/cubejs/v1/\n├── load/route.ts\n├── meta/route.ts\n├── sql/route.ts\n└── dry-run/route.ts</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"app/api/cubejs/v1/\n├── load/route.ts\n├── meta/route.ts\n├── sql/route.ts\n└── dry-run/route.ts\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// app/api/cubejs/v1/load/route.ts\nimport { createLoadHandler } from &#39;drizzle-cube/adapters/nextjs&#39;\nimport { cubeConfig } from &#39;@/lib/cube-config&#39;\n\nconst handler = createLoadHandler(cubeConfig)\nexport { handler as GET, handler as POST }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// app/api/cubejs/v1/load/route.ts\nimport { createLoadHandler } from &#39;drizzle-cube/adapters/nextjs&#39;\nimport { cubeConfig } from &#39;@/lib/cube-config&#39;\n\nconst handler = createLoadHandler(cubeConfig)\nexport { handler as GET, handler as POST }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"catch-all-route\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Catch-All Route</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Use a dynamic catch-all route for simpler setup:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// app/api/cubejs/v1/[...endpoint]/route.ts\nimport { createCubeHandlers } from &#39;drizzle-cube/adapters/nextjs&#39;\nimport { cubeConfig } from &#39;@/lib/cube-config&#39;\n\nconst handlers = createCubeHandlers(cubeConfig)\n\nexport async function GET(request: NextRequest, { params }: { params: { endpoint: string[] } }) {\n  const endpoint = params.endpoint[0]\n  \n  switch (endpoint) {\n    case &#39;load&#39;: return handlers.load(request)\n    case &#39;meta&#39;: return handlers.meta(request)\n    case &#39;sql&#39;: return handlers.sql(request)\n    case &#39;dry-run&#39;: return handlers.dryRun(request)\n    default: return NextResponse.json({ error: &#39;Not found&#39; }, { status: 404 })\n  }\n}\n\nexport async function POST(request: NextRequest, { params }: { params: { endpoint: string[] } }) {\n  const endpoint = params.endpoint[0]\n  \n  switch (endpoint) {\n    case &#39;load&#39;: return handlers.load(request)\n    case &#39;sql&#39;: return handlers.sql(request)\n    case &#39;dry-run&#39;: return handlers.dryRun(request)\n    default: return NextResponse.json({ error: &#39;Method not allowed&#39; }, { status: 405 })\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// app/api/cubejs/v1/[...endpoint]/route.ts\nimport { createCubeHandlers } from &#39;drizzle-cube/adapters/nextjs&#39;\nimport { cubeConfig } from &#39;@/lib/cube-config&#39;\n\nconst handlers = createCubeHandlers(cubeConfig)\n\nexport async function GET(request: NextRequest, { params }: { params: { endpoint: string[] } }) {\n  const endpoint = params.endpoint[0]\n  \n  switch (endpoint) {\n    case &#39;load&#39;: return handlers.load(request)\n    case &#39;meta&#39;: return handlers.meta(request)\n    case &#39;sql&#39;: return handlers.sql(request)\n    case &#39;dry-run&#39;: return handlers.dryRun(request)\n    default: return NextResponse.json({ error: &#39;Not found&#39; }, { status: 404 })\n  }\n}\n\nexport async function POST(request: NextRequest, { params }: { params: { endpoint: string[] } }) {\n  const endpoint = params.endpoint[0]\n  \n  switch (endpoint) {\n    case &#39;load&#39;: return handlers.load(request)\n    case &#39;sql&#39;: return handlers.sql(request)\n    case &#39;dry-run&#39;: return handlers.dryRun(request)\n    default: return NextResponse.json({ error: &#39;Method not allowed&#39; }, { status: 405 })\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"authentication-authorization\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Authentication &amp; Authorization</h2><h3 id=\"next-auth-integration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Next-Auth Integration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { getServerSession } from &#39;next-auth&#39;\nimport { authOptions } from &#39;@/lib/auth&#39;\n\nconst handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; {\n    const session = await getServerSession(authOptions)\n    \n    if (!session?.user) {\n      throw new Error(&#39;Unauthorized&#39;)\n    }\n    \n    return {\n      organisationId: session.user.organisationId,\n      userId: session.user.id,\n      roles: session.user.roles\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { getServerSession } from &#39;next-auth&#39;\nimport { authOptions } from &#39;@/lib/auth&#39;\n\nconst handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; {\n    const session = await getServerSession(authOptions)\n    \n    if (!session?.user) {\n      throw new Error(&#39;Unauthorized&#39;)\n    }\n    \n    return {\n      organisationId: session.user.organisationId,\n      userId: session.user.id,\n      roles: session.user.roles\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"custom-jwt-authentication\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom JWT Authentication</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { verify } from &#39;jsonwebtoken&#39;\n\nconst handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; {\n    const token = request.headers.get(&#39;authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    \n    if (!token) {\n      throw new Error(&#39;Missing authorization token&#39;)\n    }\n    \n    try {\n      const payload = verify(token, process.env.JWT_SECRET!) as any\n      return {\n        organisationId: payload.orgId,\n        userId: payload.sub\n      }\n    } catch {\n      throw new Error(&#39;Invalid token&#39;)\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { verify } from &#39;jsonwebtoken&#39;\n\nconst handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; {\n    const token = request.headers.get(&#39;authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    \n    if (!token) {\n      throw new Error(&#39;Missing authorization token&#39;)\n    }\n    \n    try {\n      const payload = verify(token, process.env.JWT_SECRET!) as any\n      return {\n        organisationId: payload.orgId,\n        userId: payload.sub\n      }\n    } catch {\n      throw new Error(&#39;Invalid token&#39;)\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"header-based-context\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Header-Based Context</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; {\n    // Extract from custom headers\n    const orgId = request.headers.get(&#39;x-organization-id&#39;)\n    const userId = request.headers.get(&#39;x-user-id&#39;)\n    \n    // Or from route parameters\n    const routeOrgId = context?.params?.orgId\n    \n    return {\n      organisationId: orgId || routeOrgId,\n      userId\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; {\n    // Extract from custom headers\n    const orgId = request.headers.get(&#39;x-organization-id&#39;)\n    const userId = request.headers.get(&#39;x-user-id&#39;)\n    \n    // Or from route parameters\n    const routeOrgId = context?.params?.orgId\n    \n    return {\n      organisationId: orgId || routeOrgId,\n      userId\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"cors-configuration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">CORS Configuration</h2><h3 id=\"basic-cors\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic CORS</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const handlers = createCubeHandlers({\n  // ... other options\n  cors: {\n    origin: &#39;*&#39;,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;]\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const handlers = createCubeHandlers({\n  // ... other options\n  cors: {\n    origin: &#39;*&#39;,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;]\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"environment-based-cors\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Environment-Based CORS</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const handlers = createCubeHandlers({\n  // ... other options\n  cors: {\n    origin: process.env.NODE_ENV === &#39;production&#39; \n      ? [&#39;https://yourdomain.com&#39;, &#39;https://app.yourdomain.com&#39;]\n      : [&#39;http://localhost:3000&#39;, &#39;http://localhost:3001&#39;],\n    credentials: true,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;]\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const handlers = createCubeHandlers({\n  // ... other options\n  cors: {\n    origin: process.env.NODE_ENV === &#39;production&#39; \n      ? [&#39;https://yourdomain.com&#39;, &#39;https://app.yourdomain.com&#39;]\n      : [&#39;http://localhost:3000&#39;, &#39;http://localhost:3001&#39;],\n    credentials: true,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;]\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"dynamic-cors\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dynamic CORS</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const handlers = createCubeHandlers({\n  // ... other options\n  cors: {\n    origin: (origin) =&gt; {\n      // Allow requests from subdomains\n      return origin?.endsWith(&#39;.yourdomain.com&#39;) || \n             origin === &#39;http://localhost:3000&#39;\n    },\n    credentials: true,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;]\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const handlers = createCubeHandlers({\n  // ... other options\n  cors: {\n    origin: (origin) =&gt; {\n      // Allow requests from subdomains\n      return origin?.endsWith(&#39;.yourdomain.com&#39;) || \n             origin === &#39;http://localhost:3000&#39;\n    },\n    credentials: true,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;]\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"edge-runtime-support\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Edge Runtime Support</h2><h3 id=\"basic-edge-configuration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Edge Configuration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// app/api/cubejs/v1/load/route.ts\nexport const runtime = &#39;edge&#39;\n\nimport { createLoadHandler } from &#39;drizzle-cube/adapters/nextjs&#39;\n\nconst handler = createLoadHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  runtime: &#39;edge&#39;, // Must match the export above\n  getSecurityContext: async (request) =&gt; {\n    // Use only Web APIs in Edge Runtime\n    const token = request.headers.get(&#39;authorization&#39;)\n    return await validateTokenEdge(token)\n  }\n})\n\nexport { handler as GET, handler as POST }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// app/api/cubejs/v1/load/route.ts\nexport const runtime = &#39;edge&#39;\n\nimport { createLoadHandler } from &#39;drizzle-cube/adapters/nextjs&#39;\n\nconst handler = createLoadHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  runtime: &#39;edge&#39;, // Must match the export above\n  getSecurityContext: async (request) =&gt; {\n    // Use only Web APIs in Edge Runtime\n    const token = request.headers.get(&#39;authorization&#39;)\n    return await validateTokenEdge(token)\n  }\n})\n\nexport { handler as GET, handler as POST }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"edge-runtime-considerations\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Edge Runtime Considerations</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Web APIs Only</strong>: Use only Web APIs, no Node.js specific features</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Database Connections</strong>: Use edge-compatible database drivers like <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">@neondatabase/serverless</code></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Authentication</strong>: Use JWT libraries that work in Edge Runtime</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">File System</strong>: No access to Node.js <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">fs</code> module</li></ul><h2 id=\"server-component-integration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Server Component Integration</h2><h3 id=\"server-side-data-fetching\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Server-Side Data Fetching</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// app/dashboard/page.tsx\nimport { semanticLayer } from &#39;@/lib/cube-config&#39;\nimport { DashboardClient } from &#39;./dashboard-client&#39;\n\nexport default async function DashboardPage() {\n  // Get metadata on server-side for faster initial load\n  const metadata = semanticLayer.getMetadata()\n  \n  // Optionally, pre-fetch some data\n  const initialData = await semanticLayer.executeMultiCubeQuery({\n    measures: [&#39;Sales.totalRevenue&#39;],\n    dimensions: [&#39;Sales.date&#39;],\n    timeDimensions: [{\n      dimension: &#39;Sales.date&#39;,\n      granularity: &#39;month&#39;,\n      dateRange: &#39;last 12 months&#39;\n    }]\n  }, { organisationId: &#39;org-123&#39; })\n  \n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Analytics Dashboard&lt;/h1&gt;\n      &lt;DashboardClient \n        initialMetadata={metadata}\n        initialData={initialData}\n        apiBasePath=&quot;/api/cubejs/v1&quot;\n      /&gt;\n    &lt;/div&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// app/dashboard/page.tsx\nimport { semanticLayer } from &#39;@/lib/cube-config&#39;\nimport { DashboardClient } from &#39;./dashboard-client&#39;\n\nexport default async function DashboardPage() {\n  // Get metadata on server-side for faster initial load\n  const metadata = semanticLayer.getMetadata()\n  \n  // Optionally, pre-fetch some data\n  const initialData = await semanticLayer.executeMultiCubeQuery({\n    measures: [&#39;Sales.totalRevenue&#39;],\n    dimensions: [&#39;Sales.date&#39;],\n    timeDimensions: [{\n      dimension: &#39;Sales.date&#39;,\n      granularity: &#39;month&#39;,\n      dateRange: &#39;last 12 months&#39;\n    }]\n  }, { organisationId: &#39;org-123&#39; })\n  \n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Analytics Dashboard&lt;/h1&gt;\n      &lt;DashboardClient \n        initialMetadata={metadata}\n        initialData={initialData}\n        apiBasePath=&quot;/api/cubejs/v1&quot;\n      /&gt;\n    &lt;/div&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"client-component\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Client Component</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// app/dashboard/dashboard-client.tsx\n&#39;use client&#39;\n\nimport { CubeProvider } from &#39;drizzle-cube/client&#39;\n\ninterface DashboardClientProps {\n  initialMetadata: any\n  initialData?: any\n  apiBasePath: string\n}\n\nexport function DashboardClient({ \n  initialMetadata, \n  initialData, \n  apiBasePath \n}: DashboardClientProps) {\n  return (\n    &lt;CubeProvider \n      apiUrl={apiBasePath}\n      headers={{\n        &#39;Authorization&#39;: `Bearer ${getToken()}`\n      }}\n    &gt;\n      &lt;Dashboard \n        initialMetadata={initialMetadata}\n        initialData={initialData}\n      /&gt;\n    &lt;/CubeProvider&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// app/dashboard/dashboard-client.tsx\n&#39;use client&#39;\n\nimport { CubeProvider } from &#39;drizzle-cube/client&#39;\n\ninterface DashboardClientProps {\n  initialMetadata: any\n  initialData?: any\n  apiBasePath: string\n}\n\nexport function DashboardClient({ \n  initialMetadata, \n  initialData, \n  apiBasePath \n}: DashboardClientProps) {\n  return (\n    &lt;CubeProvider \n      apiUrl={apiBasePath}\n      headers={{\n        &#39;Authorization&#39;: `Bearer ${getToken()}`\n      }}\n    &gt;\n      &lt;Dashboard \n        initialMetadata={initialMetadata}\n        initialData={initialData}\n      /&gt;\n    &lt;/CubeProvider&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"error-handling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Handling</h2><h3 id=\"global-error-handling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Global Error Handling</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// app/api/cubejs/v1/error.ts\nimport { NextRequest } from &#39;next/server&#39;\n\nexport default function ErrorHandler(\n  error: Error,\n  request: NextRequest\n) {\n  console.error(&#39;Cube API Error:&#39;, error)\n  \n  // Log to external service\n  if (process.env.NODE_ENV === &#39;production&#39;) {\n    logErrorToService(error, request)\n  }\n  \n  return NextResponse.json({\n    error: &#39;Internal server error&#39;,\n    requestId: request.headers.get(&#39;x-request-id&#39;)\n  }, { status: 500 })\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// app/api/cubejs/v1/error.ts\nimport { NextRequest } from &#39;next/server&#39;\n\nexport default function ErrorHandler(\n  error: Error,\n  request: NextRequest\n) {\n  console.error(&#39;Cube API Error:&#39;, error)\n  \n  // Log to external service\n  if (process.env.NODE_ENV === &#39;production&#39;) {\n    logErrorToService(error, request)\n  }\n  \n  return NextResponse.json({\n    error: &#39;Internal server error&#39;,\n    requestId: request.headers.get(&#39;x-request-id&#39;)\n  }, { status: 500 })\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"custom-error-responses\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Error Responses</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; {\n    try {\n      return await getContext(request)\n    } catch (error) {\n      if (error.message === &#39;Unauthorized&#39;) {\n        throw new Error(&#39;Please log in to access analytics&#39;)\n      }\n      throw error\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; {\n    try {\n      return await getContext(request)\n    } catch (error) {\n      if (error.message === &#39;Unauthorized&#39;) {\n        throw new Error(&#39;Please log in to access analytics&#39;)\n      }\n      throw error\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance-optimization\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Optimization</h2><h3 id=\"caching\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Caching</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// app/api/cubejs/v1/meta/route.ts\nimport { unstable_cache } from &#39;next/cache&#39;\n\nconst getCachedMetadata = unstable_cache(\n  async () =&gt; semanticLayer.getMetadata(),\n  [&#39;cube-metadata&#39;],\n  { revalidate: 3600 } // Cache for 1 hour\n)\n\nexport async function GET() {\n  const metadata = await getCachedMetadata()\n  return NextResponse.json({ cubes: metadata })\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// app/api/cubejs/v1/meta/route.ts\nimport { unstable_cache } from &#39;next/cache&#39;\n\nconst getCachedMetadata = unstable_cache(\n  async () =&gt; semanticLayer.getMetadata(),\n  [&#39;cube-metadata&#39;],\n  { revalidate: 3600 } // Cache for 1 hour\n)\n\nexport async function GET() {\n  const metadata = await getCachedMetadata()\n  return NextResponse.json({ cubes: metadata })\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"database-connection-pooling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Database Connection Pooling</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// lib/database.ts\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\n\n// Configure connection pooling\nconst client = postgres(process.env.DATABASE_URL!, {\n  max: 20,\n  idle_timeout: 20,\n  max_lifetime: 60 * 30\n})\n\nexport const db = drizzle(client, { schema })</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// lib/database.ts\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\n\n// Configure connection pooling\nconst client = postgres(process.env.DATABASE_URL!, {\n  max: 20,\n  idle_timeout: 20,\n  max_lifetime: 60 * 30\n})\n\nexport const db = drizzle(client, { schema })\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"deployment\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Deployment</h2><h3 id=\"vercel-deployment\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Vercel Deployment</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// vercel.json\n{\n  &quot;functions&quot;: {\n    &quot;app/api/cubejs/v1/[...endpoint]/route.ts&quot;: {\n      &quot;maxDuration&quot;: 30\n    }\n  },\n  &quot;env&quot;: {\n    &quot;DATABASE_URL&quot;: &quot;@database-url&quot;\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// vercel.json\n{\n  &quot;functions&quot;: {\n    &quot;app/api/cubejs/v1/[...endpoint]/route.ts&quot;: {\n      &quot;maxDuration&quot;: 30\n    }\n  },\n  &quot;env&quot;: {\n    &quot;DATABASE_URL&quot;: &quot;@database-url&quot;\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"environment-variables\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Environment Variables</h3><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\"># .env.local\nDATABASE_URL=postgresql://user:password@localhost:5432/mydb\nNEXTAUTH_SECRET=your-secret-here\nNEXTAUTH_URL=http://localhost:3000\nJWT_SECRET=your-jwt-secret</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"# .env.local\nDATABASE_URL=postgresql://user:password@localhost:5432/mydb\nNEXTAUTH_SECRET=your-secret-here\nNEXTAUTH_URL=http://localhost:3000\nJWT_SECRET=your-jwt-secret\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"typescript-configuration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">TypeScript Configuration</h2><h3 id=\"tsconfigjson\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">tsconfig.json</h3><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;es2017&quot;,\n    &quot;lib&quot;: [&quot;dom&quot;, &quot;dom.iterable&quot;, &quot;es6&quot;],\n    &quot;allowJs&quot;: true,\n    &quot;skipLibCheck&quot;: true,\n    &quot;strict&quot;: true,\n    &quot;forceConsistentCasingInFileNames&quot;: true,\n    &quot;noEmit&quot;: true,\n    &quot;esModuleInterop&quot;: true,\n    &quot;module&quot;: &quot;esnext&quot;,\n    &quot;moduleResolution&quot;: &quot;node&quot;,\n    &quot;resolveJsonModule&quot;: true,\n    &quot;isolatedModules&quot;: true,\n    &quot;jsx&quot;: &quot;preserve&quot;,\n    &quot;incremental&quot;: true,\n    &quot;plugins&quot;: [\n      {\n        &quot;name&quot;: &quot;next&quot;\n      }\n    ],\n    &quot;baseUrl&quot;: &quot;.&quot;,\n    &quot;paths&quot;: {\n      &quot;@/*&quot;: [&quot;./*&quot;]\n    }\n  },\n  &quot;include&quot;: [&quot;next-env.d.ts&quot;, &quot;**/*.ts&quot;, &quot;**/*.tsx&quot;, &quot;.next/types/**/*.ts&quot;],\n  &quot;exclude&quot;: [&quot;node_modules&quot;]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;es2017&quot;,\n    &quot;lib&quot;: [&quot;dom&quot;, &quot;dom.iterable&quot;, &quot;es6&quot;],\n    &quot;allowJs&quot;: true,\n    &quot;skipLibCheck&quot;: true,\n    &quot;strict&quot;: true,\n    &quot;forceConsistentCasingInFileNames&quot;: true,\n    &quot;noEmit&quot;: true,\n    &quot;esModuleInterop&quot;: true,\n    &quot;module&quot;: &quot;esnext&quot;,\n    &quot;moduleResolution&quot;: &quot;node&quot;,\n    &quot;resolveJsonModule&quot;: true,\n    &quot;isolatedModules&quot;: true,\n    &quot;jsx&quot;: &quot;preserve&quot;,\n    &quot;incremental&quot;: true,\n    &quot;plugins&quot;: [\n      {\n        &quot;name&quot;: &quot;next&quot;\n      }\n    ],\n    &quot;baseUrl&quot;: &quot;.&quot;,\n    &quot;paths&quot;: {\n      &quot;@/*&quot;: [&quot;./*&quot;]\n    }\n  },\n  &quot;include&quot;: [&quot;next-env.d.ts&quot;, &quot;**/*.ts&quot;, &quot;**/*.tsx&quot;, &quot;.next/types/**/*.ts&quot;],\n  &quot;exclude&quot;: [&quot;node_modules&quot;]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"examples\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Examples</h2><h3 id=\"complete-example-app\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Complete Example App</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">See the <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">/examples/nextjs-app</code> directory for a complete working example with:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Authentication using NextAuth.js</li><li class=\"leading-relaxed\">Dashboard with multiple charts</li><li class=\"leading-relaxed\">Real-time data updates</li><li class=\"leading-relaxed\">TypeScript throughout</li><li class=\"leading-relaxed\">Edge Runtime deployment</li></ul><h3 id=\"migration-from-cubejs\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Migration from Cube.js</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Before (Cube.js)\nimport { CubejsServerCore } from &#39;@cubejs-backend/server-core&#39;\n\nconst serverCore = CubejsServerCore.create({\n  schemaPath: &#39;schema&#39;,\n  dbType: &#39;postgres&#39;,\n  driverFactory: () =&gt; new PostgresDriver()\n})\n\n// After (Drizzle Cube)\nimport { createCubeHandlers } from &#39;drizzle-cube/adapters/nextjs&#39;\n\nconst handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; ({ organisationId: &#39;org-123&#39; })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Before (Cube.js)\nimport { CubejsServerCore } from &#39;@cubejs-backend/server-core&#39;\n\nconst serverCore = CubejsServerCore.create({\n  schemaPath: &#39;schema&#39;,\n  dbType: &#39;postgres&#39;,\n  driverFactory: () =&gt; new PostgresDriver()\n})\n\n// After (Drizzle Cube)\nimport { createCubeHandlers } from &#39;drizzle-cube/adapters/nextjs&#39;\n\nconst handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; ({ organisationId: &#39;org-123&#39; })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"troubleshooting\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Troubleshooting</h2><h3 id=\"common-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Common Issues</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Issue</strong>: <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">Cannot find module &amp;#39;next/server&amp;#39;</code>\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Ensure Next.js 15+ is installed: <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">npm install next@latest</code></p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Issue</strong>: Edge Runtime errors\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Use only Web APIs and edge-compatible libraries</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Issue</strong>: CORS errors in development\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Add localhost to CORS origins:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">cors: {\n  origin: [&#39;http://localhost:3000&#39;, &#39;http://localhost:3001&#39;]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"cors: {\n  origin: [&#39;http://localhost:3000&#39;, &#39;http://localhost:3001&#39;]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Issue</strong>: Authentication context not available\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Ensure <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">getSecurityContext</code> returns the required context:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">getSecurityContext: async (request) =&gt; {\n  // Must return an object with organisationId\n  return { organisationId: &#39;required-field&#39; }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"getSecurityContext: async (request) =&gt; {\n  // Must return an object with organisationId\n  return { organisationId: &#39;required-field&#39; }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"debug-mode\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Debug Mode</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Enable debug logging\nconst handlers = createCubeHandlers({\n  // ... other options\n  getSecurityContext: async (request, context) =&gt; {\n    console.log(&#39;Request headers:&#39;, Object.fromEntries(request.headers))\n    console.log(&#39;Route context:&#39;, context)\n    \n    const securityContext = await extractContext(request)\n    console.log(&#39;Security context:&#39;, securityContext)\n    \n    return securityContext\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Enable debug logging\nconst handlers = createCubeHandlers({\n  // ... other options\n  getSecurityContext: async (request, context) =&gt; {\n    console.log(&#39;Request headers:&#39;, Object.fromEntries(request.headers))\n    console.log(&#39;Route context:&#39;, context)\n    \n    const securityContext = await extractContext(request)\n    console.log(&#39;Security context:&#39;, securityContext)\n    \n    return securityContext\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"contributing\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Contributing</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Found a bug or want to contribute? Please see our <a href=\"../../../CONTRIBUTING.md\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Contributing Guide</a> for details on how to get started.</p><h2 id=\"license\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">License</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">This project is licensed under the MIT License - see the <a href=\"../../../LICENSE\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">LICENSE</a> file for details.</p>",
    "path": "external:../src/adapters/nextjs/README.md"
  },
  {
    "slug": "advanced/performance",
    "title": "Performance",
    "content": "<h1 id=\"performance\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Performance</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube is designed for high-performance analytics with multiple optimization strategies built on Drizzle ORM&#39;s efficient query generation and execution. This guide covers performance optimization techniques, monitoring, and best practices.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Performance in Drizzle Cube is achieved through:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Drizzle ORM Query Optimization</strong>: Prepared statements and efficient SQL generation</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Database-Level Optimization</strong>: Proper indexing and query planning</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Application-Level Caching</strong>: Result set caching and query memoization</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Smart Query Execution</strong>: Query path resolution and join optimization</li></ul><h2 id=\"database-performance\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Database Performance</h2><h3 id=\"query-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Optimization</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube generates optimized SQL through Drizzle ORM&#39;s query builder:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Efficient query generation\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  joins: [\n    {\n      table: departments,\n      on: eq(employees.departmentId, departments.id), // Uses index\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(employees.organisationId, ctx.securityContext.organisationId) // Indexed filter\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Efficient query generation\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  joins: [\n    {\n      table: departments,\n      on: eq(employees.departmentId, departments.id), // Uses index\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(employees.organisationId, ctx.securityContext.organisationId) // Indexed filter\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Optimization Features:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Prepared statements prevent SQL injection and improve performance</li><li class=\"leading-relaxed\">Parameter binding reduces query parsing overhead</li><li class=\"leading-relaxed\">Efficient join ordering based on selectivity</li><li class=\"leading-relaxed\">Automatic WHERE clause optimization</li></ul><h3 id=\"database-indexing\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Database Indexing</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Proper indexing is crucial for Drizzle Cube performance:</p><div class=\"relative group\">\n    <pre class=\"language-sql rounded-lg overflow-x-auto mb-4\"><code class=\"language-sql\">-- Essential indexes for multi-tenant security\nCREATE INDEX idx_employees_organisation_id ON employees(organisation_id);\nCREATE INDEX idx_departments_organisation_id ON departments(organisation_id);\nCREATE INDEX idx_productivity_organisation_id ON productivity(organisation_id);\n\n-- Foreign key indexes for joins\nCREATE INDEX idx_employees_department_id ON employees(department_id);\nCREATE INDEX idx_productivity_employee_id ON productivity(employee_id);\n\n-- Time dimension indexes for time-series queries\nCREATE INDEX idx_productivity_date ON productivity(date);\nCREATE INDEX idx_employees_created_at ON employees(created_at);\n\n-- Composite indexes for common query patterns\nCREATE INDEX idx_employees_org_dept ON employees(organisation_id, department_id);\nCREATE INDEX idx_productivity_org_date ON productivity(organisation_id, date);</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"-- Essential indexes for multi-tenant security\nCREATE INDEX idx_employees_organisation_id ON employees(organisation_id);\nCREATE INDEX idx_departments_organisation_id ON departments(organisation_id);\nCREATE INDEX idx_productivity_organisation_id ON productivity(organisation_id);\n\n-- Foreign key indexes for joins\nCREATE INDEX idx_employees_department_id ON employees(department_id);\nCREATE INDEX idx_productivity_employee_id ON productivity(employee_id);\n\n-- Time dimension indexes for time-series queries\nCREATE INDEX idx_productivity_date ON productivity(date);\nCREATE INDEX idx_employees_created_at ON employees(created_at);\n\n-- Composite indexes for common query patterns\nCREATE INDEX idx_employees_org_dept ON employees(organisation_id, department_id);\nCREATE INDEX idx_productivity_org_date ON productivity(organisation_id, date);\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"query-execution-plans\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Execution Plans</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Monitor and optimize query execution:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Enable query logging for performance analysis\nexport const performanceTestCube: Cube&lt;Schema&gt; = defineCube(&#39;Performance&#39;, {\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n    // Log query execution time in development\n    if (process.env.NODE_ENV === &#39;development&#39;) {\n      console.time(`Query: ${ctx.cube.name}`)\n    }\n    \n    return {\n      from: largeTable,\n      where: and(\n        eq(largeTable.organisationId, ctx.securityContext.organisationId),\n        // Add selective filters early\n        gte(largeTable.createdAt, ctx.query.dateRange?.[0] || &#39;2023-01-01&#39;)\n      )\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Enable query logging for performance analysis\nexport const performanceTestCube: Cube&lt;Schema&gt; = defineCube(&#39;Performance&#39;, {\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n    // Log query execution time in development\n    if (process.env.NODE_ENV === &#39;development&#39;) {\n      console.time(`Query: ${ctx.cube.name}`)\n    }\n    \n    return {\n      from: largeTable,\n      where: and(\n        eq(largeTable.organisationId, ctx.securityContext.organisationId),\n        // Add selective filters early\n        gte(largeTable.createdAt, ctx.query.dateRange?.[0] || &#39;2023-01-01&#39;)\n      )\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"application-performance\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Application Performance</h2><h3 id=\"result-set-caching\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Result Set Caching</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube provides basic query memoization. For advanced caching, you can implement additional caching layers:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Client-side caching with useCubeQuery\nfunction CachedQuery() {\n  const query = useMemo(() =&gt; ({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;]\n  }), []) // Memoize query to enable caching\n\n  const { resultSet } = useCubeQuery(query) // Automatically cached\n}\n\n// Server-side result caching\nclass CachedSemanticLayer extends SemanticLayerCompiler {\n  private cache = new Map&lt;string, { result: any; timestamp: number }&gt;()\n  \n  async load(query: SemanticQuery, context: SecurityContext) {\n    const cacheKey = this.getCacheKey(query, context)\n    const cached = this.cache.get(cacheKey)\n    \n    // Return cached result if fresh (5 minutes)\n    if (cached &amp;&amp; Date.now() - cached.timestamp &lt; 300000) {\n      return cached.result\n    }\n    \n    const result = await super.load(query, context)\n    \n    this.cache.set(cacheKey, {\n      result,\n      timestamp: Date.now()\n    })\n    \n    return result\n  }\n  \n  private getCacheKey(query: SemanticQuery, context: SecurityContext): string {\n    return `${context.organisationId}:${JSON.stringify(query)}`\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Client-side caching with useCubeQuery\nfunction CachedQuery() {\n  const query = useMemo(() =&gt; ({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;]\n  }), []) // Memoize query to enable caching\n\n  const { resultSet } = useCubeQuery(query) // Automatically cached\n}\n\n// Server-side result caching\nclass CachedSemanticLayer extends SemanticLayerCompiler {\n  private cache = new Map&lt;string, { result: any; timestamp: number }&gt;()\n  \n  async load(query: SemanticQuery, context: SecurityContext) {\n    const cacheKey = this.getCacheKey(query, context)\n    const cached = this.cache.get(cacheKey)\n    \n    // Return cached result if fresh (5 minutes)\n    if (cached &amp;&amp; Date.now() - cached.timestamp &lt; 300000) {\n      return cached.result\n    }\n    \n    const result = await super.load(query, context)\n    \n    this.cache.set(cacheKey, {\n      result,\n      timestamp: Date.now()\n    })\n    \n    return result\n  }\n  \n  private getCacheKey(query: SemanticQuery, context: SecurityContext): string {\n    return `${context.organisationId}:${JSON.stringify(query)}`\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><blockquote class=\"border-l-4 border-drizzle-400 pl-4 italic text-gray-600 mb-4 bg-drizzle-50 py-2\">**Note**: The `CachedSemanticLayer` example above is custom implementation code that you would need to build. Drizzle Cube currently provides basic client-side query memoization but does not include built-in server-side result caching.</blockquote><h3 id=\"query-batching\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Batching</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Batch multiple queries for efficiency:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Batch multiple related queries\nasync function loadDashboardData(\n  semanticLayer: SemanticLayerCompiler,\n  context: SecurityContext\n) {\n  // Execute queries in parallel\n  const [employeeMetrics, revenueData, productivityStats] = await Promise.all([\n    semanticLayer.load({\n      measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n      dimensions: [&#39;Employees.departmentName&#39;]\n    }, context),\n    \n    semanticLayer.load({\n      measures: [&#39;Orders.totalRevenue&#39;],\n      timeDimensions: [{\n        dimension: &#39;Orders.createdAt&#39;,\n        granularity: &#39;month&#39;\n      }]\n    }, context),\n    \n    semanticLayer.load({\n      measures: [&#39;Productivity.avgLinesOfCode&#39;],\n      dimensions: [&#39;Productivity.employeeName&#39;]\n    }, context)\n  ])\n\n  return {\n    employees: employeeMetrics.rawData(),\n    revenue: revenueData.rawData(), \n    productivity: productivityStats.rawData()\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Batch multiple related queries\nasync function loadDashboardData(\n  semanticLayer: SemanticLayerCompiler,\n  context: SecurityContext\n) {\n  // Execute queries in parallel\n  const [employeeMetrics, revenueData, productivityStats] = await Promise.all([\n    semanticLayer.load({\n      measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n      dimensions: [&#39;Employees.departmentName&#39;]\n    }, context),\n    \n    semanticLayer.load({\n      measures: [&#39;Orders.totalRevenue&#39;],\n      timeDimensions: [{\n        dimension: &#39;Orders.createdAt&#39;,\n        granularity: &#39;month&#39;\n      }]\n    }, context),\n    \n    semanticLayer.load({\n      measures: [&#39;Productivity.avgLinesOfCode&#39;],\n      dimensions: [&#39;Productivity.employeeName&#39;]\n    }, context)\n  ])\n\n  return {\n    employees: employeeMetrics.rawData(),\n    revenue: revenueData.rawData(), \n    productivity: productivityStats.rawData()\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"connection-pooling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Connection Pooling</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Optimize database connections:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// PostgreSQL with connection pooling\nimport postgres from &#39;postgres&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\n\nconst sql = postgres(connectionString, {\n  max: 20,              // Maximum connections\n  idle_timeout: 20,     // Close connections after 20s idle\n  connect_timeout: 10,  // 10s connection timeout\n  prepare: true         // Use prepared statements\n})\n\nconst db = drizzle(sql, { schema })\n\n// Create executor with optimized connection\nconst executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// PostgreSQL with connection pooling\nimport postgres from &#39;postgres&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\n\nconst sql = postgres(connectionString, {\n  max: 20,              // Maximum connections\n  idle_timeout: 20,     // Close connections after 20s idle\n  connect_timeout: 10,  // 10s connection timeout\n  prepare: true         // Use prepared statements\n})\n\nconst db = drizzle(sql, { schema })\n\n// Create executor with optimized connection\nconst executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"frontend-performance\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Frontend Performance</h2><h3 id=\"react-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">React Optimization</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Optimize React components for better performance:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { memo, useMemo, useCallback } from &#39;react&#39;\n\n// Memoize chart components\nconst OptimizedBarChart = memo(RechartsBarChart)\n\n// Memoize expensive calculations\nfunction DashboardCard({ query, config }) {\n  const memoizedQuery = useMemo(() =&gt; query, [JSON.stringify(query)])\n  \n  const handleRefresh = useCallback(() =&gt; {\n    // Handle refresh without recreating function\n  }, [])\n\n  const { resultSet, isLoading } = useCubeQuery(memoizedQuery)\n  \n  return (\n    &lt;OptimizedBarChart \n      resultSet={resultSet}\n      chartConfig={config}\n      onRefresh={handleRefresh}\n    /&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { memo, useMemo, useCallback } from &#39;react&#39;\n\n// Memoize chart components\nconst OptimizedBarChart = memo(RechartsBarChart)\n\n// Memoize expensive calculations\nfunction DashboardCard({ query, config }) {\n  const memoizedQuery = useMemo(() =&gt; query, [JSON.stringify(query)])\n  \n  const handleRefresh = useCallback(() =&gt; {\n    // Handle refresh without recreating function\n  }, [])\n\n  const { resultSet, isLoading } = useCubeQuery(memoizedQuery)\n  \n  return (\n    &lt;OptimizedBarChart \n      resultSet={resultSet}\n      chartConfig={config}\n      onRefresh={handleRefresh}\n    /&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"lazy-loading\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Lazy Loading</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Load components and data on demand:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { lazy, Suspense } from &#39;react&#39;\n\n// Lazy load chart components\nconst LazyBarChart = lazy(() =&gt; \n  import(&#39;drizzle-cube/client&#39;).then(m =&gt; ({ default: m.RechartsBarChart }))\n)\n\n// Lazy load heavy dashboards\nconst LazyDashboard = lazy(() =&gt; import(&#39;./HeavyDashboard&#39;))\n\nfunction App() {\n  return (\n    &lt;Suspense fallback={&lt;ChartSkeleton /&gt;}&gt;\n      &lt;LazyBarChart resultSet={resultSet} /&gt;\n      &lt;LazyDashboard /&gt;\n    &lt;/Suspense&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { lazy, Suspense } from &#39;react&#39;\n\n// Lazy load chart components\nconst LazyBarChart = lazy(() =&gt; \n  import(&#39;drizzle-cube/client&#39;).then(m =&gt; ({ default: m.RechartsBarChart }))\n)\n\n// Lazy load heavy dashboards\nconst LazyDashboard = lazy(() =&gt; import(&#39;./HeavyDashboard&#39;))\n\nfunction App() {\n  return (\n    &lt;Suspense fallback={&lt;ChartSkeleton /&gt;}&gt;\n      &lt;LazyBarChart resultSet={resultSet} /&gt;\n      &lt;LazyDashboard /&gt;\n    &lt;/Suspense&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"virtual-scrolling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Virtual Scrolling</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Handle large datasets efficiently:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Virtual scrolling for large data tables\nimport { FixedSizeList as List } from &#39;react-window&#39;\n\nfunction LargeDataTable({ resultSet }) {\n  const data = resultSet.rawData()\n  \n  const Row = ({ index, style }) =&gt; (\n    &lt;div style={style}&gt;\n      {Object.values(data[index]).join(&#39; | &#39;)}\n    &lt;/div&gt;\n  )\n\n  return (\n    &lt;List\n      height={400}\n      itemCount={data.length}\n      itemSize={35}\n      overscanCount={5}\n    &gt;\n      {Row}\n    &lt;/List&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Virtual scrolling for large data tables\nimport { FixedSizeList as List } from &#39;react-window&#39;\n\nfunction LargeDataTable({ resultSet }) {\n  const data = resultSet.rawData()\n  \n  const Row = ({ index, style }) =&gt; (\n    &lt;div style={style}&gt;\n      {Object.values(data[index]).join(&#39; | &#39;)}\n    &lt;/div&gt;\n  )\n\n  return (\n    &lt;List\n      height={400}\n      itemCount={data.length}\n      itemSize={35}\n      overscanCount={5}\n    &gt;\n      {Row}\n    &lt;/List&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"monitoring-and-profiling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Monitoring and Profiling</h2><h3 id=\"performance-metrics\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Performance Metrics</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Track key performance indicators:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Performance monitoring middleware\nclass PerformanceMonitor {\n  private metrics = new Map&lt;string, number[]&gt;()\n\n  async measureQuery&lt;T&gt;(\n    operation: string,\n    queryFn: () =&gt; Promise&lt;T&gt;\n  ): Promise&lt;T&gt; {\n    const startTime = performance.now()\n    \n    try {\n      const result = await queryFn()\n      const duration = performance.now() - startTime\n      \n      this.recordMetric(operation, duration)\n      \n      // Log slow queries\n      if (duration &gt; 1000) {\n        console.warn(`Slow query detected: ${operation} took ${duration}ms`)\n      }\n      \n      return result\n    } catch (error) {\n      const duration = performance.now() - startTime\n      console.error(`Query failed: ${operation} after ${duration}ms`, error)\n      throw error\n    }\n  }\n\n  private recordMetric(operation: string, duration: number) {\n    if (!this.metrics.has(operation)) {\n      this.metrics.set(operation, [])\n    }\n    \n    const metrics = this.metrics.get(operation)!\n    metrics.push(duration)\n    \n    // Keep only last 100 measurements\n    if (metrics.length &gt; 100) {\n      metrics.shift()\n    }\n  }\n\n  getAverageTime(operation: string): number {\n    const metrics = this.metrics.get(operation)\n    if (!metrics || metrics.length === 0) return 0\n    \n    return metrics.reduce((sum, time) =&gt; sum + time, 0) / metrics.length\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Performance monitoring middleware\nclass PerformanceMonitor {\n  private metrics = new Map&lt;string, number[]&gt;()\n\n  async measureQuery&lt;T&gt;(\n    operation: string,\n    queryFn: () =&gt; Promise&lt;T&gt;\n  ): Promise&lt;T&gt; {\n    const startTime = performance.now()\n    \n    try {\n      const result = await queryFn()\n      const duration = performance.now() - startTime\n      \n      this.recordMetric(operation, duration)\n      \n      // Log slow queries\n      if (duration &gt; 1000) {\n        console.warn(`Slow query detected: ${operation} took ${duration}ms`)\n      }\n      \n      return result\n    } catch (error) {\n      const duration = performance.now() - startTime\n      console.error(`Query failed: ${operation} after ${duration}ms`, error)\n      throw error\n    }\n  }\n\n  private recordMetric(operation: string, duration: number) {\n    if (!this.metrics.has(operation)) {\n      this.metrics.set(operation, [])\n    }\n    \n    const metrics = this.metrics.get(operation)!\n    metrics.push(duration)\n    \n    // Keep only last 100 measurements\n    if (metrics.length &gt; 100) {\n      metrics.shift()\n    }\n  }\n\n  getAverageTime(operation: string): number {\n    const metrics = this.metrics.get(operation)\n    if (!metrics || metrics.length === 0) return 0\n    \n    return metrics.reduce((sum, time) =&gt; sum + time, 0) / metrics.length\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"query-analysis\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Analysis</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Analyze query patterns and performance:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Query performance analyzer\nclass QueryAnalyzer {\n  private queryLog: Array&lt;{\n    query: SemanticQuery\n    context: SecurityContext\n    duration: number\n    resultSize: number\n    timestamp: Date\n  }&gt; = []\n\n  logQuery(\n    query: SemanticQuery, \n    context: SecurityContext, \n    duration: number, \n    resultSize: number\n  ) {\n    this.queryLog.push({\n      query,\n      context,\n      duration,\n      resultSize,\n      timestamp: new Date()\n    })\n\n    // Analyze for optimization opportunities\n    this.analyzeQuery(query, duration, resultSize)\n  }\n\n  private analyzeQuery(query: SemanticQuery, duration: number, resultSize: number) {\n    // Flag expensive queries\n    if (duration &gt; 5000) {\n      console.warn(&#39;Expensive query detected:&#39;, {\n        cubes: query.measures?.map(m =&gt; m.split(&#39;.&#39;)[0]),\n        duration,\n        resultSize\n      })\n    }\n\n    // Flag large result sets\n    if (resultSize &gt; 10000) {\n      console.warn(&#39;Large result set:&#39;, {\n        query,\n        resultSize,\n        suggestion: &#39;Consider adding filters or pagination&#39;\n      })\n    }\n\n    // Suggest optimizations\n    if (!query.filters?.length &amp;&amp; duration &gt; 1000) {\n      console.info(&#39;Consider adding filters to improve performance&#39;)\n    }\n  }\n\n  getSlowQueries(threshold: number = 1000) {\n    return this.queryLog\n      .filter(log =&gt; log.duration &gt; threshold)\n      .sort((a, b) =&gt; b.duration - a.duration)\n  }\n\n  getCubeUsageStats() {\n    const stats = new Map&lt;string, { count: number; avgDuration: number }&gt;()\n    \n    this.queryLog.forEach(log =&gt; {\n      const cubes = log.query.measures?.map(m =&gt; m.split(&#39;.&#39;)[0]) || []\n      \n      cubes.forEach(cube =&gt; {\n        if (!stats.has(cube)) {\n          stats.set(cube, { count: 0, avgDuration: 0 })\n        }\n        \n        const stat = stats.get(cube)!\n        stat.count++\n        stat.avgDuration = (stat.avgDuration * (stat.count - 1) + log.duration) / stat.count\n      })\n    })\n    \n    return stats\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Query performance analyzer\nclass QueryAnalyzer {\n  private queryLog: Array&lt;{\n    query: SemanticQuery\n    context: SecurityContext\n    duration: number\n    resultSize: number\n    timestamp: Date\n  }&gt; = []\n\n  logQuery(\n    query: SemanticQuery, \n    context: SecurityContext, \n    duration: number, \n    resultSize: number\n  ) {\n    this.queryLog.push({\n      query,\n      context,\n      duration,\n      resultSize,\n      timestamp: new Date()\n    })\n\n    // Analyze for optimization opportunities\n    this.analyzeQuery(query, duration, resultSize)\n  }\n\n  private analyzeQuery(query: SemanticQuery, duration: number, resultSize: number) {\n    // Flag expensive queries\n    if (duration &gt; 5000) {\n      console.warn(&#39;Expensive query detected:&#39;, {\n        cubes: query.measures?.map(m =&gt; m.split(&#39;.&#39;)[0]),\n        duration,\n        resultSize\n      })\n    }\n\n    // Flag large result sets\n    if (resultSize &gt; 10000) {\n      console.warn(&#39;Large result set:&#39;, {\n        query,\n        resultSize,\n        suggestion: &#39;Consider adding filters or pagination&#39;\n      })\n    }\n\n    // Suggest optimizations\n    if (!query.filters?.length &amp;&amp; duration &gt; 1000) {\n      console.info(&#39;Consider adding filters to improve performance&#39;)\n    }\n  }\n\n  getSlowQueries(threshold: number = 1000) {\n    return this.queryLog\n      .filter(log =&gt; log.duration &gt; threshold)\n      .sort((a, b) =&gt; b.duration - a.duration)\n  }\n\n  getCubeUsageStats() {\n    const stats = new Map&lt;string, { count: number; avgDuration: number }&gt;()\n    \n    this.queryLog.forEach(log =&gt; {\n      const cubes = log.query.measures?.map(m =&gt; m.split(&#39;.&#39;)[0]) || []\n      \n      cubes.forEach(cube =&gt; {\n        if (!stats.has(cube)) {\n          stats.set(cube, { count: 0, avgDuration: 0 })\n        }\n        \n        const stat = stats.get(cube)!\n        stat.count++\n        stat.avgDuration = (stat.avgDuration * (stat.count - 1) + log.duration) / stat.count\n      })\n    })\n    \n    return stats\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance-best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Best Practices</h2><h3 id=\"query-design\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Design</h3><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Filter Early</strong>: Apply most selective filters first</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Limit Results</strong>: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">limit</code> and pagination for large datasets</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Index Foreign Keys</strong>: Ensure all join columns are indexed</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Avoid N+1 Queries</strong>: Use joins instead of separate queries</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Time Range Filters</strong>: Always filter time dimensions to reasonable ranges</li></ol><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Good: Selective filtering\nconst optimizedQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  filters: [\n    { member: &#39;Employees.isActive&#39;, operator: &#39;equals&#39;, values: [true] },\n    { member: &#39;Employees.createdAt&#39;, operator: &#39;inDateRange&#39;, values: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;] }\n  ],\n  limit: 100\n}\n\n// Bad: No filtering, potentially large result set\nconst unoptimizedQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.name&#39;] // Could return thousands of rows\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Good: Selective filtering\nconst optimizedQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  filters: [\n    { member: &#39;Employees.isActive&#39;, operator: &#39;equals&#39;, values: [true] },\n    { member: &#39;Employees.createdAt&#39;, operator: &#39;inDateRange&#39;, values: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;] }\n  ],\n  limit: 100\n}\n\n// Bad: No filtering, potentially large result set\nconst unoptimizedQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.name&#39;] // Could return thousands of rows\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"database-schema-design\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Database Schema Design</h3><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Proper Indexing</strong>: Index all foreign keys and filter columns</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Denormalization</strong>: Consider denormalizing for read-heavy workloads</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Partitioning</strong>: Partition large tables by date or organization</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Statistics</strong>: Keep database statistics up to date</li></ol><div class=\"relative group\">\n    <pre class=\"language-sql rounded-lg overflow-x-auto mb-4\"><code class=\"language-sql\">-- Partitioning example for large time-series data\nCREATE TABLE productivity (\n    id SERIAL,\n    employee_id INTEGER,\n    organisation_id UUID,\n    date DATE,\n    lines_of_code INTEGER,\n    -- other columns...\n) PARTITION BY RANGE (date);\n\n-- Create partitions\nCREATE TABLE productivity_2023 PARTITION OF productivity\n    FOR VALUES FROM (&#39;2023-01-01&#39;) TO (&#39;2024-01-01&#39;);\n\nCREATE TABLE productivity_2024 PARTITION OF productivity\n    FOR VALUES FROM (&#39;2024-01-01&#39;) TO (&#39;2025-01-01&#39;);</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"-- Partitioning example for large time-series data\nCREATE TABLE productivity (\n    id SERIAL,\n    employee_id INTEGER,\n    organisation_id UUID,\n    date DATE,\n    lines_of_code INTEGER,\n    -- other columns...\n) PARTITION BY RANGE (date);\n\n-- Create partitions\nCREATE TABLE productivity_2023 PARTITION OF productivity\n    FOR VALUES FROM (&#39;2023-01-01&#39;) TO (&#39;2024-01-01&#39;);\n\nCREATE TABLE productivity_2024 PARTITION OF productivity\n    FOR VALUES FROM (&#39;2024-01-01&#39;) TO (&#39;2025-01-01&#39;);\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"application-architecture\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Application Architecture</h3><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Connection Pooling</strong>: Use appropriate pool sizes</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Caching Strategy</strong>: Implement multi-level caching</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Load Balancing</strong>: Distribute load across multiple instances</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Async Processing</strong>: Use background jobs for expensive operations</li></ol><h2 id=\"performance-testing\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Testing</h2><h3 id=\"load-testing\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Load Testing</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Test your Drizzle Cube deployment under load:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Load test script example\nimport { performance } from &#39;perf_hooks&#39;\n\nasync function loadTest() {\n  const queries = [\n    { measures: [&#39;Employees.count&#39;], dimensions: [&#39;Employees.departmentName&#39;] },\n    { measures: [&#39;Orders.totalRevenue&#39;], timeDimensions: [{ dimension: &#39;Orders.createdAt&#39;, granularity: &#39;month&#39; }] },\n    { measures: [&#39;Productivity.avgLinesOfCode&#39;], dimensions: [&#39;Productivity.employeeName&#39;] }\n  ]\n\n  const concurrency = 10\n  const iterations = 100\n\n  console.log(`Starting load test: ${concurrency} concurrent users, ${iterations} iterations`)\n\n  const startTime = performance.now()\n  \n  const promises = Array.from({ length: concurrency }, async () =&gt; {\n    for (let i = 0; i &lt; iterations; i++) {\n      const query = queries[i % queries.length]\n      await fetch(&#39;/cubejs-api/v1/load&#39;, {\n        method: &#39;POST&#39;,\n        headers: { &#39;Content-Type&#39;: &#39;application/json&#39; },\n        body: JSON.stringify({ query })\n      })\n    }\n  })\n\n  await Promise.all(promises)\n  \n  const totalTime = performance.now() - startTime\n  const totalRequests = concurrency * iterations\n  const requestsPerSecond = totalRequests / (totalTime / 1000)\n\n  console.log(`Load test complete:`)\n  console.log(`Total time: ${totalTime}ms`)\n  console.log(`Total requests: ${totalRequests}`)\n  console.log(`Requests per second: ${requestsPerSecond.toFixed(2)}`)\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Load test script example\nimport { performance } from &#39;perf_hooks&#39;\n\nasync function loadTest() {\n  const queries = [\n    { measures: [&#39;Employees.count&#39;], dimensions: [&#39;Employees.departmentName&#39;] },\n    { measures: [&#39;Orders.totalRevenue&#39;], timeDimensions: [{ dimension: &#39;Orders.createdAt&#39;, granularity: &#39;month&#39; }] },\n    { measures: [&#39;Productivity.avgLinesOfCode&#39;], dimensions: [&#39;Productivity.employeeName&#39;] }\n  ]\n\n  const concurrency = 10\n  const iterations = 100\n\n  console.log(`Starting load test: ${concurrency} concurrent users, ${iterations} iterations`)\n\n  const startTime = performance.now()\n  \n  const promises = Array.from({ length: concurrency }, async () =&gt; {\n    for (let i = 0; i &lt; iterations; i++) {\n      const query = queries[i % queries.length]\n      await fetch(&#39;/cubejs-api/v1/load&#39;, {\n        method: &#39;POST&#39;,\n        headers: { &#39;Content-Type&#39;: &#39;application/json&#39; },\n        body: JSON.stringify({ query })\n      })\n    }\n  })\n\n  await Promise.all(promises)\n  \n  const totalTime = performance.now() - startTime\n  const totalRequests = concurrency * iterations\n  const requestsPerSecond = totalRequests / (totalTime / 1000)\n\n  console.log(`Load test complete:`)\n  console.log(`Total time: ${totalTime}ms`)\n  console.log(`Total requests: ${totalRequests}`)\n  console.log(`Requests per second: ${requestsPerSecond.toFixed(2)}`)\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"benchmarking\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Benchmarking</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Compare performance across different configurations:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Benchmark different query patterns\nasync function benchmarkQueries() {\n  const testCases = [\n    { name: &#39;Simple Count&#39;, query: { measures: [&#39;Employees.count&#39;] } },\n    { name: &#39;Grouped Count&#39;, query: { measures: [&#39;Employees.count&#39;], dimensions: [&#39;Employees.departmentName&#39;] } },\n    { name: &#39;Time Series&#39;, query: { measures: [&#39;Employees.count&#39;], timeDimensions: [{ dimension: &#39;Employees.createdAt&#39;, granularity: &#39;month&#39; }] } },\n    { name: &#39;Multi-Cube&#39;, query: { measures: [&#39;Employees.count&#39;, &#39;Departments.totalBudget&#39;] } }\n  ]\n\n  for (const testCase of testCases) {\n    const times = []\n    \n    // Run each test 10 times\n    for (let i = 0; i &lt; 10; i++) {\n      const start = performance.now()\n      await semanticLayer.load(testCase.query, securityContext)\n      const duration = performance.now() - start\n      times.push(duration)\n    }\n\n    const avg = times.reduce((sum, time) =&gt; sum + time, 0) / times.length\n    const min = Math.min(...times)\n    const max = Math.max(...times)\n\n    console.log(`${testCase.name}: avg=${avg.toFixed(2)}ms, min=${min.toFixed(2)}ms, max=${max.toFixed(2)}ms`)\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Benchmark different query patterns\nasync function benchmarkQueries() {\n  const testCases = [\n    { name: &#39;Simple Count&#39;, query: { measures: [&#39;Employees.count&#39;] } },\n    { name: &#39;Grouped Count&#39;, query: { measures: [&#39;Employees.count&#39;], dimensions: [&#39;Employees.departmentName&#39;] } },\n    { name: &#39;Time Series&#39;, query: { measures: [&#39;Employees.count&#39;], timeDimensions: [{ dimension: &#39;Employees.createdAt&#39;, granularity: &#39;month&#39; }] } },\n    { name: &#39;Multi-Cube&#39;, query: { measures: [&#39;Employees.count&#39;, &#39;Departments.totalBudget&#39;] } }\n  ]\n\n  for (const testCase of testCases) {\n    const times = []\n    \n    // Run each test 10 times\n    for (let i = 0; i &lt; 10; i++) {\n      const start = performance.now()\n      await semanticLayer.load(testCase.query, securityContext)\n      const duration = performance.now() - start\n      times.push(duration)\n    }\n\n    const avg = times.reduce((sum, time) =&gt; sum + time, 0) / times.length\n    const min = Math.min(...times)\n    const max = Math.max(...times)\n\n    console.log(`${testCase.name}: avg=${avg.toFixed(2)}ms, min=${min.toFixed(2)}ms, max=${max.toFixed(2)}ms`)\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"common-performance-issues\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Performance Issues</h2><h3 id=\"issue-slow-multi-tenant-queries\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Issue: Slow Multi-Tenant Queries</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Problem</strong>: Queries are slow when filtering by organization\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Add composite indexes on (organisation_id, other_filter_columns)</p><div class=\"relative group\">\n    <pre class=\"language-sql rounded-lg overflow-x-auto mb-4\"><code class=\"language-sql\">CREATE INDEX idx_employees_org_active ON employees(organisation_id, active);\nCREATE INDEX idx_productivity_org_date ON productivity(organisation_id, date);</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"CREATE INDEX idx_employees_org_active ON employees(organisation_id, active);\nCREATE INDEX idx_productivity_org_date ON productivity(organisation_id, date);\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"issue-large-result-sets\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Issue: Large Result Sets</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Problem</strong>: Queries returning thousands of rows cause memory issues\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Implement pagination and result limiting</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Add pagination to large queries\nconst paginatedQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.name&#39;],\n  limit: 50,\n  offset: page * 50\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Add pagination to large queries\nconst paginatedQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.name&#39;],\n  limit: 50,\n  offset: page * 50\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"issue-complex-join-performance\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Issue: Complex Join Performance</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Problem</strong>: Multi-table joins are slow\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Optimize join order and add covering indexes</p><div class=\"relative group\">\n    <pre class=\"language-sql rounded-lg overflow-x-auto mb-4\"><code class=\"language-sql\">-- Covering index for common join pattern\nCREATE INDEX idx_productivity_employee_lookup \nON productivity(employee_id, organisation_id) \nINCLUDE (lines_of_code, date);</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"-- Covering index for common join pattern\nCREATE INDEX idx_productivity_employee_lookup \nON productivity(employee_id, organisation_id) \nINCLUDE (lines_of_code, date);\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"advanced/troubleshooting\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Troubleshooting</a> common issues</li><li class=\"leading-relaxed\">Explore <a href=\"#\" data-help-link=\"advanced/typescript\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >TypeScript</a> advanced patterns</li><li class=\"leading-relaxed\">Review database-specific optimization guides</li><li class=\"leading-relaxed\">Set up performance monitoring in production</li></ul><h2 id=\"future-performance-features-planned-for-upcoming-releases\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Future Performance Features <em class=\"italic text-gray-700\">(Planned for Upcoming Releases)</em></h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The following performance enhancements are planned for future versions of Drizzle Cube:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Automatic query optimization suggestions</strong> - AI-powered query analysis</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Built-in performance monitoring dashboard</strong> - Real-time performance metrics</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Query execution plan visualization</strong> - Visual query plan analysis</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Intelligent caching strategies</strong> - Smart pre-computation and cache invalidation</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Performance regression testing</strong> - Automated performance testing suite</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Cost-based query optimization</strong> - Advanced query planning algorithms</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">These features are not currently available but are on our development roadmap.</p>",
    "path": "advanced/performance.md"
  },
  {
    "slug": "advanced/troubleshooting",
    "title": "Troubleshooting",
    "content": "<h1 id=\"troubleshooting\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Troubleshooting</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">This guide covers common issues, error messages, and debugging techniques for Drizzle Cube. Most problems stem from configuration, security context, database connections, or query construction.</p><h2 id=\"common-issues\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Issues</h2><h3 id=\"database-connection-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Database Connection Issues</h3><h4 id=\"error-connection-timeout\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;Connection timeout&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Queries hanging or timing out</li><li class=\"leading-relaxed\">Connection pool exhausted errors</li><li class=\"leading-relaxed\">Intermittent database connection failures</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Check connection configuration\nimport postgres from &#39;postgres&#39;\n\nconst sql = postgres(connectionString, {\n  max: 20,              // Increase pool size if needed\n  idle_timeout: 20,     // Reduce if connections are being held\n  connect_timeout: 30,  // Increase for slow networks\n  debug: process.env.NODE_ENV === &#39;development&#39; // Enable debugging\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Check connection configuration\nimport postgres from &#39;postgres&#39;\n\nconst sql = postgres(connectionString, {\n  max: 20,              // Increase pool size if needed\n  idle_timeout: 20,     // Reduce if connections are being held\n  connect_timeout: 30,  // Increase for slow networks\n  debug: process.env.NODE_ENV === &#39;development&#39; // Enable debugging\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Debugging Steps:</strong></p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Test database connection directly</li><li class=\"leading-relaxed\">Check firewall and network settings</li><li class=\"leading-relaxed\">Monitor connection pool usage</li><li class=\"leading-relaxed\">Verify connection string format</li></ol><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\"># Test PostgreSQL connection\npsql &quot;postgresql://user:password@host:port/database&quot;\n\n# Monitor connection pools\nSELECT state, count(*) FROM pg_stat_activity GROUP BY state;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"# Test PostgreSQL connection\npsql &quot;postgresql://user:password@host:port/database&quot;\n\n# Monitor connection pools\nSELECT state, count(*) FROM pg_stat_activity GROUP BY state;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"error-database-schema-not-found\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;Database schema not found&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Table or column does not exist errors</li><li class=\"leading-relaxed\">Schema-related query failures</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Ensure schema is properly imported and registered\nimport * as schema from &#39;./schema&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\n\nconst db = drizzle(sql, { schema }) // Pass schema to drizzle\n\n// Verify schema registration\nconst executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)\nconsole.log(&#39;Available tables:&#39;, Object.keys(schema))</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Ensure schema is properly imported and registered\nimport * as schema from &#39;./schema&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\n\nconst db = drizzle(sql, { schema }) // Pass schema to drizzle\n\n// Verify schema registration\nconst executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)\nconsole.log(&#39;Available tables:&#39;, Object.keys(schema))\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"security-context-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Security Context Issues</h3><h4 id=\"error-organisationid-is-required\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;organisationId is required&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Access denied errors on all queries</li><li class=\"leading-relaxed\">Security context extraction failures</li><li class=\"leading-relaxed\">Multi-tenant isolation problems</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Ensure security context extraction is correct\nexport const getSecurityContext = async (c: any): Promise&lt;SecurityContext&gt; =&gt; {\n  const authHeader = c.req.header(&#39;Authorization&#39;)\n  if (!authHeader) {\n    throw new Error(&#39;Missing Authorization header&#39;)\n  }\n\n  // Note: Authorization header is now used as-is (no &#39;Bearer &#39; prefix removal needed)\n  const token = authHeader\n  const user = await validateJWT(token)\n  \n  if (!user.organisationId) {\n    throw new Error(&#39;User token missing organisationId&#39;)\n  }\n\n  return {\n    organisationId: user.organisationId, // REQUIRED\n    userId: user.id,\n    userRole: user.role\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Ensure security context extraction is correct\nexport const getSecurityContext = async (c: any): Promise&lt;SecurityContext&gt; =&gt; {\n  const authHeader = c.req.header(&#39;Authorization&#39;)\n  if (!authHeader) {\n    throw new Error(&#39;Missing Authorization header&#39;)\n  }\n\n  // Note: Authorization header is now used as-is (no &#39;Bearer &#39; prefix removal needed)\n  const token = authHeader\n  const user = await validateJWT(token)\n  \n  if (!user.organisationId) {\n    throw new Error(&#39;User token missing organisationId&#39;)\n  }\n\n  return {\n    organisationId: user.organisationId, // REQUIRED\n    userId: user.id,\n    userRole: user.role\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Debugging Steps:</strong></p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Log the extracted security context</li><li class=\"leading-relaxed\">Verify JWT token contains required fields</li><li class=\"leading-relaxed\">Check token validation logic</li><li class=\"leading-relaxed\">Test with a known good token</li></ol><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Add debug logging\nexport const getSecurityContext = async (c: any): Promise&lt;SecurityContext&gt; =&gt; {\n  try {\n    const context = await extractContext(c)\n    console.log(&#39;Security context:&#39;, context) // Debug log\n    return context\n  } catch (error) {\n    console.error(&#39;Security context extraction failed:&#39;, error)\n    throw error\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Add debug logging\nexport const getSecurityContext = async (c: any): Promise&lt;SecurityContext&gt; =&gt; {\n  try {\n    const context = await extractContext(c)\n    console.log(&#39;Security context:&#39;, context) // Debug log\n    return context\n  } catch (error) {\n    console.error(&#39;Security context extraction failed:&#39;, error)\n    throw error\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"error-access-denied\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;Access denied&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Queries returning empty results</li><li class=\"leading-relaxed\">Permission-based errors</li><li class=\"leading-relaxed\">Role-based access failures</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Check cube-level security filtering\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  // Ensure security context is applied\n  where: and(\n    eq(employees.organisationId, ctx.securityContext.organisationId),\n    // Add role-based filtering if needed\n    ctx.securityContext.userRole !== &#39;admin&#39; \n      ? eq(employees.departmentId, ctx.securityContext.departmentId)\n      : sql`true`\n  )\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Check cube-level security filtering\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  // Ensure security context is applied\n  where: and(\n    eq(employees.organisationId, ctx.securityContext.organisationId),\n    // Add role-based filtering if needed\n    ctx.securityContext.userRole !== &#39;admin&#39; \n      ? eq(employees.departmentId, ctx.securityContext.departmentId)\n      : sql`true`\n  )\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"query-construction-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Construction Issues</h3><h4 id=\"error-invalid-query-measures-or-dimensions-required\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;Invalid query: measures or dimensions required&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Empty query objects</li><li class=\"leading-relaxed\">Missing required query fields</li><li class=\"leading-relaxed\">Malformed query structure</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Ensure query has required fields\nconst validQuery = {\n  measures: [&#39;Employees.count&#39;], // At least one measure OR dimension required\n  dimensions: [], // Optional but recommended\n  filters: [], // Optional\n  order: [] // Optional\n}\n\n// Validate query before execution\nfunction validateQuery(query: CubeQuery): void {\n  if (!query.measures?.length &amp;&amp; !query.dimensions?.length) {\n    throw new Error(&#39;Query must have at least one measure or dimension&#39;)\n  }\n  \n  if (!query.measures) {\n    query.measures = []\n  }\n  \n  if (!query.dimensions) {\n    query.dimensions = []\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Ensure query has required fields\nconst validQuery = {\n  measures: [&#39;Employees.count&#39;], // At least one measure OR dimension required\n  dimensions: [], // Optional but recommended\n  filters: [], // Optional\n  order: [] // Optional\n}\n\n// Validate query before execution\nfunction validateQuery(query: CubeQuery): void {\n  if (!query.measures?.length &amp;&amp; !query.dimensions?.length) {\n    throw new Error(&#39;Query must have at least one measure or dimension&#39;)\n  }\n  \n  if (!query.measures) {\n    query.measures = []\n  }\n  \n  if (!query.dimensions) {\n    query.dimensions = []\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"error-unknown-cube-member-cubenamefield\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;Unknown cube member: [CubeName].[field]&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Reference to non-existent cube or field</li><li class=\"leading-relaxed\">Typos in cube/field names</li><li class=\"leading-relaxed\">Case sensitivity issues</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Check cube registration\nconst semanticLayer = new SemanticLayerCompiler({ databaseExecutor: executor })\n\n// Register all cubes\nsemanticLayer.registerCube(employeesCube)\nsemanticLayer.registerCube(departmentsCube)\n// ... ensure all cubes are registered\n\n// Verify cube names match exactly\nconsole.log(&#39;Registered cubes:&#39;, semanticLayer.getCubeNames())\n\n// Check field names in cube definitions\nexport const employeesCube = defineCube(&#39;Employees&#39;, { // Case-sensitive\n  dimensions: {\n    name: { // Field name must match query exactly\n      name: &#39;name&#39;,\n      sql: employees.name\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Check cube registration\nconst semanticLayer = new SemanticLayerCompiler({ databaseExecutor: executor })\n\n// Register all cubes\nsemanticLayer.registerCube(employeesCube)\nsemanticLayer.registerCube(departmentsCube)\n// ... ensure all cubes are registered\n\n// Verify cube names match exactly\nconsole.log(&#39;Registered cubes:&#39;, semanticLayer.getCubeNames())\n\n// Check field names in cube definitions\nexport const employeesCube = defineCube(&#39;Employees&#39;, { // Case-sensitive\n  dimensions: {\n    name: { // Field name must match query exactly\n      name: &#39;name&#39;,\n      sql: employees.name\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"time-dimension-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Time Dimension Issues</h3><h4 id=\"error-invalid-time-dimension-format\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;Invalid time dimension format&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Time formatting errors</li><li class=\"leading-relaxed\">Granularity issues</li><li class=\"leading-relaxed\">Date parsing failures</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Ensure proper time dimension structure\nconst query = {\n  measures: [&#39;Orders.count&#39;],\n  timeDimensions: [{\n    dimension: &#39;Orders.createdAt&#39;, // Must match cube definition exactly\n    granularity: &#39;month&#39;, // Use valid granularity\n    dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;] // ISO date format\n  }]\n}\n\n// Valid granularity options\nconst validGranularities = [&#39;year&#39;, &#39;quarter&#39;, &#39;month&#39;, &#39;week&#39;, &#39;day&#39;, &#39;hour&#39;]\n\n// Check date format\nfunction validateDateRange(dateRange: [string, string]): void {\n  const [start, end] = dateRange\n  \n  if (!Date.parse(start) || !Date.parse(end)) {\n    throw new Error(&#39;Invalid date format. Use ISO format: YYYY-MM-DD&#39;)\n  }\n  \n  if (new Date(start) &gt;= new Date(end)) {\n    throw new Error(&#39;Start date must be before end date&#39;)\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Ensure proper time dimension structure\nconst query = {\n  measures: [&#39;Orders.count&#39;],\n  timeDimensions: [{\n    dimension: &#39;Orders.createdAt&#39;, // Must match cube definition exactly\n    granularity: &#39;month&#39;, // Use valid granularity\n    dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;] // ISO date format\n  }]\n}\n\n// Valid granularity options\nconst validGranularities = [&#39;year&#39;, &#39;quarter&#39;, &#39;month&#39;, &#39;week&#39;, &#39;day&#39;, &#39;hour&#39;]\n\n// Check date format\nfunction validateDateRange(dateRange: [string, string]): void {\n  const [start, end] = dateRange\n  \n  if (!Date.parse(start) || !Date.parse(end)) {\n    throw new Error(&#39;Invalid date format. Use ISO format: YYYY-MM-DD&#39;)\n  }\n  \n  if (new Date(start) &gt;= new Date(end)) {\n    throw new Error(&#39;Start date must be before end date&#39;)\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"error-time-dimension-not-displaying-correctly\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;Time dimension not displaying correctly&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Raw timestamps in charts instead of formatted dates</li><li class=\"leading-relaxed\">Incorrect time grouping</li><li class=\"leading-relaxed\">Missing time data</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Ensure time dimension is defined correctly in cube\ndimensions: {\n  createdAt: {\n    name: &#39;createdAt&#39;,\n    title: &#39;Created Date&#39;,\n    type: &#39;time&#39;, // Must be &#39;time&#39; type\n    sql: employees.createdAt // Column must be date/timestamp type\n  }\n}\n\n// Use timeDimensions in queries (not regular dimensions)\nconst timeSeriesQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [], // Don&#39;t put time fields here\n  timeDimensions: [{ // Put time fields here\n    dimension: &#39;Employees.createdAt&#39;,\n    granularity: &#39;month&#39;\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Ensure time dimension is defined correctly in cube\ndimensions: {\n  createdAt: {\n    name: &#39;createdAt&#39;,\n    title: &#39;Created Date&#39;,\n    type: &#39;time&#39;, // Must be &#39;time&#39; type\n    sql: employees.createdAt // Column must be date/timestamp type\n  }\n}\n\n// Use timeDimensions in queries (not regular dimensions)\nconst timeSeriesQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [], // Don&#39;t put time fields here\n  timeDimensions: [{ // Put time fields here\n    dimension: &#39;Employees.createdAt&#39;,\n    granularity: &#39;month&#39;\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"debugging-techniques\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Debugging Techniques</h2><h3 id=\"enable-debug-logging\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Enable Debug Logging</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Add comprehensive logging to track issues:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Enable SQL query logging\nif (process.env.NODE_ENV === &#39;development&#39;) {\n  const originalExecute = executor.execute\n  executor.execute = async function(query, measureFields) {\n    console.log(&#39;Executing SQL:&#39;, query.toQuery())\n    const start = performance.now()\n    \n    try {\n      const result = await originalExecute.call(this, query, measureFields)\n      console.log(`Query completed in ${performance.now() - start}ms`)\n      return result\n    } catch (error) {\n      console.error(&#39;Query failed:&#39;, error)\n      throw error\n    }\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Enable SQL query logging\nif (process.env.NODE_ENV === &#39;development&#39;) {\n  const originalExecute = executor.execute\n  executor.execute = async function(query, measureFields) {\n    console.log(&#39;Executing SQL:&#39;, query.toQuery())\n    const start = performance.now()\n    \n    try {\n      const result = await originalExecute.call(this, query, measureFields)\n      console.log(`Query completed in ${performance.now() - start}ms`)\n      return result\n    } catch (error) {\n      console.error(&#39;Query failed:&#39;, error)\n      throw error\n    }\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"query-analysis\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Analysis</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Analyze generated SQL and execution plans:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Log generated queries for analysis\nexport const debugCube = defineCube(&#39;Debug&#39;, {\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n    const query = {\n      from: employees,\n      where: eq(employees.organisationId, ctx.securityContext.organisationId)\n    }\n    \n    // Log the query context for debugging\n    console.log(&#39;Cube query context:&#39;, {\n      cubeName: &#39;Debug&#39;,\n      securityContext: ctx.securityContext,\n      requestedQuery: ctx.query\n    })\n    \n    return query\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Log generated queries for analysis\nexport const debugCube = defineCube(&#39;Debug&#39;, {\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n    const query = {\n      from: employees,\n      where: eq(employees.organisationId, ctx.securityContext.organisationId)\n    }\n    \n    // Log the query context for debugging\n    console.log(&#39;Cube query context:&#39;, {\n      cubeName: &#39;Debug&#39;,\n      securityContext: ctx.securityContext,\n      requestedQuery: ctx.query\n    })\n    \n    return query\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"api-response-format-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">API Response Format Issues</h3><h4 id=\"error-cannot-read-property-data-of-undefined\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;Cannot read property &#39;data&#39; of undefined&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Client fails to read response data</li><li class=\"leading-relaxed\">Undefined response structure errors</li><li class=\"leading-relaxed\">Charts not rendering despite successful API calls</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><p class=\"mb-4 text-gray-600 leading-relaxed\">The API now returns Cube.js-compatible response format. Update client code:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// OLD format (deprecated)\n{\n  data: [...],\n  annotation: {...},\n  query: {...}\n}\n\n// NEW format (current)\n{\n  queryType: &quot;regularQuery&quot;,\n  results: [{\n    data: [...],           // Raw data moved to results[0].data\n    annotation: {...},     // Annotation moved to results[0].annotation\n    query: {...},\n    requestId: &quot;...&quot;,\n    lastRefreshTime: &quot;...&quot;\n  }],\n  pivotQuery: {...},\n  slowQuery: false\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// OLD format (deprecated)\n{\n  data: [...],\n  annotation: {...},\n  query: {...}\n}\n\n// NEW format (current)\n{\n  queryType: &quot;regularQuery&quot;,\n  results: [{\n    data: [...],           // Raw data moved to results[0].data\n    annotation: {...},     // Annotation moved to results[0].annotation\n    query: {...},\n    requestId: &quot;...&quot;,\n    lastRefreshTime: &quot;...&quot;\n  }],\n  pivotQuery: {...},\n  slowQuery: false\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">The CubeClient automatically handles both formats, but custom client code needs updates:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Update manual API handling\nconst response = await fetch(&#39;/api/cube/load?query=&#39; + encodeURIComponent(JSON.stringify(query)))\nconst result = await response.json()\n\n// Handle both old and new response formats\nconst data = result.results?.[0]?.data || result.data || []\nconst annotation = result.results?.[0]?.annotation || result.annotation || {}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Update manual API handling\nconst response = await fetch(&#39;/api/cube/load?query=&#39; + encodeURIComponent(JSON.stringify(query)))\nconst result = await response.json()\n\n// Handle both old and new response formats\nconst data = result.results?.[0]?.data || result.data || []\nconst annotation = result.results?.[0]?.annotation || result.annotation || {}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"error-http-method-not-allowed\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;HTTP method not allowed&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">405 Method Not Allowed errors</li><li class=\"leading-relaxed\">API endpoints returning wrong status codes</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><p class=\"mb-4 text-gray-600 leading-relaxed\">API endpoints now use different HTTP methods:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// OLD: POST with body\nfetch(&#39;/api/cube/load&#39;, {\n  method: &#39;POST&#39;,\n  body: JSON.stringify({ query })\n})\n\n// NEW: GET with query parameter\nconst queryParam = encodeURIComponent(JSON.stringify(query))\nfetch(`/api/cube/load?query=${queryParam}`, {\n  method: &#39;GET&#39;\n})\n\n// SQL endpoint also uses GET now\nfetch(`/api/cube/sql?query=${queryParam}`, {\n  method: &#39;GET&#39;\n})\n\n// New dry-run endpoint uses POST\nfetch(&#39;/api/cube/dry-run&#39;, {\n  method: &#39;POST&#39;,\n  body: JSON.stringify({ query })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// OLD: POST with body\nfetch(&#39;/api/cube/load&#39;, {\n  method: &#39;POST&#39;,\n  body: JSON.stringify({ query })\n})\n\n// NEW: GET with query parameter\nconst queryParam = encodeURIComponent(JSON.stringify(query))\nfetch(`/api/cube/load?query=${queryParam}`, {\n  method: &#39;GET&#39;\n})\n\n// SQL endpoint also uses GET now\nfetch(`/api/cube/sql?query=${queryParam}`, {\n  method: &#39;GET&#39;\n})\n\n// New dry-run endpoint uses POST\nfetch(&#39;/api/cube/dry-run&#39;, {\n  method: &#39;POST&#39;,\n  body: JSON.stringify({ query })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"network-debugging\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Network Debugging</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Debug API communication issues:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Client-side debugging with updated CubeClient\nimport { CubeClient } from &#39;drizzle-cube/client&#39;\n\nconst cubeClient = new CubeClient(&#39;your-token&#39;, {\n  apiUrl: &#39;/api/cube&#39;,\n  headers: {\n    &#39;X-Organisation-ID&#39;: &#39;1&#39;\n  }\n})\n\n// Test different endpoints\ntry {\n  // Test load endpoint (GET method)\n  const result = await cubeClient.load(query)\n  console.log(&#39;Load result:&#39;, result.rawData())\n  \n  // Test SQL generation (GET method)  \n  const sqlResult = await cubeClient.sql(query)\n  console.log(&#39;Generated SQL:&#39;, sqlResult)\n  \n  // Test dry run (POST method)\n  const dryRunResult = await cubeClient.dryRun(query)\n  console.log(&#39;Dry run result:&#39;, dryRunResult)\n  \n} catch (error) {\n  console.error(&#39;API Error:&#39;, error.message)\n  \n  // Enhanced error logging\n  if (error.response) {\n    console.error(&#39;Response status:&#39;, error.response.status)\n    console.error(&#39;Response headers:&#39;, error.response.headers)\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Client-side debugging with updated CubeClient\nimport { CubeClient } from &#39;drizzle-cube/client&#39;\n\nconst cubeClient = new CubeClient(&#39;your-token&#39;, {\n  apiUrl: &#39;/api/cube&#39;,\n  headers: {\n    &#39;X-Organisation-ID&#39;: &#39;1&#39;\n  }\n})\n\n// Test different endpoints\ntry {\n  // Test load endpoint (GET method)\n  const result = await cubeClient.load(query)\n  console.log(&#39;Load result:&#39;, result.rawData())\n  \n  // Test SQL generation (GET method)  \n  const sqlResult = await cubeClient.sql(query)\n  console.log(&#39;Generated SQL:&#39;, sqlResult)\n  \n  // Test dry run (POST method)\n  const dryRunResult = await cubeClient.dryRun(query)\n  console.log(&#39;Dry run result:&#39;, dryRunResult)\n  \n} catch (error) {\n  console.error(&#39;API Error:&#39;, error.message)\n  \n  // Enhanced error logging\n  if (error.response) {\n    console.error(&#39;Response status:&#39;, error.response.status)\n    console.error(&#39;Response headers:&#39;, error.response.headers)\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"error-reference\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Reference</h2><h3 id=\"common-error-messages\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Common Error Messages</h3><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Error</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Cause</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Solution</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`organisationId is required`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Missing security context</td><td class=\"px-4 py-3 text-sm text-gray-600\">Check JWT token and extraction logic</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`Unknown cube member`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Typo in cube/field name</td><td class=\"px-4 py-3 text-sm text-gray-600\">Verify exact names and registration</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`Connection timeout`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Database connection issue</td><td class=\"px-4 py-3 text-sm text-gray-600\">Check connection string and network</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`Access denied`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Security context/permissions</td><td class=\"px-4 py-3 text-sm text-gray-600\">Verify security filtering and roles</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`Invalid date format`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Wrong date string format</td><td class=\"px-4 py-3 text-sm text-gray-600\">Use ISO format: YYYY-MM-DD</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`Table does not exist`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Schema not found</td><td class=\"px-4 py-3 text-sm text-gray-600\">Check Drizzle schema import and registration</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`Cannot read property 'data'`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Old response format handling</td><td class=\"px-4 py-3 text-sm text-gray-600\">Update to use results[0].data format</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`HTTP method not allowed`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Wrong HTTP method</td><td class=\"px-4 py-3 text-sm text-gray-600\">Use GET for /load and /sql, POST for /dry-run</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`Dry run failed`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Query validation error</td><td class=\"px-4 py-3 text-sm text-gray-600\">Check query structure and cube references</td></tr></tbody>\n    </table>\n  </div><h3 id=\"http-status-codes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">HTTP Status Codes</h3><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Status</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Meaning</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Common Causes</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">400</td><td class=\"px-4 py-3 text-sm text-gray-600\">Bad Request</td><td class=\"px-4 py-3 text-sm text-gray-600\">Invalid query structure, missing fields</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">401</td><td class=\"px-4 py-3 text-sm text-gray-600\">Unauthorized</td><td class=\"px-4 py-3 text-sm text-gray-600\">Missing or invalid JWT token</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">403</td><td class=\"px-4 py-3 text-sm text-gray-600\">Forbidden</td><td class=\"px-4 py-3 text-sm text-gray-600\">Insufficient permissions for data access</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">404</td><td class=\"px-4 py-3 text-sm text-gray-600\">Not Found</td><td class=\"px-4 py-3 text-sm text-gray-600\">API endpoint not found, routing issue</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">500</td><td class=\"px-4 py-3 text-sm text-gray-600\">Internal Error</td><td class=\"px-4 py-3 text-sm text-gray-600\">Database connection, code errors</td></tr></tbody>\n    </table>\n  </div><h2 id=\"development-debugging\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Development Debugging</h2><h3 id=\"test-environment-setup\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Test Environment Setup</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Set up a debugging-friendly test environment:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// test-setup.ts\nimport { SemanticLayerCompiler } from &#39;drizzle-cube/server&#39;\nimport { createTestDatabase } from &#39;./helpers/test-database&#39;\n\n// Create test environment with debugging\nexport async function setupTestEnvironment() {\n  const { db, schema } = await createTestDatabase()\n  \n  const executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)\n  const semanticLayer = new SemanticLayerCompiler({ \n    databaseExecutor: executor,\n    debug: true // Enable debug mode\n  })\n\n  // Add debug logging\n  const originalLoad = semanticLayer.load\n  semanticLayer.load = async function(query, context) {\n    console.log(&#39;Test Query:&#39;, JSON.stringify(query, null, 2))\n    console.log(&#39;Test Context:&#39;, context)\n    \n    try {\n      const result = await originalLoad.call(this, query, context)\n      console.log(&#39;Test Result Count:&#39;, result.rawData().length)\n      return result\n    } catch (error) {\n      console.error(&#39;Test Query Failed:&#39;, error)\n      throw error\n    }\n  }\n\n  return { semanticLayer, db, schema }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// test-setup.ts\nimport { SemanticLayerCompiler } from &#39;drizzle-cube/server&#39;\nimport { createTestDatabase } from &#39;./helpers/test-database&#39;\n\n// Create test environment with debugging\nexport async function setupTestEnvironment() {\n  const { db, schema } = await createTestDatabase()\n  \n  const executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)\n  const semanticLayer = new SemanticLayerCompiler({ \n    databaseExecutor: executor,\n    debug: true // Enable debug mode\n  })\n\n  // Add debug logging\n  const originalLoad = semanticLayer.load\n  semanticLayer.load = async function(query, context) {\n    console.log(&#39;Test Query:&#39;, JSON.stringify(query, null, 2))\n    console.log(&#39;Test Context:&#39;, context)\n    \n    try {\n      const result = await originalLoad.call(this, query, context)\n      console.log(&#39;Test Result Count:&#39;, result.rawData().length)\n      return result\n    } catch (error) {\n      console.error(&#39;Test Query Failed:&#39;, error)\n      throw error\n    }\n  }\n\n  return { semanticLayer, db, schema }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"ide-debugging\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">IDE Debugging</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Set up debugger for step-through debugging:</p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">// .vscode/launch.json\n{\n  &quot;version&quot;: &quot;0.2.0&quot;,\n  &quot;configurations&quot;: [\n    {\n      &quot;name&quot;: &quot;Debug Drizzle Cube&quot;,\n      &quot;type&quot;: &quot;node&quot;,\n      &quot;request&quot;: &quot;launch&quot;,\n      &quot;program&quot;: &quot;${workspaceFolder}/src/index.ts&quot;,\n      &quot;env&quot;: {\n        &quot;NODE_ENV&quot;: &quot;development&quot;,\n        &quot;DEBUG&quot;: &quot;drizzle-cube:*&quot;\n      },\n      &quot;runtimeArgs&quot;: [&quot;-r&quot;, &quot;ts-node/register&quot;],\n      &quot;sourceMaps&quot;: true,\n      &quot;cwd&quot;: &quot;${workspaceFolder}&quot;,\n      &quot;protocol&quot;: &quot;inspector&quot;,\n      &quot;restart&quot;: true,\n      &quot;console&quot;: &quot;integratedTerminal&quot;\n    }\n  ]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// .vscode/launch.json\n{\n  &quot;version&quot;: &quot;0.2.0&quot;,\n  &quot;configurations&quot;: [\n    {\n      &quot;name&quot;: &quot;Debug Drizzle Cube&quot;,\n      &quot;type&quot;: &quot;node&quot;,\n      &quot;request&quot;: &quot;launch&quot;,\n      &quot;program&quot;: &quot;${workspaceFolder}/src/index.ts&quot;,\n      &quot;env&quot;: {\n        &quot;NODE_ENV&quot;: &quot;development&quot;,\n        &quot;DEBUG&quot;: &quot;drizzle-cube:*&quot;\n      },\n      &quot;runtimeArgs&quot;: [&quot;-r&quot;, &quot;ts-node/register&quot;],\n      &quot;sourceMaps&quot;: true,\n      &quot;cwd&quot;: &quot;${workspaceFolder}&quot;,\n      &quot;protocol&quot;: &quot;inspector&quot;,\n      &quot;restart&quot;: true,\n      &quot;console&quot;: &quot;integratedTerminal&quot;\n    }\n  ]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"production-debugging\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Production Debugging</h2><h3 id=\"health-check-endpoints\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Health Check Endpoints</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Implement health checks for production monitoring:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Health check route\napp.get(&#39;/health&#39;, async (req, res) =&gt; {\n  try {\n    // Test database connection\n    await db.execute(sql`SELECT 1`)\n    \n    // Test cube compilation\n    const testContext = { organisationId: &#39;health-check&#39; }\n    const cubes = await semanticLayer.getMetadata(testContext)\n    \n    res.json({\n      status: &#39;healthy&#39;,\n      timestamp: new Date().toISOString(),\n      database: &#39;connected&#39;,\n      cubes: cubes.length,\n      version: process.env.npm_package_version\n    })\n  } catch (error) {\n    res.status(503).json({\n      status: &#39;unhealthy&#39;,\n      error: error.message,\n      timestamp: new Date().toISOString()\n    })\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Health check route\napp.get(&#39;/health&#39;, async (req, res) =&gt; {\n  try {\n    // Test database connection\n    await db.execute(sql`SELECT 1`)\n    \n    // Test cube compilation\n    const testContext = { organisationId: &#39;health-check&#39; }\n    const cubes = await semanticLayer.getMetadata(testContext)\n    \n    res.json({\n      status: &#39;healthy&#39;,\n      timestamp: new Date().toISOString(),\n      database: &#39;connected&#39;,\n      cubes: cubes.length,\n      version: process.env.npm_package_version\n    })\n  } catch (error) {\n    res.status(503).json({\n      status: &#39;unhealthy&#39;,\n      error: error.message,\n      timestamp: new Date().toISOString()\n    })\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"error-monitoring\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Error Monitoring</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Set up error tracking and alerting:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Error monitoring middleware\nimport * as Sentry from &#39;@sentry/node&#39;\n\nexport function errorHandler(error: Error, req: any, res: any, next: any) {\n  // Log error details\n  console.error(&#39;Drizzle Cube Error:&#39;, {\n    message: error.message,\n    stack: error.stack,\n    url: req.url,\n    method: req.method,\n    body: req.body,\n    user: req.user?.id,\n    timestamp: new Date().toISOString()\n  })\n\n  // Send to error tracking service\n  Sentry.captureException(error, {\n    tags: {\n      component: &#39;drizzle-cube&#39;,\n      url: req.url\n    },\n    user: {\n      id: req.user?.id,\n      org: req.user?.organisationId\n    }\n  })\n\n  // Return user-friendly error\n  res.status(500).json({\n    error: &#39;Internal server error&#39;,\n    id: Sentry.lastEventId() // For tracking\n  })\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Error monitoring middleware\nimport * as Sentry from &#39;@sentry/node&#39;\n\nexport function errorHandler(error: Error, req: any, res: any, next: any) {\n  // Log error details\n  console.error(&#39;Drizzle Cube Error:&#39;, {\n    message: error.message,\n    stack: error.stack,\n    url: req.url,\n    method: req.method,\n    body: req.body,\n    user: req.user?.id,\n    timestamp: new Date().toISOString()\n  })\n\n  // Send to error tracking service\n  Sentry.captureException(error, {\n    tags: {\n      component: &#39;drizzle-cube&#39;,\n      url: req.url\n    },\n    user: {\n      id: req.user?.id,\n      org: req.user?.organisationId\n    }\n  })\n\n  // Return user-friendly error\n  res.status(500).json({\n    error: &#39;Internal server error&#39;,\n    id: Sentry.lastEventId() // For tracking\n  })\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"getting-help\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Getting Help</h2><h3 id=\"diagnostic-information\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Diagnostic Information</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">When reporting issues, include:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Environment Information:</strong><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Node.js version</li><li class=\"leading-relaxed\">Database type and version</li><li class=\"leading-relaxed\">Drizzle Cube version</li><li class=\"leading-relaxed\">Operating system</li></ul></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Query Information:</strong><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Complete query object</li><li class=\"leading-relaxed\">Security context (sanitized)</li><li class=\"leading-relaxed\">Expected vs. actual results</li></ul></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Error Details:</strong><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Complete error message and stack trace</li><li class=\"leading-relaxed\">SQL query (if available)</li><li class=\"leading-relaxed\">Steps to reproduce</li></ul></li></ol><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Generate diagnostic report\nfunction generateDiagnosticReport() {\n  return {\n    environment: {\n      nodeVersion: process.version,\n      platform: process.platform,\n      drizzleCubeVersion: require(&#39;../package.json&#39;).version\n    },\n    database: {\n      type: &#39;postgresql&#39;, // or mysql, sqlite\n      version: &#39;SELECT version()&#39; // Run this query\n    },\n    lastError: {\n      message: &#39;Copy error message here&#39;,\n      stack: &#39;Copy stack trace here&#39;\n    },\n    queryExample: {\n      // Include problematic query\n    }\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Generate diagnostic report\nfunction generateDiagnosticReport() {\n  return {\n    environment: {\n      nodeVersion: process.version,\n      platform: process.platform,\n      drizzleCubeVersion: require(&#39;../package.json&#39;).version\n    },\n    database: {\n      type: &#39;postgresql&#39;, // or mysql, sqlite\n      version: &#39;SELECT version()&#39; // Run this query\n    },\n    lastError: {\n      message: &#39;Copy error message here&#39;,\n      stack: &#39;Copy stack trace here&#39;\n    },\n    queryExample: {\n      // Include problematic query\n    }\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"community-resources\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Community Resources</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">GitHub Issues</strong>: <a href=\"https://github.com/cliftonc/drizzle-cube/issues\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/cliftonc/drizzle-cube/issues</a></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Documentation</strong>: Check help site for examples</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Database Documentation</strong>: Refer to Drizzle ORM docs</li></ul><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Review <a href=\"#\" data-help-link=\"advanced/performance\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Performance</a> optimization techniques</li><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"advanced/typescript\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >TypeScript</a> advanced patterns</li><li class=\"leading-relaxed\">Check the repository for example implementations</li><li class=\"leading-relaxed\">Set up proper monitoring and logging</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Automatic error detection and suggestions</li><li class=\"leading-relaxed\">Built-in debugging tools and query analyzer</li><li class=\"leading-relaxed\">Performance profiling and optimization recommendations</li><li class=\"leading-relaxed\">Interactive troubleshooting guide</li><li class=\"leading-relaxed\">Error tracking integration templates</li></ul>",
    "path": "advanced/troubleshooting.md"
  },
  {
    "slug": "advanced/typescript",
    "title": "TypeScript",
    "content": "<h1 id=\"typescript\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">TypeScript</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube is built with TypeScript-first design, providing comprehensive type safety from database schema to API responses. This guide covers advanced TypeScript patterns, type inference, and best practices for building type-safe analytics.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube&#39;s type system ensures:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Schema-to-Query Type Safety</strong>: Cube definitions are validated against database schema</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Query Result Type Inference</strong>: Results are properly typed based on requested fields</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security Context Typing</strong>: Type-safe security context throughout the application</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Framework Integration</strong>: Full TypeScript support for all major frameworks</li></ul><h2 id=\"schema-first-types\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Schema-First Types</h2><h3 id=\"drizzle-schema-integration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Drizzle Schema Integration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// schema.ts - Define your database schema with Drizzle\nimport { pgTable, serial, varchar, timestamp, integer, boolean } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  name: varchar(&#39;name&#39;, { length: 255 }).notNull(),\n  email: varchar(&#39;email&#39;, { length: 255 }).unique().notNull(),\n  departmentId: integer(&#39;department_id&#39;).references(() =&gt; departments.id),\n  salary: integer(&#39;salary&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow(),\n  organisationId: varchar(&#39;organisation_id&#39;, { length: 255 }).notNull()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  name: varchar(&#39;name&#39;, { length: 255 }).notNull(),\n  budget: integer(&#39;budget&#39;),\n  organisationId: varchar(&#39;organisation_id&#39;, { length: 255 }).notNull()\n})\n\n// Export schema type for use throughout application\nexport type Schema = {\n  employees: typeof employees\n  departments: typeof departments\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// schema.ts - Define your database schema with Drizzle\nimport { pgTable, serial, varchar, timestamp, integer, boolean } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  name: varchar(&#39;name&#39;, { length: 255 }).notNull(),\n  email: varchar(&#39;email&#39;, { length: 255 }).unique().notNull(),\n  departmentId: integer(&#39;department_id&#39;).references(() =&gt; departments.id),\n  salary: integer(&#39;salary&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow(),\n  organisationId: varchar(&#39;organisation_id&#39;, { length: 255 }).notNull()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  name: varchar(&#39;name&#39;, { length: 255 }).notNull(),\n  budget: integer(&#39;budget&#39;),\n  organisationId: varchar(&#39;organisation_id&#39;, { length: 255 }).notNull()\n})\n\n// Export schema type for use throughout application\nexport type Schema = {\n  employees: typeof employees\n  departments: typeof departments\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"type-safe-cube-definitions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Type-Safe Cube Definitions</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// cubes.ts - Define cubes with full type safety\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport type { Cube, QueryContext, BaseQueryDefinition } from &#39;drizzle-cube/server&#39;\nimport { employees, departments, type Schema } from &#39;./schema&#39;\n\n// Fully typed cube definition\nexport const employeesCube: Cube&lt;Schema&gt; = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  description: &#39;Employee data and metrics&#39;,\n  \n  // Type-safe SQL function\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: employees, // ✅ Type-checked against schema\n    joins: [{\n      table: departments, // ✅ Type-checked against schema\n      on: eq(employees.departmentId, departments.id), // ✅ Column types verified\n      type: &#39;left&#39;\n    }],\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  \n  // Type-safe dimensions\n  dimensions: {\n    id: {\n      name: &#39;id&#39;,\n      title: &#39;Employee ID&#39;,\n      type: &#39;number&#39;,\n      sql: employees.id, // ✅ Type-checked against schema\n      primaryKey: true\n    },\n    name: {\n      name: &#39;name&#39;, \n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name // ✅ Column exists and type matches\n    },\n    departmentName: {\n      name: &#39;departmentName&#39;,\n      title: &#39;Department&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name // ✅ Available through join\n    }\n  },\n  \n  // Type-safe measures\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id // ✅ Type-checked\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary // ✅ Numeric column verified\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// cubes.ts - Define cubes with full type safety\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport type { Cube, QueryContext, BaseQueryDefinition } from &#39;drizzle-cube/server&#39;\nimport { employees, departments, type Schema } from &#39;./schema&#39;\n\n// Fully typed cube definition\nexport const employeesCube: Cube&lt;Schema&gt; = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  description: &#39;Employee data and metrics&#39;,\n  \n  // Type-safe SQL function\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: employees, // ✅ Type-checked against schema\n    joins: [{\n      table: departments, // ✅ Type-checked against schema\n      on: eq(employees.departmentId, departments.id), // ✅ Column types verified\n      type: &#39;left&#39;\n    }],\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  \n  // Type-safe dimensions\n  dimensions: {\n    id: {\n      name: &#39;id&#39;,\n      title: &#39;Employee ID&#39;,\n      type: &#39;number&#39;,\n      sql: employees.id, // ✅ Type-checked against schema\n      primaryKey: true\n    },\n    name: {\n      name: &#39;name&#39;, \n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name // ✅ Column exists and type matches\n    },\n    departmentName: {\n      name: &#39;departmentName&#39;,\n      title: &#39;Department&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name // ✅ Available through join\n    }\n  },\n  \n  // Type-safe measures\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id // ✅ Type-checked\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary // ✅ Numeric column verified\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-type-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Type Patterns</h2><h3 id=\"generic-cube-factory\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Generic Cube Factory</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create reusable cube factories with proper typing:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Generic cube factory function\nfunction createAnalyticsCube&lt;\n  TSchema extends Record&lt;string, any&gt;,\n  TTable extends TSchema[keyof TSchema]\n&gt;(\n  name: string,\n  table: TTable,\n  schema: TSchema,\n  config: Partial&lt;CubeConfig&lt;TSchema&gt;&gt;\n): Cube&lt;TSchema&gt; {\n  return defineCube(name, {\n    sql: (ctx: QueryContext&lt;TSchema&gt;) =&gt; ({\n      from: table,\n      where: eq(table.organisationId, ctx.securityContext.organisationId)\n    }),\n    ...config\n  })\n}\n\n// Usage with full type safety\nconst usersCube = createAnalyticsCube(\n  &#39;Users&#39;, \n  users,     // ✅ Type-checked table\n  schema,    // ✅ Schema matches\n  {\n    dimensions: {\n      name: {\n        name: &#39;name&#39;,\n        type: &#39;string&#39;,\n        sql: users.name // ✅ Column exists on table\n      }\n    }\n  }\n)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Generic cube factory function\nfunction createAnalyticsCube&lt;\n  TSchema extends Record&lt;string, any&gt;,\n  TTable extends TSchema[keyof TSchema]\n&gt;(\n  name: string,\n  table: TTable,\n  schema: TSchema,\n  config: Partial&lt;CubeConfig&lt;TSchema&gt;&gt;\n): Cube&lt;TSchema&gt; {\n  return defineCube(name, {\n    sql: (ctx: QueryContext&lt;TSchema&gt;) =&gt; ({\n      from: table,\n      where: eq(table.organisationId, ctx.securityContext.organisationId)\n    }),\n    ...config\n  })\n}\n\n// Usage with full type safety\nconst usersCube = createAnalyticsCube(\n  &#39;Users&#39;, \n  users,     // ✅ Type-checked table\n  schema,    // ✅ Schema matches\n  {\n    dimensions: {\n      name: {\n        name: &#39;name&#39;,\n        type: &#39;string&#39;,\n        sql: users.name // ✅ Column exists on table\n      }\n    }\n  }\n)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"conditional-types-for-security-context\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Conditional Types for Security Context</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Conditional security context types based on user role\ntype BaseSecurityContext = {\n  organisationId: string\n  userId: string\n  userRole: &#39;admin&#39; | &#39;manager&#39; | &#39;employee&#39;\n}\n\ntype AdminContext = BaseSecurityContext &amp; {\n  userRole: &#39;admin&#39;\n  // Admins have access to all data\n}\n\ntype ManagerContext = BaseSecurityContext &amp; {\n  userRole: &#39;manager&#39;\n  departmentId: string // Managers need department context\n}\n\ntype EmployeeContext = BaseSecurityContext &amp; {\n  userRole: &#39;employee&#39;\n  // Employees only see their own data\n}\n\ntype SecurityContext = AdminContext | ManagerContext | EmployeeContext\n\n// Type-safe security context extraction\nexport function createSecurityContext(\n  user: { id: string; organisationId: string; role: string; departmentId?: string }\n): SecurityContext {\n  const baseContext = {\n    organisationId: user.organisationId,\n    userId: user.id,\n    userRole: user.role as SecurityContext[&#39;userRole&#39;]\n  }\n\n  switch (user.role) {\n    case &#39;admin&#39;:\n      return { ...baseContext, userRole: &#39;admin&#39; }\n    case &#39;manager&#39;:\n      if (!user.departmentId) {\n        throw new Error(&#39;Manager role requires departmentId&#39;)\n      }\n      return { ...baseContext, userRole: &#39;manager&#39;, departmentId: user.departmentId }\n    case &#39;employee&#39;:\n      return { ...baseContext, userRole: &#39;employee&#39; }\n    default:\n      throw new Error(`Invalid user role: ${user.role}`)\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Conditional security context types based on user role\ntype BaseSecurityContext = {\n  organisationId: string\n  userId: string\n  userRole: &#39;admin&#39; | &#39;manager&#39; | &#39;employee&#39;\n}\n\ntype AdminContext = BaseSecurityContext &amp; {\n  userRole: &#39;admin&#39;\n  // Admins have access to all data\n}\n\ntype ManagerContext = BaseSecurityContext &amp; {\n  userRole: &#39;manager&#39;\n  departmentId: string // Managers need department context\n}\n\ntype EmployeeContext = BaseSecurityContext &amp; {\n  userRole: &#39;employee&#39;\n  // Employees only see their own data\n}\n\ntype SecurityContext = AdminContext | ManagerContext | EmployeeContext\n\n// Type-safe security context extraction\nexport function createSecurityContext(\n  user: { id: string; organisationId: string; role: string; departmentId?: string }\n): SecurityContext {\n  const baseContext = {\n    organisationId: user.organisationId,\n    userId: user.id,\n    userRole: user.role as SecurityContext[&#39;userRole&#39;]\n  }\n\n  switch (user.role) {\n    case &#39;admin&#39;:\n      return { ...baseContext, userRole: &#39;admin&#39; }\n    case &#39;manager&#39;:\n      if (!user.departmentId) {\n        throw new Error(&#39;Manager role requires departmentId&#39;)\n      }\n      return { ...baseContext, userRole: &#39;manager&#39;, departmentId: user.departmentId }\n    case &#39;employee&#39;:\n      return { ...baseContext, userRole: &#39;employee&#39; }\n    default:\n      throw new Error(`Invalid user role: ${user.role}`)\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"query-result-type-inference\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Result Type Inference</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Type-safe query result inference\ntype QueryResultType&lt;T extends CubeQuery&gt; = {\n  [K in NonNullable&lt;T[&#39;measures&#39;]&gt;[number]]: number\n} &amp; {\n  [K in NonNullable&lt;T[&#39;dimensions&#39;]&gt;[number]]: string | number | boolean\n}\n\n// Usage example\nconst query = {\n  measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;, &#39;Employees.isActive&#39;]\n} as const\n\ntype ResultType = QueryResultType&lt;typeof query&gt;\n// Inferred type:\n// {\n//   &#39;Employees.count&#39;: number\n//   &#39;Employees.avgSalary&#39;: number\n//   &#39;Employees.departmentName&#39;: string\n//   &#39;Employees.isActive&#39;: boolean\n// }\n\n// Type-safe result processing\nfunction processResults(data: ResultType[]) {\n  return data.map(row =&gt; ({\n    department: row[&#39;Employees.departmentName&#39;], // ✅ String type\n    employeeCount: row[&#39;Employees.count&#39;],       // ✅ Number type\n    avgSalary: row[&#39;Employees.avgSalary&#39;],       // ✅ Number type\n    isActive: row[&#39;Employees.isActive&#39;]          // ✅ Boolean type\n  }))\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Type-safe query result inference\ntype QueryResultType&lt;T extends CubeQuery&gt; = {\n  [K in NonNullable&lt;T[&#39;measures&#39;]&gt;[number]]: number\n} &amp; {\n  [K in NonNullable&lt;T[&#39;dimensions&#39;]&gt;[number]]: string | number | boolean\n}\n\n// Usage example\nconst query = {\n  measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;, &#39;Employees.isActive&#39;]\n} as const\n\ntype ResultType = QueryResultType&lt;typeof query&gt;\n// Inferred type:\n// {\n//   &#39;Employees.count&#39;: number\n//   &#39;Employees.avgSalary&#39;: number\n//   &#39;Employees.departmentName&#39;: string\n//   &#39;Employees.isActive&#39;: boolean\n// }\n\n// Type-safe result processing\nfunction processResults(data: ResultType[]) {\n  return data.map(row =&gt; ({\n    department: row[&#39;Employees.departmentName&#39;], // ✅ String type\n    employeeCount: row[&#39;Employees.count&#39;],       // ✅ Number type\n    avgSalary: row[&#39;Employees.avgSalary&#39;],       // ✅ Number type\n    isActive: row[&#39;Employees.isActive&#39;]          // ✅ Boolean type\n  }))\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"client-side-typescript\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Client-Side TypeScript</h2><h3 id=\"type-safe-hook-usage\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Type-Safe Hook Usage</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Type-safe query hooks\nfunction useEmployeeMetrics(departmentId?: string) {\n  const query = useMemo(() =&gt; ({\n    measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;] as const,\n    dimensions: [&#39;Employees.departmentName&#39;] as const,\n    filters: departmentId ? [{\n      member: &#39;Employees.departmentName&#39; as const,\n      operator: &#39;equals&#39; as const,\n      values: [departmentId]\n    }] : []\n  }), [departmentId])\n\n  return useCubeQuery(query)\n}\n\n// Type-safe component with inferred result types\nfunction EmployeeDashboard({ departmentId }: { departmentId?: string }) {\n  const { resultSet, isLoading, error } = useEmployeeMetrics(departmentId)\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;\n  if (error) return &lt;div&gt;Error: {error.message}&lt;/div&gt;\n  if (!resultSet) return &lt;div&gt;No data&lt;/div&gt;\n\n  // ✅ TypeScript knows the exact shape of rawData()\n  const data = resultSet.rawData() // Type inferred from query\n  \n  return (\n    &lt;div&gt;\n      {data.map((row, index) =&gt; (\n        &lt;div key={index}&gt;\n          {/* ✅ All properties are type-checked */}\n          Department: {row[&#39;Employees.departmentName&#39;]}\n          Count: {row[&#39;Employees.count&#39;]}\n          Avg Salary: ${row[&#39;Employees.avgSalary&#39;].toLocaleString()}\n        &lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Type-safe query hooks\nfunction useEmployeeMetrics(departmentId?: string) {\n  const query = useMemo(() =&gt; ({\n    measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;] as const,\n    dimensions: [&#39;Employees.departmentName&#39;] as const,\n    filters: departmentId ? [{\n      member: &#39;Employees.departmentName&#39; as const,\n      operator: &#39;equals&#39; as const,\n      values: [departmentId]\n    }] : []\n  }), [departmentId])\n\n  return useCubeQuery(query)\n}\n\n// Type-safe component with inferred result types\nfunction EmployeeDashboard({ departmentId }: { departmentId?: string }) {\n  const { resultSet, isLoading, error } = useEmployeeMetrics(departmentId)\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;\n  if (error) return &lt;div&gt;Error: {error.message}&lt;/div&gt;\n  if (!resultSet) return &lt;div&gt;No data&lt;/div&gt;\n\n  // ✅ TypeScript knows the exact shape of rawData()\n  const data = resultSet.rawData() // Type inferred from query\n  \n  return (\n    &lt;div&gt;\n      {data.map((row, index) =&gt; (\n        &lt;div key={index}&gt;\n          {/* ✅ All properties are type-checked */}\n          Department: {row[&#39;Employees.departmentName&#39;]}\n          Count: {row[&#39;Employees.count&#39;]}\n          Avg Salary: ${row[&#39;Employees.avgSalary&#39;].toLocaleString()}\n        &lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"chart-component-type-safety\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Chart Component Type Safety</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Type-safe chart configuration\ninterface TypedChartConfig&lt;T extends CubeQuery&gt; {\n  xAxis: NonNullable&lt;T[&#39;dimensions&#39;]&gt;[number][]\n  yAxis: NonNullable&lt;T[&#39;measures&#39;]&gt;[number][]\n  series?: NonNullable&lt;T[&#39;dimensions&#39;]&gt;[number][]\n}\n\ninterface TypedChartProps&lt;T extends CubeQuery&gt; {\n  resultSet: CubeResultSet\n  chartConfig: TypedChartConfig&lt;T&gt;\n  displayConfig?: DisplayConfig\n}\n\n// Generic chart component with type safety\nfunction TypedBarChart&lt;T extends CubeQuery&gt;({\n  resultSet,\n  chartConfig,\n  displayConfig\n}: TypedChartProps&lt;T&gt;) {\n  // ✅ chartConfig properties are type-checked against query\n  // ✅ resultSet data structure is known\n  return (\n    &lt;RechartsBarChart\n      resultSet={resultSet}\n      chartConfig={chartConfig}\n      displayConfig={displayConfig}\n    /&gt;\n  )\n}\n\n// Usage with full type inference\nconst chartQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  timeDimensions: []\n} as const\n\nfunction EmployeeChart() {\n  const { resultSet } = useCubeQuery(chartQuery)\n  \n  return (\n    &lt;TypedBarChart\n      resultSet={resultSet!}\n      chartConfig={{\n        xAxis: [&#39;Employees.departmentName&#39;], // ✅ Type-checked\n        yAxis: [&#39;Employees.count&#39;],          // ✅ Type-checked\n        // series: [&#39;Employees.invalidField&#39;] // ❌ Would cause TypeScript error\n      }}\n    /&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Type-safe chart configuration\ninterface TypedChartConfig&lt;T extends CubeQuery&gt; {\n  xAxis: NonNullable&lt;T[&#39;dimensions&#39;]&gt;[number][]\n  yAxis: NonNullable&lt;T[&#39;measures&#39;]&gt;[number][]\n  series?: NonNullable&lt;T[&#39;dimensions&#39;]&gt;[number][]\n}\n\ninterface TypedChartProps&lt;T extends CubeQuery&gt; {\n  resultSet: CubeResultSet\n  chartConfig: TypedChartConfig&lt;T&gt;\n  displayConfig?: DisplayConfig\n}\n\n// Generic chart component with type safety\nfunction TypedBarChart&lt;T extends CubeQuery&gt;({\n  resultSet,\n  chartConfig,\n  displayConfig\n}: TypedChartProps&lt;T&gt;) {\n  // ✅ chartConfig properties are type-checked against query\n  // ✅ resultSet data structure is known\n  return (\n    &lt;RechartsBarChart\n      resultSet={resultSet}\n      chartConfig={chartConfig}\n      displayConfig={displayConfig}\n    /&gt;\n  )\n}\n\n// Usage with full type inference\nconst chartQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  timeDimensions: []\n} as const\n\nfunction EmployeeChart() {\n  const { resultSet } = useCubeQuery(chartQuery)\n  \n  return (\n    &lt;TypedBarChart\n      resultSet={resultSet!}\n      chartConfig={{\n        xAxis: [&#39;Employees.departmentName&#39;], // ✅ Type-checked\n        yAxis: [&#39;Employees.count&#39;],          // ✅ Type-checked\n        // series: [&#39;Employees.invalidField&#39;] // ❌ Would cause TypeScript error\n      }}\n    /&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Patterns</h2><h3 id=\"type-safe-cube-registry\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Type-Safe Cube Registry</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Strongly typed cube registry\nclass TypedCubeRegistry&lt;TSchema extends Record&lt;string, any&gt;&gt; {\n  private cubes = new Map&lt;string, Cube&lt;TSchema&gt;&gt;()\n\n  registerCube&lt;TCube extends Cube&lt;TSchema&gt;&gt;(cube: TCube): void {\n    this.cubes.set(cube.name, cube)\n  }\n\n  getCube&lt;K extends string&gt;(name: K): Cube&lt;TSchema&gt; | undefined {\n    return this.cubes.get(name)\n  }\n\n  getAllCubes(): Cube&lt;TSchema&gt;[] {\n    return Array.from(this.cubes.values())\n  }\n\n  // Type-safe cube field extraction\n  getCubeFields(cubeName: string): {\n    dimensions: string[]\n    measures: string[]\n  } {\n    const cube = this.getCube(cubeName)\n    if (!cube) throw new Error(`Cube ${cubeName} not found`)\n\n    return {\n      dimensions: Object.keys(cube.dimensions),\n      measures: Object.keys(cube.measures)\n    }\n  }\n}\n\n// Usage\nconst registry = new TypedCubeRegistry&lt;Schema&gt;()\nregistry.registerCube(employeesCube)\nregistry.registerCube(departmentsCube)\n\n// ✅ Type-safe access\nconst empCube = registry.getCube(&#39;Employees&#39;)\nconst fields = registry.getCubeFields(&#39;Employees&#39;)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Strongly typed cube registry\nclass TypedCubeRegistry&lt;TSchema extends Record&lt;string, any&gt;&gt; {\n  private cubes = new Map&lt;string, Cube&lt;TSchema&gt;&gt;()\n\n  registerCube&lt;TCube extends Cube&lt;TSchema&gt;&gt;(cube: TCube): void {\n    this.cubes.set(cube.name, cube)\n  }\n\n  getCube&lt;K extends string&gt;(name: K): Cube&lt;TSchema&gt; | undefined {\n    return this.cubes.get(name)\n  }\n\n  getAllCubes(): Cube&lt;TSchema&gt;[] {\n    return Array.from(this.cubes.values())\n  }\n\n  // Type-safe cube field extraction\n  getCubeFields(cubeName: string): {\n    dimensions: string[]\n    measures: string[]\n  } {\n    const cube = this.getCube(cubeName)\n    if (!cube) throw new Error(`Cube ${cubeName} not found`)\n\n    return {\n      dimensions: Object.keys(cube.dimensions),\n      measures: Object.keys(cube.measures)\n    }\n  }\n}\n\n// Usage\nconst registry = new TypedCubeRegistry&lt;Schema&gt;()\nregistry.registerCube(employeesCube)\nregistry.registerCube(departmentsCube)\n\n// ✅ Type-safe access\nconst empCube = registry.getCube(&#39;Employees&#39;)\nconst fields = registry.getCubeFields(&#39;Employees&#39;)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"discriminated-unions-for-query-types\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Discriminated Unions for Query Types</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Different query types with discriminated unions\ntype MetricQuery = {\n  type: &#39;metric&#39;\n  measures: string[]\n  dimensions?: never\n  timeDimensions?: never\n}\n\ntype DimensionalQuery = {\n  type: &#39;dimensional&#39;\n  measures: string[]\n  dimensions: string[]\n  timeDimensions?: never\n}\n\ntype TimeSeriesQuery = {\n  type: &#39;timeSeries&#39;\n  measures: string[]\n  dimensions?: string[]\n  timeDimensions: TimeDimension[]\n}\n\ntype TypedCubeQuery = MetricQuery | DimensionalQuery | TimeSeriesQuery\n\n// Type-safe query processor\nfunction processQuery(query: TypedCubeQuery): ProcessedQuery {\n  switch (query.type) {\n    case &#39;metric&#39;:\n      // ✅ TypeScript knows dimensions is undefined\n      return { ...query, groupBy: [] }\n      \n    case &#39;dimensional&#39;:\n      // ✅ TypeScript knows dimensions exists\n      return { ...query, groupBy: query.dimensions }\n      \n    case &#39;timeSeries&#39;:\n      // ✅ TypeScript knows timeDimensions exists\n      return { \n        ...query, \n        groupBy: [...(query.dimensions || []), ...query.timeDimensions.map(td =&gt; td.dimension)]\n      }\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Different query types with discriminated unions\ntype MetricQuery = {\n  type: &#39;metric&#39;\n  measures: string[]\n  dimensions?: never\n  timeDimensions?: never\n}\n\ntype DimensionalQuery = {\n  type: &#39;dimensional&#39;\n  measures: string[]\n  dimensions: string[]\n  timeDimensions?: never\n}\n\ntype TimeSeriesQuery = {\n  type: &#39;timeSeries&#39;\n  measures: string[]\n  dimensions?: string[]\n  timeDimensions: TimeDimension[]\n}\n\ntype TypedCubeQuery = MetricQuery | DimensionalQuery | TimeSeriesQuery\n\n// Type-safe query processor\nfunction processQuery(query: TypedCubeQuery): ProcessedQuery {\n  switch (query.type) {\n    case &#39;metric&#39;:\n      // ✅ TypeScript knows dimensions is undefined\n      return { ...query, groupBy: [] }\n      \n    case &#39;dimensional&#39;:\n      // ✅ TypeScript knows dimensions exists\n      return { ...query, groupBy: query.dimensions }\n      \n    case &#39;timeSeries&#39;:\n      // ✅ TypeScript knows timeDimensions exists\n      return { \n        ...query, \n        groupBy: [...(query.dimensions || []), ...query.timeDimensions.map(td =&gt; td.dimension)]\n      }\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"type-safe-error-handling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Type-Safe Error Handling</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Typed error classes\nabstract class DrizzleCubeError extends Error {\n  abstract readonly code: string\n  abstract readonly statusCode: number\n}\n\nclass SecurityContextError extends DrizzleCubeError {\n  readonly code = &#39;SECURITY_CONTEXT_ERROR&#39;\n  readonly statusCode = 401\n  \n  constructor(message: string, public readonly context?: Partial&lt;SecurityContext&gt;) {\n    super(message)\n  }\n}\n\nclass QueryValidationError extends DrizzleCubeError {\n  readonly code = &#39;QUERY_VALIDATION_ERROR&#39;\n  readonly statusCode = 400\n  \n  constructor(message: string, public readonly query?: CubeQuery) {\n    super(message)\n  }\n}\n\nclass DatabaseExecutionError extends DrizzleCubeError {\n  readonly code = &#39;DATABASE_EXECUTION_ERROR&#39;\n  readonly statusCode = 500\n  \n  constructor(message: string, public readonly sqlError?: Error) {\n    super(message)\n  }\n}\n\n// Type-safe error handling\nfunction handleDrizzleCubeError(error: DrizzleCubeError): ErrorResponse {\n  switch (error.code) {\n    case &#39;SECURITY_CONTEXT_ERROR&#39;:\n      return {\n        error: &#39;Authentication required&#39;,\n        code: error.code,\n        statusCode: error.statusCode\n      }\n      \n    case &#39;QUERY_VALIDATION_ERROR&#39;:\n      return {\n        error: error.message,\n        code: error.code,\n        statusCode: error.statusCode,\n        query: error.query // ✅ Type-safe access\n      }\n      \n    case &#39;DATABASE_EXECUTION_ERROR&#39;:\n      return {\n        error: &#39;Database error occurred&#39;,\n        code: error.code,\n        statusCode: error.statusCode\n        // Don&#39;t expose internal database errors\n      }\n      \n    default:\n      // ✅ TypeScript ensures exhaustive checking\n      const _exhaustive: never = error\n      throw new Error(`Unhandled error type: ${(_exhaustive as any).code}`)\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Typed error classes\nabstract class DrizzleCubeError extends Error {\n  abstract readonly code: string\n  abstract readonly statusCode: number\n}\n\nclass SecurityContextError extends DrizzleCubeError {\n  readonly code = &#39;SECURITY_CONTEXT_ERROR&#39;\n  readonly statusCode = 401\n  \n  constructor(message: string, public readonly context?: Partial&lt;SecurityContext&gt;) {\n    super(message)\n  }\n}\n\nclass QueryValidationError extends DrizzleCubeError {\n  readonly code = &#39;QUERY_VALIDATION_ERROR&#39;\n  readonly statusCode = 400\n  \n  constructor(message: string, public readonly query?: CubeQuery) {\n    super(message)\n  }\n}\n\nclass DatabaseExecutionError extends DrizzleCubeError {\n  readonly code = &#39;DATABASE_EXECUTION_ERROR&#39;\n  readonly statusCode = 500\n  \n  constructor(message: string, public readonly sqlError?: Error) {\n    super(message)\n  }\n}\n\n// Type-safe error handling\nfunction handleDrizzleCubeError(error: DrizzleCubeError): ErrorResponse {\n  switch (error.code) {\n    case &#39;SECURITY_CONTEXT_ERROR&#39;:\n      return {\n        error: &#39;Authentication required&#39;,\n        code: error.code,\n        statusCode: error.statusCode\n      }\n      \n    case &#39;QUERY_VALIDATION_ERROR&#39;:\n      return {\n        error: error.message,\n        code: error.code,\n        statusCode: error.statusCode,\n        query: error.query // ✅ Type-safe access\n      }\n      \n    case &#39;DATABASE_EXECUTION_ERROR&#39;:\n      return {\n        error: &#39;Database error occurred&#39;,\n        code: error.code,\n        statusCode: error.statusCode\n        // Don&#39;t expose internal database errors\n      }\n      \n    default:\n      // ✅ TypeScript ensures exhaustive checking\n      const _exhaustive: never = error\n      throw new Error(`Unhandled error type: ${(_exhaustive as any).code}`)\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"testing-typescript\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing TypeScript</h2><h3 id=\"type-safe-test-utilities\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Type-Safe Test Utilities</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Type-safe test data factory\nfunction createTestData&lt;T extends Record&lt;string, any&gt;&gt;(\n  schema: T,\n  overrides: Partial&lt;InferSelectModel&lt;T[keyof T]&gt;&gt; = {}\n): InferInsertModel&lt;T[keyof T]&gt; {\n  // Generate test data with proper types\n  return {\n    id: 1,\n    name: &#39;Test Employee&#39;,\n    email: &#39;test@example.com&#39;,\n    departmentId: 1,\n    salary: 50000,\n    active: true,\n    createdAt: new Date(),\n    organisationId: &#39;test-org&#39;,\n    ...overrides\n  } as InferInsertModel&lt;T[keyof T]&gt;\n}\n\n// Type-safe mock security context\nfunction createMockSecurityContext(\n  overrides: Partial&lt;SecurityContext&gt; = {}\n): SecurityContext {\n  return {\n    organisationId: &#39;test-org&#39;,\n    userId: &#39;test-user&#39;,\n    userRole: &#39;admin&#39;,\n    ...overrides\n  } as SecurityContext\n}\n\n// Type-safe test queries\nconst testQueries = {\n  basicCount: {\n    measures: [&#39;Employees.count&#39;],\n    dimensions: []\n  },\n  departmentBreakdown: {\n    measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;]\n  }\n} as const\n\n// Test with full type safety\ndescribe(&#39;TypeScript Integration&#39;, () =&gt; {\n  it(&#39;should handle queries with proper types&#39;, async () =&gt; {\n    const query = testQueries.departmentBreakdown\n    const context = createMockSecurityContext()\n    \n    const result = await semanticLayer.load(query, context)\n    const data = result.rawData()\n    \n    // ✅ TypeScript knows exact structure\n    expect(data[0][&#39;Employees.count&#39;]).toBeTypeOf(&#39;number&#39;)\n    expect(data[0][&#39;Employees.departmentName&#39;]).toBeTypeOf(&#39;string&#39;)\n    expect(data[0][&#39;Employees.avgSalary&#39;]).toBeTypeOf(&#39;number&#39;)\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Type-safe test data factory\nfunction createTestData&lt;T extends Record&lt;string, any&gt;&gt;(\n  schema: T,\n  overrides: Partial&lt;InferSelectModel&lt;T[keyof T]&gt;&gt; = {}\n): InferInsertModel&lt;T[keyof T]&gt; {\n  // Generate test data with proper types\n  return {\n    id: 1,\n    name: &#39;Test Employee&#39;,\n    email: &#39;test@example.com&#39;,\n    departmentId: 1,\n    salary: 50000,\n    active: true,\n    createdAt: new Date(),\n    organisationId: &#39;test-org&#39;,\n    ...overrides\n  } as InferInsertModel&lt;T[keyof T]&gt;\n}\n\n// Type-safe mock security context\nfunction createMockSecurityContext(\n  overrides: Partial&lt;SecurityContext&gt; = {}\n): SecurityContext {\n  return {\n    organisationId: &#39;test-org&#39;,\n    userId: &#39;test-user&#39;,\n    userRole: &#39;admin&#39;,\n    ...overrides\n  } as SecurityContext\n}\n\n// Type-safe test queries\nconst testQueries = {\n  basicCount: {\n    measures: [&#39;Employees.count&#39;],\n    dimensions: []\n  },\n  departmentBreakdown: {\n    measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;]\n  }\n} as const\n\n// Test with full type safety\ndescribe(&#39;TypeScript Integration&#39;, () =&gt; {\n  it(&#39;should handle queries with proper types&#39;, async () =&gt; {\n    const query = testQueries.departmentBreakdown\n    const context = createMockSecurityContext()\n    \n    const result = await semanticLayer.load(query, context)\n    const data = result.rawData()\n    \n    // ✅ TypeScript knows exact structure\n    expect(data[0][&#39;Employees.count&#39;]).toBeTypeOf(&#39;number&#39;)\n    expect(data[0][&#39;Employees.departmentName&#39;]).toBeTypeOf(&#39;string&#39;)\n    expect(data[0][&#39;Employees.avgSalary&#39;]).toBeTypeOf(&#39;number&#39;)\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><h3 id=\"1-schema-first-development\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">1. Schema-First Development</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Always start with your Drizzle schema and let types flow from there:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// ✅ Good: Schema drives types\nconst schema = { users, orders, products }\ntype Schema = typeof schema\n\nconst usersCube: Cube&lt;Schema&gt; = defineCube(&#39;Users&#39;, {\n  sql: (ctx) =&gt; ({ from: schema.users, where: /* ... */ })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// ✅ Good: Schema drives types\nconst schema = { users, orders, products }\ntype Schema = typeof schema\n\nconst usersCube: Cube&lt;Schema&gt; = defineCube(&#39;Users&#39;, {\n  sql: (ctx) =&gt; ({ from: schema.users, where: /* ... */ })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"2-strict-type-checking\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">2. Strict Type Checking</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Enable strict TypeScript settings:</p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">// tsconfig.json\n{\n  &quot;compilerOptions&quot;: {\n    &quot;strict&quot;: true,\n    &quot;noImplicitAny&quot;: true,\n    &quot;strictNullChecks&quot;: true,\n    &quot;strictFunctionTypes&quot;: true,\n    &quot;noImplicitReturns&quot;: true,\n    &quot;noImplicitThis&quot;: true\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// tsconfig.json\n{\n  &quot;compilerOptions&quot;: {\n    &quot;strict&quot;: true,\n    &quot;noImplicitAny&quot;: true,\n    &quot;strictNullChecks&quot;: true,\n    &quot;strictFunctionTypes&quot;: true,\n    &quot;noImplicitReturns&quot;: true,\n    &quot;noImplicitThis&quot;: true\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"3-generic-constraint-usage\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">3. Generic Constraint Usage</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Use proper generic constraints for type safety:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// ✅ Good: Constrained generics\nfunction createCube&lt;TSchema extends Record&lt;string, any&gt;&gt;(\n  name: string,\n  config: CubeConfig&lt;TSchema&gt;\n): Cube&lt;TSchema&gt; {\n  return defineCube(name, config)\n}\n\n// ❌ Avoid: Unconstrained any\nfunction createCube(name: string, config: any): any {\n  return defineCube(name, config)\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// ✅ Good: Constrained generics\nfunction createCube&lt;TSchema extends Record&lt;string, any&gt;&gt;(\n  name: string,\n  config: CubeConfig&lt;TSchema&gt;\n): Cube&lt;TSchema&gt; {\n  return defineCube(name, config)\n}\n\n// ❌ Avoid: Unconstrained any\nfunction createCube(name: string, config: any): any {\n  return defineCube(name, config)\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"4-type-guards\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">4. Type Guards</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Use type guards for runtime type safety:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function isValidQuery(query: unknown): query is CubeQuery {\n  return (\n    typeof query === &#39;object&#39; &amp;&amp;\n    query !== null &amp;&amp;\n    (&#39;measures&#39; in query || &#39;dimensions&#39; in query)\n  )\n}\n\nfunction isCubeError(error: unknown): error is DrizzleCubeError {\n  return error instanceof DrizzleCubeError\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function isValidQuery(query: unknown): query is CubeQuery {\n  return (\n    typeof query === &#39;object&#39; &amp;&amp;\n    query !== null &amp;&amp;\n    (&#39;measures&#39; in query || &#39;dimensions&#39; in query)\n  )\n}\n\nfunction isCubeError(error: unknown): error is DrizzleCubeError {\n  return error instanceof DrizzleCubeError\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Review <a href=\"#\" data-help-link=\"advanced/performance\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Performance</a> considerations for TypeScript</li><li class=\"leading-relaxed\">Explore <a href=\"#\" data-help-link=\"advanced/troubleshooting\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Troubleshooting</a> type-related issues</li><li class=\"leading-relaxed\">Check out TypeScript examples in the repository</li><li class=\"leading-relaxed\">Set up proper IDE integration for the best development experience</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Enhanced type inference for complex queries</li><li class=\"leading-relaxed\">Automatic type generation from cube definitions</li><li class=\"leading-relaxed\">IDE plugins for Drizzle Cube development</li><li class=\"leading-relaxed\">Type-safe schema migration tools</li><li class=\"leading-relaxed\">Runtime type validation utilities</li><li class=\"leading-relaxed\">Advanced generic patterns for cube composition</li></ul>",
    "path": "advanced/typescript.md"
  },
  {
    "slug": "client",
    "title": "React Client",
    "content": "<h1 id=\"react-client\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">React Client</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">The Drizzle Cube React client provides pre-built components and hooks for creating analytics dashboards and data visualizations with minimal code.</p><h2 id=\"installation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Installation</h2><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install drizzle-cube react react-dom recharts react-grid-layout</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install drizzle-cube react react-dom recharts react-grid-layout\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"dependencies-requirements\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dependencies &amp; Requirements</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Required Dependencies:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">react</code> (^18.2.0) - React framework</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">react-dom</code> (^18.2.0) - React DOM rendering</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">recharts</code> (^2.8.0) - Chart visualization library</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">react-grid-layout</code> (^1.4.0) - Dashboard grid layout</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Optional Dependencies:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">@heroicons/react</code> (^2.2.0) - Icons used in components</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">@tanstack/react-query</code> (^5.0.0) - Data fetching and caching</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">react-router-dom</code> (^6.8.0) - Routing for multi-page dashboards</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Tailwind CSS v3 Required:</strong>\nComponents are styled with Tailwind CSS v3 classes. You must have Tailwind CSS v3 configured in your project:</p><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install -D tailwindcss postcss</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install -D tailwindcss postcss\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">Configure your <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">tailwind.config.js</code> to include the drizzle-cube components:</p><div class=\"relative group\">\n    <pre class=\"language-javascript rounded-lg overflow-x-auto mb-4\"><code class=\"language-javascript\">/** @type {import(&#39;tailwindcss&#39;).Config} */\nexport default {\n  content: [\n    &#39;./src/**/*.{js,ts,jsx,tsx}&#39;,\n    &#39;./node_modules/drizzle-cube/dist/**/*.js&#39;, // Include drizzle-cube components\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"/** @type {import(&#39;tailwindcss&#39;).Config} */\nexport default {\n  content: [\n    &#39;./src/**/*.{js,ts,jsx,tsx}&#39;,\n    &#39;./node_modules/drizzle-cube/dist/**/*.js&#39;, // Include drizzle-cube components\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"usage-options\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Usage Options</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Option 1: Import Components (Recommended)</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { AnalyticsDashboard, CubeProvider } from &#39;drizzle-cube/client&#39;;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { AnalyticsDashboard, CubeProvider } from &#39;drizzle-cube/client&#39;;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Option 2: Copy-Paste for Customization</strong>\nFor more control over styling and behavior, you can copy component code from the complete example at <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">/examples/hono/client</code> in the repository or view the live version at <a href=\"https://try.drizzle-cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">try.drizzle-cube.dev</a>.</p><h2 id=\"quick-start\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Quick Start</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import React from &#39;react&#39;;\nimport { CubeProvider, AnalyticsDashboard } from &#39;drizzle-cube/client&#39;;\n\nfunction App() {\n  const cubeApi = {\n    url: &#39;/api/cube&#39;,\n    headers: {\n      &#39;Authorization&#39;: &#39;your-token&#39;, // Token is used as-is, no &#39;Bearer&#39; prefix needed\n      &#39;X-Organisation-ID&#39;: &#39;1&#39;\n    }\n  };\n\n  return (\n    &lt;CubeProvider cubeApi={cubeApi}&gt;\n      &lt;AnalyticsDashboard\n        initialLayout={[\n          {\n            id: &#39;revenue-chart&#39;,\n            title: &#39;Monthly Revenue&#39;,\n            chartType: &#39;line&#39;,\n            query: {\n              measures: [&#39;Sales.totalRevenue&#39;],\n              timeDimensions: [{\n                dimension: &#39;Sales.orderDate&#39;,\n                granularity: &#39;month&#39;\n              }]\n            }\n          }\n        ]}\n      /&gt;\n    &lt;/CubeProvider&gt;\n  );\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import React from &#39;react&#39;;\nimport { CubeProvider, AnalyticsDashboard } from &#39;drizzle-cube/client&#39;;\n\nfunction App() {\n  const cubeApi = {\n    url: &#39;/api/cube&#39;,\n    headers: {\n      &#39;Authorization&#39;: &#39;your-token&#39;, // Token is used as-is, no &#39;Bearer&#39; prefix needed\n      &#39;X-Organisation-ID&#39;: &#39;1&#39;\n    }\n  };\n\n  return (\n    &lt;CubeProvider cubeApi={cubeApi}&gt;\n      &lt;AnalyticsDashboard\n        initialLayout={[\n          {\n            id: &#39;revenue-chart&#39;,\n            title: &#39;Monthly Revenue&#39;,\n            chartType: &#39;line&#39;,\n            query: {\n              measures: [&#39;Sales.totalRevenue&#39;],\n              timeDimensions: [{\n                dimension: &#39;Sales.orderDate&#39;,\n                granularity: &#39;month&#39;\n              }]\n            }\n          }\n        ]}\n      /&gt;\n    &lt;/CubeProvider&gt;\n  );\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"core-components\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Core Components</h2><h3 id=\"cubeprovider\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">CubeProvider</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The foundation component that provides cube API context:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { CubeProvider } from &#39;drizzle-cube/client&#39;;\n\nfunction App() {\n  const cubeApi = {\n    url: &#39;/api/cube&#39;,\n    headers: {\n      &#39;Authorization&#39;: &#39;your-jwt-token&#39;, // Token is used as-is, no &#39;Bearer&#39; prefix needed\n      &#39;X-Organisation-ID&#39;: &#39;123&#39;\n    }\n  };\n\n  return (\n    &lt;CubeProvider cubeApi={cubeApi}&gt;\n      {/* Your dashboard components */}\n    &lt;/CubeProvider&gt;\n  );\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { CubeProvider } from &#39;drizzle-cube/client&#39;;\n\nfunction App() {\n  const cubeApi = {\n    url: &#39;/api/cube&#39;,\n    headers: {\n      &#39;Authorization&#39;: &#39;your-jwt-token&#39;, // Token is used as-is, no &#39;Bearer&#39; prefix needed\n      &#39;X-Organisation-ID&#39;: &#39;123&#39;\n    }\n  };\n\n  return (\n    &lt;CubeProvider cubeApi={cubeApi}&gt;\n      {/* Your dashboard components */}\n    &lt;/CubeProvider&gt;\n  );\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"analyticsdashboard\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">AnalyticsDashboard</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">A complete dashboard with drag-and-drop layout:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { AnalyticsDashboard } from &#39;drizzle-cube/client&#39;;\n\n&lt;AnalyticsDashboard\n  initialLayout={[\n    {\n      id: &#39;sales-overview&#39;,\n      title: &#39;Sales Overview&#39;, \n      chartType: &#39;bar&#39;,\n      query: {\n        measures: [&#39;Sales.totalRevenue&#39;, &#39;Sales.orderCount&#39;],\n        dimensions: [&#39;Sales.productCategory&#39;]\n      },\n      layout: { x: 0, y: 0, w: 6, h: 4 }\n    },\n    {\n      id: &#39;sales-trend&#39;,\n      title: &#39;Sales Trend&#39;,\n      chartType: &#39;line&#39;, \n      query: {\n        measures: [&#39;Sales.totalRevenue&#39;],\n        timeDimensions: [{\n          dimension: &#39;Sales.orderDate&#39;,\n          granularity: &#39;day&#39;\n        }]\n      },\n      layout: { x: 6, y: 0, w: 6, h: 4 }\n    }\n  ]}\n  \n  onLayoutChange={(layout) =&gt; {\n    // Save layout to user preferences\n    localStorage.setItem(&#39;dashboard-layout&#39;, JSON.stringify(layout));\n  }}\n  \n  showEditControls={true}\n  allowResize={true}\n  allowDrag={true}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { AnalyticsDashboard } from &#39;drizzle-cube/client&#39;;\n\n&lt;AnalyticsDashboard\n  initialLayout={[\n    {\n      id: &#39;sales-overview&#39;,\n      title: &#39;Sales Overview&#39;, \n      chartType: &#39;bar&#39;,\n      query: {\n        measures: [&#39;Sales.totalRevenue&#39;, &#39;Sales.orderCount&#39;],\n        dimensions: [&#39;Sales.productCategory&#39;]\n      },\n      layout: { x: 0, y: 0, w: 6, h: 4 }\n    },\n    {\n      id: &#39;sales-trend&#39;,\n      title: &#39;Sales Trend&#39;,\n      chartType: &#39;line&#39;, \n      query: {\n        measures: [&#39;Sales.totalRevenue&#39;],\n        timeDimensions: [{\n          dimension: &#39;Sales.orderDate&#39;,\n          granularity: &#39;day&#39;\n        }]\n      },\n      layout: { x: 6, y: 0, w: 6, h: 4 }\n    }\n  ]}\n  \n  onLayoutChange={(layout) =&gt; {\n    // Save layout to user preferences\n    localStorage.setItem(&#39;dashboard-layout&#39;, JSON.stringify(layout));\n  }}\n  \n  showEditControls={true}\n  allowResize={true}\n  allowDrag={true}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"analyticspage\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">AnalyticsPage</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">A complete page with sidebar filters and charts:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { AnalyticsPage } from &#39;drizzle-cube/client&#39;;\n\n&lt;AnalyticsPage\n  title=&quot;Sales Analytics&quot;\n  description=&quot;Comprehensive sales performance metrics&quot;\n  \n  filters={[\n    {\n      member: &#39;Sales.productCategory&#39;,\n      title: &#39;Product Category&#39;,\n      type: &#39;select&#39;\n    },\n    {\n      member: &#39;Sales.orderDate&#39;,\n      title: &#39;Date Range&#39;, \n      type: &#39;dateRange&#39;\n    }\n  ]}\n  \n  charts={[\n    {\n      id: &#39;revenue-by-category&#39;,\n      title: &#39;Revenue by Category&#39;,\n      chartType: &#39;pie&#39;,\n      query: {\n        measures: [&#39;Sales.totalRevenue&#39;],\n        dimensions: [&#39;Sales.productCategory&#39;]\n      }\n    }\n  ]}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { AnalyticsPage } from &#39;drizzle-cube/client&#39;;\n\n&lt;AnalyticsPage\n  title=&quot;Sales Analytics&quot;\n  description=&quot;Comprehensive sales performance metrics&quot;\n  \n  filters={[\n    {\n      member: &#39;Sales.productCategory&#39;,\n      title: &#39;Product Category&#39;,\n      type: &#39;select&#39;\n    },\n    {\n      member: &#39;Sales.orderDate&#39;,\n      title: &#39;Date Range&#39;, \n      type: &#39;dateRange&#39;\n    }\n  ]}\n  \n  charts={[\n    {\n      id: &#39;revenue-by-category&#39;,\n      title: &#39;Revenue by Category&#39;,\n      chartType: &#39;pie&#39;,\n      query: {\n        measures: [&#39;Sales.totalRevenue&#39;],\n        dimensions: [&#39;Sales.productCategory&#39;]\n      }\n    }\n  ]}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"analyticsportlet\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">AnalyticsPortlet</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Individual chart components:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { AnalyticsPortlet } from &#39;drizzle-cube/client&#39;;\n\n&lt;AnalyticsPortlet\n  title=&quot;Monthly Sales Trend&quot;\n  chartType=&quot;line&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;],\n    timeDimensions: [{\n      dimension: &#39;Sales.orderDate&#39;,\n      granularity: &#39;month&#39;\n    }]\n  }}\n  \n  showControls={true}\n  allowExport={true}\n  refreshInterval={30000} // Refresh every 30 seconds\n  \n  onDataLoad={(data) =&gt; {\n    console.log(&#39;Chart data loaded:&#39;, data);\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { AnalyticsPortlet } from &#39;drizzle-cube/client&#39;;\n\n&lt;AnalyticsPortlet\n  title=&quot;Monthly Sales Trend&quot;\n  chartType=&quot;line&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;],\n    timeDimensions: [{\n      dimension: &#39;Sales.orderDate&#39;,\n      granularity: &#39;month&#39;\n    }]\n  }}\n  \n  showControls={true}\n  allowExport={true}\n  refreshInterval={30000} // Refresh every 30 seconds\n  \n  onDataLoad={(data) =&gt; {\n    console.log(&#39;Chart data loaded:&#39;, data);\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"querybuilder\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">QueryBuilder</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Interactive query builder with API configuration:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { QueryBuilder } from &#39;drizzle-cube/client&#39;;\n\n&lt;QueryBuilder\n  initialQuery={{\n    measures: [&#39;Sales.totalRevenue&#39;],\n    dimensions: [&#39;Sales.productCategory&#39;]\n  }}\n  \n  // API configuration (optional - uses context by default)\n  apiConfig={{\n    apiUrl: &#39;/api/cube&#39;,\n    authToken: &#39;your-token&#39;\n  }}\n  \n  // Show API setup panel for configuration\n  showSetupPanel={true}\n  \n  onQueryChange={(query) =&gt; {\n    console.log(&#39;Query updated:&#39;, query);\n  }}\n  \n  onExecute={(query, data) =&gt; {\n    console.log(&#39;Query executed:&#39;, { query, data });\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { QueryBuilder } from &#39;drizzle-cube/client&#39;;\n\n&lt;QueryBuilder\n  initialQuery={{\n    measures: [&#39;Sales.totalRevenue&#39;],\n    dimensions: [&#39;Sales.productCategory&#39;]\n  }}\n  \n  // API configuration (optional - uses context by default)\n  apiConfig={{\n    apiUrl: &#39;/api/cube&#39;,\n    authToken: &#39;your-token&#39;\n  }}\n  \n  // Show API setup panel for configuration\n  showSetupPanel={true}\n  \n  onQueryChange={(query) =&gt; {\n    console.log(&#39;Query updated:&#39;, query);\n  }}\n  \n  onExecute={(query, data) =&gt; {\n    console.log(&#39;Query executed:&#39;, { query, data });\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">QueryBuilder Features:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Interactive Cube Explorer</strong>: Browse available cubes, measures, and dimensions</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Drag &amp; Drop Query Building</strong>: Visual query construction interface  </li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">API Configuration Panel</strong>: Configure endpoint URL and authentication</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Real-time Query Execution</strong>: Execute queries and view results instantly</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">SQL Preview</strong>: View generated SQL for debugging</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dry Run Mode</strong>: Validate queries without execution</li></ul><h2 id=\"chart-types\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Chart Types</h2><h3 id=\"line-charts\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Line Charts</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Perfect for time series data:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">&lt;AnalyticsPortlet\n  chartType=&quot;line&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;],\n    timeDimensions: [{ \n      dimension: &#39;Sales.orderDate&#39;, \n      granularity: &#39;day&#39; \n    }]\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"&lt;AnalyticsPortlet\n  chartType=&quot;line&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;],\n    timeDimensions: [{ \n      dimension: &#39;Sales.orderDate&#39;, \n      granularity: &#39;day&#39; \n    }]\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"bar-charts\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Bar Charts</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Great for comparing categories:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">&lt;AnalyticsPortlet\n  chartType=&quot;bar&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;, &#39;Sales.orderCount&#39;],\n    dimensions: [&#39;Sales.productCategory&#39;]\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"&lt;AnalyticsPortlet\n  chartType=&quot;bar&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;, &#39;Sales.orderCount&#39;],\n    dimensions: [&#39;Sales.productCategory&#39;]\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"pie-charts\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Pie Charts</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Show proportions:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">&lt;AnalyticsPortlet\n  chartType=&quot;pie&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;],\n    dimensions: [&#39;Sales.region&#39;]\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"&lt;AnalyticsPortlet\n  chartType=&quot;pie&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;],\n    dimensions: [&#39;Sales.region&#39;]\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"data-tables\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Data Tables</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Detailed data views:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">&lt;AnalyticsPortlet\n  chartType=&quot;table&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;, &#39;Sales.orderCount&#39;],\n    dimensions: [&#39;Sales.customerName&#39;, &#39;Sales.productCategory&#39;]\n  }}\n  \n  pageSize={20}\n  sortable={true}\n  searchable={true}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"&lt;AnalyticsPortlet\n  chartType=&quot;table&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;, &#39;Sales.orderCount&#39;],\n    dimensions: [&#39;Sales.customerName&#39;, &#39;Sales.productCategory&#39;]\n  }}\n  \n  pageSize={20}\n  sortable={true}\n  searchable={true}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"hooks\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Hooks</h2><h3 id=\"usecubequery\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">useCubeQuery</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Execute queries and get real-time data:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { useCubeQuery } from &#39;drizzle-cube/client&#39;;\n\nfunction SalesMetric() {\n  const { data, isLoading, error, resultSet } = useCubeQuery({\n    measures: [&#39;Sales.totalRevenue&#39;],\n    dimensions: [&#39;Sales.productCategory&#39;],\n    filters: [{\n      member: &#39;Sales.orderDate&#39;,\n      operator: &#39;inDateRange&#39;,\n      values: [&#39;2024-01-01&#39;, &#39;2024-12-31&#39;]\n    }]\n  });\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;;\n  if (error) return &lt;div&gt;Error: {error.message}&lt;/div&gt;;\n\n  // The client automatically handles both old and new response formats\n  // data contains the raw data array from results[0].data or legacy data field\n  // resultSet provides access to the full Cube.js response structure\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Total Revenue: ${data[0]?.[&#39;Sales.totalRevenue&#39;] || 0}&lt;/h2&gt;\n      {/* Access annotation metadata */}\n      &lt;p&gt;Query executed at: {resultSet?.annotation?.lastRefreshTime}&lt;/p&gt;\n      {/* Render your data */}\n    &lt;/div&gt;\n  );\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { useCubeQuery } from &#39;drizzle-cube/client&#39;;\n\nfunction SalesMetric() {\n  const { data, isLoading, error, resultSet } = useCubeQuery({\n    measures: [&#39;Sales.totalRevenue&#39;],\n    dimensions: [&#39;Sales.productCategory&#39;],\n    filters: [{\n      member: &#39;Sales.orderDate&#39;,\n      operator: &#39;inDateRange&#39;,\n      values: [&#39;2024-01-01&#39;, &#39;2024-12-31&#39;]\n    }]\n  });\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;;\n  if (error) return &lt;div&gt;Error: {error.message}&lt;/div&gt;;\n\n  // The client automatically handles both old and new response formats\n  // data contains the raw data array from results[0].data or legacy data field\n  // resultSet provides access to the full Cube.js response structure\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Total Revenue: ${data[0]?.[&#39;Sales.totalRevenue&#39;] || 0}&lt;/h2&gt;\n      {/* Access annotation metadata */}\n      &lt;p&gt;Query executed at: {resultSet?.annotation?.lastRefreshTime}&lt;/p&gt;\n      {/* Render your data */}\n    &lt;/div&gt;\n  );\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"usecubemeta\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">useCubeMeta</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Access cube metadata:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { useCubeMeta } from &#39;drizzle-cube/client&#39;;\n\nfunction MetricSelector() {\n  const { cubes, isLoading } = useCubeMeta();\n\n  if (isLoading) return &lt;div&gt;Loading cubes...&lt;/div&gt;;\n\n  return (\n    &lt;select&gt;\n      {cubes.map(cube =&gt; \n        cube.measures.map(measure =&gt; (\n          &lt;option key={`${cube.name}.${measure.name}`} \n                  value={`${cube.name}.${measure.name}`}&gt;\n            {measure.title || measure.name}\n          &lt;/option&gt;\n        ))\n      )}\n    &lt;/select&gt;\n  );\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { useCubeMeta } from &#39;drizzle-cube/client&#39;;\n\nfunction MetricSelector() {\n  const { cubes, isLoading } = useCubeMeta();\n\n  if (isLoading) return &lt;div&gt;Loading cubes...&lt;/div&gt;;\n\n  return (\n    &lt;select&gt;\n      {cubes.map(cube =&gt; \n        cube.measures.map(measure =&gt; (\n          &lt;option key={`${cube.name}.${measure.name}`} \n                  value={`${cube.name}.${measure.name}`}&gt;\n            {measure.title || measure.name}\n          &lt;/option&gt;\n        ))\n      )}\n    &lt;/select&gt;\n  );\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"customization\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Customization</h2><h3 id=\"custom-chart-components\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Chart Components</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create your own visualizations:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { useCubeQuery } from &#39;drizzle-cube/client&#39;;\nimport { ResponsiveContainer, ComposedChart, Bar, Line, XAxis, YAxis } from &#39;recharts&#39;;\n\nfunction CustomChart({ query }) {\n  const { data, isLoading } = useCubeQuery(query);\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;;\n\n  return (\n    &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;\n      &lt;ComposedChart data={data}&gt;\n        &lt;XAxis dataKey=&quot;Sales.orderDate&quot; /&gt;\n        &lt;YAxis /&gt;\n        &lt;Bar dataKey=&quot;Sales.orderCount&quot; fill=&quot;#8884d8&quot; /&gt;\n        &lt;Line dataKey=&quot;Sales.totalRevenue&quot; stroke=&quot;#82ca9d&quot; /&gt;\n      &lt;/ComposedChart&gt;\n    &lt;/ResponsiveContainer&gt;\n  );\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { useCubeQuery } from &#39;drizzle-cube/client&#39;;\nimport { ResponsiveContainer, ComposedChart, Bar, Line, XAxis, YAxis } from &#39;recharts&#39;;\n\nfunction CustomChart({ query }) {\n  const { data, isLoading } = useCubeQuery(query);\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;;\n\n  return (\n    &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;\n      &lt;ComposedChart data={data}&gt;\n        &lt;XAxis dataKey=&quot;Sales.orderDate&quot; /&gt;\n        &lt;YAxis /&gt;\n        &lt;Bar dataKey=&quot;Sales.orderCount&quot; fill=&quot;#8884d8&quot; /&gt;\n        &lt;Line dataKey=&quot;Sales.totalRevenue&quot; stroke=&quot;#82ca9d&quot; /&gt;\n      &lt;/ComposedChart&gt;\n    &lt;/ResponsiveContainer&gt;\n  );\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"theme-customization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Theme Customization</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Customize the appearance:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { CubeProvider } from &#39;drizzle-cube/client&#39;;\n\nconst theme = {\n  colors: {\n    primary: &#39;#3b82f6&#39;,\n    secondary: &#39;#64748b&#39;, \n    success: &#39;#10b981&#39;,\n    warning: &#39;#f59e0b&#39;,\n    error: &#39;#ef4444&#39;\n  },\n  fonts: {\n    body: &#39;Inter, sans-serif&#39;,\n    mono: &#39;Fira Code, monospace&#39;\n  }\n};\n\n&lt;CubeProvider cubeApi={cubeApi} theme={theme}&gt;\n  {/* Your components */}\n&lt;/CubeProvider&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { CubeProvider } from &#39;drizzle-cube/client&#39;;\n\nconst theme = {\n  colors: {\n    primary: &#39;#3b82f6&#39;,\n    secondary: &#39;#64748b&#39;, \n    success: &#39;#10b981&#39;,\n    warning: &#39;#f59e0b&#39;,\n    error: &#39;#ef4444&#39;\n  },\n  fonts: {\n    body: &#39;Inter, sans-serif&#39;,\n    mono: &#39;Fira Code, monospace&#39;\n  }\n};\n\n&lt;CubeProvider cubeApi={cubeApi} theme={theme}&gt;\n  {/* Your components */}\n&lt;/CubeProvider&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"real-time-updates\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Real-time Updates</h2><h3 id=\"websocket-support\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">WebSocket Support</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Enable real-time data updates:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const cubeApi = {\n  url: &#39;/api/cube&#39;,\n  websocketUrl: &#39;ws://localhost:3000/ws&#39;,\n  headers: {\n    &#39;Authorization&#39;: &#39;token&#39; // Token is used as-is, no &#39;Bearer&#39; prefix needed\n  }\n};\n\n&lt;CubeProvider cubeApi={cubeApi}&gt;\n  &lt;AnalyticsPortlet\n    query={query}\n    realtime={true}\n    refreshInterval={5000}\n  /&gt;\n&lt;/CubeProvider&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const cubeApi = {\n  url: &#39;/api/cube&#39;,\n  websocketUrl: &#39;ws://localhost:3000/ws&#39;,\n  headers: {\n    &#39;Authorization&#39;: &#39;token&#39; // Token is used as-is, no &#39;Bearer&#39; prefix needed\n  }\n};\n\n&lt;CubeProvider cubeApi={cubeApi}&gt;\n  &lt;AnalyticsPortlet\n    query={query}\n    realtime={true}\n    refreshInterval={5000}\n  /&gt;\n&lt;/CubeProvider&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"manual-refresh\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Manual Refresh</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Trigger updates programmatically:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { useCubeQuery } from &#39;drizzle-cube/client&#39;;\n\nfunction RefreshableChart() {\n  const { data, isLoading, refetch } = useCubeQuery(query);\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; refetch()}&gt;\n        Refresh Data\n      &lt;/button&gt;\n      {/* Chart content */}\n    &lt;/div&gt;\n  );\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { useCubeQuery } from &#39;drizzle-cube/client&#39;;\n\nfunction RefreshableChart() {\n  const { data, isLoading, refetch } = useCubeQuery(query);\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; refetch()}&gt;\n        Refresh Data\n      &lt;/button&gt;\n      {/* Chart content */}\n    &lt;/div&gt;\n  );\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"error-handling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Handling</h2><h3 id=\"error-boundaries\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Error Boundaries</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Handle errors gracefully:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { ChartErrorBoundary } from &#39;drizzle-cube/client&#39;;\n\n&lt;ChartErrorBoundary\n  fallback={({ error, resetError }) =&gt; (\n    &lt;div className=&quot;error-state&quot;&gt;\n      &lt;h3&gt;Something went wrong&lt;/h3&gt;\n      &lt;p&gt;{error.message}&lt;/p&gt;\n      &lt;button onClick={resetError}&gt;Try again&lt;/button&gt;\n    &lt;/div&gt;\n  )}\n&gt;\n  &lt;AnalyticsPortlet query={query} /&gt;\n&lt;/ChartErrorBoundary&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { ChartErrorBoundary } from &#39;drizzle-cube/client&#39;;\n\n&lt;ChartErrorBoundary\n  fallback={({ error, resetError }) =&gt; (\n    &lt;div className=&quot;error-state&quot;&gt;\n      &lt;h3&gt;Something went wrong&lt;/h3&gt;\n      &lt;p&gt;{error.message}&lt;/p&gt;\n      &lt;button onClick={resetError}&gt;Try again&lt;/button&gt;\n    &lt;/div&gt;\n  )}\n&gt;\n  &lt;AnalyticsPortlet query={query} /&gt;\n&lt;/ChartErrorBoundary&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"query-validation\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Validation</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Validate queries before execution:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { validateQuery } from &#39;drizzle-cube/client&#39;;\n\nfunction QueryBuilder({ query, onChange }) {\n  const validation = validateQuery(query);\n  \n  if (!validation.isValid) {\n    return (\n      &lt;div className=&quot;validation-errors&quot;&gt;\n        {validation.errors.map(error =&gt; (\n          &lt;div key={error.field}&gt;{error.message}&lt;/div&gt;\n        ))}\n      &lt;/div&gt;\n    );\n  }\n\n  return &lt;AnalyticsPortlet query={query} /&gt;;\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { validateQuery } from &#39;drizzle-cube/client&#39;;\n\nfunction QueryBuilder({ query, onChange }) {\n  const validation = validateQuery(query);\n  \n  if (!validation.isValid) {\n    return (\n      &lt;div className=&quot;validation-errors&quot;&gt;\n        {validation.errors.map(error =&gt; (\n          &lt;div key={error.field}&gt;{error.message}&lt;/div&gt;\n        ))}\n      &lt;/div&gt;\n    );\n  }\n\n  return &lt;AnalyticsPortlet query={query} /&gt;;\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance-tips\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Tips</h2><h3 id=\"query-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Optimization</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Use appropriate granularities for time dimensions</li><li class=\"leading-relaxed\">Limit result sets with filters</li><li class=\"leading-relaxed\">Cache frequently used queries</li></ul><h3 id=\"component-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Component Optimization</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Memoize expensive calculations</li><li class=\"leading-relaxed\">Use React.memo for pure components</li><li class=\"leading-relaxed\">Implement virtualization for large datasets</li></ul><h3 id=\"bundle-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Bundle Optimization</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Tree shake unused chart types</li><li class=\"leading-relaxed\">Code split dashboard components</li><li class=\"leading-relaxed\">Lazy load visualization libraries</li></ul><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/charts\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Charts</strong></a> - Detailed chart documentation</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/dashboards\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Dashboards</strong></a> - Dashboard customization  </li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/hooks\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Hooks</strong></a> - Advanced hook usage</li></ul>",
    "path": "client/index.md"
  },
  {
    "slug": "client/charts",
    "title": "Charts",
    "content": "<h1 id=\"charts\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Charts</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube provides a comprehensive set of chart components built on Recharts with Tailwind CSS styling. These components are designed to work seamlessly with Cube.js-compatible data and provide interactive, responsive visualizations for your analytics dashboards.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The chart components are React-based visualization tools that automatically handle data transformation, formatting, and responsive design. They support various chart types, interactive features like legends and tooltips, and flexible configuration options.</p><h2 id=\"available-chart-types\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Available Chart Types</h2><h3 id=\"bar-chart\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Bar Chart</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The most versatile chart for categorical data comparison and time series visualization.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { RechartsBarChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsBarChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Employees.createdAt&#39;],\n    yAxis: [&#39;Employees.count&#39;],\n    series: [&#39;Employees.departmentName&#39;]  // Creates separate series per department\n  }}\n  displayConfig={{\n    showLegend: true,\n    stackedBarChart: false,\n    showGrid: true,\n    showTooltip: true\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { RechartsBarChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsBarChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Employees.createdAt&#39;],\n    yAxis: [&#39;Employees.count&#39;],\n    series: [&#39;Employees.departmentName&#39;]  // Creates separate series per department\n  }}\n  displayConfig={{\n    showLegend: true,\n    stackedBarChart: false,\n    showGrid: true,\n    showTooltip: true\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Key Features:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Time dimension support with automatic formatting</li><li class=\"leading-relaxed\">Multiple series from dimension fields</li><li class=\"leading-relaxed\">Stacking support for grouped data</li><li class=\"leading-relaxed\">Interactive legend with hover effects</li><li class=\"leading-relaxed\">Automatic positive/negative value coloring</li><li class=\"leading-relaxed\">Responsive design with proper margins</li></ul><h3 id=\"line-chart\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Line Chart</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Perfect for time series data and trend analysis.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { RechartsLineChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsLineChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Productivity.date&#39;],\n    yAxis: [&#39;Productivity.avgLinesOfCode&#39;, &#39;Productivity.avgHappinessIndex&#39;],\n    series: [&#39;Productivity.employeeName&#39;]\n  }}\n  displayConfig={{\n    showLegend: true,\n    showGrid: true,\n    smoothLines: true\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { RechartsLineChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsLineChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Productivity.date&#39;],\n    yAxis: [&#39;Productivity.avgLinesOfCode&#39;, &#39;Productivity.avgHappinessIndex&#39;],\n    series: [&#39;Productivity.employeeName&#39;]\n  }}\n  displayConfig={{\n    showLegend: true,\n    showGrid: true,\n    smoothLines: true\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"area-chart\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Area Chart</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Great for showing cumulative data and filled regions.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { RechartsAreaChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsAreaChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Orders.createdAt&#39;],\n    yAxis: [&#39;Orders.totalRevenue&#39;],\n    series: [&#39;Orders.region&#39;]\n  }}\n  displayConfig={{\n    showLegend: true,\n    stackedArea: true,\n    fillOpacity: 0.6\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { RechartsAreaChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsAreaChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Orders.createdAt&#39;],\n    yAxis: [&#39;Orders.totalRevenue&#39;],\n    series: [&#39;Orders.region&#39;]\n  }}\n  displayConfig={{\n    showLegend: true,\n    stackedArea: true,\n    fillOpacity: 0.6\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"pie-chart\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Pie Chart</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Ideal for showing proportional data and composition.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { RechartsPieChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsPieChart\n  resultSet={resultSet}\n  chartConfig={{\n    dimension: &#39;Employees.departmentName&#39;,\n    measure: &#39;Employees.count&#39;\n  }}\n  displayConfig={{\n    showLegend: true,\n    showLabels: true,\n    innerRadius: 0  // Use &gt; 0 for donut chart\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { RechartsPieChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsPieChart\n  resultSet={resultSet}\n  chartConfig={{\n    dimension: &#39;Employees.departmentName&#39;,\n    measure: &#39;Employees.count&#39;\n  }}\n  displayConfig={{\n    showLegend: true,\n    showLabels: true,\n    innerRadius: 0  // Use &gt; 0 for donut chart\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"scatter-chart\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Scatter Chart</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Perfect for correlation analysis and plotting relationships.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { RechartsScatterChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsScatterChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Employees.salary&#39;],\n    yAxis: [&#39;Productivity.avgLinesOfCode&#39;],\n    series: [&#39;Employees.departmentName&#39;]\n  }}\n  displayConfig={{\n    showLegend: true,\n    showGrid: true,\n    pointSize: 6\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { RechartsScatterChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsScatterChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Employees.salary&#39;],\n    yAxis: [&#39;Productivity.avgLinesOfCode&#39;],\n    series: [&#39;Employees.departmentName&#39;]\n  }}\n  displayConfig={{\n    showLegend: true,\n    showGrid: true,\n    pointSize: 6\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"additional-chart-types\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Additional Chart Types</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Radar Chart - for multi-dimensional comparisons\nimport { RechartsRadarChart } from &#39;drizzle-cube/client&#39;\n\n// Radial Bar Chart - for circular bar visualization  \nimport { RechartsRadialBarChart } from &#39;drizzle-cube/client&#39;\n\n// Tree Map Chart - for hierarchical data\nimport { RechartsTreeMapChart } from &#39;drizzle-cube/client&#39;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Radar Chart - for multi-dimensional comparisons\nimport { RechartsRadarChart } from &#39;drizzle-cube/client&#39;\n\n// Radial Bar Chart - for circular bar visualization  \nimport { RechartsRadialBarChart } from &#39;drizzle-cube/client&#39;\n\n// Tree Map Chart - for hierarchical data\nimport { RechartsTreeMapChart } from &#39;drizzle-cube/client&#39;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"data-table\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Data Table</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">While not a chart, the DataTable component provides tabular data display:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { DataTable } from &#39;drizzle-cube/client&#39;\n\n&lt;DataTable\n  resultSet={resultSet}\n  config={{\n    showPagination: true,\n    pageSize: 20,\n    sortable: true\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { DataTable } from &#39;drizzle-cube/client&#39;\n\n&lt;DataTable\n  resultSet={resultSet}\n  config={{\n    showPagination: true,\n    pageSize: 20,\n    sortable: true\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"chart-configuration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Chart Configuration</h2><h3 id=\"chart-config-structure\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Chart Config Structure</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface ChartConfig {\n  // Axis configuration\n  xAxis?: string[]           // X-axis dimensions/measures\n  yAxis?: string[]           // Y-axis measures\n  series?: string[]          // Series-creating dimensions\n  \n  // Legacy format support\n  x?: string                 // Single X-axis field\n  y?: string[]              // Y-axis measures\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface ChartConfig {\n  // Axis configuration\n  xAxis?: string[]           // X-axis dimensions/measures\n  yAxis?: string[]           // Y-axis measures\n  series?: string[]          // Series-creating dimensions\n  \n  // Legacy format support\n  x?: string                 // Single X-axis field\n  y?: string[]              // Y-axis measures\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"display-config-options\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Display Config Options</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface DisplayConfig {\n  // Legend\n  showLegend?: boolean       // Show/hide legend\n  legendPosition?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39;\n  \n  // Grid and axes\n  showGrid?: boolean         // Show grid lines\n  showXAxis?: boolean        // Show X-axis\n  showYAxis?: boolean        // Show Y-axis\n  \n  // Tooltips and interactions\n  showTooltip?: boolean      // Show hover tooltips\n  \n  // Chart-specific options\n  stackedBarChart?: boolean  // Stack bars (Bar Chart)\n  stackedArea?: boolean      // Stack areas (Area Chart)\n  smoothLines?: boolean      // Smooth line curves (Line Chart)\n  fillOpacity?: number       // Fill opacity (0-1)\n  \n  // Styling\n  colors?: string[]          // Custom color palette\n  margin?: {                 // Custom margins\n    top?: number\n    right?: number\n    bottom?: number\n    left?: number\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface DisplayConfig {\n  // Legend\n  showLegend?: boolean       // Show/hide legend\n  legendPosition?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39;\n  \n  // Grid and axes\n  showGrid?: boolean         // Show grid lines\n  showXAxis?: boolean        // Show X-axis\n  showYAxis?: boolean        // Show Y-axis\n  \n  // Tooltips and interactions\n  showTooltip?: boolean      // Show hover tooltips\n  \n  // Chart-specific options\n  stackedBarChart?: boolean  // Stack bars (Bar Chart)\n  stackedArea?: boolean      // Stack areas (Area Chart)\n  smoothLines?: boolean      // Smooth line curves (Line Chart)\n  fillOpacity?: number       // Fill opacity (0-1)\n  \n  // Styling\n  colors?: string[]          // Custom color palette\n  margin?: {                 // Custom margins\n    top?: number\n    right?: number\n    bottom?: number\n    left?: number\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"data-transformation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Data Transformation</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Charts automatically transform Cube.js result sets into chart-ready format:</p><h3 id=\"basic-data-flow\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Data Flow</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Cube.js query result\nconst resultSet = {\n  rawData: () =&gt; [\n    { \n      &#39;Employees.departmentName&#39;: &#39;Engineering&#39;,\n      &#39;Employees.createdAt&#39;: &#39;2023-01-01 00:00:00+00&#39;,\n      &#39;Employees.count&#39;: 15 \n    },\n    // ... more data\n  ]\n}\n\n// Automatic transformation for charts\n// X-axis: Formatted time dimensions (2023-01)\n// Y-axis: Measure values (15)  \n// Series: Department names (Engineering)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Cube.js query result\nconst resultSet = {\n  rawData: () =&gt; [\n    { \n      &#39;Employees.departmentName&#39;: &#39;Engineering&#39;,\n      &#39;Employees.createdAt&#39;: &#39;2023-01-01 00:00:00+00&#39;,\n      &#39;Employees.count&#39;: 15 \n    },\n    // ... more data\n  ]\n}\n\n// Automatic transformation for charts\n// X-axis: Formatted time dimensions (2023-01)\n// Y-axis: Measure values (15)  \n// Series: Department names (Engineering)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"time-dimension-handling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Time Dimension Handling</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Time dimensions are automatically formatted based on query granularity:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Query with monthly granularity\ntimeDimensions: [{\n  dimension: &#39;Employees.createdAt&#39;,\n  granularity: &#39;month&#39;,\n  dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n}]\n\n// Chart displays: 2023-01, 2023-02, 2023-03...</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Query with monthly granularity\ntimeDimensions: [{\n  dimension: &#39;Employees.createdAt&#39;,\n  granularity: &#39;month&#39;,\n  dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n}]\n\n// Chart displays: 2023-01, 2023-02, 2023-03...\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Supported Granularities:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">year</code> → 2023</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">quarter</code> → 2023-Q1  </li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">month</code> → 2023-01</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">week</code> → 2023-W01</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">day</code> → 2023-01-15</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">hour</code> → 2023-01-15 14:00</li></ul><h3 id=\"series-data-handling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Series Data Handling</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Use the <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">series</code> field to create multiple data series:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Query result with series dimension\nconst data = [\n  { dept: &#39;Engineering&#39;, month: &#39;2023-01&#39;, count: 15 },\n  { dept: &#39;Marketing&#39;, month: &#39;2023-01&#39;, count: 8 },\n  { dept: &#39;Engineering&#39;, month: &#39;2023-02&#39;, count: 18 },\n  { dept: &#39;Marketing&#39;, month: &#39;2023-02&#39;, count: 10 }\n]\n\n// Chart Config\nchartConfig: {\n  xAxis: [&#39;month&#39;],\n  yAxis: [&#39;count&#39;], \n  series: [&#39;dept&#39;]\n}\n\n// Results in separate lines/bars for Engineering and Marketing</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Query result with series dimension\nconst data = [\n  { dept: &#39;Engineering&#39;, month: &#39;2023-01&#39;, count: 15 },\n  { dept: &#39;Marketing&#39;, month: &#39;2023-01&#39;, count: 8 },\n  { dept: &#39;Engineering&#39;, month: &#39;2023-02&#39;, count: 18 },\n  { dept: &#39;Marketing&#39;, month: &#39;2023-02&#39;, count: 10 }\n]\n\n// Chart Config\nchartConfig: {\n  xAxis: [&#39;month&#39;],\n  yAxis: [&#39;count&#39;], \n  series: [&#39;dept&#39;]\n}\n\n// Results in separate lines/bars for Engineering and Marketing\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-features\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Features</h2><h3 id=\"interactive-legends\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Interactive Legends</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Charts support interactive legends with hover effects:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">&lt;RechartsBarChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Employees.createdAt&#39;],\n    yAxis: [&#39;Employees.count&#39;],\n    series: [&#39;Employees.departmentName&#39;]\n  }}\n  displayConfig={{\n    showLegend: true,\n    // Hovering legend items fades other series\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"&lt;RechartsBarChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Employees.createdAt&#39;],\n    yAxis: [&#39;Employees.count&#39;],\n    series: [&#39;Employees.departmentName&#39;]\n  }}\n  displayConfig={{\n    showLegend: true,\n    // Hovering legend items fades other series\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"custom-styling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Styling</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Override default styles with custom configurations:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">&lt;RechartsBarChart\n  resultSet={resultSet}\n  chartConfig={{ /* ... */ }}\n  displayConfig={{\n    colors: [&#39;#3B82F6&#39;, &#39;#EF4444&#39;, &#39;#10B981&#39;], // Custom color palette\n    margin: { top: 20, right: 30, bottom: 60, left: 40 },\n    showGrid: true\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"&lt;RechartsBarChart\n  resultSet={resultSet}\n  chartConfig={{ /* ... */ }}\n  displayConfig={{\n    colors: [&#39;#3B82F6&#39;, &#39;#EF4444&#39;, &#39;#10B981&#39;], // Custom color palette\n    margin: { top: 20, right: 30, bottom: 60, left: 40 },\n    showGrid: true\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"responsive-design\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Responsive Design</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Charts are automatically responsive and adapt to container size:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Chart will resize automatically within container\n&lt;div className=&quot;w-full h-96&quot;&gt;\n  &lt;RechartsBarChart\n    resultSet={resultSet}\n    chartConfig={{ /* ... */ }}\n  /&gt;\n&lt;/div&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Chart will resize automatically within container\n&lt;div className=&quot;w-full h-96&quot;&gt;\n  &lt;RechartsBarChart\n    resultSet={resultSet}\n    chartConfig={{ /* ... */ }}\n  /&gt;\n&lt;/div&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"error-handling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Handling</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Charts include built-in error boundaries and handling:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Automatic error states for:\n// - Missing data\n// - Invalid configuration\n// - Data transformation errors\n// - Chart rendering failures\n\n&lt;RechartsBarChart\n  resultSet={null}  // Shows &quot;No data available&quot; state\n  chartConfig={{ /* ... */ }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Automatic error states for:\n// - Missing data\n// - Invalid configuration\n// - Data transformation errors\n// - Chart rendering failures\n\n&lt;RechartsBarChart\n  resultSet={null}  // Shows &quot;No data available&quot; state\n  chartConfig={{ /* ... */ }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Time Dimensions</strong>: Always use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">timeDimensions</code> in queries for proper time formatting</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Series Configuration</strong>: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">series</code> field for multi-dimensional data</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Performance</strong>: Limit data points for large datasets (use filters/pagination)</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Responsive Design</strong>: Ensure proper container sizing</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Color Accessibility</strong>: Use accessible color palettes</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Loading States</strong>: Handle loading states in parent components</li></ol><h2 id=\"usage-with-usecubequery-hook\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Usage with useCubeQuery Hook</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Combine charts with the <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">useCubeQuery</code> hook for complete analytics components:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { useCubeQuery } from &#39;drizzle-cube/client&#39;\nimport { RechartsBarChart } from &#39;drizzle-cube/client&#39;\n\nfunction EmployeeAnalytics() {\n  const { resultSet, isLoading, error } = useCubeQuery({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;],\n    timeDimensions: [{\n      dimension: &#39;Employees.createdAt&#39;,\n      granularity: &#39;month&#39;,\n      dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n    }]\n  })\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;\n  if (error) return &lt;div&gt;Error: {error.message}&lt;/div&gt;\n\n  return (\n    &lt;RechartsBarChart\n      resultSet={resultSet}\n      chartConfig={{\n        xAxis: [&#39;Employees.createdAt&#39;],\n        yAxis: [&#39;Employees.count&#39;],\n        series: [&#39;Employees.departmentName&#39;]\n      }}\n      displayConfig={{\n        showLegend: true,\n        showGrid: true,\n        stackedBarChart: false\n      }}\n    /&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { useCubeQuery } from &#39;drizzle-cube/client&#39;\nimport { RechartsBarChart } from &#39;drizzle-cube/client&#39;\n\nfunction EmployeeAnalytics() {\n  const { resultSet, isLoading, error } = useCubeQuery({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;],\n    timeDimensions: [{\n      dimension: &#39;Employees.createdAt&#39;,\n      granularity: &#39;month&#39;,\n      dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n    }]\n  })\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;\n  if (error) return &lt;div&gt;Error: {error.message}&lt;/div&gt;\n\n  return (\n    &lt;RechartsBarChart\n      resultSet={resultSet}\n      chartConfig={{\n        xAxis: [&#39;Employees.createdAt&#39;],\n        yAxis: [&#39;Employees.count&#39;],\n        series: [&#39;Employees.departmentName&#39;]\n      }}\n      displayConfig={{\n        showLegend: true,\n        showGrid: true,\n        stackedBarChart: false\n      }}\n    /&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"styling-and-theming\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Styling and Theming</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Charts use Tailwind CSS for styling and support custom theming:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Custom chart container styling\n&lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;\n  &lt;h3 className=&quot;text-lg font-semibold mb-4&quot;&gt;Employee Growth&lt;/h3&gt;\n  &lt;RechartsBarChart\n    resultSet={resultSet}\n    chartConfig={{ /* ... */ }}\n    displayConfig={{\n      colors: [&#39;#3B82F6&#39;, &#39;#EF4444&#39;, &#39;#10B981&#39;]\n    }}\n  /&gt;\n&lt;/div&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Custom chart container styling\n&lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;\n  &lt;h3 className=&quot;text-lg font-semibold mb-4&quot;&gt;Employee Growth&lt;/h3&gt;\n  &lt;RechartsBarChart\n    resultSet={resultSet}\n    chartConfig={{ /* ... */ }}\n    displayConfig={{\n      colors: [&#39;#3B82F6&#39;, &#39;#EF4444&#39;, &#39;#10B981&#39;]\n    }}\n  /&gt;\n&lt;/div&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance-optimization\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Optimization</h2><h3 id=\"data-limiting\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Data Limiting</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Limit data points for better performance\nconst query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.createdAt&#39;],\n  limit: 100  // Limit to 100 data points\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Limit data points for better performance\nconst query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.createdAt&#39;],\n  limit: 100  // Limit to 100 data points\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"lazy-loading\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Lazy Loading</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Lazy load chart components\nimport { lazy, Suspense } from &#39;react&#39;\n\nconst RechartsBarChart = lazy(() =&gt; import(&#39;drizzle-cube/client&#39;).then(m =&gt; ({ \n  default: m.RechartsBarChart \n})))\n\nfunction Dashboard() {\n  return (\n    &lt;Suspense fallback={&lt;div&gt;Loading chart...&lt;/div&gt;}&gt;\n      &lt;RechartsBarChart /* ... */ /&gt;\n    &lt;/Suspense&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Lazy load chart components\nimport { lazy, Suspense } from &#39;react&#39;\n\nconst RechartsBarChart = lazy(() =&gt; import(&#39;drizzle-cube/client&#39;).then(m =&gt; ({ \n  default: m.RechartsBarChart \n})))\n\nfunction Dashboard() {\n  return (\n    &lt;Suspense fallback={&lt;div&gt;Loading chart...&lt;/div&gt;}&gt;\n      &lt;RechartsBarChart /* ... */ /&gt;\n    &lt;/Suspense&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"testing-charts\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Charts</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { render, screen } from &#39;@testing-library/react&#39;\nimport { RechartsBarChart } from &#39;drizzle-cube/client&#39;\n\nconst mockResultSet = {\n  rawData: () =&gt; [\n    { &#39;Employees.departmentName&#39;: &#39;Engineering&#39;, &#39;Employees.count&#39;: 15 }\n  ]\n}\n\ntest(&#39;renders bar chart with data&#39;, () =&gt; {\n  render(\n    &lt;RechartsBarChart\n      resultSet={mockResultSet}\n      chartConfig={{\n        xAxis: [&#39;Employees.departmentName&#39;],\n        yAxis: [&#39;Employees.count&#39;]\n      }}\n    /&gt;\n  )\n  \n  expect(screen.getByRole(&#39;img&#39;)).toBeInTheDocument() // SVG chart\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { render, screen } from &#39;@testing-library/react&#39;\nimport { RechartsBarChart } from &#39;drizzle-cube/client&#39;\n\nconst mockResultSet = {\n  rawData: () =&gt; [\n    { &#39;Employees.departmentName&#39;: &#39;Engineering&#39;, &#39;Employees.count&#39;: 15 }\n  ]\n}\n\ntest(&#39;renders bar chart with data&#39;, () =&gt; {\n  render(\n    &lt;RechartsBarChart\n      resultSet={mockResultSet}\n      chartConfig={{\n        xAxis: [&#39;Employees.departmentName&#39;],\n        yAxis: [&#39;Employees.count&#39;]\n      }}\n    /&gt;\n  )\n  \n  expect(screen.getByRole(&#39;img&#39;)).toBeInTheDocument() // SVG chart\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"troubleshooting\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Troubleshooting</h2><h3 id=\"common-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Common Issues</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Chart not rendering:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Verify resultSet contains data</li><li class=\"leading-relaxed\">Check chartConfig matches your query fields</li><li class=\"leading-relaxed\">Ensure proper container sizing</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Time dimensions not formatting:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">timeDimensions</code> in query (not just <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">dimensions</code>)</li><li class=\"leading-relaxed\">Specify proper <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">granularity</code></li><li class=\"leading-relaxed\">Check timestamp format in raw data</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Series not appearing:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Verify <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">series</code> field matches dimension name</li><li class=\"leading-relaxed\">Check if data contains the series dimension</li><li class=\"leading-relaxed\">Ensure <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">showLegend: true</code> for multi-series visibility</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Performance issues:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Limit data points with query filters</li><li class=\"leading-relaxed\">Use pagination for large datasets  </li><li class=\"leading-relaxed\">Consider data aggregation at query level</li></ul><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"client/dashboards\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Dashboards</a> for layout and grid systems</li><li class=\"leading-relaxed\">Explore <a href=\"#\" data-help-link=\"client/hooks\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Hooks</a> for data fetching patterns</li><li class=\"leading-relaxed\">Review <a href=\"#\" data-help-link=\"client\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >React Client</a> overview</li><li class=\"leading-relaxed\">Check out dashboard examples in the repository</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Additional chart types (Gantt, Funnel, Sankey)</li><li class=\"leading-relaxed\">Advanced chart annotations and markers</li><li class=\"leading-relaxed\">Export functionality (PNG, PDF, CSV)</li><li class=\"leading-relaxed\">Real-time chart updates and streaming data</li><li class=\"leading-relaxed\">Custom chart theme builder</li><li class=\"leading-relaxed\">Chart drilling and navigation capabilities</li></ul>",
    "path": "client/charts.md"
  },
  {
    "slug": "client/dashboards",
    "title": "Dashboards",
    "content": "<h1 id=\"dashboards\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Dashboards</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube provides flexible dashboard components for creating interactive analytics interfaces. Built with React and <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">react-grid-layout</code>, the dashboard system supports drag-and-drop layouts, responsive design, and configurable analytics portlets.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The dashboard system consists of three main components: <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">DashboardGrid</code> for layout management, <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">AnalyticsPortlet</code> for individual visualizations, and various configuration interfaces for customization. All components are designed to work seamlessly with Cube.js-compatible data and the <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">useCubeQuery</code> hook.</p><h2 id=\"core-components\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Core Components</h2><h3 id=\"dashboardgrid\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">DashboardGrid</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The main dashboard container that manages layout, editing, and portlet interactions.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { DashboardGrid } from &#39;drizzle-cube/client&#39;\n\nfunction MyDashboard() {\n  const [config, setConfig] = useState&lt;DashboardConfig&gt;({\n    id: &#39;main-dashboard&#39;,\n    name: &#39;Analytics Dashboard&#39;,\n    portlets: [\n      {\n        id: &#39;employees-chart&#39;,\n        name: &#39;Employee Count&#39;,\n        x: 0, y: 0, w: 6, h: 4,\n        chartConfig: {\n          xAxis: [&#39;Employees.createdAt&#39;],\n          yAxis: [&#39;Employees.count&#39;]\n        },\n        query: {\n          measures: [&#39;Employees.count&#39;],\n          timeDimensions: [{\n            dimension: &#39;Employees.createdAt&#39;,\n            granularity: &#39;month&#39;\n          }]\n        },\n        chartType: &#39;bar&#39;\n      }\n    ]\n  })\n\n  return (\n    &lt;DashboardGrid\n      config={config}\n      editable={true}\n      onConfigChange={setConfig}\n      onSave={saveDashboardConfig}\n      apiUrl=&quot;/cubejs-api/v1&quot;\n    /&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { DashboardGrid } from &#39;drizzle-cube/client&#39;\n\nfunction MyDashboard() {\n  const [config, setConfig] = useState&lt;DashboardConfig&gt;({\n    id: &#39;main-dashboard&#39;,\n    name: &#39;Analytics Dashboard&#39;,\n    portlets: [\n      {\n        id: &#39;employees-chart&#39;,\n        name: &#39;Employee Count&#39;,\n        x: 0, y: 0, w: 6, h: 4,\n        chartConfig: {\n          xAxis: [&#39;Employees.createdAt&#39;],\n          yAxis: [&#39;Employees.count&#39;]\n        },\n        query: {\n          measures: [&#39;Employees.count&#39;],\n          timeDimensions: [{\n            dimension: &#39;Employees.createdAt&#39;,\n            granularity: &#39;month&#39;\n          }]\n        },\n        chartType: &#39;bar&#39;\n      }\n    ]\n  })\n\n  return (\n    &lt;DashboardGrid\n      config={config}\n      editable={true}\n      onConfigChange={setConfig}\n      onSave={saveDashboardConfig}\n      apiUrl=&quot;/cubejs-api/v1&quot;\n    /&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"analyticsportlet\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">AnalyticsPortlet</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Individual visualization components within the dashboard.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { AnalyticsPortlet } from &#39;drizzle-cube/client&#39;\n\n&lt;AnalyticsPortlet\n  config={{\n    id: &#39;revenue-chart&#39;,\n    name: &#39;Monthly Revenue&#39;,\n    query: {\n      measures: [&#39;Orders.totalRevenue&#39;],\n      timeDimensions: [{\n        dimension: &#39;Orders.createdAt&#39;,\n        granularity: &#39;month&#39;,\n        dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n      }]\n    },\n    chartConfig: {\n      xAxis: [&#39;Orders.createdAt&#39;],\n      yAxis: [&#39;Orders.totalRevenue&#39;]\n    },\n    chartType: &#39;line&#39;\n  }}\n  apiUrl=&quot;/cubejs-api/v1&quot;\n  onEdit={() =&gt; setEditingPortlet(config)}\n  onRefresh={() =&gt; refreshPortlet(config.id)}\n  onDelete={() =&gt; deletePortlet(config.id)}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { AnalyticsPortlet } from &#39;drizzle-cube/client&#39;\n\n&lt;AnalyticsPortlet\n  config={{\n    id: &#39;revenue-chart&#39;,\n    name: &#39;Monthly Revenue&#39;,\n    query: {\n      measures: [&#39;Orders.totalRevenue&#39;],\n      timeDimensions: [{\n        dimension: &#39;Orders.createdAt&#39;,\n        granularity: &#39;month&#39;,\n        dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n      }]\n    },\n    chartConfig: {\n      xAxis: [&#39;Orders.createdAt&#39;],\n      yAxis: [&#39;Orders.totalRevenue&#39;]\n    },\n    chartType: &#39;line&#39;\n  }}\n  apiUrl=&quot;/cubejs-api/v1&quot;\n  onEdit={() =&gt; setEditingPortlet(config)}\n  onRefresh={() =&gt; refreshPortlet(config.id)}\n  onDelete={() =&gt; deletePortlet(config.id)}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"configuration-structure\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Configuration Structure</h2><h3 id=\"dashboard-configuration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dashboard Configuration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface DashboardConfig {\n  id: string\n  name: string\n  description?: string\n  portlets: PortletConfig[]\n  layout?: {\n    breakpoints?: { [key: string]: number }\n    cols?: { [key: string]: number }\n    margin?: [number, number]\n    containerPadding?: [number, number]\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface DashboardConfig {\n  id: string\n  name: string\n  description?: string\n  portlets: PortletConfig[]\n  layout?: {\n    breakpoints?: { [key: string]: number }\n    cols?: { [key: string]: number }\n    margin?: [number, number]\n    containerPadding?: [number, number]\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"portlet-configuration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Portlet Configuration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface PortletConfig {\n  id: string\n  name: string\n  description?: string\n  \n  // Layout (react-grid-layout format)\n  x: number                    // X position in grid\n  y: number                    // Y position in grid\n  w: number                    // Width in grid units\n  h: number                    // Height in grid units\n  minW?: number               // Minimum width\n  minH?: number               // Minimum height\n  \n  // Query configuration\n  query: CubeQuery            // Cube.js query object\n  chartConfig: ChartConfig    // Chart configuration\n  displayConfig?: DisplayConfig // Chart display options\n  \n  // Chart type\n  chartType: &#39;bar&#39; | &#39;line&#39; | &#39;area&#39; | &#39;pie&#39; | &#39;scatter&#39; | &#39;table&#39;\n  \n  // Behavior\n  autoRefresh?: number        // Auto-refresh interval (seconds)\n  cachingEnabled?: boolean    // Enable result caching\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface PortletConfig {\n  id: string\n  name: string\n  description?: string\n  \n  // Layout (react-grid-layout format)\n  x: number                    // X position in grid\n  y: number                    // Y position in grid\n  w: number                    // Width in grid units\n  h: number                    // Height in grid units\n  minW?: number               // Minimum width\n  minH?: number               // Minimum height\n  \n  // Query configuration\n  query: CubeQuery            // Cube.js query object\n  chartConfig: ChartConfig    // Chart configuration\n  displayConfig?: DisplayConfig // Chart display options\n  \n  // Chart type\n  chartType: &#39;bar&#39; | &#39;line&#39; | &#39;area&#39; | &#39;pie&#39; | &#39;scatter&#39; | &#39;table&#39;\n  \n  // Behavior\n  autoRefresh?: number        // Auto-refresh interval (seconds)\n  cachingEnabled?: boolean    // Enable result caching\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"dashboard-features\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Dashboard Features</h2><h3 id=\"drag-and-drop-layout\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Drag-and-Drop Layout</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Enable interactive layout editing:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">&lt;DashboardGrid\n  config={config}\n  editable={true}              // Enable editing mode\n  onConfigChange={(newConfig) =&gt; {\n    setConfig(newConfig)\n    // Optionally auto-save changes\n    saveDashboardConfig(newConfig)\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"&lt;DashboardGrid\n  config={config}\n  editable={true}              // Enable editing mode\n  onConfigChange={(newConfig) =&gt; {\n    setConfig(newConfig)\n    // Optionally auto-save changes\n    saveDashboardConfig(newConfig)\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Features:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Drag portlets to reposition</li><li class=\"leading-relaxed\">Resize portlets by dragging corners</li><li class=\"leading-relaxed\">Responsive breakpoints for different screen sizes</li><li class=\"leading-relaxed\">Snap-to-grid alignment</li></ul><h3 id=\"responsive-design\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Responsive Design</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Dashboards automatically adapt to different screen sizes:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Default responsive configuration\nlayout: {\n  breakpoints: { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 },\n  cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\n  margin: [16, 16],\n  containerPadding: [16, 16]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Default responsive configuration\nlayout: {\n  breakpoints: { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 },\n  cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\n  margin: [16, 16],\n  containerPadding: [16, 16]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"real-time-updates\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Real-time Updates</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Portlets support automatic refresh and real-time updates:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Portlet with auto-refresh every 30 seconds\n{\n  id: &#39;live-metrics&#39;,\n  name: &#39;Live Metrics&#39;,\n  query: { /* ... */ },\n  chartConfig: { /* ... */ },\n  chartType: &#39;line&#39;,\n  autoRefresh: 30  // Refresh every 30 seconds\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Portlet with auto-refresh every 30 seconds\n{\n  id: &#39;live-metrics&#39;,\n  name: &#39;Live Metrics&#39;,\n  query: { /* ... */ },\n  chartConfig: { /* ... */ },\n  chartType: &#39;line&#39;,\n  autoRefresh: 30  // Refresh every 30 seconds\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"portlet-types\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Portlet Types</h2><h3 id=\"chart-portlets\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Chart Portlets</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Display various chart types with full interactivity:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Bar Chart Portlet\n{\n  chartType: &#39;bar&#39;,\n  chartConfig: {\n    xAxis: [&#39;Employees.departmentName&#39;],\n    yAxis: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;]\n  },\n  displayConfig: {\n    showLegend: true,\n    stackedBarChart: false\n  }\n}\n\n// Time Series Line Chart\n{\n  chartType: &#39;line&#39;, \n  chartConfig: {\n    xAxis: [&#39;Orders.createdAt&#39;],\n    yAxis: [&#39;Orders.totalRevenue&#39;]\n  },\n  query: {\n    measures: [&#39;Orders.totalRevenue&#39;],\n    timeDimensions: [{\n      dimension: &#39;Orders.createdAt&#39;,\n      granularity: &#39;day&#39;\n    }]\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Bar Chart Portlet\n{\n  chartType: &#39;bar&#39;,\n  chartConfig: {\n    xAxis: [&#39;Employees.departmentName&#39;],\n    yAxis: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;]\n  },\n  displayConfig: {\n    showLegend: true,\n    stackedBarChart: false\n  }\n}\n\n// Time Series Line Chart\n{\n  chartType: &#39;line&#39;, \n  chartConfig: {\n    xAxis: [&#39;Orders.createdAt&#39;],\n    yAxis: [&#39;Orders.totalRevenue&#39;]\n  },\n  query: {\n    measures: [&#39;Orders.totalRevenue&#39;],\n    timeDimensions: [{\n      dimension: &#39;Orders.createdAt&#39;,\n      granularity: &#39;day&#39;\n    }]\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"table-portlets\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Table Portlets</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Display data in tabular format:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">{\n  chartType: &#39;table&#39;,\n  query: {\n    measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;],\n    order: [[&#39;Employees.count&#39;, &#39;desc&#39;]]\n  },\n  displayConfig: {\n    showPagination: true,\n    pageSize: 10,\n    sortable: true\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  chartType: &#39;table&#39;,\n  query: {\n    measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;],\n    order: [[&#39;Employees.count&#39;, &#39;desc&#39;]]\n  },\n  displayConfig: {\n    showPagination: true,\n    pageSize: 10,\n    sortable: true\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"kpimetric-portlets\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">KPI/Metric Portlets</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Display single metrics or key performance indicators:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">{\n  chartType: &#39;kpi&#39;,\n  query: {\n    measures: [&#39;Orders.totalRevenue&#39;]\n  },\n  displayConfig: {\n    format: &#39;currency&#39;,\n    showChange: true,\n    compareToLastPeriod: true\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  chartType: &#39;kpi&#39;,\n  query: {\n    measures: [&#39;Orders.totalRevenue&#39;]\n  },\n  displayConfig: {\n    format: &#39;currency&#39;,\n    showChange: true,\n    compareToLastPeriod: true\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"interactive-features\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Interactive Features</h2><h3 id=\"portlet-editing-modal\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Portlet Editing Modal</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Built-in modal for configuring portlets:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { PortletEditModal } from &#39;drizzle-cube/client&#39;\n\nfunction DashboardEditor() {\n  const [editingPortlet, setEditingPortlet] = useState&lt;PortletConfig | null&gt;(null)\n\n  return (\n    &lt;&gt;\n      &lt;DashboardGrid\n        config={config}\n        editable={true}\n        onPortletEdit={setEditingPortlet}\n      /&gt;\n      \n      {editingPortlet &amp;&amp; (\n        &lt;PortletEditModal\n          portlet={editingPortlet}\n          isOpen={!!editingPortlet}\n          onClose={() =&gt; setEditingPortlet(null)}\n          onSave={(updatedPortlet) =&gt; {\n            updatePortletConfig(updatedPortlet)\n            setEditingPortlet(null)\n          }}\n          availableCubes={cubeNames}\n          apiUrl=&quot;/cubejs-api/v1&quot;\n        /&gt;\n      )}\n    &lt;/&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { PortletEditModal } from &#39;drizzle-cube/client&#39;\n\nfunction DashboardEditor() {\n  const [editingPortlet, setEditingPortlet] = useState&lt;PortletConfig | null&gt;(null)\n\n  return (\n    &lt;&gt;\n      &lt;DashboardGrid\n        config={config}\n        editable={true}\n        onPortletEdit={setEditingPortlet}\n      /&gt;\n      \n      {editingPortlet &amp;&amp; (\n        &lt;PortletEditModal\n          portlet={editingPortlet}\n          isOpen={!!editingPortlet}\n          onClose={() =&gt; setEditingPortlet(null)}\n          onSave={(updatedPortlet) =&gt; {\n            updatePortletConfig(updatedPortlet)\n            setEditingPortlet(null)\n          }}\n          availableCubes={cubeNames}\n          apiUrl=&quot;/cubejs-api/v1&quot;\n        /&gt;\n      )}\n    &lt;/&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"portlet-actions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Portlet Actions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Standard portlet actions for management:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Portlet header actions\nconst portletActions = [\n  {\n    icon: &#39;refresh&#39;,\n    label: &#39;Refresh&#39;,\n    onClick: () =&gt; refreshPortlet(portletId)\n  },\n  {\n    icon: &#39;edit&#39;,\n    label: &#39;Edit&#39;,\n    onClick: () =&gt; setEditingPortlet(portlet)\n  },\n  {\n    icon: &#39;delete&#39;, \n    label: &#39;Delete&#39;,\n    onClick: () =&gt; deletePortlet(portletId)\n  }\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Portlet header actions\nconst portletActions = [\n  {\n    icon: &#39;refresh&#39;,\n    label: &#39;Refresh&#39;,\n    onClick: () =&gt; refreshPortlet(portletId)\n  },\n  {\n    icon: &#39;edit&#39;,\n    label: &#39;Edit&#39;,\n    onClick: () =&gt; setEditingPortlet(portlet)\n  },\n  {\n    icon: &#39;delete&#39;, \n    label: &#39;Delete&#39;,\n    onClick: () =&gt; deletePortlet(portletId)\n  }\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-configuration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Configuration</h2><h3 id=\"custom-breakpoints\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Breakpoints</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Define custom responsive breakpoints:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const customLayout = {\n  breakpoints: { \n    xl: 1400,    // Extra large screens\n    lg: 1200,    // Large screens\n    md: 996,     // Medium screens\n    sm: 768,     // Small screens (tablets)\n    xs: 480      // Extra small screens (phones)\n  },\n  cols: { \n    xl: 16,      // 16 columns on XL screens\n    lg: 12,      // 12 columns on large screens\n    md: 8,       // 8 columns on medium screens\n    sm: 4,       // 4 columns on small screens\n    xs: 2        // 2 columns on mobile\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const customLayout = {\n  breakpoints: { \n    xl: 1400,    // Extra large screens\n    lg: 1200,    // Large screens\n    md: 996,     // Medium screens\n    sm: 768,     // Small screens (tablets)\n    xs: 480      // Extra small screens (phones)\n  },\n  cols: { \n    xl: 16,      // 16 columns on XL screens\n    lg: 12,      // 12 columns on large screens\n    md: 8,       // 8 columns on medium screens\n    sm: 4,       // 4 columns on small screens\n    xs: 2        // 2 columns on mobile\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"dashboard-themes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dashboard Themes</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Apply custom styling and themes:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">&lt;div className=&quot;dashboard-theme-dark&quot;&gt;\n  &lt;DashboardGrid\n    config={config}\n    editable={false}\n  /&gt;\n&lt;/div&gt;\n\n&lt;style&gt;\n.dashboard-theme-dark .portlet {\n  @apply bg-gray-800 text-white border-gray-700;\n}\n\n.dashboard-theme-dark .portlet-header {\n  @apply bg-gray-700 border-gray-600;\n}\n&lt;/style&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"&lt;div className=&quot;dashboard-theme-dark&quot;&gt;\n  &lt;DashboardGrid\n    config={config}\n    editable={false}\n  /&gt;\n&lt;/div&gt;\n\n&lt;style&gt;\n.dashboard-theme-dark .portlet {\n  @apply bg-gray-800 text-white border-gray-700;\n}\n\n.dashboard-theme-dark .portlet-header {\n  @apply bg-gray-700 border-gray-600;\n}\n&lt;/style&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"dashboard-persistence\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dashboard Persistence</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Save and load dashboard configurations:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Save dashboard configuration\nconst saveDashboardConfig = async (config: DashboardConfig) =&gt; {\n  await fetch(&#39;/api/dashboards&#39;, {\n    method: &#39;POST&#39;,\n    headers: { &#39;Content-Type&#39;: &#39;application/json&#39; },\n    body: JSON.stringify(config)\n  })\n}\n\n// Load dashboard configuration\nconst loadDashboardConfig = async (dashboardId: string) =&gt; {\n  const response = await fetch(`/api/dashboards/${dashboardId}`)\n  return response.json() as DashboardConfig\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Save dashboard configuration\nconst saveDashboardConfig = async (config: DashboardConfig) =&gt; {\n  await fetch(&#39;/api/dashboards&#39;, {\n    method: &#39;POST&#39;,\n    headers: { &#39;Content-Type&#39;: &#39;application/json&#39; },\n    body: JSON.stringify(config)\n  })\n}\n\n// Load dashboard configuration\nconst loadDashboardConfig = async (dashboardId: string) =&gt; {\n  const response = await fetch(`/api/dashboards/${dashboardId}`)\n  return response.json() as DashboardConfig\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance-optimization\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Optimization</h2><h3 id=\"lazy-loading\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Lazy Loading</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Load portlets on demand for better performance:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { lazy, Suspense } from &#39;react&#39;\n\nconst LazyAnalyticsPortlet = lazy(() =&gt; import(&#39;drizzle-cube/client&#39;).then(m =&gt; ({ \n  default: m.AnalyticsPortlet \n})))\n\nfunction OptimizedDashboard({ config }: { config: DashboardConfig }) {\n  return (\n    &lt;DashboardGrid config={config}&gt;\n      {config.portlets.map(portlet =&gt; (\n        &lt;Suspense key={portlet.id} fallback={&lt;PortletSkeleton /&gt;}&gt;\n          &lt;LazyAnalyticsPortlet config={portlet} /&gt;\n        &lt;/Suspense&gt;\n      ))}\n    &lt;/DashboardGrid&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { lazy, Suspense } from &#39;react&#39;\n\nconst LazyAnalyticsPortlet = lazy(() =&gt; import(&#39;drizzle-cube/client&#39;).then(m =&gt; ({ \n  default: m.AnalyticsPortlet \n})))\n\nfunction OptimizedDashboard({ config }: { config: DashboardConfig }) {\n  return (\n    &lt;DashboardGrid config={config}&gt;\n      {config.portlets.map(portlet =&gt; (\n        &lt;Suspense key={portlet.id} fallback={&lt;PortletSkeleton /&gt;}&gt;\n          &lt;LazyAnalyticsPortlet config={portlet} /&gt;\n        &lt;/Suspense&gt;\n      ))}\n    &lt;/DashboardGrid&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"query-caching\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Caching</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Enable caching for improved performance:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Portlet with caching enabled\n{\n  id: &#39;cached-chart&#39;,\n  query: { /* ... */ },\n  cachingEnabled: true,  // Enable result set caching\n  cacheTimeout: 300     // Cache for 5 minutes\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Portlet with caching enabled\n{\n  id: &#39;cached-chart&#39;,\n  query: { /* ... */ },\n  cachingEnabled: true,  // Enable result set caching\n  cacheTimeout: 300     // Cache for 5 minutes\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"virtual-scrolling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Virtual Scrolling</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">For dashboards with many portlets:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Enable virtualization for large dashboards\n&lt;DashboardGrid\n  config={config}\n  virtualScrolling={true}\n  visiblePortletBuffer={5}  // Render 5 portlets outside viewport\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Enable virtualization for large dashboards\n&lt;DashboardGrid\n  config={config}\n  virtualScrolling={true}\n  visiblePortletBuffer={5}  // Render 5 portlets outside viewport\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"testing-dashboards\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Dashboards</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { render, screen, fireEvent } from &#39;@testing-library/react&#39;\nimport { DashboardGrid } from &#39;drizzle-cube/client&#39;\n\nconst mockConfig: DashboardConfig = {\n  id: &#39;test-dashboard&#39;,\n  name: &#39;Test Dashboard&#39;,\n  portlets: [{\n    id: &#39;test-portlet&#39;,\n    name: &#39;Test Chart&#39;,\n    x: 0, y: 0, w: 6, h: 4,\n    query: { measures: [&#39;Test.count&#39;] },\n    chartType: &#39;bar&#39;,\n    chartConfig: { yAxis: [&#39;Test.count&#39;] }\n  }]\n}\n\ntest(&#39;renders dashboard with portlets&#39;, () =&gt; {\n  render(&lt;DashboardGrid config={mockConfig} /&gt;)\n  \n  expect(screen.getByText(&#39;Test Chart&#39;)).toBeInTheDocument()\n})\n\ntest(&#39;handles portlet editing&#39;, () =&gt; {\n  const onConfigChange = jest.fn()\n  \n  render(\n    &lt;DashboardGrid \n      config={mockConfig}\n      editable={true}\n      onConfigChange={onConfigChange}\n    /&gt;\n  )\n  \n  // Test editing interactions\n  const editButton = screen.getByRole(&#39;button&#39;, { name: /edit/i })\n  fireEvent.click(editButton)\n  \n  // Verify edit modal opens\n  expect(screen.getByRole(&#39;dialog&#39;)).toBeInTheDocument()\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { render, screen, fireEvent } from &#39;@testing-library/react&#39;\nimport { DashboardGrid } from &#39;drizzle-cube/client&#39;\n\nconst mockConfig: DashboardConfig = {\n  id: &#39;test-dashboard&#39;,\n  name: &#39;Test Dashboard&#39;,\n  portlets: [{\n    id: &#39;test-portlet&#39;,\n    name: &#39;Test Chart&#39;,\n    x: 0, y: 0, w: 6, h: 4,\n    query: { measures: [&#39;Test.count&#39;] },\n    chartType: &#39;bar&#39;,\n    chartConfig: { yAxis: [&#39;Test.count&#39;] }\n  }]\n}\n\ntest(&#39;renders dashboard with portlets&#39;, () =&gt; {\n  render(&lt;DashboardGrid config={mockConfig} /&gt;)\n  \n  expect(screen.getByText(&#39;Test Chart&#39;)).toBeInTheDocument()\n})\n\ntest(&#39;handles portlet editing&#39;, () =&gt; {\n  const onConfigChange = jest.fn()\n  \n  render(\n    &lt;DashboardGrid \n      config={mockConfig}\n      editable={true}\n      onConfigChange={onConfigChange}\n    /&gt;\n  )\n  \n  // Test editing interactions\n  const editButton = screen.getByRole(&#39;button&#39;, { name: /edit/i })\n  fireEvent.click(editButton)\n  \n  // Verify edit modal opens\n  expect(screen.getByRole(&#39;dialog&#39;)).toBeInTheDocument()\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Responsive Design</strong>: Always test dashboards on different screen sizes</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Performance</strong>: Limit the number of portlets per dashboard (&lt; 20)</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">User Experience</strong>: Provide loading states and error handling</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Data Freshness</strong>: Set appropriate auto-refresh intervals</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security</strong>: Ensure all queries respect security context</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Accessibility</strong>: Use proper ARIA labels and keyboard navigation</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Persistence</strong>: Save dashboard state frequently to prevent data loss</li></ol><h2 id=\"dashboard-examples\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Dashboard Examples</h2><h3 id=\"executive-dashboard\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Executive Dashboard</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const executiveDashboard: DashboardConfig = {\n  id: &#39;executive-dashboard&#39;,\n  name: &#39;Executive Overview&#39;,\n  portlets: [\n    // Revenue KPI\n    {\n      id: &#39;total-revenue&#39;,\n      name: &#39;Total Revenue&#39;,\n      x: 0, y: 0, w: 3, h: 2,\n      chartType: &#39;kpi&#39;,\n      query: { measures: [&#39;Orders.totalRevenue&#39;] }\n    },\n    // Growth Chart\n    {\n      id: &#39;revenue-growth&#39;,\n      name: &#39;Revenue Growth&#39;,\n      x: 3, y: 0, w: 9, h: 4,\n      chartType: &#39;line&#39;,\n      query: {\n        measures: [&#39;Orders.totalRevenue&#39;],\n        timeDimensions: [{\n          dimension: &#39;Orders.createdAt&#39;,\n          granularity: &#39;month&#39;,\n          dateRange: [&#39;2023-01-01&#39;, &#39;2024-12-31&#39;]\n        }]\n      }\n    }\n  ]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const executiveDashboard: DashboardConfig = {\n  id: &#39;executive-dashboard&#39;,\n  name: &#39;Executive Overview&#39;,\n  portlets: [\n    // Revenue KPI\n    {\n      id: &#39;total-revenue&#39;,\n      name: &#39;Total Revenue&#39;,\n      x: 0, y: 0, w: 3, h: 2,\n      chartType: &#39;kpi&#39;,\n      query: { measures: [&#39;Orders.totalRevenue&#39;] }\n    },\n    // Growth Chart\n    {\n      id: &#39;revenue-growth&#39;,\n      name: &#39;Revenue Growth&#39;,\n      x: 3, y: 0, w: 9, h: 4,\n      chartType: &#39;line&#39;,\n      query: {\n        measures: [&#39;Orders.totalRevenue&#39;],\n        timeDimensions: [{\n          dimension: &#39;Orders.createdAt&#39;,\n          granularity: &#39;month&#39;,\n          dateRange: [&#39;2023-01-01&#39;, &#39;2024-12-31&#39;]\n        }]\n      }\n    }\n  ]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"operations-dashboard\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Operations Dashboard</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const operationsDashboard: DashboardConfig = {\n  id: &#39;operations-dashboard&#39;, \n  name: &#39;Operations Metrics&#39;,\n  portlets: [\n    // Employee Productivity\n    {\n      id: &#39;productivity-trend&#39;,\n      name: &#39;Productivity Trend&#39;,\n      x: 0, y: 0, w: 8, h: 4,\n      chartType: &#39;area&#39;,\n      query: {\n        measures: [&#39;Productivity.avgLinesOfCode&#39;],\n        dimensions: [&#39;Productivity.departmentName&#39;],\n        timeDimensions: [{\n          dimension: &#39;Productivity.date&#39;,\n          granularity: &#39;week&#39;\n        }]\n      }\n    },\n    // Department Comparison\n    {\n      id: &#39;dept-comparison&#39;,\n      name: &#39;Department Comparison&#39;,\n      x: 8, y: 0, w: 4, h: 4,\n      chartType: &#39;bar&#39;,\n      query: {\n        measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n        dimensions: [&#39;Employees.departmentName&#39;]\n      }\n    }\n  ]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const operationsDashboard: DashboardConfig = {\n  id: &#39;operations-dashboard&#39;, \n  name: &#39;Operations Metrics&#39;,\n  portlets: [\n    // Employee Productivity\n    {\n      id: &#39;productivity-trend&#39;,\n      name: &#39;Productivity Trend&#39;,\n      x: 0, y: 0, w: 8, h: 4,\n      chartType: &#39;area&#39;,\n      query: {\n        measures: [&#39;Productivity.avgLinesOfCode&#39;],\n        dimensions: [&#39;Productivity.departmentName&#39;],\n        timeDimensions: [{\n          dimension: &#39;Productivity.date&#39;,\n          granularity: &#39;week&#39;\n        }]\n      }\n    },\n    // Department Comparison\n    {\n      id: &#39;dept-comparison&#39;,\n      name: &#39;Department Comparison&#39;,\n      x: 8, y: 0, w: 4, h: 4,\n      chartType: &#39;bar&#39;,\n      query: {\n        measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n        dimensions: [&#39;Employees.departmentName&#39;]\n      }\n    }\n  ]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"client/hooks\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Hooks</a> for data fetching patterns</li><li class=\"leading-relaxed\">Explore <a href=\"#\" data-help-link=\"client/charts\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Charts</a> for visualization options</li><li class=\"leading-relaxed\">Review <a href=\"#\" data-help-link=\"client\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >React Client</a> overview</li><li class=\"leading-relaxed\">Check dashboard examples in the repository</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Dashboard templates and marketplace</li><li class=\"leading-relaxed\">Advanced dashboard sharing and collaboration</li><li class=\"leading-relaxed\">Dashboard embedding and white-labeling</li><li class=\"leading-relaxed\">Real-time dashboard notifications and alerts</li><li class=\"leading-relaxed\">Dashboard performance analytics</li><li class=\"leading-relaxed\">Advanced dashboard filtering and drill-down capabilities</li></ul>",
    "path": "client/dashboards.md"
  },
  {
    "slug": "client/hooks",
    "title": "Hooks",
    "content": "<h1 id=\"hooks\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Hooks</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube provides React hooks for seamless data fetching and state management. The hooks are designed to be Cube.js-compatible while leveraging Drizzle ORM&#39;s type safety and security features.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The hook system consists of <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">useCubeQuery</code> for data fetching and <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">useCubeContext</code> for accessing the Cube API client. These hooks provide automatic loading states, error handling, and query optimization.</p><h2 id=\"usecubequery-hook\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">useCubeQuery Hook</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The primary hook for executing analytics queries and managing result state.</p><h3 id=\"basic-usage\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Usage</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { useCubeQuery } from &#39;drizzle-cube/client&#39;\n\nfunction EmployeeMetrics() {\n  const { resultSet, isLoading, error } = useCubeQuery({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;]\n  })\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;\n  if (error) return &lt;div&gt;Error: {error.message}&lt;/div&gt;\n  if (!resultSet) return &lt;div&gt;No data&lt;/div&gt;\n\n  return (\n    &lt;div&gt;\n      {resultSet.rawData().map((row, index) =&gt; (\n        &lt;div key={index}&gt;\n          {row[&#39;Employees.departmentName&#39;]}: {row[&#39;Employees.count&#39;]}\n        &lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { useCubeQuery } from &#39;drizzle-cube/client&#39;\n\nfunction EmployeeMetrics() {\n  const { resultSet, isLoading, error } = useCubeQuery({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;]\n  })\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;\n  if (error) return &lt;div&gt;Error: {error.message}&lt;/div&gt;\n  if (!resultSet) return &lt;div&gt;No data&lt;/div&gt;\n\n  return (\n    &lt;div&gt;\n      {resultSet.rawData().map((row, index) =&gt; (\n        &lt;div key={index}&gt;\n          {row[&#39;Employees.departmentName&#39;]}: {row[&#39;Employees.count&#39;]}\n        &lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"hook-signature\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Hook Signature</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function useCubeQuery(\n  query: CubeQuery | null,\n  options?: CubeQueryOptions\n): UseCubeQueryResult\n\ninterface UseCubeQueryResult {\n  resultSet: CubeResultSet | null\n  isLoading: boolean\n  error: Error | null\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function useCubeQuery(\n  query: CubeQuery | null,\n  options?: CubeQueryOptions\n): UseCubeQueryResult\n\ninterface UseCubeQueryResult {\n  resultSet: CubeResultSet | null\n  isLoading: boolean\n  error: Error | null\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"query-structure\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Structure</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface CubeQuery {\n  measures?: string[]           // Metrics to calculate\n  dimensions?: string[]         // Grouping fields\n  timeDimensions?: TimeDimension[]  // Time-based grouping\n  filters?: Filter[]           // Query filters\n  order?: [string, &#39;asc&#39; | &#39;desc&#39;][]  // Sorting\n  limit?: number              // Result limit\n  offset?: number             // Result offset\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface CubeQuery {\n  measures?: string[]           // Metrics to calculate\n  dimensions?: string[]         // Grouping fields\n  timeDimensions?: TimeDimension[]  // Time-based grouping\n  filters?: Filter[]           // Query filters\n  order?: [string, &#39;asc&#39; | &#39;desc&#39;][]  // Sorting\n  limit?: number              // Result limit\n  offset?: number             // Result offset\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-usage\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Usage</h2><h3 id=\"time-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Time Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Query time-series data with automatic formatting:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function RevenueChart() {\n  const { resultSet, isLoading, error } = useCubeQuery({\n    measures: [&#39;Orders.totalRevenue&#39;],\n    timeDimensions: [{\n      dimension: &#39;Orders.createdAt&#39;,\n      granularity: &#39;month&#39;,\n      dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n    }]\n  })\n\n  // resultSet.rawData() returns formatted time data\n  // e.g., { &#39;Orders.createdAt&#39;: &#39;2023-01&#39;, &#39;Orders.totalRevenue&#39;: 50000 }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function RevenueChart() {\n  const { resultSet, isLoading, error } = useCubeQuery({\n    measures: [&#39;Orders.totalRevenue&#39;],\n    timeDimensions: [{\n      dimension: &#39;Orders.createdAt&#39;,\n      granularity: &#39;month&#39;,\n      dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n    }]\n  })\n\n  // resultSet.rawData() returns formatted time data\n  // e.g., { &#39;Orders.createdAt&#39;: &#39;2023-01&#39;, &#39;Orders.totalRevenue&#39;: 50000 }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Time Dimension Options:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">granularity</code>: &#39;year&#39; | &#39;quarter&#39; | &#39;month&#39; | &#39;week&#39; | &#39;day&#39; | &#39;hour&#39;</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">dateRange</code>: [startDate, endDate] or relative dates</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">offset</code>: Time offset for comparative analysis</li></ul><h3 id=\"filtering-data\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Filtering Data</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Apply filters to narrow down results:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function ActiveEmployees() {\n  const { resultSet } = useCubeQuery({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;],\n    filters: [\n      {\n        member: &#39;Employees.isActive&#39;,\n        operator: &#39;equals&#39;,\n        values: [true]\n      },\n      {\n        member: &#39;Employees.createdAt&#39;, \n        operator: &#39;inDateRange&#39;,\n        values: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n      }\n    ]\n  })\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function ActiveEmployees() {\n  const { resultSet } = useCubeQuery({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;],\n    filters: [\n      {\n        member: &#39;Employees.isActive&#39;,\n        operator: &#39;equals&#39;,\n        values: [true]\n      },\n      {\n        member: &#39;Employees.createdAt&#39;, \n        operator: &#39;inDateRange&#39;,\n        values: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n      }\n    ]\n  })\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Filter Operators:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">equals</code> / <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">notEquals</code></li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">contains</code> / <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">notContains</code></li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">gt</code> / <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">gte</code> / <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">lt</code> / <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">lte</code> (greater/less than)</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">inDateRange</code> / <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">notInDateRange</code></li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">set</code> / <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">notSet</code> (null checks)</li></ul><h3 id=\"multi-cube-queries\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Multi-Cube Queries</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Query data from multiple cubes using joins:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function CrossCubeAnalysis() {\n  const { resultSet } = useCubeQuery({\n    measures: [\n      &#39;Employees.count&#39;,           // From Employees cube\n      &#39;Departments.totalBudget&#39;,   // From Departments cube\n      &#39;Productivity.avgLinesOfCode&#39; // From Productivity cube\n    ],\n    dimensions: [\n      &#39;Departments.name&#39;,          // Group by department\n      &#39;Employees.isActive&#39;         // Split by active status\n    ]\n  })\n\n  // Automatically resolves join paths between cubes\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function CrossCubeAnalysis() {\n  const { resultSet } = useCubeQuery({\n    measures: [\n      &#39;Employees.count&#39;,           // From Employees cube\n      &#39;Departments.totalBudget&#39;,   // From Departments cube\n      &#39;Productivity.avgLinesOfCode&#39; // From Productivity cube\n    ],\n    dimensions: [\n      &#39;Departments.name&#39;,          // Group by department\n      &#39;Employees.isActive&#39;         // Split by active status\n    ]\n  })\n\n  // Automatically resolves join paths between cubes\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"sorting-and-limiting\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Sorting and Limiting</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Control result ordering and pagination:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function TopPerformers() {\n  const { resultSet } = useCubeQuery({\n    measures: [&#39;Productivity.avgLinesOfCode&#39;],\n    dimensions: [&#39;Employees.name&#39;],\n    order: [\n      [&#39;Productivity.avgLinesOfCode&#39;, &#39;desc&#39;]\n    ],\n    limit: 10  // Top 10 performers\n  })\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function TopPerformers() {\n  const { resultSet } = useCubeQuery({\n    measures: [&#39;Productivity.avgLinesOfCode&#39;],\n    dimensions: [&#39;Employees.name&#39;],\n    order: [\n      [&#39;Productivity.avgLinesOfCode&#39;, &#39;desc&#39;]\n    ],\n    limit: 10  // Top 10 performers\n  })\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"hook-options\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Hook Options</h2><h3 id=\"query-options\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Options</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface CubeQueryOptions {\n  skip?: boolean                    // Skip query execution\n  resetResultSetOnChange?: boolean  // Reset data when query changes\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface CubeQueryOptions {\n  skip?: boolean                    // Skip query execution\n  resetResultSetOnChange?: boolean  // Reset data when query changes\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"skip-query-execution\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Skip Query Execution</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Conditionally skip queries:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function ConditionalQuery({ showData }: { showData: boolean }) {\n  const { resultSet, isLoading } = useCubeQuery(\n    {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    },\n    { skip: !showData }  // Only execute when showData is true\n  )\n\n  // Hook won&#39;t execute query until showData becomes true\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function ConditionalQuery({ showData }: { showData: boolean }) {\n  const { resultSet, isLoading } = useCubeQuery(\n    {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    },\n    { skip: !showData }  // Only execute when showData is true\n  )\n\n  // Hook won&#39;t execute query until showData becomes true\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"reset-result-set\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Reset Result Set</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Control when to clear previous results:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function DynamicQuery({ queryConfig }: { queryConfig: CubeQuery }) {\n  const { resultSet } = useCubeQuery(\n    queryConfig,\n    { resetResultSetOnChange: true }  // Clear data when query changes\n  )\n\n  // Shows loading state when query changes instead of stale data\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function DynamicQuery({ queryConfig }: { queryConfig: CubeQuery }) {\n  const { resultSet } = useCubeQuery(\n    queryConfig,\n    { resetResultSetOnChange: true }  // Clear data when query changes\n  )\n\n  // Shows loading state when query changes instead of stale data\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"cubeprovider-setup\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">CubeProvider Setup</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Hooks require the <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">CubeProvider</code> context for API access:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { CubeProvider } from &#39;drizzle-cube/client&#39;\n\nfunction App() {\n  return (\n    &lt;CubeProvider \n      config={{\n        apiUrl: &#39;/cubejs-api/v1&#39;,\n        headers: {\n          &#39;Authorization&#39;: `Bearer ${getToken()}`\n        }\n      }}\n    &gt;\n      &lt;Dashboard /&gt;\n    &lt;/CubeProvider&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { CubeProvider } from &#39;drizzle-cube/client&#39;\n\nfunction App() {\n  return (\n    &lt;CubeProvider \n      config={{\n        apiUrl: &#39;/cubejs-api/v1&#39;,\n        headers: {\n          &#39;Authorization&#39;: `Bearer ${getToken()}`\n        }\n      }}\n    &gt;\n      &lt;Dashboard /&gt;\n    &lt;/CubeProvider&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"cubeprovider-configuration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">CubeProvider Configuration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface CubeProviderConfig {\n  apiUrl: string                    // API endpoint URL\n  headers?: Record&lt;string, string&gt;  // Default headers\n  credentials?: &#39;include&#39; | &#39;same-origin&#39; | &#39;omit&#39;  // Fetch credentials\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface CubeProviderConfig {\n  apiUrl: string                    // API endpoint URL\n  headers?: Record&lt;string, string&gt;  // Default headers\n  credentials?: &#39;include&#39; | &#39;same-origin&#39; | &#39;omit&#39;  // Fetch credentials\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"custom-hooks\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Custom Hooks</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Build reusable analytics hooks for common patterns:</p><h3 id=\"department-metrics-hook\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Department Metrics Hook</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { useCubeQuery } from &#39;drizzle-cube/client&#39;\n\nfunction useDepartmentMetrics(departmentName?: string) {\n  return useCubeQuery(\n    departmentName ? {\n      measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n      dimensions: [&#39;Employees.departmentName&#39;],\n      filters: [{\n        member: &#39;Employees.departmentName&#39;,\n        operator: &#39;equals&#39;,\n        values: [departmentName]\n      }]\n    } : null  // Skip if no department selected\n  )\n}\n\n// Usage\nfunction DepartmentCard({ department }: { department: string }) {\n  const { resultSet, isLoading } = useDepartmentMetrics(department)\n  \n  if (isLoading) return &lt;div&gt;Loading {department}...&lt;/div&gt;\n  \n  const data = resultSet?.rawData()[0]\n  return (\n    &lt;div&gt;\n      &lt;h3&gt;{department}&lt;/h3&gt;\n      &lt;p&gt;Employees: {data?.[&#39;Employees.count&#39;]}&lt;/p&gt;\n      &lt;p&gt;Avg Salary: ${data?.[&#39;Employees.avgSalary&#39;]}&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { useCubeQuery } from &#39;drizzle-cube/client&#39;\n\nfunction useDepartmentMetrics(departmentName?: string) {\n  return useCubeQuery(\n    departmentName ? {\n      measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n      dimensions: [&#39;Employees.departmentName&#39;],\n      filters: [{\n        member: &#39;Employees.departmentName&#39;,\n        operator: &#39;equals&#39;,\n        values: [departmentName]\n      }]\n    } : null  // Skip if no department selected\n  )\n}\n\n// Usage\nfunction DepartmentCard({ department }: { department: string }) {\n  const { resultSet, isLoading } = useDepartmentMetrics(department)\n  \n  if (isLoading) return &lt;div&gt;Loading {department}...&lt;/div&gt;\n  \n  const data = resultSet?.rawData()[0]\n  return (\n    &lt;div&gt;\n      &lt;h3&gt;{department}&lt;/h3&gt;\n      &lt;p&gt;Employees: {data?.[&#39;Employees.count&#39;]}&lt;/p&gt;\n      &lt;p&gt;Avg Salary: ${data?.[&#39;Employees.avgSalary&#39;]}&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"time-range-hook\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Time Range Hook</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function useTimeRangeQuery(\n  baseQuery: Omit&lt;CubeQuery, &#39;timeDimensions&#39;&gt;,\n  timeDimension: string,\n  range: [string, string],\n  granularity: string = &#39;month&#39;\n) {\n  return useCubeQuery({\n    ...baseQuery,\n    timeDimensions: [{\n      dimension: timeDimension,\n      granularity,\n      dateRange: range\n    }]\n  })\n}\n\n// Usage\nfunction RevenueOverTime() {\n  const { resultSet } = useTimeRangeQuery(\n    { measures: [&#39;Orders.totalRevenue&#39;] },\n    &#39;Orders.createdAt&#39;,\n    [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;],\n    &#39;month&#39;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function useTimeRangeQuery(\n  baseQuery: Omit&lt;CubeQuery, &#39;timeDimensions&#39;&gt;,\n  timeDimension: string,\n  range: [string, string],\n  granularity: string = &#39;month&#39;\n) {\n  return useCubeQuery({\n    ...baseQuery,\n    timeDimensions: [{\n      dimension: timeDimension,\n      granularity,\n      dateRange: range\n    }]\n  })\n}\n\n// Usage\nfunction RevenueOverTime() {\n  const { resultSet } = useTimeRangeQuery(\n    { measures: [&#39;Orders.totalRevenue&#39;] },\n    &#39;Orders.createdAt&#39;,\n    [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;],\n    &#39;month&#39;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"comparative-analysis-hook-coming-soon\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Comparative Analysis Hook <em class=\"italic text-gray-700\">(Coming Soon)</em></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Time-based comparison features are planned for future releases. Currently, you can implement comparative analysis by making separate queries with different date ranges.</p><h2 id=\"error-handling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Handling</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Handle different types of errors gracefully:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function RobustQuery() {\n  const { resultSet, isLoading, error } = useCubeQuery({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;]\n  })\n\n  if (error) {\n    // Handle different error types\n    if (error.message.includes(&#39;Access denied&#39;)) {\n      return &lt;div&gt;You don&#39;t have permission to view this data&lt;/div&gt;\n    }\n    \n    if (error.message.includes(&#39;Network&#39;)) {\n      return &lt;div&gt;Network error. Please try again.&lt;/div&gt;\n    }\n    \n    return &lt;div&gt;An unexpected error occurred: {error.message}&lt;/div&gt;\n  }\n\n  if (isLoading) {\n    return &lt;div className=&quot;animate-pulse&quot;&gt;Loading analytics...&lt;/div&gt;\n  }\n\n  if (!resultSet || resultSet.rawData().length === 0) {\n    return &lt;div&gt;No data available for the selected criteria&lt;/div&gt;\n  }\n\n  return &lt;div&gt;Data loaded successfully!&lt;/div&gt;\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function RobustQuery() {\n  const { resultSet, isLoading, error } = useCubeQuery({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;]\n  })\n\n  if (error) {\n    // Handle different error types\n    if (error.message.includes(&#39;Access denied&#39;)) {\n      return &lt;div&gt;You don&#39;t have permission to view this data&lt;/div&gt;\n    }\n    \n    if (error.message.includes(&#39;Network&#39;)) {\n      return &lt;div&gt;Network error. Please try again.&lt;/div&gt;\n    }\n    \n    return &lt;div&gt;An unexpected error occurred: {error.message}&lt;/div&gt;\n  }\n\n  if (isLoading) {\n    return &lt;div className=&quot;animate-pulse&quot;&gt;Loading analytics...&lt;/div&gt;\n  }\n\n  if (!resultSet || resultSet.rawData().length === 0) {\n    return &lt;div&gt;No data available for the selected criteria&lt;/div&gt;\n  }\n\n  return &lt;div&gt;Data loaded successfully!&lt;/div&gt;\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance-optimization\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Optimization</h2><h3 id=\"query-memoization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Memoization</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Prevent unnecessary re-renders with query memoization:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { useMemo } from &#39;react&#39;\n\nfunction OptimizedQuery({ filters }: { filters: Filter[] }) {\n  const query = useMemo(() =&gt; ({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;],\n    filters\n  }), [filters])  // Only re-create query when filters change\n\n  const { resultSet, isLoading } = useCubeQuery(query)\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { useMemo } from &#39;react&#39;\n\nfunction OptimizedQuery({ filters }: { filters: Filter[] }) {\n  const query = useMemo(() =&gt; ({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;],\n    filters\n  }), [filters])  // Only re-create query when filters change\n\n  const { resultSet, isLoading } = useCubeQuery(query)\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"conditional-queries\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Conditional Queries</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Skip expensive queries when not needed:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function ConditionalDashboard({ activeTab }: { activeTab: string }) {\n  const employeeQuery = useCubeQuery(\n    { measures: [&#39;Employees.count&#39;] },\n    { skip: activeTab !== &#39;employees&#39; }  // Only query when tab is active\n  )\n\n  const revenueQuery = useCubeQuery(\n    { measures: [&#39;Orders.totalRevenue&#39;] },\n    { skip: activeTab !== &#39;revenue&#39; }\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function ConditionalDashboard({ activeTab }: { activeTab: string }) {\n  const employeeQuery = useCubeQuery(\n    { measures: [&#39;Employees.count&#39;] },\n    { skip: activeTab !== &#39;employees&#39; }  // Only query when tab is active\n  )\n\n  const revenueQuery = useCubeQuery(\n    { measures: [&#39;Orders.totalRevenue&#39;] },\n    { skip: activeTab !== &#39;revenue&#39; }\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"result-set-caching\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Result Set Caching</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Leverage browser caching for repeated queries:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// The underlying CubeClient automatically caches results\n// Cache keys are based on query content and security context\nconst { resultSet } = useCubeQuery({\n  measures: [&#39;Employees.count&#39;]  // Cached if queried before\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// The underlying CubeClient automatically caches results\n// Cache keys are based on query content and security context\nconst { resultSet } = useCubeQuery({\n  measures: [&#39;Employees.count&#39;]  // Cached if queried before\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"testing-hooks\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Hooks</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Test analytics components with mock data:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { renderHook, waitFor } from &#39;@testing-library/react&#39;\nimport { CubeProvider } from &#39;drizzle-cube/client&#39;\nimport { useCubeQuery } from &#39;drizzle-cube/client&#39;\n\n// Mock CubeProvider for testing\nconst TestCubeProvider = ({ children }: { children: React.ReactNode }) =&gt; (\n  &lt;CubeProvider config={{ apiUrl: &#39;http://localhost:4000/cubejs-api/v1&#39; }}&gt;\n    {children}\n  &lt;/CubeProvider&gt;\n)\n\ntest(&#39;useCubeQuery returns data&#39;, async () =&gt; {\n  const { result } = renderHook(\n    () =&gt; useCubeQuery({\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    }),\n    { wrapper: TestCubeProvider }\n  )\n\n  expect(result.current.isLoading).toBe(true)\n\n  await waitFor(() =&gt; {\n    expect(result.current.isLoading).toBe(false)\n  })\n\n  expect(result.current.resultSet).toBeTruthy()\n  expect(result.current.error).toBeNull()\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { renderHook, waitFor } from &#39;@testing-library/react&#39;\nimport { CubeProvider } from &#39;drizzle-cube/client&#39;\nimport { useCubeQuery } from &#39;drizzle-cube/client&#39;\n\n// Mock CubeProvider for testing\nconst TestCubeProvider = ({ children }: { children: React.ReactNode }) =&gt; (\n  &lt;CubeProvider config={{ apiUrl: &#39;http://localhost:4000/cubejs-api/v1&#39; }}&gt;\n    {children}\n  &lt;/CubeProvider&gt;\n)\n\ntest(&#39;useCubeQuery returns data&#39;, async () =&gt; {\n  const { result } = renderHook(\n    () =&gt; useCubeQuery({\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    }),\n    { wrapper: TestCubeProvider }\n  )\n\n  expect(result.current.isLoading).toBe(true)\n\n  await waitFor(() =&gt; {\n    expect(result.current.isLoading).toBe(false)\n  })\n\n  expect(result.current.resultSet).toBeTruthy()\n  expect(result.current.error).toBeNull()\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Query Memoization</strong>: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">useMemo</code> for complex query objects</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Error Handling</strong>: Always handle loading states and errors</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Conditional Queries</strong>: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">skip</code> option to avoid unnecessary requests</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Custom Hooks</strong>: Create reusable hooks for common query patterns</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type Safety</strong>: Leverage TypeScript for query and result type safety</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Performance</strong>: Limit large result sets with filters and pagination</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security</strong>: Never bypass security context in queries</li></ol><h2 id=\"common-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Patterns</h2><h3 id=\"basic-data-fetching\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Data Fetching</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const { resultSet, isLoading, error } = useCubeQuery({\n  measures: [&#39;Table.count&#39;],\n  dimensions: [&#39;Table.category&#39;]\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const { resultSet, isLoading, error } = useCubeQuery({\n  measures: [&#39;Table.count&#39;],\n  dimensions: [&#39;Table.category&#39;]\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"time-series-analysis\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Time Series Analysis</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const { resultSet } = useCubeQuery({\n  measures: [&#39;Orders.totalRevenue&#39;],\n  timeDimensions: [{\n    dimension: &#39;Orders.createdAt&#39;,\n    granularity: &#39;month&#39;,\n    dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n  }]\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const { resultSet } = useCubeQuery({\n  measures: [&#39;Orders.totalRevenue&#39;],\n  timeDimensions: [{\n    dimension: &#39;Orders.createdAt&#39;,\n    granularity: &#39;month&#39;,\n    dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n  }]\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"filtered-query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Filtered Query</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const { resultSet } = useCubeQuery({\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.department&#39;],\n  filters: [{\n    member: &#39;Employees.isActive&#39;,\n    operator: &#39;equals&#39;,\n    values: [true]\n  }]\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const { resultSet } = useCubeQuery({\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.department&#39;],\n  filters: [{\n    member: &#39;Employees.isActive&#39;,\n    operator: &#39;equals&#39;,\n    values: [true]\n  }]\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"conditional-execution\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Conditional Execution</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const { resultSet } = useCubeQuery(\n  selectedDepartment ? {\n    measures: [&#39;Employees.count&#39;],\n    filters: [{\n      member: &#39;Employees.departmentName&#39;,\n      operator: &#39;equals&#39;,\n      values: [selectedDepartment]\n    }]\n  } : null\n)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const { resultSet } = useCubeQuery(\n  selectedDepartment ? {\n    measures: [&#39;Employees.count&#39;],\n    filters: [{\n      member: &#39;Employees.departmentName&#39;,\n      operator: &#39;equals&#39;,\n      values: [selectedDepartment]\n    }]\n  } : null\n)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"client/charts\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Charts</a> for data visualization</li><li class=\"leading-relaxed\">Explore <a href=\"#\" data-help-link=\"client/dashboards\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Dashboards</a> for layout management</li><li class=\"leading-relaxed\">Review <a href=\"#\" data-help-link=\"client\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >React Client</a> overview</li><li class=\"leading-relaxed\">Check out hook examples in the repository</li></ul><h2 id=\"future-features-planned-for-upcoming-releases\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Future Features <em class=\"italic text-gray-700\">(Planned for Upcoming Releases)</em></h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The following hooks and features are planned for future versions of Drizzle Cube:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Query builder hook</strong> with visual interface</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Real-time data hooks</strong> with WebSocket support</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Advanced caching strategies</strong> and invalidation</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Query performance monitoring</strong> and optimization hooks</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Offline-capable hooks</strong> with local storage</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Hook composition utilities</strong> for complex analytics patterns</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">These features are not currently available but are on our development roadmap.</p>",
    "path": "client/hooks.md"
  },
  {
    "slug": "getting-started",
    "title": "Getting Started with Drizzle Cube",
    "content": "<h1 id=\"getting-started-with-drizzle-cube\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Getting Started with Drizzle Cube</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube is a <strong class=\"font-semibold text-slate-700\">Drizzle ORM-first semantic layer</strong> with <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> compatibility. It provides type-safe analytics and dashboards with SQL injection protection by leveraging Drizzle ORM as its core SQL building engine.</p><h2 id=\"what-is-drizzle-cube\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">What is Drizzle Cube?</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube bridges the gap between your database and your analytics applications by providing:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type-safe semantic layer</strong> - Define cubes, dimensions, and measures with full TypeScript support</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">SQL injection protection</strong> - All queries use Drizzle&#39;s parameterized query system</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\"><a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> compatibility</strong> - Drop-in replacement for existing <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> implementations</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Multi-database support</strong> - Supports PostgreSQL (including Neon) and MySQL, with SQLite coming soon</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">React components</strong> - Pre-built dashboard and chart components</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Framework agnostic</strong> - Use with any web framework via adapters</li></ul><h2 id=\"core-concepts\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Core Concepts</h2><h3 id=\"semantic-layer\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Semantic Layer</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The <strong class=\"font-semibold text-slate-700\">semantic layer</strong> is a business-friendly abstraction over your database that sits between your raw data and your analytics applications. Instead of writing raw SQL queries throughout your application, you define <strong class=\"font-semibold text-slate-700\">cubes</strong> that encapsulate your business logic and provide:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Consistent metrics</strong> - Define calculations once, use everywhere</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security by default</strong> - Multi-tenant isolation and access control</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Business terminology</strong> - Use familiar names instead of database columns</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type safety</strong> - Full TypeScript support prevents runtime errors</li></ul><h3 id=\"cubes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Cubes</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Cubes</strong> are the building blocks of your semantic layer. Each cube represents a business entity (like Sales, Users, Products) with:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dimensions</strong> - Attributes you can filter and group by (like product category, customer name)</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Measures</strong> - Numeric values you want to analyze (like total revenue, order count)</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security context</strong> - Automatic multi-tenant isolation</li></ul><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.sales)\n      .where(eq(schema.sales.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    productName: { sql: schema.sales.productName, type: &#39;string&#39; },\n    orderDate: { sql: schema.sales.orderDate, type: &#39;time&#39; }\n  },\n  \n  measures: {\n    totalSales: { sql: schema.sales.amount, type: &#39;sum&#39; },\n    orderCount: { sql: schema.sales.id, type: &#39;count&#39; }\n  }\n});</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.sales)\n      .where(eq(schema.sales.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    productName: { sql: schema.sales.productName, type: &#39;string&#39; },\n    orderDate: { sql: schema.sales.orderDate, type: &#39;time&#39; }\n  },\n  \n  measures: {\n    totalSales: { sql: schema.sales.amount, type: &#39;sum&#39; },\n    orderCount: { sql: schema.sales.id, type: &#39;count&#39; }\n  }\n});\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"query-structure\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Structure</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">When you query cubes, you specify what you want to analyze:</p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;measures&quot;: [&quot;Sales.totalSales&quot;, &quot;Sales.orderCount&quot;],\n  &quot;dimensions&quot;: [&quot;Sales.productName&quot;], \n  &quot;timeDimensions&quot;: [{\n    &quot;dimension&quot;: &quot;Sales.orderDate&quot;,\n    &quot;granularity&quot;: &quot;month&quot;\n  }],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Sales.productName&quot;,\n    &quot;operator&quot;: &quot;equals&quot;, \n    &quot;values&quot;: [&quot;Electronics&quot;]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;measures&quot;: [&quot;Sales.totalSales&quot;, &quot;Sales.orderCount&quot;],\n  &quot;dimensions&quot;: [&quot;Sales.productName&quot;], \n  &quot;timeDimensions&quot;: [{\n    &quot;dimension&quot;: &quot;Sales.orderDate&quot;,\n    &quot;granularity&quot;: &quot;month&quot;\n  }],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Sales.productName&quot;,\n    &quot;operator&quot;: &quot;equals&quot;, \n    &quot;values&quot;: [&quot;Electronics&quot;]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"architecture\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Architecture</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube follows a <strong class=\"font-semibold text-slate-700\">Drizzle-first architecture</strong>:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Database Schema</strong> - Define your database structure using Drizzle ORM</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Semantic Layer</strong> - Create cubes that reference your schema</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Query Execution</strong> - Drizzle generates type-safe, parameterized SQL</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Framework Integration</strong> - Use adapters to integrate with your web framework</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Client Components</strong> - Render data using React components</li></ol><h2 id=\"security-model\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Security Model</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Security is built into every layer:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">SQL Injection Protection</strong> - Drizzle&#39;s parameterized queries prevent SQL injection</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Multi-tenant Security</strong> - Every cube should filter by security context</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type Safety</strong> - TypeScript prevents runtime errors and data inconsistencies</li></ul><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Ready to get started? Here&#39;s what to do next:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/installation\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Installation</strong></a> - Install Drizzle Cube in your project</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/quick-start\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Quick Start</strong></a> - Build your first semantic layer</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/scaling\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Scaling Your SaaS</strong></a> - Learn how Drizzle Cube grows with your business</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Semantic Layer</strong></a> - Deep dive into cubes, dimensions, and measures</li></ol><h2 id=\"example-applications\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Example Applications</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Check out these example implementations:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Basic Example</strong> - Simple analytics dashboard</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\"><a href=\"https://github.com/cliftonc/drizzle-cube/tree/main/examples/hono\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Hono Example</a></strong> - Full-featured application with Cloudflare Workers</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Multi-tenant Example</strong> - Enterprise-ready multi-tenant setup</li></ul><h2 id=\"community-and-support\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Community and Support</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">GitHub Repository</strong> - <a href=\"https://github.com/cliftonc/drizzle-cube\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">github.com/cliftonc/drizzle-cube</a></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Issues and Bug Reports</strong> - <a href=\"https://github.com/cliftonc/drizzle-cube/issues\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Issues</a></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Discussions</strong> - <a href=\"https://github.com/cliftonc/drizzle-cube/discussions\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Discussions</a></li></ul>",
    "path": "getting-started/index.md"
  },
  {
    "slug": "getting-started/installation",
    "title": "Installation",
    "content": "<h1 id=\"installation\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Installation</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Get Drizzle Cube up and running in your project in just a few steps.</p><h2 id=\"requirements\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Requirements</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Before installing Drizzle Cube, make sure you have:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Node.js</strong> 18 or higher</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">TypeScript</strong> 5.0 or higher  </li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Drizzle ORM</strong> 0.44.4 or higher</li><li class=\"leading-relaxed\">A PostgreSQL or MySQL database (SQLite support coming soon)</li></ul><h2 id=\"package-installation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Package Installation</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Install Drizzle Cube using your preferred package manager:</p><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\"># npm\nnpm install drizzle-cube drizzle-orm\n\n# yarn\nyarn add drizzle-cube drizzle-orm\n\n# pnpm\npnpm add drizzle-cube drizzle-orm</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"# npm\nnpm install drizzle-cube drizzle-orm\n\n# yarn\nyarn add drizzle-cube drizzle-orm\n\n# pnpm\npnpm add drizzle-cube drizzle-orm\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"database-setup\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Database Setup</h2><h3 id=\"postgresql\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">PostgreSQL</h3><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install postgres\n# or for Neon serverless\nnpm install @neondatabase/serverless</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install postgres\n# or for Neon serverless\nnpm install @neondatabase/serverless\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"mysql\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">MySQL</h3><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install mysql2</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install mysql2\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"sqlite\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">SQLite</h3><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install better-sqlite3</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install better-sqlite3\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"framework-adapters\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Framework Adapters</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Choose the adapter for your web framework:</p><h3 id=\"expressjs\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Express.js</h3><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install express cors</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install express cors\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">📖 <a href=\"#\" data-help-link=\"adapters/express\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Express Adapter Documentation</strong></a> - Full setup guide with middleware integration</p><h3 id=\"fastify\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Fastify</h3><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install fastify @fastify/cors</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install fastify @fastify/cors\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">📖 <a href=\"#\" data-help-link=\"adapters/fastify\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Fastify Adapter Documentation</strong></a> - High-performance plugin integration</p><h3 id=\"hono-recommended\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Hono (Recommended)</h3><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install hono</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install hono\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">📖 <a href=\"#\" data-help-link=\"adapters/hono\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Hono Adapter Documentation</strong></a> - Modern edge-runtime compatible adapter</p><h3 id=\"nextjs\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Next.js</h3><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install next</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install next\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">📖 <a href=\"#\" data-help-link=\"adapters/nextjs\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Next.js Adapter Documentation</strong></a> - App Router integration with server components</p><h3 id=\"custom-framework\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Framework</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">You can create custom adapters for other frameworks. </p><p class=\"mb-4 text-gray-600 leading-relaxed\">📖 <a href=\"#\" data-help-link=\"adapters/custom\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Custom Adapters Guide</strong></a> - Build your own adapter for any framework</p><h2 id=\"react-components-optional\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">React Components (Optional)</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">For dashboard and chart components:</p><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install react react-dom recharts react-grid-layout</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install react react-dom recharts react-grid-layout\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"typescript-configuration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">TypeScript Configuration</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Update your <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">tsconfig.json</code> to include proper module resolution:</p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;ES2022&quot;,\n    &quot;lib&quot;: [&quot;ES2023&quot;, &quot;DOM&quot;, &quot;DOM.Iterable&quot;],\n    &quot;module&quot;: &quot;ESNext&quot;,\n    &quot;moduleResolution&quot;: &quot;bundler&quot;,\n    &quot;allowImportingTsExtensions&quot;: true,\n    &quot;resolveJsonModule&quot;: true,\n    &quot;isolatedModules&quot;: true,\n    &quot;jsx&quot;: &quot;react-jsx&quot;,\n    &quot;strict&quot;: true,\n    &quot;baseUrl&quot;: &quot;.&quot;,\n    &quot;paths&quot;: {\n      &quot;@/*&quot;: [&quot;./src/*&quot;]\n    }\n  },\n  &quot;include&quot;: [&quot;src/**/*.ts&quot;, &quot;src/**/*.tsx&quot;]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;ES2022&quot;,\n    &quot;lib&quot;: [&quot;ES2023&quot;, &quot;DOM&quot;, &quot;DOM.Iterable&quot;],\n    &quot;module&quot;: &quot;ESNext&quot;,\n    &quot;moduleResolution&quot;: &quot;bundler&quot;,\n    &quot;allowImportingTsExtensions&quot;: true,\n    &quot;resolveJsonModule&quot;: true,\n    &quot;isolatedModules&quot;: true,\n    &quot;jsx&quot;: &quot;react-jsx&quot;,\n    &quot;strict&quot;: true,\n    &quot;baseUrl&quot;: &quot;.&quot;,\n    &quot;paths&quot;: {\n      &quot;@/*&quot;: [&quot;./src/*&quot;]\n    }\n  },\n  &quot;include&quot;: [&quot;src/**/*.ts&quot;, &quot;src/**/*.tsx&quot;]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"project-structure\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Project Structure</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Here&#39;s the recommended project structure:</p><div class=\"relative group\">\n    <pre class=\"language-text rounded-lg overflow-x-auto mb-4\"><code class=\"language-text\">your-project/\n├── src/\n│   ├── schema.ts              # Drizzle schema definition\n│   ├── cubes.ts               # Semantic layer cubes\n│   ├── server.ts              # Server setup with adapter\n│   └── client/                # React components (optional)\n│       ├── components/\n│       └── pages/\n├── drizzle.config.ts          # Drizzle configuration\n├── package.json\n└── tsconfig.json</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"your-project/\n├── src/\n│   ├── schema.ts              # Drizzle schema definition\n│   ├── cubes.ts               # Semantic layer cubes\n│   ├── server.ts              # Server setup with adapter\n│   └── client/                # React components (optional)\n│       ├── components/\n│       └── pages/\n├── drizzle.config.ts          # Drizzle configuration\n├── package.json\n└── tsconfig.json\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"environment-variables\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Environment Variables</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Create a <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">.env</code> file with your database connection details:</p><div class=\"relative group\">\n    <pre class=\"language-env rounded-lg overflow-x-auto mb-4\"><code class=\"language-env\"># PostgreSQL\nDATABASE_URL=&quot;postgresql://user:password@localhost:5432/mydb&quot;\n\n# Neon PostgreSQL  \nDATABASE_URL=&quot;postgresql://user:password@ep-example-123456.us-east-1.aws.neon.tech/dbname&quot;\n\n# MySQL (now supported)\nDATABASE_URL=&quot;mysql://user:password@localhost:3306/mydb&quot;\n\n# SQLite (coming soon)  \n# DATABASE_URL=&quot;file:./dev.db&quot;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"# PostgreSQL\nDATABASE_URL=&quot;postgresql://user:password@localhost:5432/mydb&quot;\n\n# Neon PostgreSQL  \nDATABASE_URL=&quot;postgresql://user:password@ep-example-123456.us-east-1.aws.neon.tech/dbname&quot;\n\n# MySQL (now supported)\nDATABASE_URL=&quot;mysql://user:password@localhost:3306/mydb&quot;\n\n# SQLite (coming soon)  \n# DATABASE_URL=&quot;file:./dev.db&quot;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"verification\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Verification</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Create a simple test file to verify your installation:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// test.ts\nimport { createDatabaseExecutor } from &#39;drizzle-cube/server&#39;;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;;\nimport postgres from &#39;postgres&#39;;\n\nconst client = postgres(process.env.DATABASE_URL!);\nconst db = drizzle(client);\n\nconst executor = createDatabaseExecutor(db, {}, &#39;postgres&#39;);\nconsole.log(&#39;✅ Drizzle Cube installed successfully!&#39;);</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// test.ts\nimport { createDatabaseExecutor } from &#39;drizzle-cube/server&#39;;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;;\nimport postgres from &#39;postgres&#39;;\n\nconst client = postgres(process.env.DATABASE_URL!);\nconst db = drizzle(client);\n\nconst executor = createDatabaseExecutor(db, {}, &#39;postgres&#39;);\nconsole.log(&#39;✅ Drizzle Cube installed successfully!&#39;);\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">Run the test:</p><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npx tsx test.ts</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npx tsx test.ts\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Now that Drizzle Cube is installed, you can:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/quick-start\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Set up your first cube</strong></a> - Build your first semantic layer</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Learn core concepts</strong></a> - Understand cubes, dimensions, and measures</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Choose your adapter</strong>:<ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"adapters/express\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Express.js</strong></a> - Most popular Node.js framework</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"adapters/fastify\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Fastify</strong></a> - High-performance alternative</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"adapters/hono\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Hono</strong></a> - Modern edge-compatible framework</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"adapters/nextjs\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Next.js</strong></a> - React full-stack framework</li></ul></li></ol><h2 id=\"troubleshooting\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Troubleshooting</h2><h3 id=\"common-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Common Issues</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Module not found errors</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Ensure you&#39;re using TypeScript 5.0+ and have proper module resolution configured</li><li class=\"leading-relaxed\">Check that all peer dependencies are installed</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Database connection issues</strong>  </p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Verify your DATABASE_URL is correct</li><li class=\"leading-relaxed\">Make sure your database server is running</li><li class=\"leading-relaxed\">Check firewall and network settings</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">TypeScript compilation errors</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Update to the latest version of TypeScript</li><li class=\"leading-relaxed\">Ensure your tsconfig.json includes the proper compiler options</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">Need more help? Check our <a href=\"#\" data-help-link=\"advanced/troubleshooting\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Troubleshooting Guide</a> or <a href=\"https://github.com/cliftonc/drizzle-cube/issues\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">report an issue</a>.</p>",
    "path": "getting-started/installation.md"
  },
  {
    "slug": "getting-started/quick-start",
    "title": "Quick Start",
    "content": "<h1 id=\"quick-start\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Quick Start</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Build your first semantic layer with Drizzle Cube in under 10 minutes.</p><h2 id=\"step-1-database-schema\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 1: Database Schema</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">First, define your database schema using Drizzle ORM:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// src/schema.ts\nimport { pgTable, serial, text, timestamp, decimal, integer } from &#39;drizzle-orm/pg-core&#39;;\n\nexport const organisations = pgTable(&#39;organisations&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  name: text(&#39;name&#39;).notNull(),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow(),\n});\n\nexport const products = pgTable(&#39;products&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  organisationId: integer(&#39;organisation_id&#39;).references(() =&gt; organisations.id),\n  name: text(&#39;name&#39;).notNull(),\n  category: text(&#39;category&#39;).notNull(),\n  price: decimal(&#39;price&#39;, { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow(),\n});\n\nexport const sales = pgTable(&#39;sales&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  organisationId: integer(&#39;organisation_id&#39;).references(() =&gt; organisations.id),\n  productId: integer(&#39;product_id&#39;).references(() =&gt; products.id),\n  quantity: integer(&#39;quantity&#39;).notNull(),\n  amount: decimal(&#39;amount&#39;, { precision: 10, scale: 2 }).notNull(),\n  orderDate: timestamp(&#39;order_date&#39;).defaultNow(),\n  customerName: text(&#39;customer_name&#39;),\n});</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// src/schema.ts\nimport { pgTable, serial, text, timestamp, decimal, integer } from &#39;drizzle-orm/pg-core&#39;;\n\nexport const organisations = pgTable(&#39;organisations&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  name: text(&#39;name&#39;).notNull(),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow(),\n});\n\nexport const products = pgTable(&#39;products&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  organisationId: integer(&#39;organisation_id&#39;).references(() =&gt; organisations.id),\n  name: text(&#39;name&#39;).notNull(),\n  category: text(&#39;category&#39;).notNull(),\n  price: decimal(&#39;price&#39;, { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow(),\n});\n\nexport const sales = pgTable(&#39;sales&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  organisationId: integer(&#39;organisation_id&#39;).references(() =&gt; organisations.id),\n  productId: integer(&#39;product_id&#39;).references(() =&gt; products.id),\n  quantity: integer(&#39;quantity&#39;).notNull(),\n  amount: decimal(&#39;amount&#39;, { precision: 10, scale: 2 }).notNull(),\n  orderDate: timestamp(&#39;order_date&#39;).defaultNow(),\n  customerName: text(&#39;customer_name&#39;),\n});\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"step-2-define-cubes\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 2: Define Cubes</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Create your semantic layer by defining cubes:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// src/cubes.ts\nimport { defineCube } from &#39;drizzle-cube/server&#39;;\nimport { eq } from &#39;drizzle-orm&#39;;\nimport * as schema from &#39;./schema&#39;;\n\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.sales)\n      .innerJoin(schema.products, eq(schema.sales.productId, schema.products.id))\n      .where(eq(schema.sales.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    customerName: { \n      sql: schema.sales.customerName, \n      type: &#39;string&#39; \n    },\n    productName: { \n      sql: schema.products.name, \n      type: &#39;string&#39; \n    },\n    productCategory: { \n      sql: schema.products.category, \n      type: &#39;string&#39; \n    },\n    orderDate: { \n      sql: schema.sales.orderDate, \n      type: &#39;time&#39; \n    },\n  },\n  \n  measures: {\n    totalSales: { \n      sql: schema.sales.amount, \n      type: &#39;sum&#39;,\n      title: &#39;Total Sales&#39;\n    },\n    orderCount: { \n      sql: schema.sales.id, \n      type: &#39;count&#39;,\n      title: &#39;Number of Orders&#39;\n    },\n    averageOrderValue: { \n      sql: schema.sales.amount, \n      type: &#39;avg&#39;,\n      title: &#39;Average Order Value&#39;\n    },\n    totalQuantity: { \n      sql: schema.sales.quantity, \n      type: &#39;sum&#39;,\n      title: &#39;Total Quantity Sold&#39;\n    },\n  }\n});\n\nexport const productsCube = defineCube(schema, {\n  name: &#39;Products&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.products)\n      .where(eq(schema.products.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    name: { \n      sql: schema.products.name, \n      type: &#39;string&#39; \n    },\n    category: { \n      sql: schema.products.category, \n      type: &#39;string&#39; \n    },\n    createdAt: { \n      sql: schema.products.createdAt, \n      type: &#39;time&#39; \n    },\n  },\n  \n  measures: {\n    count: { \n      sql: schema.products.id, \n      type: &#39;count&#39;,\n      title: &#39;Product Count&#39;\n    },\n    averagePrice: { \n      sql: schema.products.price, \n      type: &#39;avg&#39;,\n      title: &#39;Average Price&#39;\n    },\n  }\n});</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// src/cubes.ts\nimport { defineCube } from &#39;drizzle-cube/server&#39;;\nimport { eq } from &#39;drizzle-orm&#39;;\nimport * as schema from &#39;./schema&#39;;\n\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.sales)\n      .innerJoin(schema.products, eq(schema.sales.productId, schema.products.id))\n      .where(eq(schema.sales.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    customerName: { \n      sql: schema.sales.customerName, \n      type: &#39;string&#39; \n    },\n    productName: { \n      sql: schema.products.name, \n      type: &#39;string&#39; \n    },\n    productCategory: { \n      sql: schema.products.category, \n      type: &#39;string&#39; \n    },\n    orderDate: { \n      sql: schema.sales.orderDate, \n      type: &#39;time&#39; \n    },\n  },\n  \n  measures: {\n    totalSales: { \n      sql: schema.sales.amount, \n      type: &#39;sum&#39;,\n      title: &#39;Total Sales&#39;\n    },\n    orderCount: { \n      sql: schema.sales.id, \n      type: &#39;count&#39;,\n      title: &#39;Number of Orders&#39;\n    },\n    averageOrderValue: { \n      sql: schema.sales.amount, \n      type: &#39;avg&#39;,\n      title: &#39;Average Order Value&#39;\n    },\n    totalQuantity: { \n      sql: schema.sales.quantity, \n      type: &#39;sum&#39;,\n      title: &#39;Total Quantity Sold&#39;\n    },\n  }\n});\n\nexport const productsCube = defineCube(schema, {\n  name: &#39;Products&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.products)\n      .where(eq(schema.products.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    name: { \n      sql: schema.products.name, \n      type: &#39;string&#39; \n    },\n    category: { \n      sql: schema.products.category, \n      type: &#39;string&#39; \n    },\n    createdAt: { \n      sql: schema.products.createdAt, \n      type: &#39;time&#39; \n    },\n  },\n  \n  measures: {\n    count: { \n      sql: schema.products.id, \n      type: &#39;count&#39;,\n      title: &#39;Product Count&#39;\n    },\n    averagePrice: { \n      sql: schema.products.price, \n      type: &#39;avg&#39;,\n      title: &#39;Average Price&#39;\n    },\n  }\n});\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"step-3-server-setup\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 3: Server Setup</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Set up your server with the Hono adapter:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// src/server.ts\nimport { Hono } from &#39;hono&#39;;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;;\nimport postgres from &#39;postgres&#39;;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;;\nimport { SemanticLayerCompiler, createDatabaseExecutor } from &#39;drizzle-cube/server&#39;;\nimport * as schema from &#39;./schema&#39;;\nimport { salesCube, productsCube } from &#39;./cubes&#39;;\n\n// Database connection\nconst client = postgres(process.env.DATABASE_URL!);\nconst db = drizzle(client, { schema });\n\n// Create semantic layer\nconst databaseExecutor = createDatabaseExecutor(db, schema, &#39;postgres&#39;);\nconst semanticLayer = new SemanticLayerCompiler({ \n  databaseExecutor \n});\n\n// Register cubes\nsemanticLayer.registerCube(salesCube);\nsemanticLayer.registerCube(productsCube);\n\n// Create Hono app\nconst app = new Hono();\n\n// Add authentication middleware (example)\napp.use(&#39;/api/cube/*&#39;, async (c, next) =&gt; {\n  // In a real app, validate JWT token, session, etc.\n  const orgId = c.req.header(&#39;X-Organisation-ID&#39;);\n  if (!orgId) {\n    return c.json({ error: &#39;Organisation ID required&#39; }, 401);\n  }\n  c.set(&#39;organisationId&#39;, parseInt(orgId));\n  await next();\n});\n\n// Mount Cube API\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; ({\n    organisationId: c.get(&#39;organisationId&#39;)\n  })\n});\n\napp.route(&#39;/api/cube&#39;, cubeApp);\n\nexport default app;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// src/server.ts\nimport { Hono } from &#39;hono&#39;;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;;\nimport postgres from &#39;postgres&#39;;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;;\nimport { SemanticLayerCompiler, createDatabaseExecutor } from &#39;drizzle-cube/server&#39;;\nimport * as schema from &#39;./schema&#39;;\nimport { salesCube, productsCube } from &#39;./cubes&#39;;\n\n// Database connection\nconst client = postgres(process.env.DATABASE_URL!);\nconst db = drizzle(client, { schema });\n\n// Create semantic layer\nconst databaseExecutor = createDatabaseExecutor(db, schema, &#39;postgres&#39;);\nconst semanticLayer = new SemanticLayerCompiler({ \n  databaseExecutor \n});\n\n// Register cubes\nsemanticLayer.registerCube(salesCube);\nsemanticLayer.registerCube(productsCube);\n\n// Create Hono app\nconst app = new Hono();\n\n// Add authentication middleware (example)\napp.use(&#39;/api/cube/*&#39;, async (c, next) =&gt; {\n  // In a real app, validate JWT token, session, etc.\n  const orgId = c.req.header(&#39;X-Organisation-ID&#39;);\n  if (!orgId) {\n    return c.json({ error: &#39;Organisation ID required&#39; }, 401);\n  }\n  c.set(&#39;organisationId&#39;, parseInt(orgId));\n  await next();\n});\n\n// Mount Cube API\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; ({\n    organisationId: c.get(&#39;organisationId&#39;)\n  })\n});\n\napp.route(&#39;/api/cube&#39;, cubeApp);\n\nexport default app;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"step-4-query-your-data\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 4: Query Your Data</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Now you can query your semantic layer:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Query example\nconst query = {\n  measures: [&#39;Sales.totalSales&#39;, &#39;Sales.orderCount&#39;],\n  dimensions: [&#39;Sales.productCategory&#39;],\n  timeDimensions: [{\n    dimension: &#39;Sales.orderDate&#39;,\n    granularity: &#39;month&#39;\n  }],\n  filters: [{\n    member: &#39;Sales.orderDate&#39;,\n    operator: &#39;inDateRange&#39;,\n    values: [&#39;2024-01-01&#39;, &#39;2024-12-31&#39;]\n  }]\n};\n\n// Make request to your API\nconst queryParam = encodeURIComponent(JSON.stringify(query));\nconst response = await fetch(`/api/cube/load?query=${queryParam}`, {\n  method: &#39;GET&#39;,\n  headers: {\n    &#39;X-Organisation-ID&#39;: &#39;1&#39;\n  }\n});\n\nconst data = await response.json();\nconsole.log(data);\n\n// The response now follows the official Cube.js format:\n// {\n//   &quot;queryType&quot;: &quot;regularQuery&quot;,\n//   &quot;results&quot;: [{\n//     &quot;query&quot;: { ... },\n//     &quot;data&quot;: [ ... ],\n//     &quot;annotation&quot;: { ... },\n//     &quot;requestId&quot;: &quot;...&quot;,\n//     &quot;lastRefreshTime&quot;: &quot;...&quot;\n//   }],\n//   &quot;pivotQuery&quot;: { ... },\n//   &quot;slowQuery&quot;: false\n// }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Query example\nconst query = {\n  measures: [&#39;Sales.totalSales&#39;, &#39;Sales.orderCount&#39;],\n  dimensions: [&#39;Sales.productCategory&#39;],\n  timeDimensions: [{\n    dimension: &#39;Sales.orderDate&#39;,\n    granularity: &#39;month&#39;\n  }],\n  filters: [{\n    member: &#39;Sales.orderDate&#39;,\n    operator: &#39;inDateRange&#39;,\n    values: [&#39;2024-01-01&#39;, &#39;2024-12-31&#39;]\n  }]\n};\n\n// Make request to your API\nconst queryParam = encodeURIComponent(JSON.stringify(query));\nconst response = await fetch(`/api/cube/load?query=${queryParam}`, {\n  method: &#39;GET&#39;,\n  headers: {\n    &#39;X-Organisation-ID&#39;: &#39;1&#39;\n  }\n});\n\nconst data = await response.json();\nconsole.log(data);\n\n// The response now follows the official Cube.js format:\n// {\n//   &quot;queryType&quot;: &quot;regularQuery&quot;,\n//   &quot;results&quot;: [{\n//     &quot;query&quot;: { ... },\n//     &quot;data&quot;: [ ... ],\n//     &quot;annotation&quot;: { ... },\n//     &quot;requestId&quot;: &quot;...&quot;,\n//     &quot;lastRefreshTime&quot;: &quot;...&quot;\n//   }],\n//   &quot;pivotQuery&quot;: { ... },\n//   &quot;slowQuery&quot;: false\n// }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"step-5-react-dashboard-optional\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 5: React Dashboard (Optional)</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Add a React dashboard with persistent configurations stored in your database:</p><h3 id=\"add-dashboard-schema\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Add Dashboard Schema</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">First, add a dashboard table to your schema:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// src/schema.ts (add to existing schema)\nexport const dashboards = pgTable(&#39;dashboards&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  organisationId: integer(&#39;organisation_id&#39;).references(() =&gt; organisations.id),\n  name: text(&#39;name&#39;).notNull(),\n  description: text(&#39;description&#39;),\n  layout: text(&#39;layout&#39;), // JSON string of dashboard configuration\n  isDefault: boolean(&#39;is_default&#39;).default(false),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow(),\n  updatedAt: timestamp(&#39;updated_at&#39;).defaultNow(),\n});</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// src/schema.ts (add to existing schema)\nexport const dashboards = pgTable(&#39;dashboards&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  organisationId: integer(&#39;organisation_id&#39;).references(() =&gt; organisations.id),\n  name: text(&#39;name&#39;).notNull(),\n  description: text(&#39;description&#39;),\n  layout: text(&#39;layout&#39;), // JSON string of dashboard configuration\n  isDefault: boolean(&#39;is_default&#39;).default(false),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow(),\n  updatedAt: timestamp(&#39;updated_at&#39;).defaultNow(),\n});\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"create-dashboard-component-with-persistence\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Create Dashboard Component with Persistence</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// src/Dashboard.tsx\nimport React, { useState, useEffect } from &#39;react&#39;;\nimport { CubeProvider } from &#39;drizzle-cube/client&#39;;\nimport { AnalyticsDashboard } from &#39;drizzle-cube/client&#39;;\n\ninterface DashboardLayout {\n  id: string;\n  title: string;\n  chartType: string;\n  query: any;\n  w?: number;\n  h?: number;\n  x?: number;\n  y?: number;\n}\n\nconst Dashboard: React.FC = () =&gt; {\n  const [dashboardLayout, setDashboardLayout] = useState&lt;DashboardLayout[]&gt;([]);\n  const [loading, setLoading] = useState(true);\n  const [dashboardId, setDashboardId] = useState&lt;number | null&gt;(null);\n\n  const cubeApi = {\n    url: &#39;/api/cube&#39;,\n    headers: {\n      &#39;X-Organisation-ID&#39;: &#39;1&#39;\n    }\n  };\n\n  // Load dashboard from database\n  useEffect(() =&gt; {\n    const loadDashboard = async () =&gt; {\n      try {\n        const response = await fetch(&#39;/api/dashboards/default&#39;, {\n          headers: {\n            &#39;X-Organisation-ID&#39;: &#39;1&#39;\n          }\n        });\n        \n        if (response.ok) {\n          const dashboard = await response.json();\n          setDashboardId(dashboard.id);\n          setDashboardLayout(JSON.parse(dashboard.layout || &#39;[]&#39;));\n        } else {\n          // Use default layout if no saved dashboard exists\n          setDashboardLayout([\n            {\n              id: &#39;sales-by-category&#39;,\n              title: &#39;Sales by Category&#39;,\n              chartType: &#39;bar&#39;,\n              query: {\n                measures: [&#39;Sales.totalSales&#39;],\n                dimensions: [&#39;Sales.productCategory&#39;]\n              },\n              w: 6, h: 6, x: 0, y: 0\n            },\n            {\n              id: &#39;sales-over-time&#39;,\n              title: &#39;Sales Over Time&#39;,\n              chartType: &#39;line&#39;,\n              query: {\n                measures: [&#39;Sales.totalSales&#39;],\n                timeDimensions: [{\n                  dimension: &#39;Sales.orderDate&#39;,\n                  granularity: &#39;month&#39;\n                }]\n              },\n              w: 6, h: 6, x: 6, y: 0\n            }\n          ]);\n        }\n      } catch (error) {\n        console.error(&#39;Failed to load dashboard:&#39;, error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadDashboard();\n  }, []);\n\n  // Save dashboard changes to database\n  const handleLayoutChange = async (newLayout: DashboardLayout[]) =&gt; {\n    setDashboardLayout(newLayout);\n    \n    try {\n      const method = dashboardId ? &#39;PUT&#39; : &#39;POST&#39;;\n      const url = dashboardId \n        ? `/api/dashboards/${dashboardId}` \n        : &#39;/api/dashboards&#39;;\n        \n      const response = await fetch(url, {\n        method,\n        headers: {\n          &#39;Content-Type&#39;: &#39;application/json&#39;,\n          &#39;X-Organisation-ID&#39;: &#39;1&#39;\n        },\n        body: JSON.stringify({\n          name: &#39;Default Dashboard&#39;,\n          description: &#39;Auto-saved dashboard configuration&#39;,\n          layout: JSON.stringify(newLayout),\n          isDefault: true\n        })\n      });\n\n      if (response.ok &amp;&amp; !dashboardId) {\n        const savedDashboard = await response.json();\n        setDashboardId(savedDashboard.id);\n      }\n    } catch (error) {\n      console.error(&#39;Failed to save dashboard:&#39;, error);\n    }\n  };\n\n  if (loading) {\n    return &lt;div className=&quot;p-6&quot;&gt;Loading dashboard...&lt;/div&gt;;\n  }\n\n  return (\n    &lt;CubeProvider cubeApi={cubeApi}&gt;\n      &lt;div className=&quot;p-6&quot;&gt;\n        &lt;h1 className=&quot;text-3xl font-bold mb-6&quot;&gt;Sales Dashboard&lt;/h1&gt;\n        \n        &lt;AnalyticsDashboard\n          initialLayout={dashboardLayout}\n          onLayoutChange={handleLayoutChange}\n          enableEditing={true}\n        /&gt;\n      &lt;/div&gt;\n    &lt;/CubeProvider&gt;\n  );\n};\n\nexport default Dashboard;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// src/Dashboard.tsx\nimport React, { useState, useEffect } from &#39;react&#39;;\nimport { CubeProvider } from &#39;drizzle-cube/client&#39;;\nimport { AnalyticsDashboard } from &#39;drizzle-cube/client&#39;;\n\ninterface DashboardLayout {\n  id: string;\n  title: string;\n  chartType: string;\n  query: any;\n  w?: number;\n  h?: number;\n  x?: number;\n  y?: number;\n}\n\nconst Dashboard: React.FC = () =&gt; {\n  const [dashboardLayout, setDashboardLayout] = useState&lt;DashboardLayout[]&gt;([]);\n  const [loading, setLoading] = useState(true);\n  const [dashboardId, setDashboardId] = useState&lt;number | null&gt;(null);\n\n  const cubeApi = {\n    url: &#39;/api/cube&#39;,\n    headers: {\n      &#39;X-Organisation-ID&#39;: &#39;1&#39;\n    }\n  };\n\n  // Load dashboard from database\n  useEffect(() =&gt; {\n    const loadDashboard = async () =&gt; {\n      try {\n        const response = await fetch(&#39;/api/dashboards/default&#39;, {\n          headers: {\n            &#39;X-Organisation-ID&#39;: &#39;1&#39;\n          }\n        });\n        \n        if (response.ok) {\n          const dashboard = await response.json();\n          setDashboardId(dashboard.id);\n          setDashboardLayout(JSON.parse(dashboard.layout || &#39;[]&#39;));\n        } else {\n          // Use default layout if no saved dashboard exists\n          setDashboardLayout([\n            {\n              id: &#39;sales-by-category&#39;,\n              title: &#39;Sales by Category&#39;,\n              chartType: &#39;bar&#39;,\n              query: {\n                measures: [&#39;Sales.totalSales&#39;],\n                dimensions: [&#39;Sales.productCategory&#39;]\n              },\n              w: 6, h: 6, x: 0, y: 0\n            },\n            {\n              id: &#39;sales-over-time&#39;,\n              title: &#39;Sales Over Time&#39;,\n              chartType: &#39;line&#39;,\n              query: {\n                measures: [&#39;Sales.totalSales&#39;],\n                timeDimensions: [{\n                  dimension: &#39;Sales.orderDate&#39;,\n                  granularity: &#39;month&#39;\n                }]\n              },\n              w: 6, h: 6, x: 6, y: 0\n            }\n          ]);\n        }\n      } catch (error) {\n        console.error(&#39;Failed to load dashboard:&#39;, error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadDashboard();\n  }, []);\n\n  // Save dashboard changes to database\n  const handleLayoutChange = async (newLayout: DashboardLayout[]) =&gt; {\n    setDashboardLayout(newLayout);\n    \n    try {\n      const method = dashboardId ? &#39;PUT&#39; : &#39;POST&#39;;\n      const url = dashboardId \n        ? `/api/dashboards/${dashboardId}` \n        : &#39;/api/dashboards&#39;;\n        \n      const response = await fetch(url, {\n        method,\n        headers: {\n          &#39;Content-Type&#39;: &#39;application/json&#39;,\n          &#39;X-Organisation-ID&#39;: &#39;1&#39;\n        },\n        body: JSON.stringify({\n          name: &#39;Default Dashboard&#39;,\n          description: &#39;Auto-saved dashboard configuration&#39;,\n          layout: JSON.stringify(newLayout),\n          isDefault: true\n        })\n      });\n\n      if (response.ok &amp;&amp; !dashboardId) {\n        const savedDashboard = await response.json();\n        setDashboardId(savedDashboard.id);\n      }\n    } catch (error) {\n      console.error(&#39;Failed to save dashboard:&#39;, error);\n    }\n  };\n\n  if (loading) {\n    return &lt;div className=&quot;p-6&quot;&gt;Loading dashboard...&lt;/div&gt;;\n  }\n\n  return (\n    &lt;CubeProvider cubeApi={cubeApi}&gt;\n      &lt;div className=&quot;p-6&quot;&gt;\n        &lt;h1 className=&quot;text-3xl font-bold mb-6&quot;&gt;Sales Dashboard&lt;/h1&gt;\n        \n        &lt;AnalyticsDashboard\n          initialLayout={dashboardLayout}\n          onLayoutChange={handleLayoutChange}\n          enableEditing={true}\n        /&gt;\n      &lt;/div&gt;\n    &lt;/CubeProvider&gt;\n  );\n};\n\nexport default Dashboard;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"add-dashboard-api-endpoints\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Add Dashboard API Endpoints</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create API endpoints to handle dashboard persistence:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// src/dashboardRoutes.ts\nimport { Hono } from &#39;hono&#39;;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;;\nimport { eq, and } from &#39;drizzle-orm&#39;;\nimport { dashboards } from &#39;./schema&#39;;\n\nconst app = new Hono();\n\n// Get default dashboard for organization\napp.get(&#39;/api/dashboards/default&#39;, async (c) =&gt; {\n  const orgId = c.req.header(&#39;X-Organisation-ID&#39;);\n  if (!orgId) return c.json({ error: &#39;Organisation ID required&#39; }, 400);\n\n  const dashboard = await db.select()\n    .from(dashboards)\n    .where(and(\n      eq(dashboards.organisationId, parseInt(orgId)),\n      eq(dashboards.isDefault, true)\n    ))\n    .limit(1);\n\n  if (dashboard.length === 0) {\n    return c.json({ error: &#39;No default dashboard found&#39; }, 404);\n  }\n\n  return c.json(dashboard[0]);\n});\n\n// Save/update dashboard\napp.post(&#39;/api/dashboards&#39;, async (c) =&gt; {\n  const orgId = c.req.header(&#39;X-Organisation-ID&#39;);\n  if (!orgId) return c.json({ error: &#39;Organisation ID required&#39; }, 400);\n\n  const body = await c.req.json();\n  \n  const [newDashboard] = await db.insert(dashboards)\n    .values({\n      organisationId: parseInt(orgId),\n      name: body.name,\n      description: body.description,\n      layout: body.layout,\n      isDefault: body.isDefault || false\n    })\n    .returning();\n\n  return c.json(newDashboard);\n});\n\napp.put(&#39;/api/dashboards/:id&#39;, async (c) =&gt; {\n  const id = parseInt(c.req.param(&#39;id&#39;));\n  const orgId = c.req.header(&#39;X-Organisation-ID&#39;);\n  if (!orgId) return c.json({ error: &#39;Organisation ID required&#39; }, 400);\n\n  const body = await c.req.json();\n  \n  const [updatedDashboard] = await db.update(dashboards)\n    .set({\n      layout: body.layout,\n      updatedAt: new Date()\n    })\n    .where(and(\n      eq(dashboards.id, id),\n      eq(dashboards.organisationId, parseInt(orgId))\n    ))\n    .returning();\n\n  return c.json(updatedDashboard);\n});\n\nexport default app;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// src/dashboardRoutes.ts\nimport { Hono } from &#39;hono&#39;;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;;\nimport { eq, and } from &#39;drizzle-orm&#39;;\nimport { dashboards } from &#39;./schema&#39;;\n\nconst app = new Hono();\n\n// Get default dashboard for organization\napp.get(&#39;/api/dashboards/default&#39;, async (c) =&gt; {\n  const orgId = c.req.header(&#39;X-Organisation-ID&#39;);\n  if (!orgId) return c.json({ error: &#39;Organisation ID required&#39; }, 400);\n\n  const dashboard = await db.select()\n    .from(dashboards)\n    .where(and(\n      eq(dashboards.organisationId, parseInt(orgId)),\n      eq(dashboards.isDefault, true)\n    ))\n    .limit(1);\n\n  if (dashboard.length === 0) {\n    return c.json({ error: &#39;No default dashboard found&#39; }, 404);\n  }\n\n  return c.json(dashboard[0]);\n});\n\n// Save/update dashboard\napp.post(&#39;/api/dashboards&#39;, async (c) =&gt; {\n  const orgId = c.req.header(&#39;X-Organisation-ID&#39;);\n  if (!orgId) return c.json({ error: &#39;Organisation ID required&#39; }, 400);\n\n  const body = await c.req.json();\n  \n  const [newDashboard] = await db.insert(dashboards)\n    .values({\n      organisationId: parseInt(orgId),\n      name: body.name,\n      description: body.description,\n      layout: body.layout,\n      isDefault: body.isDefault || false\n    })\n    .returning();\n\n  return c.json(newDashboard);\n});\n\napp.put(&#39;/api/dashboards/:id&#39;, async (c) =&gt; {\n  const id = parseInt(c.req.param(&#39;id&#39;));\n  const orgId = c.req.header(&#39;X-Organisation-ID&#39;);\n  if (!orgId) return c.json({ error: &#39;Organisation ID required&#39; }, 400);\n\n  const body = await c.req.json();\n  \n  const [updatedDashboard] = await db.update(dashboards)\n    .set({\n      layout: body.layout,\n      updatedAt: new Date()\n    })\n    .where(and(\n      eq(dashboards.id, id),\n      eq(dashboards.organisationId, parseInt(orgId))\n    ))\n    .returning();\n\n  return c.json(updatedDashboard);\n});\n\nexport default app;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"key-benefits-of-database-persistence\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Key Benefits of Database Persistence</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">🔒 Multi-tenant security</strong> - Each organization has their own dashboards</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">💾 Automatic saving</strong> - Layout changes are saved immediately</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">👥 Shared dashboards</strong> - Multiple users can see the same configuration  </li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">🔄 State restoration</strong> - Dashboard layout persists across browser sessions</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">📊 Multiple dashboards</strong> - Support for different dashboard types (sales, marketing, etc.)</li></ul><h2 id=\"whats-next\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">What&#39;s Next?</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Congratulations! You&#39;ve created your first semantic layer with Drizzle Cube. Here&#39;s what you can explore next:</p><h3 id=\"learn-more\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Learn More</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Semantic Layer</strong></a> - Deep dive into cubes, dimensions, and measures</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Security</strong></a> - Multi-tenant security patterns</li></ul><h3 id=\"explore-components\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Explore Components</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">React Client</strong></a> - Dashboard and chart components</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/charts\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Charts</strong></a> - Available visualization types</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/hooks\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Hooks</strong></a> - React hooks for data fetching</li></ul><h3 id=\"advanced-features\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Advanced Features</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/joins\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Joins</strong></a> - Multi-cube queries</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"advanced/performance\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Performance</strong></a> - Optimization techniques</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"adapters/custom\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Custom Adapters</strong></a> - Framework integration</li></ul><h2 id=\"example-projects\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Example Projects</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Check out complete example implementations:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\"><a href=\"https://github.com/cliftonc/drizzle-cube/tree/main/examples/basic\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Basic Example</a></strong> - Simple analytics setup</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\"><a href=\"https://github.com/cliftonc/drizzle-cube/tree/main/examples/hono\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Hono Example</a></strong> - Full-featured application</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">Need help? <a href=\"https://github.com/cliftonc/drizzle-cube/discussions\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Join our community</a> or <a href=\"https://github.com/cliftonc/drizzle-cube/issues\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">report issues</a>!</p>",
    "path": "getting-started/quick-start.md"
  },
  {
    "slug": "getting-started/scaling",
    "title": "Scaling Your SaaS with Drizzle Cube",
    "content": "<h1 id=\"scaling-your-saas-with-drizzle-cube\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Scaling Your SaaS with Drizzle Cube</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">One of Drizzle Cube&#39;s greatest strengths is its ability to grow with your SaaS business. The semantic layer provides a stable abstraction that allows you to evolve your data architecture without breaking your reports, dashboards, and analytics.</p><h2 id=\"the-scaling-journey\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">The Scaling Journey</h2><h3 id=\"-small-saas-direct-database-queries\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">🌱 Small SaaS: Direct Database Queries</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Perfect for:</strong> Startups, MVPs, small teams (&lt; 10k users, &lt; 1GB data)</p><p class=\"mb-4 text-gray-600 leading-relaxed\">When you&#39;re starting out, simplicity is key. Drizzle Cube connects directly to your operational database:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Simple setup - queries run directly on your main database\nconst db = drizzle(postgres(DATABASE_URL), { schema })\nconst executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)\n\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.orders)\n      .where(eq(schema.orders.organisationId, securityContext.organisationId)),\n      \n  dimensions: {\n    customerName: { sql: schema.orders.customerName, type: &#39;string&#39; },\n    orderDate: { sql: schema.orders.createdAt, type: &#39;time&#39; }\n  },\n  \n  measures: {\n    totalRevenue: { sql: schema.orders.amount, type: &#39;sum&#39; },\n    orderCount: { sql: schema.orders.id, type: &#39;count&#39; }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Simple setup - queries run directly on your main database\nconst db = drizzle(postgres(DATABASE_URL), { schema })\nconst executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)\n\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.orders)\n      .where(eq(schema.orders.organisationId, securityContext.organisationId)),\n      \n  dimensions: {\n    customerName: { sql: schema.orders.customerName, type: &#39;string&#39; },\n    orderDate: { sql: schema.orders.createdAt, type: &#39;time&#39; }\n  },\n  \n  measures: {\n    totalRevenue: { sql: schema.orders.amount, type: &#39;sum&#39; },\n    orderCount: { sql: schema.orders.id, type: &#39;count&#39; }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Benefits:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">✅ Zero additional infrastructure</li><li class=\"leading-relaxed\">✅ Real-time data (no sync delays)</li><li class=\"leading-relaxed\">✅ Simple deployment and maintenance</li><li class=\"leading-relaxed\">✅ Perfect for rapid iteration</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">When to scale:</strong> Query performance degrades, reports impact app performance, or you hit ~1GB of data.</p><h3 id=\"-growing-saas-optimized-data-layer\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">🚀 Growing SaaS: Optimized Data Layer</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Perfect for:</strong> Scale-ups, established products (10k-1M users, 1-100GB data)</p><p class=\"mb-4 text-gray-600 leading-relaxed\">As you grow, you need better performance without complexity. Add materialized views or read replicas:</p><h4 id=\"option-a-materialized-views\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Option A: Materialized Views</h4><div class=\"relative group\">\n    <pre class=\"language-sql rounded-lg overflow-x-auto mb-4\"><code class=\"language-sql\">-- Create materialized views for heavy aggregations\nCREATE MATERIALIZED VIEW daily_sales_summary AS\nSELECT \n    organisation_id,\n    date_trunc(&#39;day&#39;, created_at) as order_date,\n    count(*) as order_count,\n    sum(amount) as total_revenue,\n    avg(amount) as avg_order_value\nFROM orders \nGROUP BY organisation_id, date_trunc(&#39;day&#39;, created_at);\n\n-- Refresh periodically (via cron job)\nREFRESH MATERIALIZED VIEW daily_sales_summary;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"-- Create materialized views for heavy aggregations\nCREATE MATERIALIZED VIEW daily_sales_summary AS\nSELECT \n    organisation_id,\n    date_trunc(&#39;day&#39;, created_at) as order_date,\n    count(*) as order_count,\n    sum(amount) as total_revenue,\n    avg(amount) as avg_order_value\nFROM orders \nGROUP BY organisation_id, date_trunc(&#39;day&#39;, created_at);\n\n-- Refresh periodically (via cron job)\nREFRESH MATERIALIZED VIEW daily_sales_summary;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">Update your cube to use the optimized view:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  // Same interface, different underlying source\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.dailySalesSummary)  // Now using materialized view\n      .where(eq(schema.dailySalesSummary.organisationId, securityContext.organisationId)),\n      \n  dimensions: {\n    orderDate: { sql: schema.dailySalesSummary.orderDate, type: &#39;time&#39; }\n  },\n  \n  measures: {\n    // Pre-aggregated - much faster queries\n    totalRevenue: { sql: schema.dailySalesSummary.totalRevenue, type: &#39;sum&#39; },\n    orderCount: { sql: schema.dailySalesSummary.orderCount, type: &#39;sum&#39; }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  // Same interface, different underlying source\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.dailySalesSummary)  // Now using materialized view\n      .where(eq(schema.dailySalesSummary.organisationId, securityContext.organisationId)),\n      \n  dimensions: {\n    orderDate: { sql: schema.dailySalesSummary.orderDate, type: &#39;time&#39; }\n  },\n  \n  measures: {\n    // Pre-aggregated - much faster queries\n    totalRevenue: { sql: schema.dailySalesSummary.totalRevenue, type: &#39;sum&#39; },\n    orderCount: { sql: schema.dailySalesSummary.orderCount, type: &#39;sum&#39; }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"option-b-read-replica\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Option B: Read Replica</h4><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Set up dedicated analytics database connection\nconst analyticsDb = drizzle(postgres(ANALYTICS_DATABASE_URL), { schema })\nconst executor = createDatabaseExecutor(analyticsDb, schema, &#39;postgres&#39;)\n\n// Same cubes, different database - zero code changes to dashboards!\nconst semanticLayer = new SemanticLayerCompiler({ \n  databaseExecutor: executor \n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Set up dedicated analytics database connection\nconst analyticsDb = drizzle(postgres(ANALYTICS_DATABASE_URL), { schema })\nconst executor = createDatabaseExecutor(analyticsDb, schema, &#39;postgres&#39;)\n\n// Same cubes, different database - zero code changes to dashboards!\nconst semanticLayer = new SemanticLayerCompiler({ \n  databaseExecutor: executor \n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Benefits:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">✅ 10-100x query performance improvement  </li><li class=\"leading-relaxed\">✅ Zero impact on production application</li><li class=\"leading-relaxed\">✅ All existing reports continue working unchanged</li><li class=\"leading-relaxed\">✅ Gradual migration (can optimize cube by cube)</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">When to scale:</strong> Query complexity increases, need sub-second dashboard loads, or approaching 100GB.</p><h3 id=\"-enterprise-saas-data-lake-warehouse\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">🏢 Enterprise SaaS: Data Lake + Warehouse</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Perfect for:</strong> Large enterprises (1M+ users, 100GB+ data, complex analytics)</p><p class=\"mb-4 text-gray-600 leading-relaxed\">For massive scale, integrate with modern data stack while keeping your semantic layer:</p><h4 id=\"option-a-data-lake-integration\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Option A: Data Lake Integration</h4><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Connect to your data warehouse (Snowflake, BigQuery, Redshift)\nimport { drizzle } from &#39;drizzle-orm/snowflake-sdk&#39;\n\nconst warehouseDb = drizzle(snowflakeConnection, { schema })\nconst executor = createDatabaseExecutor(warehouseDb, schema, &#39;snowflake&#39;)\n\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.ordersFact)  // Now querying data warehouse fact table\n      .innerJoin(schema.customerDim, eq(schema.ordersFact.customerId, schema.customerDim.id))\n      .where(eq(schema.ordersFact.organisationId, securityContext.organisationId)),\n      \n  // Same dimensions and measures - dashboards still work!\n  dimensions: {\n    customerSegment: { sql: schema.customerDim.segment, type: &#39;string&#39; },\n    orderDate: { sql: schema.ordersFact.orderDate, type: &#39;time&#39; }\n  },\n  \n  measures: {\n    totalRevenue: { sql: schema.ordersFact.revenue, type: &#39;sum&#39; },\n    orderCount: { sql: schema.ordersFact.id, type: &#39;count&#39; }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Connect to your data warehouse (Snowflake, BigQuery, Redshift)\nimport { drizzle } from &#39;drizzle-orm/snowflake-sdk&#39;\n\nconst warehouseDb = drizzle(snowflakeConnection, { schema })\nconst executor = createDatabaseExecutor(warehouseDb, schema, &#39;snowflake&#39;)\n\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.ordersFact)  // Now querying data warehouse fact table\n      .innerJoin(schema.customerDim, eq(schema.ordersFact.customerId, schema.customerDim.id))\n      .where(eq(schema.ordersFact.organisationId, securityContext.organisationId)),\n      \n  // Same dimensions and measures - dashboards still work!\n  dimensions: {\n    customerSegment: { sql: schema.customerDim.segment, type: &#39;string&#39; },\n    orderDate: { sql: schema.ordersFact.orderDate, type: &#39;time&#39; }\n  },\n  \n  measures: {\n    totalRevenue: { sql: schema.ordersFact.revenue, type: &#39;sum&#39; },\n    orderCount: { sql: schema.ordersFact.id, type: &#39;count&#39; }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"option-b-hybrid-cubedev-integration\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Option B: Hybrid Cube.dev Integration</h4><p class=\"mb-4 text-gray-600 leading-relaxed\">For ultimate scale, integrate with Cube.dev while maintaining your Drizzle Cube interface:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Use Cube.dev for heavy lifting, Drizzle Cube for application integration\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  \n  // Delegate to pre-aggregated Cube.dev API for complex queries\n  sql: async ({ query, securityContext }) =&gt; {\n    if (isComplexQuery(query)) {\n      return await cubeDevClient.load({\n        ...query,\n        filters: [...query.filters, {\n          member: &#39;Sales.organisationId&#39;,\n          operator: &#39;equals&#39;,\n          values: [securityContext.organisationId]\n        }]\n      })\n    }\n    \n    // Simple queries still go direct to database\n    return db.select()\n      .from(schema.orders)\n      .where(eq(schema.orders.organisationId, securityContext.organisationId))\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Use Cube.dev for heavy lifting, Drizzle Cube for application integration\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  \n  // Delegate to pre-aggregated Cube.dev API for complex queries\n  sql: async ({ query, securityContext }) =&gt; {\n    if (isComplexQuery(query)) {\n      return await cubeDevClient.load({\n        ...query,\n        filters: [...query.filters, {\n          member: &#39;Sales.organisationId&#39;,\n          operator: &#39;equals&#39;,\n          values: [securityContext.organisationId]\n        }]\n      })\n    }\n    \n    // Simple queries still go direct to database\n    return db.select()\n      .from(schema.orders)\n      .where(eq(schema.orders.organisationId, securityContext.organisationId))\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Benefits:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">✅ Handles billions of rows with sub-second response</li><li class=\"leading-relaxed\">✅ Advanced features: ML predictions, real-time streaming</li><li class=\"leading-relaxed\">✅ Your application code remains unchanged</li><li class=\"leading-relaxed\">✅ Seamless user experience during migration</li></ul><h2 id=\"migration-strategies\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Migration Strategies</h2><h3 id=\"-zero-downtime-migration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">🔄 Zero-Downtime Migration</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The key to successful scaling is maintaining your semantic layer interface:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Before: Direct database\nconst salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db }) =&gt; db.select().from(schema.orders),\n  // ... dimensions and measures\n})\n\n// After: Data warehouse - SAME interface!\nconst salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;, \n  sql: ({ db }) =&gt; db.select().from(schema.orders_fact), // Different source\n  // ... SAME dimensions and measures\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Before: Direct database\nconst salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db }) =&gt; db.select().from(schema.orders),\n  // ... dimensions and measures\n})\n\n// After: Data warehouse - SAME interface!\nconst salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;, \n  sql: ({ db }) =&gt; db.select().from(schema.orders_fact), // Different source\n  // ... SAME dimensions and measures\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"-gradual-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">📊 Gradual Optimization</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Optimize cubes one at a time based on usage patterns:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// 1. Identify slow cubes\nconst performanceMetrics = {\n  &#39;Sales&#39;: { avgQueryTime: 2.3, usage: &#39;high&#39; },     // Optimize first\n  &#39;Users&#39;: { avgQueryTime: 0.1, usage: &#39;medium&#39; },   // Optimize later  \n  &#39;Support&#39;: { avgQueryTime: 0.5, usage: &#39;low&#39; }     // Keep as-is\n}\n\n// 2. Create optimized version of high-impact cube\nexport const optimizedSalesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db }) =&gt; db.select().from(schema.sales_summary), // Materialized view\n  // Same interface ensures compatibility\n})\n\n// 3. A/B test performance\nif (securityContext.features?.optimizedSales) {\n  semanticLayer.registerCube(optimizedSalesCube)\n} else {\n  semanticLayer.registerCube(originalSalesCube)\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// 1. Identify slow cubes\nconst performanceMetrics = {\n  &#39;Sales&#39;: { avgQueryTime: 2.3, usage: &#39;high&#39; },     // Optimize first\n  &#39;Users&#39;: { avgQueryTime: 0.1, usage: &#39;medium&#39; },   // Optimize later  \n  &#39;Support&#39;: { avgQueryTime: 0.5, usage: &#39;low&#39; }     // Keep as-is\n}\n\n// 2. Create optimized version of high-impact cube\nexport const optimizedSalesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db }) =&gt; db.select().from(schema.sales_summary), // Materialized view\n  // Same interface ensures compatibility\n})\n\n// 3. A/B test performance\nif (securityContext.features?.optimizedSales) {\n  semanticLayer.registerCube(optimizedSalesCube)\n} else {\n  semanticLayer.registerCube(originalSalesCube)\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"architecture-evolution-examples\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Architecture Evolution Examples</h2><h3 id=\"e-commerce-platform-journey\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">E-commerce Platform Journey</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Stage 1: Startup (Direct PostgreSQL)\nconst ordersDb = postgres(&#39;postgresql://localhost/ecommerce&#39;)\n\n// Stage 2: Growth (Read Replica + Materialized Views)  \nconst analyticsDb = postgres(&#39;postgresql://analytics-replica/ecommerce&#39;)\n\n// Stage 3: Scale (Snowflake Data Warehouse)\nconst warehouseDb = snowflake({\n  account: &#39;company.snowflakecomputing.com&#39;,\n  warehouse: &#39;ANALYTICS_WH&#39;,\n  database: &#39;ECOMMERCE_DW&#39;\n})\n\n// Same cubes work across all stages!</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Stage 1: Startup (Direct PostgreSQL)\nconst ordersDb = postgres(&#39;postgresql://localhost/ecommerce&#39;)\n\n// Stage 2: Growth (Read Replica + Materialized Views)  \nconst analyticsDb = postgres(&#39;postgresql://analytics-replica/ecommerce&#39;)\n\n// Stage 3: Scale (Snowflake Data Warehouse)\nconst warehouseDb = snowflake({\n  account: &#39;company.snowflakecomputing.com&#39;,\n  warehouse: &#39;ANALYTICS_WH&#39;,\n  database: &#39;ECOMMERCE_DW&#39;\n})\n\n// Same cubes work across all stages!\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"saas-platform-migration-timeline\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">SaaS Platform Migration Timeline</h3><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Month</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Stage</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Data Volume</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Action</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">0-12</td><td class=\"px-4 py-3 text-sm text-gray-600\">Direct DB</td><td class=\"px-4 py-3 text-sm text-gray-600\">< 1GB</td><td class=\"px-4 py-3 text-sm text-gray-600\">Launch with simple setup</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">12-24</td><td class=\"px-4 py-3 text-sm text-gray-600\">Read Replica</td><td class=\"px-4 py-3 text-sm text-gray-600\">1-10GB</td><td class=\"px-4 py-3 text-sm text-gray-600\">Add analytics replica</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">24-36</td><td class=\"px-4 py-3 text-sm text-gray-600\">Materialized Views</td><td class=\"px-4 py-3 text-sm text-gray-600\">10-50GB</td><td class=\"px-4 py-3 text-sm text-gray-600\">Create summary tables</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">36+</td><td class=\"px-4 py-3 text-sm text-gray-600\">Data Warehouse</td><td class=\"px-4 py-3 text-sm text-gray-600\">50GB+</td><td class=\"px-4 py-3 text-sm text-gray-600\">Migrate to Snowflake/BigQuery</td></tr></tbody>\n    </table>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Throughout entire journey:</strong> Zero changes to dashboard code!</p><h2 id=\"best-practices-for-scaling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices for Scaling</h2><h3 id=\"-design-for-growth\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">🎯 Design for Growth</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Good: Flexible cube definition\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; {\n    // Can easily swap data sources\n    const baseQuery = db.select().from(getCurrentSalesTable())\n    return baseQuery.where(eq(schema.orders.organisationId, securityContext.organisationId))\n  }\n})\n\nfunction getCurrentSalesTable() {\n  // Environment-based source selection\n  switch (process.env.DATA_TIER) {\n    case &#39;warehouse&#39;: return schema.sales_fact\n    case &#39;replica&#39;: return schema.sales_replica  \n    default: return schema.sales\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Good: Flexible cube definition\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; {\n    // Can easily swap data sources\n    const baseQuery = db.select().from(getCurrentSalesTable())\n    return baseQuery.where(eq(schema.orders.organisationId, securityContext.organisationId))\n  }\n})\n\nfunction getCurrentSalesTable() {\n  // Environment-based source selection\n  switch (process.env.DATA_TIER) {\n    case &#39;warehouse&#39;: return schema.sales_fact\n    case &#39;replica&#39;: return schema.sales_replica  \n    default: return schema.sales\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"-monitor-and-optimize\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">📈 Monitor and Optimize</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Track cube performance for optimization decisions\nexport const instrumentedCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: async ({ db, securityContext, query }) =&gt; {\n    const start = performance.now()\n    \n    try {\n      const result = await db.select().from(schema.orders)\n        .where(eq(schema.orders.organisationId, securityContext.organisationId))\n        \n      const duration = performance.now() - start\n      \n      // Log performance metrics\n      await logCubePerformance({\n        cube: &#39;Sales&#39;,\n        duration,\n        rowCount: result.length,\n        query: JSON.stringify(query)\n      })\n      \n      return result\n    } catch (error) {\n      await logCubeError(&#39;Sales&#39;, error, query)\n      throw error\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Track cube performance for optimization decisions\nexport const instrumentedCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: async ({ db, securityContext, query }) =&gt; {\n    const start = performance.now()\n    \n    try {\n      const result = await db.select().from(schema.orders)\n        .where(eq(schema.orders.organisationId, securityContext.organisationId))\n        \n      const duration = performance.now() - start\n      \n      // Log performance metrics\n      await logCubePerformance({\n        cube: &#39;Sales&#39;,\n        duration,\n        rowCount: result.length,\n        query: JSON.stringify(query)\n      })\n      \n      return result\n    } catch (error) {\n      await logCubeError(&#39;Sales&#39;, error, query)\n      throw error\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"the-power-of-abstraction\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">The Power of Abstraction</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The semantic layer is your <strong class=\"font-semibold text-slate-700\">stable contract</strong> that enables:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Frontend Stability</strong>: Dashboards work unchanged across data architecture evolution</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Team Productivity</strong>: Analysts focus on insights, not infrastructure changes  </li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Business Continuity</strong>: Reports keep working during migrations</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Gradual Migration</strong>: Upgrade piece by piece without big-bang deployments</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Cost Optimization</strong>: Right-size your data infrastructure as you grow</li></ul><h2 id=\"common-scaling-questions\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Scaling Questions</h2><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Q: When should I start thinking about scaling?</strong>\nA: When dashboard queries take &gt;2 seconds or impact your application performance.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Q: Can I mix different data sources in one semantic layer?</strong><br>A: Yes! Different cubes can use different databases - Drizzle Cube handles the abstraction.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Q: Will my React dashboards break during migration?</strong>\nA: No! As long as cube names and field names stay consistent, dashboards continue working.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Q: How do I test the new data source before switching?</strong>\nA: Use feature flags or environment variables to A/B test cube implementations.</p><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Ready to scale your analytics?</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Small SaaS</strong>: Start with <a href=\"#\" data-help-link=\"getting-started/quick-start\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Quick Start</a> guide</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Growing SaaS</strong>: Learn about <a href=\"#\" data-help-link=\"advanced/performance\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Performance</a> optimization</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Enterprise</strong>: Explore <a href=\"#\" data-help-link=\"advanced/typescript\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Advanced TypeScript</a> patterns</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">Remember: <strong class=\"font-semibold text-slate-700\">Start simple, scale smart</strong>. Drizzle Cube grows with you! 🚀</p>",
    "path": "getting-started/scaling.md"
  },
  {
    "slug": "semantic-layer",
    "title": "Semantic Layer",
    "content": "<h1 id=\"semantic-layer\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Semantic Layer</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">The semantic layer is the heart of Drizzle Cube. It transforms your raw database tables into business-friendly concepts that anyone can understand and query safely.</p><h2 id=\"what-is-a-semantic-layer\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">What is a Semantic Layer?</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">A semantic layer is a <strong class=\"font-semibold text-slate-700\">business representation</strong> of your data that:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Abstracts complexity</strong> - Hide database schema details behind business terms</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Ensures consistency</strong> - Single source of truth for metrics and definitions  </li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Enables self-service</strong> - Non-technical users can explore data confidently</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Provides structure</strong> - Organize data into logical business entities</li></ul><h2 id=\"architecture-overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Architecture Overview</h2><div style=\"display: flex; justify-content: center; align-items: center; gap: 20px; margin: 20px 0; font-family: monospace;\">\n  <div style=\"border: 2px solid #374151; border-radius: 8px; padding: 16px; background: #f9fafb; min-width: 140px;\">\n    <div style=\"font-weight: bold; text-align: center; margin-bottom: 8px;\">Applications</div>\n    <div style=\"font-size: 14px; color: #6b7280;\">\n      • Dashboards<br>\n      • Reports<br>\n      • APIs\n    </div>\n  </div>\n  \n  <div style=\"color: #6b7280; font-size: 24px;\">→</div>\n  \n  <div style=\"border: 2px solid #059669; border-radius: 8px; padding: 16px; background: #f0fdf4; min-width: 140px;\">\n    <div style=\"font-weight: bold; text-align: center; margin-bottom: 8px; color: #059669;\">Semantic Layer</div>\n    <div style=\"font-size: 14px; color: #6b7280;\">\n      • Cubes<br>\n      • Dimensions<br>\n      • Measures\n    </div>\n  </div>\n  \n  <div style=\"color: #6b7280; font-size: 24px;\">→</div>\n  \n  <div style=\"border: 2px solid #374151; border-radius: 8px; padding: 16px; background: #f9fafb; min-width: 140px;\">\n    <div style=\"font-weight: bold; text-align: center; margin-bottom: 8px;\">Database</div>\n    <div style=\"font-size: 14px; color: #6b7280;\">\n      • Tables<br>\n      • Views<br>\n      • Indexes\n    </div>\n  </div>\n</div>\n\n<h2 id=\"core-concepts\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Core Concepts</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The semantic layer is built on three fundamental concepts:</p><h3 id=\"1-cubes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">1. Cubes</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Cubes</strong> are business entities that represent the main subjects you want to analyze - like Sales, Customers, or Products. Each cube defines how to query a specific dataset.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { defineCube } from &#39;drizzle-cube/server&#39;;\nimport { eq } from &#39;drizzle-orm&#39;;\nimport * as schema from &#39;./schema&#39;;\n\nexport const salesCube = defineCube(&#39;Sales&#39;, {\n  title: &#39;Sales Transactions&#39;,\n  sql: (ctx) =&gt; ({\n    from: schema.sales,\n    leftJoin: [\n      { table: schema.products, on: eq(schema.sales.productId, schema.products.id) },\n      { table: schema.customers, on: eq(schema.sales.customerId, schema.customers.id) }\n    ]\n  }),\n  \n  dimensions: {\n    // What you can filter and group by\n  },\n  \n  measures: {\n    // What you want to calculate and analyze\n  }\n});</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { defineCube } from &#39;drizzle-cube/server&#39;;\nimport { eq } from &#39;drizzle-orm&#39;;\nimport * as schema from &#39;./schema&#39;;\n\nexport const salesCube = defineCube(&#39;Sales&#39;, {\n  title: &#39;Sales Transactions&#39;,\n  sql: (ctx) =&gt; ({\n    from: schema.sales,\n    leftJoin: [\n      { table: schema.products, on: eq(schema.sales.productId, schema.products.id) },\n      { table: schema.customers, on: eq(schema.sales.customerId, schema.customers.id) }\n    ]\n  }),\n  \n  dimensions: {\n    // What you can filter and group by\n  },\n  \n  measures: {\n    // What you want to calculate and analyze\n  }\n});\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"2-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">2. Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dimensions</strong> are the descriptive attributes of your data - the &quot;what&quot;, &quot;when&quot;, &quot;where&quot;, and &quot;who&quot; that you use to slice and filter your analysis.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  customerName: {\n    name: &#39;customerName&#39;,\n    title: &#39;Customer Name&#39;,\n    type: &#39;string&#39;,\n    sql: schema.customers.name\n  },\n  productCategory: {\n    name: &#39;productCategory&#39;, \n    title: &#39;Product Category&#39;,\n    type: &#39;string&#39;,\n    sql: schema.products.category\n  },\n  orderDate: {\n    name: &#39;orderDate&#39;,\n    title: &#39;Order Date&#39;,\n    type: &#39;time&#39;,\n    sql: schema.sales.orderDate\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  customerName: {\n    name: &#39;customerName&#39;,\n    title: &#39;Customer Name&#39;,\n    type: &#39;string&#39;,\n    sql: schema.customers.name\n  },\n  productCategory: {\n    name: &#39;productCategory&#39;, \n    title: &#39;Product Category&#39;,\n    type: &#39;string&#39;,\n    sql: schema.products.category\n  },\n  orderDate: {\n    name: &#39;orderDate&#39;,\n    title: &#39;Order Date&#39;,\n    type: &#39;time&#39;,\n    sql: schema.sales.orderDate\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"3-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">3. Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Measures</strong> are the numeric calculations you want to perform - counts, sums, averages, and other aggregations that provide business insights.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  totalSales: {\n    name: &#39;totalSales&#39;,\n    title: &#39;Total Sales&#39;,\n    type: &#39;sum&#39;,\n    sql: schema.sales.amount\n  },\n  orderCount: {\n    name: &#39;orderCount&#39;, \n    title: &#39;Number of Orders&#39;,\n    type: &#39;count&#39;,\n    sql: schema.sales.id\n  },\n  averageOrderValue: {\n    name: &#39;averageOrderValue&#39;,\n    title: &#39;Average Order Value&#39;, \n    type: &#39;avg&#39;,\n    sql: schema.sales.amount\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  totalSales: {\n    name: &#39;totalSales&#39;,\n    title: &#39;Total Sales&#39;,\n    type: &#39;sum&#39;,\n    sql: schema.sales.amount\n  },\n  orderCount: {\n    name: &#39;orderCount&#39;, \n    title: &#39;Number of Orders&#39;,\n    type: &#39;count&#39;,\n    sql: schema.sales.id\n  },\n  averageOrderValue: {\n    name: &#39;averageOrderValue&#39;,\n    title: &#39;Average Order Value&#39;, \n    type: &#39;avg&#39;,\n    sql: schema.sales.amount\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"complete-example\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Complete Example</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Here&#39;s a complete cube definition that brings together all three concepts:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { defineCube } from &#39;drizzle-cube/server&#39;;\nimport { eq } from &#39;drizzle-orm&#39;;\nimport * as schema from &#39;./schema&#39;;\n\nexport const salesCube = defineCube(&#39;Sales&#39;, {\n  title: &#39;Sales Transactions&#39;,\n  description: &#39;All sales data with customer and product information&#39;,\n  \n  sql: (ctx) =&gt; ({\n    from: schema.sales,\n    leftJoin: [\n      { table: schema.products, on: eq(schema.sales.productId, schema.products.id) },\n      { table: schema.customers, on: eq(schema.sales.customerId, schema.customers.id) }\n    ]\n  }),\n  \n  dimensions: {\n    customerName: {\n      name: &#39;customerName&#39;,\n      title: &#39;Customer Name&#39;,\n      type: &#39;string&#39;,\n      sql: schema.customers.name\n    },\n    productName: {\n      name: &#39;productName&#39;,\n      title: &#39;Product Name&#39;, \n      type: &#39;string&#39;,\n      sql: schema.products.name\n    },\n    productCategory: {\n      name: &#39;productCategory&#39;,\n      title: &#39;Product Category&#39;,\n      type: &#39;string&#39;, \n      sql: schema.products.category\n    },\n    orderDate: {\n      name: &#39;orderDate&#39;,\n      title: &#39;Order Date&#39;,\n      type: &#39;time&#39;,\n      sql: schema.sales.orderDate\n    }\n  },\n  \n  measures: {\n    totalSales: {\n      name: &#39;totalSales&#39;,\n      title: &#39;Total Sales&#39;,\n      type: &#39;sum&#39;,\n      sql: schema.sales.amount\n    },\n    orderCount: {\n      name: &#39;orderCount&#39;,\n      title: &#39;Number of Orders&#39;,\n      type: &#39;count&#39;, \n      sql: schema.sales.id\n    },\n    averageOrderValue: {\n      name: &#39;averageOrderValue&#39;,\n      title: &#39;Average Order Value&#39;,\n      type: &#39;avg&#39;,\n      sql: schema.sales.amount\n    },\n    totalQuantity: {\n      name: &#39;totalQuantity&#39;,\n      title: &#39;Total Quantity Sold&#39;,\n      type: &#39;sum&#39;,\n      sql: schema.sales.quantity\n    }\n  }\n});</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { defineCube } from &#39;drizzle-cube/server&#39;;\nimport { eq } from &#39;drizzle-orm&#39;;\nimport * as schema from &#39;./schema&#39;;\n\nexport const salesCube = defineCube(&#39;Sales&#39;, {\n  title: &#39;Sales Transactions&#39;,\n  description: &#39;All sales data with customer and product information&#39;,\n  \n  sql: (ctx) =&gt; ({\n    from: schema.sales,\n    leftJoin: [\n      { table: schema.products, on: eq(schema.sales.productId, schema.products.id) },\n      { table: schema.customers, on: eq(schema.sales.customerId, schema.customers.id) }\n    ]\n  }),\n  \n  dimensions: {\n    customerName: {\n      name: &#39;customerName&#39;,\n      title: &#39;Customer Name&#39;,\n      type: &#39;string&#39;,\n      sql: schema.customers.name\n    },\n    productName: {\n      name: &#39;productName&#39;,\n      title: &#39;Product Name&#39;, \n      type: &#39;string&#39;,\n      sql: schema.products.name\n    },\n    productCategory: {\n      name: &#39;productCategory&#39;,\n      title: &#39;Product Category&#39;,\n      type: &#39;string&#39;, \n      sql: schema.products.category\n    },\n    orderDate: {\n      name: &#39;orderDate&#39;,\n      title: &#39;Order Date&#39;,\n      type: &#39;time&#39;,\n      sql: schema.sales.orderDate\n    }\n  },\n  \n  measures: {\n    totalSales: {\n      name: &#39;totalSales&#39;,\n      title: &#39;Total Sales&#39;,\n      type: &#39;sum&#39;,\n      sql: schema.sales.amount\n    },\n    orderCount: {\n      name: &#39;orderCount&#39;,\n      title: &#39;Number of Orders&#39;,\n      type: &#39;count&#39;, \n      sql: schema.sales.id\n    },\n    averageOrderValue: {\n      name: &#39;averageOrderValue&#39;,\n      title: &#39;Average Order Value&#39;,\n      type: &#39;avg&#39;,\n      sql: schema.sales.amount\n    },\n    totalQuantity: {\n      name: &#39;totalQuantity&#39;,\n      title: &#39;Total Quantity Sold&#39;,\n      type: &#39;sum&#39;,\n      sql: schema.sales.quantity\n    }\n  }\n});\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"how-queries-work\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">How Queries Work</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Once you&#39;ve defined your cube, you can query it using a simple JSON structure:</p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;measures&quot;: [&quot;Sales.totalSales&quot;, &quot;Sales.orderCount&quot;],\n  &quot;dimensions&quot;: [&quot;Sales.productCategory&quot;, &quot;Sales.customerName&quot;],\n  &quot;timeDimensions&quot;: [{\n    &quot;dimension&quot;: &quot;Sales.orderDate&quot;,\n    &quot;granularity&quot;: &quot;month&quot;\n  }],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Sales.productCategory&quot;, \n    &quot;operator&quot;: &quot;equals&quot;,\n    &quot;values&quot;: [&quot;Electronics&quot;]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;measures&quot;: [&quot;Sales.totalSales&quot;, &quot;Sales.orderCount&quot;],\n  &quot;dimensions&quot;: [&quot;Sales.productCategory&quot;, &quot;Sales.customerName&quot;],\n  &quot;timeDimensions&quot;: [{\n    &quot;dimension&quot;: &quot;Sales.orderDate&quot;,\n    &quot;granularity&quot;: &quot;month&quot;\n  }],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Sales.productCategory&quot;, \n    &quot;operator&quot;: &quot;equals&quot;,\n    &quot;values&quot;: [&quot;Electronics&quot;]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">This query will:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Sum up total sales</strong> and <strong class=\"font-semibold text-slate-700\">count orders</strong> (measures)</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Group by</strong> product category and customer name (dimensions)  </li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Group by month</strong> using the order date (time dimension)</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Filter to</strong> only Electronics products (filter)</li></ol><h2 id=\"common-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Patterns</h2><h3 id=\"basic-aggregations\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Aggregations</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  // Count records\n  recordCount: { type: &#39;count&#39;, sql: schema.table.id },\n  \n  // Sum amounts\n  totalRevenue: { type: &#39;sum&#39;, sql: schema.table.amount },\n  \n  // Calculate averages  \n  avgOrderValue: { type: &#39;avg&#39;, sql: schema.table.orderValue },\n  \n  // Find min/max values\n  minPrice: { type: &#39;min&#39;, sql: schema.table.price },\n  maxPrice: { type: &#39;max&#39;, sql: schema.table.price }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  // Count records\n  recordCount: { type: &#39;count&#39;, sql: schema.table.id },\n  \n  // Sum amounts\n  totalRevenue: { type: &#39;sum&#39;, sql: schema.table.amount },\n  \n  // Calculate averages  \n  avgOrderValue: { type: &#39;avg&#39;, sql: schema.table.orderValue },\n  \n  // Find min/max values\n  minPrice: { type: &#39;min&#39;, sql: schema.table.price },\n  maxPrice: { type: &#39;max&#39;, sql: schema.table.price }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"time-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Time Dimensions</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  createdDate: {\n    type: &#39;time&#39;,\n    sql: schema.table.createdAt\n  },\n  updatedDate: {\n    type: &#39;time&#39;, \n    sql: schema.table.updatedAt\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  createdDate: {\n    type: &#39;time&#39;,\n    sql: schema.table.createdAt\n  },\n  updatedDate: {\n    type: &#39;time&#39;, \n    sql: schema.table.updatedAt\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"categorical-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Categorical Dimensions</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  status: {\n    type: &#39;string&#39;,\n    sql: schema.table.status\n  },\n  category: {\n    type: &#39;string&#39;,\n    sql: schema.table.category  \n  },\n  isActive: {\n    type: &#39;boolean&#39;,\n    sql: schema.table.isActive\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  status: {\n    type: &#39;string&#39;,\n    sql: schema.table.status\n  },\n  category: {\n    type: &#39;string&#39;,\n    sql: schema.table.category  \n  },\n  isActive: {\n    type: &#39;boolean&#39;,\n    sql: schema.table.isActive\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/cubes\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Cubes</strong></a> - Deep dive into cube definitions</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/dimensions\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Dimensions</strong></a> - Advanced dimension patterns</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/measures\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Measures</strong></a> - Custom calculations and aggregations</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/joins\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Joins</strong></a> - Multi-cube query patterns</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Security</strong></a> - Advanced security patterns</li></ul>",
    "path": "semantic-layer/index.md"
  },
  {
    "slug": "semantic-layer/cubes",
    "title": "Cubes",
    "content": "<h1 id=\"cubes\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Cubes</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Cubes are the core building blocks of Drizzle Cube&#39;s semantic layer. A cube defines a logical data model that combines SQL queries with dimensions and measures, providing a type-safe interface for analytics queries.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Cubes in Drizzle Cube are <strong class=\"font-semibold text-slate-700\">Drizzle ORM-first</strong>, meaning they leverage Drizzle&#39;s query builder for type safety and SQL injection prevention. Each cube represents a dataset that can be queried through dimensions (categorical data) and measures (metrics and aggregations).</p><h2 id=\"basic-cube-structure\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Basic Cube Structure</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport type { QueryContext, BaseQueryDefinition, Cube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube: Cube&lt;Schema&gt; = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  description: &#39;Employee data and metrics&#39;,\n  \n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  \n  dimensions: {\n    // Categorical data fields\n  },\n  \n  measures: {\n    // Metrics and aggregations\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport type { QueryContext, BaseQueryDefinition, Cube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube: Cube&lt;Schema&gt; = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  description: &#39;Employee data and metrics&#39;,\n  \n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  \n  dimensions: {\n    // Categorical data fields\n  },\n  \n  measures: {\n    // Metrics and aggregations\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"core-concepts\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Core Concepts</h2><h3 id=\"cube-definition-function\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Cube Definition Function</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">defineCube()</code> function creates a type-safe cube definition with the following signature:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">defineCube(name: string, config: CubeConfig): Cube</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"defineCube(name: string, config: CubeConfig): Cube\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">name</strong>: Unique identifier for the cube</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">config</strong>: Configuration object containing SQL, dimensions, measures, and joins</li></ul><h3 id=\"sql-function\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">SQL Function</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">sql</code> property defines the base query for the cube using Drizzle&#39;s query builder:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  joins: [\n    {\n      table: departments,\n      on: and(\n        eq(employees.departmentId, departments.id),\n        eq(departments.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  joins: [\n    {\n      table: departments,\n      on: and(\n        eq(employees.departmentId, departments.id),\n        eq(departments.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Key Features:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type Safety</strong>: Uses Drizzle schema types</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security Context</strong>: Automatic tenant filtering</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Join Support</strong>: Define table relationships</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">SQL Injection Prevention</strong>: Parameterized queries only</li></ul><h2 id=\"complete-example\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Complete Example</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Here&#39;s a comprehensive cube example with all major features:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export const productivityCube: Cube&lt;Schema&gt; = defineCube(&#39;Productivity&#39;, {\n  title: &#39;Productivity Analytics&#39;,\n  description: &#39;Daily productivity metrics including code output and deployments&#39;,\n  \n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: productivity,\n    joins: [\n      {\n        table: employees,\n        on: and(\n          eq(productivity.employeeId, employees.id),\n          eq(employees.organisationId, ctx.securityContext.organisationId)\n        ),\n        type: &#39;left&#39;\n      }\n    ],\n    where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n  }),\n\n  // Cross-cube joins for multi-cube queries\n  joins: {\n    &#39;Employees&#39;: {\n      targetCube: &#39;Employees&#39;,\n      condition: () =&gt; eq(productivity.employeeId, employees.id),\n      type: &#39;left&#39;,\n      relationship: &#39;belongsTo&#39;\n    }\n  },\n  \n  dimensions: {\n    date: {\n      name: &#39;date&#39;,\n      title: &#39;Date&#39;,\n      type: &#39;time&#39;,\n      sql: productivity.date\n    },\n    happinessLevel: {\n      name: &#39;happinessLevel&#39;,\n      title: &#39;Happiness Level&#39;,\n      type: &#39;string&#39;,\n      sql: sql`\n        CASE \n          WHEN ${productivity.happinessIndex} &gt;= 8 THEN &#39;High&#39;\n          WHEN ${productivity.happinessIndex} &gt;= 6 THEN &#39;Medium&#39;\n          ELSE &#39;Low&#39;\n        END\n      `\n    }\n  },\n  \n  measures: {\n    recordCount: {\n      name: &#39;recordCount&#39;,\n      title: &#39;Total Records&#39;,\n      type: &#39;count&#39;,\n      sql: productivity.id\n    },\n    avgHappinessIndex: {\n      name: &#39;avgHappinessIndex&#39;,\n      title: &#39;Average Happiness&#39;,\n      type: &#39;avg&#39;,\n      sql: productivity.happinessIndex\n    },\n    productivityScore: {\n      name: &#39;productivityScore&#39;,\n      title: &#39;Productivity Score&#39;,\n      type: &#39;avg&#39;,\n      sql: sql`(${productivity.linesOfCode} + ${productivity.pullRequests} * 50 + ${productivity.liveDeployments} * 100)`,\n      description: &#39;Composite score based on code output, reviews, and deployments&#39;\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export const productivityCube: Cube&lt;Schema&gt; = defineCube(&#39;Productivity&#39;, {\n  title: &#39;Productivity Analytics&#39;,\n  description: &#39;Daily productivity metrics including code output and deployments&#39;,\n  \n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: productivity,\n    joins: [\n      {\n        table: employees,\n        on: and(\n          eq(productivity.employeeId, employees.id),\n          eq(employees.organisationId, ctx.securityContext.organisationId)\n        ),\n        type: &#39;left&#39;\n      }\n    ],\n    where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n  }),\n\n  // Cross-cube joins for multi-cube queries\n  joins: {\n    &#39;Employees&#39;: {\n      targetCube: &#39;Employees&#39;,\n      condition: () =&gt; eq(productivity.employeeId, employees.id),\n      type: &#39;left&#39;,\n      relationship: &#39;belongsTo&#39;\n    }\n  },\n  \n  dimensions: {\n    date: {\n      name: &#39;date&#39;,\n      title: &#39;Date&#39;,\n      type: &#39;time&#39;,\n      sql: productivity.date\n    },\n    happinessLevel: {\n      name: &#39;happinessLevel&#39;,\n      title: &#39;Happiness Level&#39;,\n      type: &#39;string&#39;,\n      sql: sql`\n        CASE \n          WHEN ${productivity.happinessIndex} &gt;= 8 THEN &#39;High&#39;\n          WHEN ${productivity.happinessIndex} &gt;= 6 THEN &#39;Medium&#39;\n          ELSE &#39;Low&#39;\n        END\n      `\n    }\n  },\n  \n  measures: {\n    recordCount: {\n      name: &#39;recordCount&#39;,\n      title: &#39;Total Records&#39;,\n      type: &#39;count&#39;,\n      sql: productivity.id\n    },\n    avgHappinessIndex: {\n      name: &#39;avgHappinessIndex&#39;,\n      title: &#39;Average Happiness&#39;,\n      type: &#39;avg&#39;,\n      sql: productivity.happinessIndex\n    },\n    productivityScore: {\n      name: &#39;productivityScore&#39;,\n      title: &#39;Productivity Score&#39;,\n      type: &#39;avg&#39;,\n      sql: sql`(${productivity.linesOfCode} + ${productivity.pullRequests} * 50 + ${productivity.liveDeployments} * 100)`,\n      description: &#39;Composite score based on code output, reviews, and deployments&#39;\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"security-context-integration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Security Context Integration</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Every cube <strong class=\"font-semibold text-slate-700\">must</strong> include security context filtering to ensure multi-tenant security:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  // REQUIRED: Filter by organisation/tenant\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  // REQUIRED: Filter by organisation/tenant\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security Best Practices:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Always filter by tenant/organisation ID</li><li class=\"leading-relaxed\">Apply security context to all joined tables</li><li class=\"leading-relaxed\">Use parameterized queries (automatic with Drizzle)</li><li class=\"leading-relaxed\">Never construct SQL strings manually</li></ul><h2 id=\"advanced-features\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Features</h2><h3 id=\"complex-sql-with-ctes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Complex SQL with CTEs</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  with: {\n    activeEmployees: ctx.db\n      .select()\n      .from(employees)\n      .where(and(\n        eq(employees.active, true),\n        eq(employees.organisationId, ctx.securityContext.organisationId)\n      ))\n  },\n  from: sql`activeEmployees`,\n  where: sql`true` // Additional filtering can be applied\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  with: {\n    activeEmployees: ctx.db\n      .select()\n      .from(employees)\n      .where(and(\n        eq(employees.active, true),\n        eq(employees.organisationId, ctx.securityContext.organisationId)\n      ))\n  },\n  from: sql`activeEmployees`,\n  where: sql`true` // Additional filtering can be applied\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"dynamic-filtering-with-context\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dynamic Filtering with Context</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n  const baseWhere = eq(employees.organisationId, ctx.securityContext.organisationId)\n  \n  // Add conditional filters based on security context\n  const additionalFilters = []\n  if (ctx.securityContext.departmentId) {\n    additionalFilters.push(eq(employees.departmentId, ctx.securityContext.departmentId))\n  }\n  \n  return {\n    from: employees,\n    where: additionalFilters.length &gt; 0 \n      ? and(baseWhere, ...additionalFilters)\n      : baseWhere\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n  const baseWhere = eq(employees.organisationId, ctx.securityContext.organisationId)\n  \n  // Add conditional filters based on security context\n  const additionalFilters = []\n  if (ctx.securityContext.departmentId) {\n    additionalFilters.push(eq(employees.departmentId, ctx.securityContext.departmentId))\n  }\n  \n  return {\n    from: employees,\n    where: additionalFilters.length &gt; 0 \n      ? and(baseWhere, ...additionalFilters)\n      : baseWhere\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"cube-registration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Cube Registration</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Register cubes with the semantic layer compiler:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { SemanticLayerCompiler, createDatabaseExecutor } from &#39;drizzle-cube/server&#39;\n\nconst executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)\nconst semanticLayer = new SemanticLayerCompiler({ \n  databaseExecutor: executor \n})\n\n// Register individual cubes\nsemanticLayer.registerCube(employeesCube)\nsemanticLayer.registerCube(productivityCube)\n\n// Or register multiple cubes\nconst allCubes = [employeesCube, productivityCube, departmentsCube]\nallCubes.forEach(cube =&gt; semanticLayer.registerCube(cube))</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { SemanticLayerCompiler, createDatabaseExecutor } from &#39;drizzle-cube/server&#39;\n\nconst executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)\nconst semanticLayer = new SemanticLayerCompiler({ \n  databaseExecutor: executor \n})\n\n// Register individual cubes\nsemanticLayer.registerCube(employeesCube)\nsemanticLayer.registerCube(productivityCube)\n\n// Or register multiple cubes\nconst allCubes = [employeesCube, productivityCube, departmentsCube]\nallCubes.forEach(cube =&gt; semanticLayer.registerCube(cube))\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Always Use Security Context</strong>: Every cube must filter by tenant/organisation</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Leverage Type Safety</strong>: Use Drizzle schema types throughout</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Descriptive Names</strong>: Use clear, business-friendly names and titles</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Document Complex Logic</strong>: Add descriptions to calculated measures</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Test Thoroughly</strong>: Verify security isolation and query correctness</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Follow Naming Conventions</strong>: Use camelCase for internal names, Title Case for display</li></ol><h2 id=\"testing-cubes\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Cubes</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { describe, it, expect } from &#39;vitest&#39;\nimport { testEmployeesCube } from &#39;./test-cubes&#39;\n\ndescribe(&#39;Employees Cube&#39;, () =&gt; {\n  it(&#39;should filter by organisation&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    expect(result.rawData()).toHaveLength(expectedCount)\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { describe, it, expect } from &#39;vitest&#39;\nimport { testEmployeesCube } from &#39;./test-cubes&#39;\n\ndescribe(&#39;Employees Cube&#39;, () =&gt; {\n  it(&#39;should filter by organisation&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    expect(result.rawData()).toHaveLength(expectedCount)\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"common-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Patterns</h2><h3 id=\"single-table-cube\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Single Table Cube</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx) =&gt; ({\n  from: employees,\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx) =&gt; ({\n  from: employees,\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"multi-table-cube-with-joins\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Multi-Table Cube with Joins</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx) =&gt; ({\n  from: productivity,\n  joins: [\n    {\n      table: employees,\n      on: eq(productivity.employeeId, employees.id),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx) =&gt; ({\n  from: productivity,\n  joins: [\n    {\n      table: employees,\n      on: eq(productivity.employeeId, employees.id),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"filtered-cube-active-records-only\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Filtered Cube (Active Records Only)</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx) =&gt; ({\n  from: employees,\n  where: and(\n    eq(employees.organisationId, ctx.securityContext.organisationId),\n    eq(employees.active, true)\n  )\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx) =&gt; ({\n  from: employees,\n  where: and(\n    eq(employees.organisationId, ctx.securityContext.organisationId),\n    eq(employees.active, true)\n  )\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"semantic-layer/dimensions\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Dimensions</a> to understand categorical data</li><li class=\"leading-relaxed\">Explore <a href=\"#\" data-help-link=\"semantic-layer/measures\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Measures</a> for metrics and aggregations  </li><li class=\"leading-relaxed\">Understand <a href=\"#\" data-help-link=\"semantic-layer/joins\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Joins</a> for multi-cube relationships</li><li class=\"leading-relaxed\">Review <a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Security</a> for multi-tenant patterns</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Visual cube designer interface</li><li class=\"leading-relaxed\">Cube validation and linting tools</li><li class=\"leading-relaxed\">Automatic cube generation from schema</li><li class=\"leading-relaxed\">Cube performance analytics and optimization hints</li></ul>",
    "path": "semantic-layer/cubes.md"
  },
  {
    "slug": "semantic-layer/dimensions",
    "title": "Dimensions",
    "content": "<h1 id=\"dimensions\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Dimensions</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Dimensions are categorical data fields in your cubes that represent the &quot;what&quot;, &quot;where&quot;, &quot;when&quot;, and &quot;who&quot; of your data. They provide the context for slicing and dicing your measures and are essential for grouping, filtering, and organizing analytics queries.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">In Drizzle Cube, dimensions are type-safe fields that reference columns from your Drizzle schema. They support various data types and can include computed values using SQL expressions. All dimensions benefit from Drizzle&#39;s type safety and SQL injection prevention.</p><h2 id=\"basic-dimension-structure\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Basic Dimension Structure</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  name: {\n    name: &#39;name&#39;,           // Internal identifier\n    title: &#39;Employee Name&#39;, // Display name\n    type: &#39;string&#39;,         // Data type\n    sql: employees.name     // Drizzle column reference\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  name: {\n    name: &#39;name&#39;,           // Internal identifier\n    title: &#39;Employee Name&#39;, // Display name\n    type: &#39;string&#39;,         // Data type\n    sql: employees.name     // Drizzle column reference\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"dimension-types\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Dimension Types</h2><h3 id=\"string-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">String Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Used for text and categorical data:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  name: {\n    name: &#39;name&#39;,\n    title: &#39;Employee Name&#39;,\n    type: &#39;string&#39;,\n    sql: employees.name\n  },\n  email: {\n    name: &#39;email&#39;,\n    title: &#39;Email Address&#39;,\n    type: &#39;string&#39;,\n    sql: employees.email\n  },\n  departmentName: {\n    name: &#39;departmentName&#39;,\n    title: &#39;Department&#39;,\n    type: &#39;string&#39;,\n    sql: departments.name // From joined table\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  name: {\n    name: &#39;name&#39;,\n    title: &#39;Employee Name&#39;,\n    type: &#39;string&#39;,\n    sql: employees.name\n  },\n  email: {\n    name: &#39;email&#39;,\n    title: &#39;Email Address&#39;,\n    type: &#39;string&#39;,\n    sql: employees.email\n  },\n  departmentName: {\n    name: &#39;departmentName&#39;,\n    title: &#39;Department&#39;,\n    type: &#39;string&#39;,\n    sql: departments.name // From joined table\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"number-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Number Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">For numeric categorical data:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  id: {\n    name: &#39;id&#39;,\n    title: &#39;Employee ID&#39;,\n    type: &#39;number&#39;,\n    sql: employees.id,\n    primaryKey: true  // Mark as primary key\n  },\n  departmentId: {\n    name: &#39;departmentId&#39;,\n    title: &#39;Department ID&#39;,\n    type: &#39;number&#39;,\n    sql: employees.departmentId\n  },\n  happinessIndex: {\n    name: &#39;happinessIndex&#39;,\n    title: &#39;Happiness Score&#39;,\n    type: &#39;number&#39;,\n    sql: productivity.happinessIndex\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  id: {\n    name: &#39;id&#39;,\n    title: &#39;Employee ID&#39;,\n    type: &#39;number&#39;,\n    sql: employees.id,\n    primaryKey: true  // Mark as primary key\n  },\n  departmentId: {\n    name: &#39;departmentId&#39;,\n    title: &#39;Department ID&#39;,\n    type: &#39;number&#39;,\n    sql: employees.departmentId\n  },\n  happinessIndex: {\n    name: &#39;happinessIndex&#39;,\n    title: &#39;Happiness Score&#39;,\n    type: &#39;number&#39;,\n    sql: productivity.happinessIndex\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"boolean-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Boolean Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">For true/false categorical data:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  isActive: {\n    name: &#39;isActive&#39;,\n    title: &#39;Active Status&#39;,\n    type: &#39;boolean&#39;,\n    sql: employees.active\n  },\n  isDayOff: {\n    name: &#39;isDayOff&#39;,\n    title: &#39;Day Off&#39;,\n    type: &#39;boolean&#39;,\n    sql: productivity.daysOff\n  },\n  isWorkDay: {\n    name: &#39;isWorkDay&#39;,\n    title: &#39;Work Day&#39;,\n    type: &#39;boolean&#39;,\n    sql: sql`NOT ${productivity.daysOff}` // Computed boolean\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  isActive: {\n    name: &#39;isActive&#39;,\n    title: &#39;Active Status&#39;,\n    type: &#39;boolean&#39;,\n    sql: employees.active\n  },\n  isDayOff: {\n    name: &#39;isDayOff&#39;,\n    title: &#39;Day Off&#39;,\n    type: &#39;boolean&#39;,\n    sql: productivity.daysOff\n  },\n  isWorkDay: {\n    name: &#39;isWorkDay&#39;,\n    title: &#39;Work Day&#39;,\n    type: &#39;boolean&#39;,\n    sql: sql`NOT ${productivity.daysOff}` // Computed boolean\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"time-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Time Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">For date and time data - the foundation for time-series analytics:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  createdAt: {\n    name: &#39;createdAt&#39;,\n    title: &#39;Hire Date&#39;,\n    type: &#39;time&#39;,\n    sql: employees.createdAt\n  },\n  date: {\n    name: &#39;date&#39;,\n    title: &#39;Date&#39;,\n    type: &#39;time&#39;,\n    sql: productivity.date\n  },\n  updatedAt: {\n    name: &#39;updatedAt&#39;,\n    title: &#39;Last Updated&#39;,\n    type: &#39;time&#39;,\n    sql: employees.updatedAt\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  createdAt: {\n    name: &#39;createdAt&#39;,\n    title: &#39;Hire Date&#39;,\n    type: &#39;time&#39;,\n    sql: employees.createdAt\n  },\n  date: {\n    name: &#39;date&#39;,\n    title: &#39;Date&#39;,\n    type: &#39;time&#39;,\n    sql: productivity.date\n  },\n  updatedAt: {\n    name: &#39;updatedAt&#39;,\n    title: &#39;Last Updated&#39;,\n    type: &#39;time&#39;,\n    sql: employees.updatedAt\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Time Dimension Usage:</strong>\nTime dimensions are used in <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">timeDimensions</code> queries with granularity:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [],\n  timeDimensions: [{\n    dimension: &#39;Employees.createdAt&#39;,\n    granularity: &#39;month&#39;, // year, quarter, month, week, day, hour\n    dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [],\n  timeDimensions: [{\n    dimension: &#39;Employees.createdAt&#39;,\n    granularity: &#39;month&#39;, // year, quarter, month, week, day, hour\n    dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"computed-dimensions\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Computed Dimensions</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Create dimensions with custom SQL expressions:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  happinessLevel: {\n    name: &#39;happinessLevel&#39;,\n    title: &#39;Happiness Level&#39;,\n    type: &#39;string&#39;,\n    sql: sql`\n      CASE \n        WHEN ${productivity.happinessIndex} &lt;= 3 THEN &#39;Low&#39;\n        WHEN ${productivity.happinessIndex} &lt;= 6 THEN &#39;Medium&#39;\n        WHEN ${productivity.happinessIndex} &lt;= 8 THEN &#39;High&#39;\n        ELSE &#39;Very High&#39;\n      END\n    `\n  },\n  ageGroup: {\n    name: &#39;ageGroup&#39;,\n    title: &#39;Age Group&#39;,\n    type: &#39;string&#39;,\n    sql: sql`\n      CASE \n        WHEN EXTRACT(YEAR FROM AGE(${employees.birthDate})) &lt; 30 THEN &#39;Under 30&#39;\n        WHEN EXTRACT(YEAR FROM AGE(${employees.birthDate})) &lt; 50 THEN &#39;30-49&#39;\n        ELSE &#39;50+&#39;\n      END\n    `\n  },\n  salaryBand: {\n    name: &#39;salaryBand&#39;,\n    title: &#39;Salary Band&#39;,\n    type: &#39;string&#39;,\n    sql: sql`\n      CASE \n        WHEN ${employees.salary} &lt; 50000 THEN &#39;Entry Level&#39;\n        WHEN ${employees.salary} &lt; 100000 THEN &#39;Mid Level&#39;\n        ELSE &#39;Senior Level&#39;\n      END\n    `\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  happinessLevel: {\n    name: &#39;happinessLevel&#39;,\n    title: &#39;Happiness Level&#39;,\n    type: &#39;string&#39;,\n    sql: sql`\n      CASE \n        WHEN ${productivity.happinessIndex} &lt;= 3 THEN &#39;Low&#39;\n        WHEN ${productivity.happinessIndex} &lt;= 6 THEN &#39;Medium&#39;\n        WHEN ${productivity.happinessIndex} &lt;= 8 THEN &#39;High&#39;\n        ELSE &#39;Very High&#39;\n      END\n    `\n  },\n  ageGroup: {\n    name: &#39;ageGroup&#39;,\n    title: &#39;Age Group&#39;,\n    type: &#39;string&#39;,\n    sql: sql`\n      CASE \n        WHEN EXTRACT(YEAR FROM AGE(${employees.birthDate})) &lt; 30 THEN &#39;Under 30&#39;\n        WHEN EXTRACT(YEAR FROM AGE(${employees.birthDate})) &lt; 50 THEN &#39;30-49&#39;\n        ELSE &#39;50+&#39;\n      END\n    `\n  },\n  salaryBand: {\n    name: &#39;salaryBand&#39;,\n    title: &#39;Salary Band&#39;,\n    type: &#39;string&#39;,\n    sql: sql`\n      CASE \n        WHEN ${employees.salary} &lt; 50000 THEN &#39;Entry Level&#39;\n        WHEN ${employees.salary} &lt; 100000 THEN &#39;Mid Level&#39;\n        ELSE &#39;Senior Level&#39;\n      END\n    `\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"primary-key-dimensions\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Primary Key Dimensions</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Mark dimensions as primary keys for unique identification:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  id: {\n    name: &#39;id&#39;,\n    title: &#39;Employee ID&#39;,\n    type: &#39;number&#39;,\n    sql: employees.id,\n    primaryKey: true  // Enables drill-down and unique identification\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  id: {\n    name: &#39;id&#39;,\n    title: &#39;Employee ID&#39;,\n    type: &#39;number&#39;,\n    sql: employees.id,\n    primaryKey: true  // Enables drill-down and unique identification\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Primary Key Benefits:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Enables drill-down functionality</li><li class=\"leading-relaxed\">Improves query performance</li><li class=\"leading-relaxed\">Provides unique record identification</li><li class=\"leading-relaxed\">Required for some visualization types</li></ul><h2 id=\"cross-table-dimensions\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Cross-Table Dimensions</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Access dimensions from joined tables:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// In cube SQL definition\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: productivity,\n  joins: [\n    {\n      table: employees,\n      on: eq(productivity.employeeId, employees.id),\n      type: &#39;left&#39;\n    },\n    {\n      table: departments,\n      on: eq(employees.departmentId, departments.id),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n}),\n\n// Dimensions can reference any joined table\ndimensions: {\n  employeeName: {\n    name: &#39;employeeName&#39;,\n    title: &#39;Employee Name&#39;,\n    type: &#39;string&#39;,\n    sql: employees.name // From joined employees table\n  },\n  departmentName: {\n    name: &#39;departmentName&#39;,\n    title: &#39;Department&#39;,\n    type: &#39;string&#39;,\n    sql: departments.name // From joined departments table\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// In cube SQL definition\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: productivity,\n  joins: [\n    {\n      table: employees,\n      on: eq(productivity.employeeId, employees.id),\n      type: &#39;left&#39;\n    },\n    {\n      table: departments,\n      on: eq(employees.departmentId, departments.id),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n}),\n\n// Dimensions can reference any joined table\ndimensions: {\n  employeeName: {\n    name: &#39;employeeName&#39;,\n    title: &#39;Employee Name&#39;,\n    type: &#39;string&#39;,\n    sql: employees.name // From joined employees table\n  },\n  departmentName: {\n    name: &#39;departmentName&#39;,\n    title: &#39;Department&#39;,\n    type: &#39;string&#39;,\n    sql: departments.name // From joined departments table\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"date-and-time-granularity\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Date and Time Granularity</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Time dimensions support various granularity levels:</p><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Granularity</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Description</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Format Example</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`year`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Annual grouping</td><td class=\"px-4 py-3 text-sm text-gray-600\">2023</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`quarter`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Quarterly grouping</td><td class=\"px-4 py-3 text-sm text-gray-600\">2023-Q1</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`month`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Monthly grouping</td><td class=\"px-4 py-3 text-sm text-gray-600\">2023-01</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`week`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Weekly grouping</td><td class=\"px-4 py-3 text-sm text-gray-600\">2023-W01</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`day`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Daily grouping</td><td class=\"px-4 py-3 text-sm text-gray-600\">2023-01-15</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`hour`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Hourly grouping</td><td class=\"px-4 py-3 text-sm text-gray-600\">2023-01-15 14:00</td></tr></tbody>\n    </table>\n  </div><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Query with time dimensions\nconst timeSeriesQuery = {\n  measures: [&#39;Productivity.totalLinesOfCode&#39;],\n  dimensions: [&#39;Productivity.departmentName&#39;],\n  timeDimensions: [{\n    dimension: &#39;Productivity.date&#39;,\n    granularity: &#39;week&#39;,\n    dateRange: [&#39;2023-01-01&#39;, &#39;2023-03-31&#39;]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Query with time dimensions\nconst timeSeriesQuery = {\n  measures: [&#39;Productivity.totalLinesOfCode&#39;],\n  dimensions: [&#39;Productivity.departmentName&#39;],\n  timeDimensions: [{\n    dimension: &#39;Productivity.date&#39;,\n    granularity: &#39;week&#39;,\n    dateRange: [&#39;2023-01-01&#39;, &#39;2023-03-31&#39;]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"dimension-formatting-and-display\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Dimension Formatting and Display</h2><h3 id=\"custom-formatting\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Formatting</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The server does NOT format any responses, it is returned as is from the database, with the exceptio of time-dimensions.  This is included only to allow the client to format it as per its requirements (e.g. internationalisation, timezones etc).</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  salary: {\n    name: &#39;salary&#39;,\n    title: &#39;Salary&#39;,\n    type: &#39;number&#39;,\n    sql: employees.salary,\n    format: &#39;currency&#39;, // Hint for client formatting\n    description: &#39;Annual salary in USD&#39;\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  salary: {\n    name: &#39;salary&#39;,\n    title: &#39;Salary&#39;,\n    type: &#39;number&#39;,\n    sql: employees.salary,\n    format: &#39;currency&#39;, // Hint for client formatting\n    description: &#39;Annual salary in USD&#39;\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"usage-in-queries\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Usage in Queries</h2><h3 id=\"grouping-by-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Grouping by Dimensions</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const query = {\n  measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;, &#39;Employees.isActive&#39;]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const query = {\n  measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;, &#39;Employees.isActive&#39;]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"filtering-by-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Filtering by Dimensions</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.name&#39;],\n  filters: [\n    {\n      member: &#39;Employees.departmentName&#39;,\n      operator: &#39;equals&#39;,\n      values: [&#39;Engineering&#39;, &#39;Marketing&#39;]\n    },\n    {\n      member: &#39;Employees.isActive&#39;,\n      operator: &#39;equals&#39;,\n      values: [true]\n    }\n  ]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.name&#39;],\n  filters: [\n    {\n      member: &#39;Employees.departmentName&#39;,\n      operator: &#39;equals&#39;,\n      values: [&#39;Engineering&#39;, &#39;Marketing&#39;]\n    },\n    {\n      member: &#39;Employees.isActive&#39;,\n      operator: &#39;equals&#39;,\n      values: [true]\n    }\n  ]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"sorting-by-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Sorting by Dimensions</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  order: [\n    [&#39;Employees.departmentName&#39;, &#39;asc&#39;],\n    [&#39;Employees.count&#39;, &#39;desc&#39;]\n  ]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  order: [\n    [&#39;Employees.departmentName&#39;, &#39;asc&#39;],\n    [&#39;Employees.count&#39;, &#39;desc&#39;]\n  ]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Use Descriptive Names</strong>: Choose clear, business-friendly titles</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Leverage Type Safety</strong>: Always reference Drizzle schema columns</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Primary Keys</strong>: Mark unique identifiers as primary keys</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Computed Logic</strong>: Use SQL expressions for business logic</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Time Dimensions</strong>: Always include relevant time fields</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Cross-Table Access</strong>: Leverage joins for related data</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Formatting Hints</strong>: Add format hints for client display</li></ol><h2 id=\"security-considerations\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Security Considerations</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Dimensions inherit security from the cube&#39;s base SQL:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Security is applied at the cube level\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n}),\n\n// Dimensions automatically respect cube security\ndimensions: {\n  name: {\n    name: &#39;name&#39;,\n    title: &#39;Employee Name&#39;,\n    type: &#39;string&#39;,\n    sql: employees.name // Automatically filtered by organisation\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Security is applied at the cube level\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n}),\n\n// Dimensions automatically respect cube security\ndimensions: {\n  name: {\n    name: &#39;name&#39;,\n    title: &#39;Employee Name&#39;,\n    type: &#39;string&#39;,\n    sql: employees.name // Automatically filtered by organisation\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"testing-dimensions\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Dimensions</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { describe, it, expect } from &#39;vitest&#39;\n\ndescribe(&#39;Employee Dimensions&#39;, () =&gt; {\n  it(&#39;should group by department correctly&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: [&#39;Employees.departmentName&#39;]\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()\n    expect(data).toHaveLength(3) // 3 departments\n    expect(data[0][&#39;Employees.departmentName&#39;]).toBeDefined()\n  })\n  \n  it(&#39;should handle computed dimensions&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: [&#39;Employees.happinessLevel&#39;]\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()\n    const levels = data.map(row =&gt; row[&#39;Employees.happinessLevel&#39;])\n    expect(levels).toContain(&#39;High&#39;)\n    expect(levels).toContain(&#39;Medium&#39;)\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { describe, it, expect } from &#39;vitest&#39;\n\ndescribe(&#39;Employee Dimensions&#39;, () =&gt; {\n  it(&#39;should group by department correctly&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: [&#39;Employees.departmentName&#39;]\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()\n    expect(data).toHaveLength(3) // 3 departments\n    expect(data[0][&#39;Employees.departmentName&#39;]).toBeDefined()\n  })\n  \n  it(&#39;should handle computed dimensions&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: [&#39;Employees.happinessLevel&#39;]\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()\n    const levels = data.map(row =&gt; row[&#39;Employees.happinessLevel&#39;])\n    expect(levels).toContain(&#39;High&#39;)\n    expect(levels).toContain(&#39;Medium&#39;)\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"common-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Patterns</h2><h3 id=\"standard-string-dimension\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Standard String Dimension</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">name: {\n  name: &#39;name&#39;,\n  title: &#39;Name&#39;,\n  type: &#39;string&#39;,\n  sql: table.name\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"name: {\n  name: &#39;name&#39;,\n  title: &#39;Name&#39;,\n  type: &#39;string&#39;,\n  sql: table.name\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"date-dimension\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Date Dimension</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">createdAt: {\n  name: &#39;createdAt&#39;,\n  title: &#39;Created Date&#39;,\n  type: &#39;time&#39;,\n  sql: table.createdAt\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"createdAt: {\n  name: &#39;createdAt&#39;,\n  title: &#39;Created Date&#39;,\n  type: &#39;time&#39;,\n  sql: table.createdAt\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"computed-category\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Computed Category</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">category: {\n  name: &#39;category&#39;,\n  title: &#39;Category&#39;,\n  type: &#39;string&#39;,\n  sql: sql`CASE WHEN ${table.value} &gt; 100 THEN &#39;High&#39; ELSE &#39;Low&#39; END`\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"category: {\n  name: &#39;category&#39;,\n  title: &#39;Category&#39;,\n  type: &#39;string&#39;,\n  sql: sql`CASE WHEN ${table.value} &gt; 100 THEN &#39;High&#39; ELSE &#39;Low&#39; END`\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"semantic-layer/measures\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Measures</a> for metrics and aggregations</li><li class=\"leading-relaxed\">Explore <a href=\"#\" data-help-link=\"semantic-layer/joins\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Joins</a> for multi-cube relationships  </li><li class=\"leading-relaxed\">Review <a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Security</a> patterns</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Dimension validation and constraints</li><li class=\"leading-relaxed\">Automatic dimension suggestions from schema</li><li class=\"leading-relaxed\">Dimension relationship mapping and visualization</li><li class=\"leading-relaxed\">Custom dimension transformations and formatters</li></ul>",
    "path": "semantic-layer/dimensions.md"
  },
  {
    "slug": "semantic-layer/joins",
    "title": "Joins",
    "content": "<h1 id=\"joins\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Joins</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Joins in Drizzle Cube enable you to combine data from multiple tables and cubes, creating rich, interconnected analytics. There are two types of joins: <strong class=\"font-semibold text-slate-700\">table-level joins</strong> within individual cubes and <strong class=\"font-semibold text-slate-700\">cube-level joins</strong> for multi-cube queries.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube&#39;s join system leverages Drizzle ORM&#39;s type-safe join capabilities to provide secure, performant data relationships. All joins maintain security context and prevent SQL injection through parameterized queries.</p><h2 id=\"table-level-joins\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Table-Level Joins</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Table-level joins occur within a single cube&#39;s SQL definition, allowing you to join multiple database tables into one logical dataset.</p><h3 id=\"basic-table-join-structure\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Table Join Structure</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  joins: [\n    {\n      table: departments,\n      on: and(\n        eq(employees.departmentId, departments.id),\n        eq(departments.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  joins: [\n    {\n      table: departments,\n      on: and(\n        eq(employees.departmentId, departments.id),\n        eq(departments.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"join-types\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Join Types</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Left Join</strong> - Most common, includes all records from the main table:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: [\n  {\n    table: departments,\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;left&#39;\n  }\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: [\n  {\n    table: departments,\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;left&#39;\n  }\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Inner Join</strong> - Only records that exist in both tables:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: [\n  {\n    table: departments,\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;inner&#39;\n  }\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: [\n  {\n    table: departments,\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;inner&#39;\n  }\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Right Join</strong> - Includes all records from the joined table:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: [\n  {\n    table: departments,\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;right&#39;\n  }\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: [\n  {\n    table: departments,\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;right&#39;\n  }\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"multi-table-joins\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Multi-Table Joins</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Join multiple tables in a single cube:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export const productivityCube: Cube&lt;Schema&gt; = defineCube(&#39;Productivity&#39;, {\n  title: &#39;Productivity Analytics&#39;,\n  description: &#39;Employee productivity with department and project data&#39;,\n  \n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: productivity,\n    joins: [\n      // Join to employees table\n      {\n        table: employees,\n        on: and(\n          eq(productivity.employeeId, employees.id),\n          eq(employees.organisationId, ctx.securityContext.organisationId)\n        ),\n        type: &#39;left&#39;\n      },\n      // Join to departments through employees\n      {\n        table: departments,\n        on: and(\n          eq(employees.departmentId, departments.id),\n          eq(departments.organisationId, ctx.securityContext.organisationId)\n        ),\n        type: &#39;left&#39;\n      },\n      // Join to projects table\n      {\n        table: projects,\n        on: and(\n          eq(productivity.projectId, projects.id),\n          eq(projects.organisationId, ctx.securityContext.organisationId)\n        ),\n        type: &#39;left&#39;\n      }\n    ],\n    where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n  }),\n  \n  dimensions: {\n    employeeName: {\n      name: &#39;employeeName&#39;,\n      title: &#39;Employee&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    departmentName: {\n      name: &#39;departmentName&#39;,\n      title: &#39;Department&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    },\n    projectName: {\n      name: &#39;projectName&#39;,\n      title: &#39;Project&#39;,\n      type: &#39;string&#39;,\n      sql: projects.name\n    }\n  }\n  // ... measures\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export const productivityCube: Cube&lt;Schema&gt; = defineCube(&#39;Productivity&#39;, {\n  title: &#39;Productivity Analytics&#39;,\n  description: &#39;Employee productivity with department and project data&#39;,\n  \n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: productivity,\n    joins: [\n      // Join to employees table\n      {\n        table: employees,\n        on: and(\n          eq(productivity.employeeId, employees.id),\n          eq(employees.organisationId, ctx.securityContext.organisationId)\n        ),\n        type: &#39;left&#39;\n      },\n      // Join to departments through employees\n      {\n        table: departments,\n        on: and(\n          eq(employees.departmentId, departments.id),\n          eq(departments.organisationId, ctx.securityContext.organisationId)\n        ),\n        type: &#39;left&#39;\n      },\n      // Join to projects table\n      {\n        table: projects,\n        on: and(\n          eq(productivity.projectId, projects.id),\n          eq(projects.organisationId, ctx.securityContext.organisationId)\n        ),\n        type: &#39;left&#39;\n      }\n    ],\n    where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n  }),\n  \n  dimensions: {\n    employeeName: {\n      name: &#39;employeeName&#39;,\n      title: &#39;Employee&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    departmentName: {\n      name: &#39;departmentName&#39;,\n      title: &#39;Department&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    },\n    projectName: {\n      name: &#39;projectName&#39;,\n      title: &#39;Project&#39;,\n      type: &#39;string&#39;,\n      sql: projects.name\n    }\n  }\n  // ... measures\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"security-in-table-joins\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Security in Table Joins</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Critical</strong>: Always include security context filtering in join conditions:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: [\n  {\n    table: departments,\n    on: and(\n      eq(employees.departmentId, departments.id),\n      // REQUIRED: Security filtering on joined table\n      eq(departments.organisationId, ctx.securityContext.organisationId)\n    ),\n    type: &#39;left&#39;\n  }\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: [\n  {\n    table: departments,\n    on: and(\n      eq(employees.departmentId, departments.id),\n      // REQUIRED: Security filtering on joined table\n      eq(departments.organisationId, ctx.securityContext.organisationId)\n    ),\n    type: &#39;left&#39;\n  }\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"cube-level-joins\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Cube-Level Joins</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Cube-level joins define relationships between different cubes, enabling multi-cube queries and cross-cube analysis.</p><h3 id=\"basic-cube-join-structure\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Cube Join Structure</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// In the Employees cube\njoins: {\n  &#39;Departments&#39;: {\n    targetCube: &#39;Departments&#39;,\n    condition: () =&gt; eq(employees.departmentId, departments.id),\n    type: &#39;left&#39;,\n    relationship: &#39;belongsTo&#39;\n  }\n}\n\n// In the Productivity cube  \njoins: {\n  &#39;Employees&#39;: {\n    targetCube: &#39;Employees&#39;,\n    condition: () =&gt; eq(productivity.employeeId, employees.id),\n    type: &#39;left&#39;,\n    relationship: &#39;belongsTo&#39;\n  },\n  &#39;Departments&#39;: {\n    targetCube: &#39;Departments&#39;,\n    condition: () =&gt; and(\n      eq(productivity.employeeId, employees.id),\n      eq(employees.departmentId, departments.id)\n    ),\n    type: &#39;left&#39;,\n    relationship: &#39;belongsTo&#39;\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// In the Employees cube\njoins: {\n  &#39;Departments&#39;: {\n    targetCube: &#39;Departments&#39;,\n    condition: () =&gt; eq(employees.departmentId, departments.id),\n    type: &#39;left&#39;,\n    relationship: &#39;belongsTo&#39;\n  }\n}\n\n// In the Productivity cube  \njoins: {\n  &#39;Employees&#39;: {\n    targetCube: &#39;Employees&#39;,\n    condition: () =&gt; eq(productivity.employeeId, employees.id),\n    type: &#39;left&#39;,\n    relationship: &#39;belongsTo&#39;\n  },\n  &#39;Departments&#39;: {\n    targetCube: &#39;Departments&#39;,\n    condition: () =&gt; and(\n      eq(productivity.employeeId, employees.id),\n      eq(employees.departmentId, departments.id)\n    ),\n    type: &#39;left&#39;,\n    relationship: &#39;belongsTo&#39;\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"relationship-types\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Relationship Types</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">belongsTo</strong> - Many-to-one relationship:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Employee belongs to Department\n&#39;Departments&#39;: {\n  targetCube: &#39;Departments&#39;,\n  condition: () =&gt; eq(employees.departmentId, departments.id),\n  relationship: &#39;belongsTo&#39;\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Employee belongs to Department\n&#39;Departments&#39;: {\n  targetCube: &#39;Departments&#39;,\n  condition: () =&gt; eq(employees.departmentId, departments.id),\n  relationship: &#39;belongsTo&#39;\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">hasMany</strong> - One-to-many relationship:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Department has many Employees\n&#39;Employees&#39;: {\n  targetCube: &#39;Employees&#39;,\n  condition: () =&gt; eq(departments.id, employees.departmentId),\n  relationship: &#39;hasMany&#39;\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Department has many Employees\n&#39;Employees&#39;: {\n  targetCube: &#39;Employees&#39;,\n  condition: () =&gt; eq(departments.id, employees.departmentId),\n  relationship: &#39;hasMany&#39;\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">hasOne</strong> - One-to-one relationship:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Employee has one Profile\n&#39;UserProfiles&#39;: {\n  targetCube: &#39;UserProfiles&#39;, \n  condition: () =&gt; eq(employees.id, userProfiles.employeeId),\n  relationship: &#39;hasOne&#39;\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Employee has one Profile\n&#39;UserProfiles&#39;: {\n  targetCube: &#39;UserProfiles&#39;, \n  condition: () =&gt; eq(employees.id, userProfiles.employeeId),\n  relationship: &#39;hasOne&#39;\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"multi-cube-query-example\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Multi-Cube Query Example</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Query data from multiple cubes using cube joins:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const multiCubeQuery = {\n  measures: [\n    &#39;Employees.count&#39;,           // From Employees cube\n    &#39;Departments.totalBudget&#39;,   // From Departments cube\n    &#39;Productivity.avgLinesOfCode&#39; // From Productivity cube\n  ],\n  dimensions: [\n    &#39;Departments.name&#39;,          // Group by department\n    &#39;Employees.isActive&#39;         // Split by active status\n  ],\n  timeDimensions: [{\n    dimension: &#39;Productivity.date&#39;,\n    granularity: &#39;month&#39;\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const multiCubeQuery = {\n  measures: [\n    &#39;Employees.count&#39;,           // From Employees cube\n    &#39;Departments.totalBudget&#39;,   // From Departments cube\n    &#39;Productivity.avgLinesOfCode&#39; // From Productivity cube\n  ],\n  dimensions: [\n    &#39;Departments.name&#39;,          // Group by department\n    &#39;Employees.isActive&#39;         // Split by active status\n  ],\n  timeDimensions: [{\n    dimension: &#39;Productivity.date&#39;,\n    granularity: &#39;month&#39;\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-join-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Join Patterns</h2><h3 id=\"conditional-joins\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Conditional Joins</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Apply conditional logic in join conditions:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: orders,\n  joins: [\n    {\n      table: customers,\n      on: and(\n        eq(orders.customerId, customers.id),\n        // Conditional join based on security context\n        ctx.securityContext.userRole === &#39;admin&#39; \n          ? sql`true` \n          : eq(customers.salesRepId, ctx.securityContext.userId),\n        eq(customers.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(orders.organisationId, ctx.securityContext.organisationId)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: orders,\n  joins: [\n    {\n      table: customers,\n      on: and(\n        eq(orders.customerId, customers.id),\n        // Conditional join based on security context\n        ctx.securityContext.userRole === &#39;admin&#39; \n          ? sql`true` \n          : eq(customers.salesRepId, ctx.securityContext.userId),\n        eq(customers.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(orders.organisationId, ctx.securityContext.organisationId)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"self-joins\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Self-Joins</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Join a table to itself for hierarchical data:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  joins: [\n    {\n      table: alias(employees, &#39;manager&#39;),\n      on: and(\n        eq(employees.managerId, sql`manager.id`),\n        eq(sql`manager.organisationId`, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n}),\n\ndimensions: {\n  name: {\n    name: &#39;name&#39;,\n    title: &#39;Employee Name&#39;,\n    type: &#39;string&#39;,\n    sql: employees.name\n  },\n  managerName: {\n    name: &#39;managerName&#39;,\n    title: &#39;Manager Name&#39;,\n    type: &#39;string&#39;,\n    sql: sql`manager.name`\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  joins: [\n    {\n      table: alias(employees, &#39;manager&#39;),\n      on: and(\n        eq(employees.managerId, sql`manager.id`),\n        eq(sql`manager.organisationId`, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n}),\n\ndimensions: {\n  name: {\n    name: &#39;name&#39;,\n    title: &#39;Employee Name&#39;,\n    type: &#39;string&#39;,\n    sql: employees.name\n  },\n  managerName: {\n    name: &#39;managerName&#39;,\n    title: &#39;Manager Name&#39;,\n    type: &#39;string&#39;,\n    sql: sql`manager.name`\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"complex-join-conditions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Complex Join Conditions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Use complex conditions for specialized joins:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: [\n  {\n    table: productivityTargets,\n    on: and(\n      eq(employees.id, productivityTargets.employeeId),\n      eq(employees.departmentId, productivityTargets.departmentId),\n      // Join on date range\n      sql`${productivity.date} BETWEEN ${productivityTargets.startDate} AND ${productivityTargets.endDate}`,\n      eq(productivityTargets.organisationId, ctx.securityContext.organisationId)\n    ),\n    type: &#39;left&#39;\n  }\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: [\n  {\n    table: productivityTargets,\n    on: and(\n      eq(employees.id, productivityTargets.employeeId),\n      eq(employees.departmentId, productivityTargets.departmentId),\n      // Join on date range\n      sql`${productivity.date} BETWEEN ${productivityTargets.startDate} AND ${productivityTargets.endDate}`,\n      eq(productivityTargets.organisationId, ctx.securityContext.organisationId)\n    ),\n    type: &#39;left&#39;\n  }\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"join-resolution-and-path-finding\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Join Resolution and Path Finding</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube automatically resolves join paths between cubes using the <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">JoinPathResolver</code>:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Automatic path finding from Productivity → Employees → Departments\nconst query = {\n  measures: [&#39;Productivity.totalLinesOfCode&#39;],\n  dimensions: [&#39;Departments.name&#39;] // Automatically resolves join path\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Automatic path finding from Productivity → Employees → Departments\nconst query = {\n  measures: [&#39;Productivity.totalLinesOfCode&#39;],\n  dimensions: [&#39;Departments.name&#39;] // Automatically resolves join path\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"manual-join-path-control\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Manual Join Path Control</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Control join resolution explicitly:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Force specific join path\njoins: {\n  &#39;Departments&#39;: {\n    targetCube: &#39;Departments&#39;,\n    condition: () =&gt; and(\n      // Explicit multi-step join path\n      eq(productivity.employeeId, employees.id),\n      eq(employees.departmentId, departments.id)\n    ),\n    type: &#39;left&#39;,\n    relationship: &#39;belongsTo&#39;,\n    // Optional: specify intermediate cubes\n    path: [&#39;Employees&#39;]\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Force specific join path\njoins: {\n  &#39;Departments&#39;: {\n    targetCube: &#39;Departments&#39;,\n    condition: () =&gt; and(\n      // Explicit multi-step join path\n      eq(productivity.employeeId, employees.id),\n      eq(employees.departmentId, departments.id)\n    ),\n    type: &#39;left&#39;,\n    relationship: &#39;belongsTo&#39;,\n    // Optional: specify intermediate cubes\n    path: [&#39;Employees&#39;]\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance-optimization\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Optimization</h2><h3 id=\"join-order-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Join Order Optimization</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Structure joins for optimal performance:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Good: Start with most selective table\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: activeEmployees, // Pre-filtered view\n  joins: [\n    {\n      table: departments,\n      on: eq(activeEmployees.departmentId, departments.id),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(activeEmployees.organisationId, ctx.securityContext.organisationId)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Good: Start with most selective table\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: activeEmployees, // Pre-filtered view\n  joins: [\n    {\n      table: departments,\n      on: eq(activeEmployees.departmentId, departments.id),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(activeEmployees.organisationId, ctx.securityContext.organisationId)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"index-friendly-joins\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Index-Friendly Joins</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Ensure join conditions use indexed columns:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: [\n  {\n    table: departments,\n    // Good: uses indexed foreign key\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;left&#39;\n  }\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: [\n  {\n    table: departments,\n    // Good: uses indexed foreign key\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;left&#39;\n  }\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"testing-joins\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Joins</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">describe(&#39;Cube Joins&#39;, () =&gt; {\n  it(&#39;should join employees with departments&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: [&#39;Employees.departmentName&#39;]\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()\n    expect(data.every(row =&gt; row[&#39;Employees.departmentName&#39;])).toBeTruthy()\n  })\n  \n  it(&#39;should handle multi-cube queries&#39;, async () =&gt; {\n    const query = {\n      measures: [\n        &#39;Employees.count&#39;,\n        &#39;Productivity.avgLinesOfCode&#39;\n      ],\n      dimensions: [&#39;Departments.name&#39;]\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()\n    expect(data).toHaveLength(3) // 3 departments\n    data.forEach(row =&gt; {\n      expect(row[&#39;Employees.count&#39;]).toBeGreaterThan(0)\n      expect(row[&#39;Productivity.avgLinesOfCode&#39;]).toBeGreaterThan(0)\n    })\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"describe(&#39;Cube Joins&#39;, () =&gt; {\n  it(&#39;should join employees with departments&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: [&#39;Employees.departmentName&#39;]\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()\n    expect(data.every(row =&gt; row[&#39;Employees.departmentName&#39;])).toBeTruthy()\n  })\n  \n  it(&#39;should handle multi-cube queries&#39;, async () =&gt; {\n    const query = {\n      measures: [\n        &#39;Employees.count&#39;,\n        &#39;Productivity.avgLinesOfCode&#39;\n      ],\n      dimensions: [&#39;Departments.name&#39;]\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()\n    expect(data).toHaveLength(3) // 3 departments\n    data.forEach(row =&gt; {\n      expect(row[&#39;Employees.count&#39;]).toBeGreaterThan(0)\n      expect(row[&#39;Productivity.avgLinesOfCode&#39;]).toBeGreaterThan(0)\n    })\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security First</strong>: Always include security context in join conditions</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Performance</strong>: Use indexed columns for join conditions</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type Safety</strong>: Leverage Drizzle&#39;s type system for join validation</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Clarity</strong>: Use descriptive relationship names</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Testing</strong>: Verify join correctness and security isolation</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Documentation</strong>: Document complex join logic</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Optimization</strong>: Structure joins for query performance</li></ol><h2 id=\"common-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Patterns</h2><h3 id=\"basic-foreign-key-join\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Foreign Key Join</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: [\n  {\n    table: departments,\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;left&#39;\n  }\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: [\n  {\n    table: departments,\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;left&#39;\n  }\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"secure-multi-table-join\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Secure Multi-Table Join</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: [\n  {\n    table: departments,\n    on: and(\n      eq(employees.departmentId, departments.id),\n      eq(departments.organisationId, ctx.securityContext.organisationId)\n    ),\n    type: &#39;left&#39;\n  }\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: [\n  {\n    table: departments,\n    on: and(\n      eq(employees.departmentId, departments.id),\n      eq(departments.organisationId, ctx.securityContext.organisationId)\n    ),\n    type: &#39;left&#39;\n  }\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"cube-level-relationship\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Cube-Level Relationship</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: {\n  &#39;Departments&#39;: {\n    targetCube: &#39;Departments&#39;,\n    condition: () =&gt; eq(employees.departmentId, departments.id),\n    relationship: &#39;belongsTo&#39;\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: {\n  &#39;Departments&#39;: {\n    targetCube: &#39;Departments&#39;,\n    condition: () =&gt; eq(employees.departmentId, departments.id),\n    relationship: &#39;belongsTo&#39;\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"troubleshooting\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Troubleshooting</h2><h3 id=\"join-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Join Issues</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Problem</strong>: Duplicate records in results\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Check for many-to-many relationships and use appropriate aggregation</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Problem</strong>: Missing data after join\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Verify join type (left vs inner) and foreign key integrity</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Problem</strong>: Security context not applied\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Ensure all joined tables include security filtering</p><h3 id=\"performance-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Performance Issues</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Problem</strong>: Slow join queries\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Add database indexes on join columns and optimize join order</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Problem</strong>: Cartesian products\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Verify join conditions are specific enough</p><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Security</a> patterns for multi-tenant systems</li><li class=\"leading-relaxed\">Explore <a href=\"#\" data-help-link=\"semantic-layer/cubes\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Cubes</a> for complete cube definitions</li><li class=\"leading-relaxed\">Understand <a href=\"#\" data-help-link=\"semantic-layer/dimensions\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Dimensions</a> and <a href=\"#\" data-help-link=\"semantic-layer/measures\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Measures</a></li><li class=\"leading-relaxed\">Review database indexing strategies for optimal join performance</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Visual join relationship designer</li><li class=\"leading-relaxed\">Automatic join path optimization suggestions</li><li class=\"leading-relaxed\">Join performance analysis tools</li><li class=\"leading-relaxed\">Advanced relationship types (polymorphic, conditional)</li><li class=\"leading-relaxed\">Join validation and testing framework</li></ul>",
    "path": "semantic-layer/joins.md"
  },
  {
    "slug": "semantic-layer/measures",
    "title": "Measures",
    "content": "<h1 id=\"measures\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Measures</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Measures are the quantitative metrics in your cubes that represent the &quot;how much&quot;, &quot;how many&quot;, and &quot;how often&quot; of your data. They define aggregations, calculations, and key performance indicators (KPIs) that drive business insights and decision-making.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">In Drizzle Cube, measures are type-safe aggregation functions that operate on your data. They leverage Drizzle&#39;s SQL builder for secure, optimized queries and support all major aggregation types plus complex calculated measures using SQL expressions.</p><h2 id=\"basic-measure-structure\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Basic Measure Structure</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  count: {\n    name: &#39;count&#39;,           // Internal identifier\n    title: &#39;Total Records&#39;,  // Display name\n    type: &#39;count&#39;,          // Aggregation type\n    sql: table.id           // Drizzle column reference\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  count: {\n    name: &#39;count&#39;,           // Internal identifier\n    title: &#39;Total Records&#39;,  // Display name\n    type: &#39;count&#39;,          // Aggregation type\n    sql: table.id           // Drizzle column reference\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"measure-types\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Measure Types</h2><h3 id=\"count-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Count Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Count measures are the most common and count occurrences of records:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  // Basic count - counts all records\n  count: {\n    name: &#39;count&#39;,\n    title: &#39;Total Employees&#39;,\n    type: &#39;count&#39;,\n    sql: employees.id\n  },\n  \n  // Conditional count with filters\n  activeCount: {\n    name: &#39;activeCount&#39;,\n    title: &#39;Active Employees&#39;,\n    type: &#39;count&#39;,\n    sql: employees.id,\n    filters: [\n      () =&gt; eq(employees.active, true)\n    ]\n  },\n  \n  // Working days count\n  workingDaysCount: {\n    name: &#39;workingDaysCount&#39;,\n    title: &#39;Working Days&#39;,\n    type: &#39;count&#39;,\n    sql: productivity.id,\n    filters: [\n      () =&gt; eq(productivity.daysOff, false)\n    ]\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  // Basic count - counts all records\n  count: {\n    name: &#39;count&#39;,\n    title: &#39;Total Employees&#39;,\n    type: &#39;count&#39;,\n    sql: employees.id\n  },\n  \n  // Conditional count with filters\n  activeCount: {\n    name: &#39;activeCount&#39;,\n    title: &#39;Active Employees&#39;,\n    type: &#39;count&#39;,\n    sql: employees.id,\n    filters: [\n      () =&gt; eq(employees.active, true)\n    ]\n  },\n  \n  // Working days count\n  workingDaysCount: {\n    name: &#39;workingDaysCount&#39;,\n    title: &#39;Working Days&#39;,\n    type: &#39;count&#39;,\n    sql: productivity.id,\n    filters: [\n      () =&gt; eq(productivity.daysOff, false)\n    ]\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"sum-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Sum Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Sum measures aggregate numeric values:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  totalSalary: {\n    name: &#39;totalSalary&#39;,\n    title: &#39;Total Salary&#39;,\n    type: &#39;sum&#39;,\n    sql: employees.salary\n  },\n  \n  totalLinesOfCode: {\n    name: &#39;totalLinesOfCode&#39;,\n    title: &#39;Total Lines of Code&#39;,\n    type: &#39;sum&#39;,\n    sql: productivity.linesOfCode\n  },\n  \n  totalBudget: {\n    name: &#39;totalBudget&#39;,\n    title: &#39;Total Budget&#39;,\n    type: &#39;sum&#39;,\n    sql: departments.budget\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  totalSalary: {\n    name: &#39;totalSalary&#39;,\n    title: &#39;Total Salary&#39;,\n    type: &#39;sum&#39;,\n    sql: employees.salary\n  },\n  \n  totalLinesOfCode: {\n    name: &#39;totalLinesOfCode&#39;,\n    title: &#39;Total Lines of Code&#39;,\n    type: &#39;sum&#39;,\n    sql: productivity.linesOfCode\n  },\n  \n  totalBudget: {\n    name: &#39;totalBudget&#39;,\n    title: &#39;Total Budget&#39;,\n    type: &#39;sum&#39;,\n    sql: departments.budget\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"average-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Average Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Average measures calculate mean values:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  avgSalary: {\n    name: &#39;avgSalary&#39;,\n    title: &#39;Average Salary&#39;,\n    type: &#39;avg&#39;,\n    sql: employees.salary,\n    format: &#39;currency&#39; // Formatting hint\n  },\n  \n  avgLinesOfCode: {\n    name: &#39;avgLinesOfCode&#39;,\n    title: &#39;Average Lines of Code&#39;,\n    type: &#39;avg&#39;,\n    sql: productivity.linesOfCode\n  },\n  \n  avgHappinessIndex: {\n    name: &#39;avgHappinessIndex&#39;,\n    title: &#39;Average Happiness&#39;,\n    type: &#39;avg&#39;,\n    sql: productivity.happinessIndex\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  avgSalary: {\n    name: &#39;avgSalary&#39;,\n    title: &#39;Average Salary&#39;,\n    type: &#39;avg&#39;,\n    sql: employees.salary,\n    format: &#39;currency&#39; // Formatting hint\n  },\n  \n  avgLinesOfCode: {\n    name: &#39;avgLinesOfCode&#39;,\n    title: &#39;Average Lines of Code&#39;,\n    type: &#39;avg&#39;,\n    sql: productivity.linesOfCode\n  },\n  \n  avgHappinessIndex: {\n    name: &#39;avgHappinessIndex&#39;,\n    title: &#39;Average Happiness&#39;,\n    type: &#39;avg&#39;,\n    sql: productivity.happinessIndex\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"minmax-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Min/Max Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Find minimum and maximum values:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  minSalary: {\n    name: &#39;minSalary&#39;,\n    title: &#39;Minimum Salary&#39;,\n    type: &#39;min&#39;,\n    sql: employees.salary\n  },\n  \n  maxSalary: {\n    name: &#39;maxSalary&#39;,\n    title: &#39;Maximum Salary&#39;,\n    type: &#39;max&#39;,\n    sql: employees.salary\n  },\n  \n  minHappinessIndex: {\n    name: &#39;minHappinessIndex&#39;,\n    title: &#39;Lowest Happiness Score&#39;,\n    type: &#39;min&#39;,\n    sql: productivity.happinessIndex\n  },\n  \n  maxLinesOfCode: {\n    name: &#39;maxLinesOfCode&#39;,\n    title: &#39;Peak Daily Output&#39;,\n    type: &#39;max&#39;,\n    sql: productivity.linesOfCode\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  minSalary: {\n    name: &#39;minSalary&#39;,\n    title: &#39;Minimum Salary&#39;,\n    type: &#39;min&#39;,\n    sql: employees.salary\n  },\n  \n  maxSalary: {\n    name: &#39;maxSalary&#39;,\n    title: &#39;Maximum Salary&#39;,\n    type: &#39;max&#39;,\n    sql: employees.salary\n  },\n  \n  minHappinessIndex: {\n    name: &#39;minHappinessIndex&#39;,\n    title: &#39;Lowest Happiness Score&#39;,\n    type: &#39;min&#39;,\n    sql: productivity.happinessIndex\n  },\n  \n  maxLinesOfCode: {\n    name: &#39;maxLinesOfCode&#39;,\n    title: &#39;Peak Daily Output&#39;,\n    type: &#39;max&#39;,\n    sql: productivity.linesOfCode\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"count-distinct-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Count Distinct Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Count unique values:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  countDistinctEmployees: {\n    name: &#39;countDistinctEmployees&#39;,\n    title: &#39;Unique Employees&#39;,\n    type: &#39;countDistinct&#39;,\n    sql: productivity.employeeId\n  },\n  \n  countDistinctDepartments: {\n    name: &#39;countDistinctDepartments&#39;,\n    title: &#39;Unique Departments&#39;,\n    type: &#39;countDistinct&#39;,\n    sql: employees.departmentId\n  },\n  \n  uniqueProjects: {\n    name: &#39;uniqueProjects&#39;,\n    title: &#39;Active Projects&#39;,\n    type: &#39;countDistinct&#39;,\n    sql: tasks.projectId\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  countDistinctEmployees: {\n    name: &#39;countDistinctEmployees&#39;,\n    title: &#39;Unique Employees&#39;,\n    type: &#39;countDistinct&#39;,\n    sql: productivity.employeeId\n  },\n  \n  countDistinctDepartments: {\n    name: &#39;countDistinctDepartments&#39;,\n    title: &#39;Unique Departments&#39;,\n    type: &#39;countDistinct&#39;,\n    sql: employees.departmentId\n  },\n  \n  uniqueProjects: {\n    name: &#39;uniqueProjects&#39;,\n    title: &#39;Active Projects&#39;,\n    type: &#39;countDistinct&#39;,\n    sql: tasks.projectId\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-measures\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Measures</h2><h3 id=\"calculated-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Calculated Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create complex calculations using SQL expressions:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  productivityScore: {\n    name: &#39;productivityScore&#39;,\n    title: &#39;Productivity Score&#39;,\n    type: &#39;avg&#39;,\n    sql: sql`(${productivity.linesOfCode} + ${productivity.pullRequests} * 50 + ${productivity.liveDeployments} * 100)`,\n    description: &#39;Composite score based on code output, reviews, and deployments&#39;\n  },\n  \n  salaryPerEmployee: {\n    name: &#39;salaryPerEmployee&#39;,\n    title: &#39;Salary Per Employee&#39;,\n    type: &#39;number&#39;,\n    sql: sql`CAST(SUM(${employees.salary}) AS DECIMAL(10,2)) / COUNT(DISTINCT ${employees.id})`\n  },\n  \n  efficiencyRatio: {\n    name: &#39;efficiencyRatio&#39;,\n    title: &#39;Efficiency Ratio&#39;,\n    type: &#39;avg&#39;,\n    sql: sql`CASE \n      WHEN ${productivity.hoursWorked} &gt; 0 \n      THEN ${productivity.linesOfCode}::DECIMAL / ${productivity.hoursWorked}\n      ELSE 0 \n    END`\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  productivityScore: {\n    name: &#39;productivityScore&#39;,\n    title: &#39;Productivity Score&#39;,\n    type: &#39;avg&#39;,\n    sql: sql`(${productivity.linesOfCode} + ${productivity.pullRequests} * 50 + ${productivity.liveDeployments} * 100)`,\n    description: &#39;Composite score based on code output, reviews, and deployments&#39;\n  },\n  \n  salaryPerEmployee: {\n    name: &#39;salaryPerEmployee&#39;,\n    title: &#39;Salary Per Employee&#39;,\n    type: &#39;number&#39;,\n    sql: sql`CAST(SUM(${employees.salary}) AS DECIMAL(10,2)) / COUNT(DISTINCT ${employees.id})`\n  },\n  \n  efficiencyRatio: {\n    name: &#39;efficiencyRatio&#39;,\n    title: &#39;Efficiency Ratio&#39;,\n    type: &#39;avg&#39;,\n    sql: sql`CASE \n      WHEN ${productivity.hoursWorked} &gt; 0 \n      THEN ${productivity.linesOfCode}::DECIMAL / ${productivity.hoursWorked}\n      ELSE 0 \n    END`\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"percentage-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Percentage Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Calculate percentages and ratios:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  activeEmployeePercentage: {\n    name: &#39;activeEmployeePercentage&#39;,\n    title: &#39;Active Employee %&#39;,\n    type: &#39;number&#39;,\n    sql: sql`\n      (COUNT(CASE WHEN ${employees.active} = true THEN 1 END)::DECIMAL / COUNT(*)::DECIMAL) * 100\n    `,\n    format: &#39;percent&#39;\n  },\n  \n  happinessAboveAverage: {\n    name: &#39;happinessAboveAverage&#39;,\n    title: &#39;Above Average Happiness %&#39;,\n    type: &#39;number&#39;,\n    sql: sql`\n      (COUNT(CASE WHEN ${productivity.happinessIndex} &gt; 5 THEN 1 END)::DECIMAL / COUNT(*)::DECIMAL) * 100\n    `\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  activeEmployeePercentage: {\n    name: &#39;activeEmployeePercentage&#39;,\n    title: &#39;Active Employee %&#39;,\n    type: &#39;number&#39;,\n    sql: sql`\n      (COUNT(CASE WHEN ${employees.active} = true THEN 1 END)::DECIMAL / COUNT(*)::DECIMAL) * 100\n    `,\n    format: &#39;percent&#39;\n  },\n  \n  happinessAboveAverage: {\n    name: &#39;happinessAboveAverage&#39;,\n    title: &#39;Above Average Happiness %&#39;,\n    type: &#39;number&#39;,\n    sql: sql`\n      (COUNT(CASE WHEN ${productivity.happinessIndex} &gt; 5 THEN 1 END)::DECIMAL / COUNT(*)::DECIMAL) * 100\n    `\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"conditional-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Conditional Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Measures with complex filtering logic:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  highProductivityDays: {\n    name: &#39;highProductivityDays&#39;,\n    title: &#39;High Productivity Days&#39;,\n    type: &#39;count&#39;,\n    sql: productivity.id,\n    filters: [\n      () =&gt; sql`${productivity.linesOfCode} &gt; 200`\n    ]\n  },\n  \n  happyWorkDays: {\n    name: &#39;happyWorkDays&#39;,\n    title: &#39;Happy Work Days&#39;,\n    type: &#39;count&#39;,\n    sql: productivity.id,\n    filters: [\n      () =&gt; and(\n        eq(productivity.daysOff, false),\n        sql`${productivity.happinessIndex} &gt;= 7`\n      )\n    ]\n  },\n  \n  seniorEmployees: {\n    name: &#39;seniorEmployees&#39;,\n    title: &#39;Senior Employees&#39;,\n    type: &#39;count&#39;,\n    sql: employees.id,\n    filters: [\n      () =&gt; sql`${employees.salary} &gt;= 100000`\n    ]\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  highProductivityDays: {\n    name: &#39;highProductivityDays&#39;,\n    title: &#39;High Productivity Days&#39;,\n    type: &#39;count&#39;,\n    sql: productivity.id,\n    filters: [\n      () =&gt; sql`${productivity.linesOfCode} &gt; 200`\n    ]\n  },\n  \n  happyWorkDays: {\n    name: &#39;happyWorkDays&#39;,\n    title: &#39;Happy Work Days&#39;,\n    type: &#39;count&#39;,\n    sql: productivity.id,\n    filters: [\n      () =&gt; and(\n        eq(productivity.daysOff, false),\n        sql`${productivity.happinessIndex} &gt;= 7`\n      )\n    ]\n  },\n  \n  seniorEmployees: {\n    name: &#39;seniorEmployees&#39;,\n    title: &#39;Senior Employees&#39;,\n    type: &#39;count&#39;,\n    sql: employees.id,\n    filters: [\n      () =&gt; sql`${employees.salary} &gt;= 100000`\n    ]\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"measure-filters\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Measure Filters</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Apply conditional logic to measures using filters. Measure filters are functions that receive a <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">QueryContext</code> parameter and return Drizzle SQL expressions.</p><h3 id=\"filter-function-signature\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Filter Function Signature</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">filters: Array&lt;(ctx: QueryContext) =&gt; SQL&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"filters: Array&lt;(ctx: QueryContext) =&gt; SQL&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">The <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">QueryContext</code> parameter provides access to:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">ctx.db</code> - The Drizzle database instance</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">ctx.schema</code> - Your database schema with all table definitions</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">ctx.securityContext</code> - User/tenant-specific data for filtering (e.g., <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">organisationId</code>)</li></ul><h3 id=\"when-to-use-the-context-parameter\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">When to Use the Context Parameter</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Simple filters</strong> that only reference table columns: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">() =&amp;gt;</code> (no parameter needed)</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security-aware filters</strong> that need tenant isolation: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">(ctx) =&amp;gt;</code> to access <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">securityContext</code></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dynamic filters</strong> that need runtime data: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">(ctx) =&amp;gt;</code> to access database or schema information</li></ul><h3 id=\"filter-examples\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Filter Examples</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  // Simple filter - no context parameter needed\n  premiumCustomers: {\n    name: &#39;premiumCustomers&#39;,\n    title: &#39;Premium Customers&#39;,\n    type: &#39;count&#39;,\n    sql: customers.id,\n    filters: [\n      () =&gt; eq(customers.tier, &#39;premium&#39;)\n    ]\n  },\n  \n  // Multiple filter conditions (AND logic) - no context needed\n  activeHighValueCustomers: {\n    name: &#39;activeHighValueCustomers&#39;,\n    title: &#39;Active High-Value Customers&#39;,\n    type: &#39;count&#39;,\n    sql: customers.id,\n    filters: [\n      () =&gt; eq(customers.status, &#39;active&#39;),\n      () =&gt; sql`${customers.totalValue} &gt; 10000`\n    ]\n  },\n  \n  // Security-aware filter using ctx.securityContext\n  qualifiedLeads: {\n    name: &#39;qualifiedLeads&#39;,\n    title: &#39;Qualified Leads&#39;,\n    type: &#39;count&#39;,\n    sql: leads.id,\n    filters: [\n      (ctx) =&gt; and(\n        eq(leads.status, &#39;qualified&#39;),\n        sql`${leads.score} &gt;= 75`,\n        eq(leads.organisationId, ctx.securityContext.organisationId)\n      )\n    ]\n  },\n  \n  // Multi-tenant filtering - essential for security\n  tenantCustomers: {\n    name: &#39;tenantCustomers&#39;,\n    title: &#39;Tenant Customers&#39;,\n    type: &#39;count&#39;,\n    sql: customers.id,\n    filters: [\n      (ctx) =&gt; eq(customers.organisationId, ctx.securityContext.organisationId)\n    ]\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  // Simple filter - no context parameter needed\n  premiumCustomers: {\n    name: &#39;premiumCustomers&#39;,\n    title: &#39;Premium Customers&#39;,\n    type: &#39;count&#39;,\n    sql: customers.id,\n    filters: [\n      () =&gt; eq(customers.tier, &#39;premium&#39;)\n    ]\n  },\n  \n  // Multiple filter conditions (AND logic) - no context needed\n  activeHighValueCustomers: {\n    name: &#39;activeHighValueCustomers&#39;,\n    title: &#39;Active High-Value Customers&#39;,\n    type: &#39;count&#39;,\n    sql: customers.id,\n    filters: [\n      () =&gt; eq(customers.status, &#39;active&#39;),\n      () =&gt; sql`${customers.totalValue} &gt; 10000`\n    ]\n  },\n  \n  // Security-aware filter using ctx.securityContext\n  qualifiedLeads: {\n    name: &#39;qualifiedLeads&#39;,\n    title: &#39;Qualified Leads&#39;,\n    type: &#39;count&#39;,\n    sql: leads.id,\n    filters: [\n      (ctx) =&gt; and(\n        eq(leads.status, &#39;qualified&#39;),\n        sql`${leads.score} &gt;= 75`,\n        eq(leads.organisationId, ctx.securityContext.organisationId)\n      )\n    ]\n  },\n  \n  // Multi-tenant filtering - essential for security\n  tenantCustomers: {\n    name: &#39;tenantCustomers&#39;,\n    title: &#39;Tenant Customers&#39;,\n    type: &#39;count&#39;,\n    sql: customers.id,\n    filters: [\n      (ctx) =&gt; eq(customers.organisationId, ctx.securityContext.organisationId)\n    ]\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"security-context-usage\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Security Context Usage</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">securityContext</code> is automatically passed to your cubes and contains user/tenant-specific information:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Example security context structure\nconst securityContext = {\n  organisationId: &#39;tenant-123&#39;,\n  userId: &#39;user-456&#39;,\n  roles: [&#39;admin&#39;],\n  // ... other user/tenant data\n}\n\n// Using security context in filters\nfilters: [\n  (ctx) =&gt; eq(table.organisationId, ctx.securityContext.organisationId),\n  (ctx) =&gt; eq(table.createdBy, ctx.securityContext.userId)\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Example security context structure\nconst securityContext = {\n  organisationId: &#39;tenant-123&#39;,\n  userId: &#39;user-456&#39;,\n  roles: [&#39;admin&#39;],\n  // ... other user/tenant data\n}\n\n// Using security context in filters\nfilters: [\n  (ctx) =&gt; eq(table.organisationId, ctx.securityContext.organisationId),\n  (ctx) =&gt; eq(table.createdBy, ctx.securityContext.userId)\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"advanced-filter-patterns\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Advanced Filter Patterns</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  // Conditional filtering based on user role\n  adminOnlyData: {\n    name: &#39;adminOnlyData&#39;,\n    title: &#39;Admin Only Data&#39;,\n    type: &#39;count&#39;,\n    sql: sensitiveTable.id,\n    filters: [\n      (ctx) =&gt; and(\n        eq(sensitiveTable.organisationId, ctx.securityContext.organisationId),\n        sql`${ctx.securityContext.roles}::jsonb ? &#39;admin&#39;` // PostgreSQL JSON check\n      )\n    ]\n  },\n  \n  // Using schema references from context\n  crossTableFilter: {\n    name: &#39;crossTableFilter&#39;,\n    title: &#39;Cross Table Filter&#39;,\n    type: &#39;count&#39;,\n    sql: orders.id,\n    filters: [\n      (ctx) =&gt; and(\n        eq(orders.organisationId, ctx.securityContext.organisationId),\n        // Could reference ctx.schema.users, ctx.schema.products, etc.\n        sql`EXISTS (SELECT 1 FROM users WHERE users.id = ${orders.customerId} AND users.active = true)`\n      )\n    ]\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  // Conditional filtering based on user role\n  adminOnlyData: {\n    name: &#39;adminOnlyData&#39;,\n    title: &#39;Admin Only Data&#39;,\n    type: &#39;count&#39;,\n    sql: sensitiveTable.id,\n    filters: [\n      (ctx) =&gt; and(\n        eq(sensitiveTable.organisationId, ctx.securityContext.organisationId),\n        sql`${ctx.securityContext.roles}::jsonb ? &#39;admin&#39;` // PostgreSQL JSON check\n      )\n    ]\n  },\n  \n  // Using schema references from context\n  crossTableFilter: {\n    name: &#39;crossTableFilter&#39;,\n    title: &#39;Cross Table Filter&#39;,\n    type: &#39;count&#39;,\n    sql: orders.id,\n    filters: [\n      (ctx) =&gt; and(\n        eq(orders.organisationId, ctx.securityContext.organisationId),\n        // Could reference ctx.schema.users, ctx.schema.products, etc.\n        sql`EXISTS (SELECT 1 FROM users WHERE users.id = ${orders.customerId} AND users.active = true)`\n      )\n    ]\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"why-filters-must-be-functions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Why Filters Must Be Functions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Filters must be functions because they:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Need runtime context</strong> - Access to current user, tenant, and database connection</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Generate type-safe SQL</strong> - Return Drizzle SQL expressions with proper typing</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Support security isolation</strong> - Automatically filter by tenant/organization</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Enable dynamic filtering</strong> - Can use runtime data to build conditional logic</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Maintain SQL injection protection</strong> - Use Drizzle&#39;s parameterized queries</li></ol><h2 id=\"time-based-measures\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Time-Based Measures</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Measures that work with time dimensions:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  // Daily averages\n  dailyAvgLinesOfCode: {\n    name: &#39;dailyAvgLinesOfCode&#39;,\n    title: &#39;Daily Average Lines of Code&#39;,\n    type: &#39;avg&#39;,\n    sql: productivity.linesOfCode,\n    description: &#39;Average lines of code per day&#39;\n  },\n  \n  // Growth rates (requires window functions)\n  monthlyGrowthRate: {\n    name: &#39;monthlyGrowthRate&#39;,\n    title: &#39;Monthly Growth Rate&#39;,\n    type: &#39;number&#39;,\n    sql: sql`\n      ((COUNT(*) - LAG(COUNT(*)) OVER (ORDER BY DATE_TRUNC(&#39;month&#39;, ${table.createdAt})))::DECIMAL \n       / LAG(COUNT(*)) OVER (ORDER BY DATE_TRUNC(&#39;month&#39;, ${table.createdAt}))) * 100\n    `\n  },\n  \n  // Running totals\n  runningTotal: {\n    name: &#39;runningTotal&#39;,\n    title: &#39;Running Total&#39;,\n    type: &#39;number&#39;,\n    sql: sql`SUM(${table.amount}) OVER (ORDER BY ${table.date} ROWS UNBOUNDED PRECEDING)`\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  // Daily averages\n  dailyAvgLinesOfCode: {\n    name: &#39;dailyAvgLinesOfCode&#39;,\n    title: &#39;Daily Average Lines of Code&#39;,\n    type: &#39;avg&#39;,\n    sql: productivity.linesOfCode,\n    description: &#39;Average lines of code per day&#39;\n  },\n  \n  // Growth rates (requires window functions)\n  monthlyGrowthRate: {\n    name: &#39;monthlyGrowthRate&#39;,\n    title: &#39;Monthly Growth Rate&#39;,\n    type: &#39;number&#39;,\n    sql: sql`\n      ((COUNT(*) - LAG(COUNT(*)) OVER (ORDER BY DATE_TRUNC(&#39;month&#39;, ${table.createdAt})))::DECIMAL \n       / LAG(COUNT(*)) OVER (ORDER BY DATE_TRUNC(&#39;month&#39;, ${table.createdAt}))) * 100\n    `\n  },\n  \n  // Running totals\n  runningTotal: {\n    name: &#39;runningTotal&#39;,\n    title: &#39;Running Total&#39;,\n    type: &#39;number&#39;,\n    sql: sql`SUM(${table.amount}) OVER (ORDER BY ${table.date} ROWS UNBOUNDED PRECEDING)`\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"formatting-and-display-options\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Formatting and Display Options</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  revenue: {\n    name: &#39;revenue&#39;,\n    title: &#39;Total Revenue&#39;,\n    type: &#39;sum&#39;,\n    sql: orders.amount,\n    format: &#39;currency&#39;,          // Currency formatting\n    description: &#39;Total revenue from all orders&#39;\n  },\n  \n  conversionRate: {\n    name: &#39;conversionRate&#39;,\n    title: &#39;Conversion Rate&#39;,\n    type: &#39;number&#39;,\n    sql: sql`(${conversions.count}::DECIMAL / ${visitors.count}) * 100`,\n    format: &#39;percent&#39;,           // Percentage formatting\n    description: &#39;Visitor to customer conversion rate&#39;\n  },\n  \n  responseTime: {\n    name: &#39;responseTime&#39;,\n    title: &#39;Avg Response Time&#39;,\n    type: &#39;avg&#39;,\n    sql: requests.responseTime,\n    format: &#39;number&#39;,            // Number formatting with decimals\n    description: &#39;Average API response time in milliseconds&#39;\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  revenue: {\n    name: &#39;revenue&#39;,\n    title: &#39;Total Revenue&#39;,\n    type: &#39;sum&#39;,\n    sql: orders.amount,\n    format: &#39;currency&#39;,          // Currency formatting\n    description: &#39;Total revenue from all orders&#39;\n  },\n  \n  conversionRate: {\n    name: &#39;conversionRate&#39;,\n    title: &#39;Conversion Rate&#39;,\n    type: &#39;number&#39;,\n    sql: sql`(${conversions.count}::DECIMAL / ${visitors.count}) * 100`,\n    format: &#39;percent&#39;,           // Percentage formatting\n    description: &#39;Visitor to customer conversion rate&#39;\n  },\n  \n  responseTime: {\n    name: &#39;responseTime&#39;,\n    title: &#39;Avg Response Time&#39;,\n    type: &#39;avg&#39;,\n    sql: requests.responseTime,\n    format: &#39;number&#39;,            // Number formatting with decimals\n    description: &#39;Average API response time in milliseconds&#39;\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"cross-cube-measures\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Cross-Cube Measures</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Reference measures across related cubes:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// In a joined cube\nmeasures: {\n  employeeProductivity: {\n    name: &#39;employeeProductivity&#39;,\n    title: &#39;Employee Productivity Score&#39;,\n    type: &#39;avg&#39;,\n    sql: sql`\n      (${productivity.linesOfCode} * ${employees.experienceLevel}) / \n      NULLIF(${productivity.hoursWorked}, 0)\n    `,\n    description: &#39;Productivity adjusted for experience level&#39;\n  },\n  \n  departmentEfficiency: {\n    name: &#39;departmentEfficiency&#39;,\n    title: &#39;Department Efficiency&#39;,\n    type: &#39;number&#39;,\n    sql: sql`\n      SUM(${productivity.linesOfCode}) / \n      (SUM(${employees.salary}) / 100000.0)\n    `,\n    description: &#39;Lines of code per $100k in salaries&#39;\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// In a joined cube\nmeasures: {\n  employeeProductivity: {\n    name: &#39;employeeProductivity&#39;,\n    title: &#39;Employee Productivity Score&#39;,\n    type: &#39;avg&#39;,\n    sql: sql`\n      (${productivity.linesOfCode} * ${employees.experienceLevel}) / \n      NULLIF(${productivity.hoursWorked}, 0)\n    `,\n    description: &#39;Productivity adjusted for experience level&#39;\n  },\n  \n  departmentEfficiency: {\n    name: &#39;departmentEfficiency&#39;,\n    title: &#39;Department Efficiency&#39;,\n    type: &#39;number&#39;,\n    sql: sql`\n      SUM(${productivity.linesOfCode}) / \n      (SUM(${employees.salary}) / 100000.0)\n    `,\n    description: &#39;Lines of code per $100k in salaries&#39;\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"usage-in-queries\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Usage in Queries</h2><h3 id=\"basic-usage\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Usage</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const query = {\n  measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const query = {\n  measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"multiple-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Multiple Measures</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const query = {\n  measures: [\n    &#39;Employees.count&#39;,\n    &#39;Employees.avgSalary&#39;,\n    &#39;Employees.minSalary&#39;,\n    &#39;Employees.maxSalary&#39;\n  ],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  order: [[&#39;Employees.avgSalary&#39;, &#39;desc&#39;]]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const query = {\n  measures: [\n    &#39;Employees.count&#39;,\n    &#39;Employees.avgSalary&#39;,\n    &#39;Employees.minSalary&#39;,\n    &#39;Employees.maxSalary&#39;\n  ],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  order: [[&#39;Employees.avgSalary&#39;, &#39;desc&#39;]]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"filtering-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Filtering Measures</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  filters: [\n    {\n      member: &#39;Employees.avgSalary&#39;,\n      operator: &#39;gt&#39;,\n      values: [75000]\n    }\n  ]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  filters: [\n    {\n      member: &#39;Employees.avgSalary&#39;,\n      operator: &#39;gt&#39;,\n      values: [75000]\n    }\n  ]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Descriptive Names</strong>: Use business-friendly titles and descriptions</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type Safety</strong>: Always reference Drizzle schema columns</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Performance</strong>: Prefer database-native aggregations over complex calculations</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Filters</strong>: Use measure filters for conditional logic</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Format Hints</strong>: Include formatting hints for proper display</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Documentation</strong>: Add descriptions for complex calculated measures</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security</strong>: Filters automatically inherit cube security context</li></ol><h2 id=\"testing-measures\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Measures</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { describe, it, expect } from &#39;vitest&#39;\n\ndescribe(&#39;Employee Measures&#39;, () =&gt; {\n  it(&#39;should calculate employee count correctly&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const count = result.rawData()[0][&#39;Employees.count&#39;]\n    expect(count).toBeGreaterThan(0)\n  })\n  \n  it(&#39;should calculate average salary&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.avgSalary&#39;],\n      dimensions: []\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const avgSalary = result.rawData()[0][&#39;Employees.avgSalary&#39;]\n    expect(avgSalary).toBeGreaterThan(0)\n    expect(avgSalary).toBeLessThan(1000000)\n  })\n  \n  it(&#39;should handle filtered measures&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.activeCount&#39;, &#39;Employees.count&#39;],\n      dimensions: []\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()[0]\n    expect(data[&#39;Employees.activeCount&#39;]).toBeLessThanOrEqual(data[&#39;Employees.count&#39;])\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { describe, it, expect } from &#39;vitest&#39;\n\ndescribe(&#39;Employee Measures&#39;, () =&gt; {\n  it(&#39;should calculate employee count correctly&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const count = result.rawData()[0][&#39;Employees.count&#39;]\n    expect(count).toBeGreaterThan(0)\n  })\n  \n  it(&#39;should calculate average salary&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.avgSalary&#39;],\n      dimensions: []\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const avgSalary = result.rawData()[0][&#39;Employees.avgSalary&#39;]\n    expect(avgSalary).toBeGreaterThan(0)\n    expect(avgSalary).toBeLessThan(1000000)\n  })\n  \n  it(&#39;should handle filtered measures&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.activeCount&#39;, &#39;Employees.count&#39;],\n      dimensions: []\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()[0]\n    expect(data[&#39;Employees.activeCount&#39;]).toBeLessThanOrEqual(data[&#39;Employees.count&#39;])\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"common-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Patterns</h2><h3 id=\"basic-count\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Count</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">count: {\n  name: &#39;count&#39;,\n  title: &#39;Total Count&#39;,\n  type: &#39;count&#39;,\n  sql: table.id\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"count: {\n  name: &#39;count&#39;,\n  title: &#39;Total Count&#39;,\n  type: &#39;count&#39;,\n  sql: table.id\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"sum-with-formatting\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Sum with Formatting</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">totalRevenue: {\n  name: &#39;totalRevenue&#39;,\n  title: &#39;Total Revenue&#39;,\n  type: &#39;sum&#39;,\n  sql: orders.amount,\n  format: &#39;currency&#39;\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"totalRevenue: {\n  name: &#39;totalRevenue&#39;,\n  title: &#39;Total Revenue&#39;,\n  type: &#39;sum&#39;,\n  sql: orders.amount,\n  format: &#39;currency&#39;\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"conditional-count\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Conditional Count</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">activeUsers: {\n  name: &#39;activeUsers&#39;,\n  title: &#39;Active Users&#39;,\n  type: &#39;count&#39;,\n  sql: users.id,\n  filters: [() =&gt; eq(users.status, &#39;active&#39;)]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"activeUsers: {\n  name: &#39;activeUsers&#39;,\n  title: &#39;Active Users&#39;,\n  type: &#39;count&#39;,\n  sql: users.id,\n  filters: [() =&gt; eq(users.status, &#39;active&#39;)]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"calculated-measure\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Calculated Measure</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">conversionRate: {\n  name: &#39;conversionRate&#39;,\n  title: &#39;Conversion Rate %&#39;,\n  type: &#39;number&#39;,\n  sql: sql`(COUNT(CASE WHEN ${users.converted} THEN 1 END)::DECIMAL / COUNT(*)) * 100`,\n  format: &#39;percent&#39;\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"conversionRate: {\n  name: &#39;conversionRate&#39;,\n  title: &#39;Conversion Rate %&#39;,\n  type: &#39;number&#39;,\n  sql: sql`(COUNT(CASE WHEN ${users.converted} THEN 1 END)::DECIMAL / COUNT(*)) * 100`,\n  format: &#39;percent&#39;\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"semantic-layer/dimensions\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Dimensions</a> for categorical data</li><li class=\"leading-relaxed\">Explore <a href=\"#\" data-help-link=\"semantic-layer/joins\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Joins</a> for multi-cube relationships</li><li class=\"leading-relaxed\">Understand <a href=\"#\" data-help-link=\"semantic-layer/cubes\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Cubes</a> structure and organization</li><li class=\"leading-relaxed\">Review <a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Security</a> patterns and best practices</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Measure performance optimization hints</li><li class=\"leading-relaxed\">Automatic measure suggestions based on data types</li><li class=\"leading-relaxed\">Advanced statistical measures (median, percentiles, standard deviation)</li><li class=\"leading-relaxed\">Measure validation and testing framework</li><li class=\"leading-relaxed\">Visual measure builder interface</li></ul>",
    "path": "semantic-layer/measures.md"
  },
  {
    "slug": "semantic-layer/security",
    "title": "Security",
    "content": "<h1 id=\"security\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Security</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Security in Drizzle Cube is built on three core principles: <strong class=\"font-semibold text-slate-700\">multi-tenant data isolation</strong>, <strong class=\"font-semibold text-slate-700\">SQL injection prevention</strong>, and <strong class=\"font-semibold text-slate-700\">role-based access control</strong>. The security model leverages Drizzle ORM&#39;s type-safe, parameterized queries to ensure your data remains secure and properly isolated.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube&#39;s security-first design ensures that every query is automatically filtered by security context, preventing data leakage between tenants and protecting against SQL injection attacks. All security filtering is applied at the database level for maximum performance and reliability.</p><h2 id=\"security-context\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Security Context</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The security context is the foundation of Drizzle Cube&#39;s security model. It contains user and tenant-specific information that is automatically injected into all cube queries.</p><h3 id=\"basic-security-context-structure\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Security Context Structure</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface SecurityContext {\n  organisationId: string    // Tenant/organization identifier (REQUIRED)\n  userId?: string          // Current user ID\n  userRole?: string        // User role/permission level\n  departmentId?: string    // Department-level filtering\n  [key: string]: any       // Additional custom fields\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface SecurityContext {\n  organisationId: string    // Tenant/organization identifier (REQUIRED)\n  userId?: string          // Current user ID\n  userRole?: string        // User role/permission level\n  departmentId?: string    // Department-level filtering\n  [key: string]: any       // Additional custom fields\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"extracting-security-context\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Extracting Security Context</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Define how to extract security context from your application&#39;s request context:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Hono adapter example\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    const token = c.req.header(&#39;Authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const user = await validateToken(token)\n    \n    return {\n      organisationId: user.organisationId,  // REQUIRED for multi-tenant security\n      userId: user.id,\n      userRole: user.role,\n      departmentId: user.departmentId\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Hono adapter example\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    const token = c.req.header(&#39;Authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const user = await validateToken(token)\n    \n    return {\n      organisationId: user.organisationId,  // REQUIRED for multi-tenant security\n      userId: user.id,\n      userRole: user.role,\n      departmentId: user.departmentId\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"multi-tenant-security\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Multi-Tenant Security</h2><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">CRITICAL</strong>: Every cube must implement organization-level filtering to ensure data isolation between tenants.</p><h3 id=\"required-organization-filtering\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Required Organization Filtering</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export const employeesCube: Cube&lt;Schema&gt; = defineCube(&#39;Employees&#39;, {\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: employees,\n    // REQUIRED: Filter by organization for multi-tenant security\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export const employeesCube: Cube&lt;Schema&gt; = defineCube(&#39;Employees&#39;, {\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: employees,\n    // REQUIRED: Filter by organization for multi-tenant security\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"multi-level-security-filtering\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Multi-Level Security Filtering</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Apply multiple layers of security filtering:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n  const securityFilters = [\n    // Level 1: Organization isolation (REQUIRED)\n    eq(employees.organisationId, ctx.securityContext.organisationId)\n  ]\n  \n  // Level 2: Department-level access\n  if (ctx.securityContext.departmentId) {\n    securityFilters.push(\n      eq(employees.departmentId, ctx.securityContext.departmentId)\n    )\n  }\n  \n  // Level 3: Role-based filtering\n  if (ctx.securityContext.userRole !== &#39;admin&#39;) {\n    securityFilters.push(\n      eq(employees.id, ctx.securityContext.userId)\n    )\n  }\n  \n  return {\n    from: employees,\n    where: and(...securityFilters)\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n  const securityFilters = [\n    // Level 1: Organization isolation (REQUIRED)\n    eq(employees.organisationId, ctx.securityContext.organisationId)\n  ]\n  \n  // Level 2: Department-level access\n  if (ctx.securityContext.departmentId) {\n    securityFilters.push(\n      eq(employees.departmentId, ctx.securityContext.departmentId)\n    )\n  }\n  \n  // Level 3: Role-based filtering\n  if (ctx.securityContext.userRole !== &#39;admin&#39;) {\n    securityFilters.push(\n      eq(employees.id, ctx.securityContext.userId)\n    )\n  }\n  \n  return {\n    from: employees,\n    where: and(...securityFilters)\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"secure-table-joins\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Secure Table Joins</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Apply security context to ALL joined tables:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: productivity,\n  joins: [\n    {\n      table: employees,\n      on: and(\n        eq(productivity.employeeId, employees.id),\n        // CRITICAL: Security filtering on joined table\n        eq(employees.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    },\n    {\n      table: departments,\n      on: and(\n        eq(employees.departmentId, departments.id),\n        // CRITICAL: Security filtering on all joined tables\n        eq(departments.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: productivity,\n  joins: [\n    {\n      table: employees,\n      on: and(\n        eq(productivity.employeeId, employees.id),\n        // CRITICAL: Security filtering on joined table\n        eq(employees.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    },\n    {\n      table: departments,\n      on: and(\n        eq(employees.departmentId, departments.id),\n        // CRITICAL: Security filtering on all joined tables\n        eq(departments.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"role-based-access-control\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Role-Based Access Control</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Implement fine-grained access control using security context:</p><h3 id=\"role-based-cube-access\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Role-Based Cube Access</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Manager-only cube\nexport const salaryAnalyticsCube: Cube&lt;Schema&gt; = defineCube(&#39;SalaryAnalytics&#39;, {\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n    // Check role-based access\n    if (![&#39;admin&#39;, &#39;manager&#39;].includes(ctx.securityContext.userRole)) {\n      throw new Error(&#39;Access denied: Insufficient permissions for salary data&#39;)\n    }\n    \n    return {\n      from: employees,\n      where: and(\n        eq(employees.organisationId, ctx.securityContext.organisationId),\n        // Managers can only see their department\n        ctx.securityContext.userRole === &#39;manager&#39; \n          ? eq(employees.departmentId, ctx.securityContext.departmentId)\n          : sql`true`\n      )\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Manager-only cube\nexport const salaryAnalyticsCube: Cube&lt;Schema&gt; = defineCube(&#39;SalaryAnalytics&#39;, {\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n    // Check role-based access\n    if (![&#39;admin&#39;, &#39;manager&#39;].includes(ctx.securityContext.userRole)) {\n      throw new Error(&#39;Access denied: Insufficient permissions for salary data&#39;)\n    }\n    \n    return {\n      from: employees,\n      where: and(\n        eq(employees.organisationId, ctx.securityContext.organisationId),\n        // Managers can only see their department\n        ctx.securityContext.userRole === &#39;manager&#39; \n          ? eq(employees.departmentId, ctx.securityContext.departmentId)\n          : sql`true`\n      )\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"conditional-data-filtering\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Conditional Data Filtering</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n  const baseFilters = [\n    eq(employees.organisationId, ctx.securityContext.organisationId)\n  ]\n  \n  // Role-specific data access\n  switch (ctx.securityContext.userRole) {\n    case &#39;admin&#39;:\n      // Admins see all organization data\n      break\n      \n    case &#39;manager&#39;:\n      // Managers see their department only\n      baseFilters.push(\n        eq(employees.departmentId, ctx.securityContext.departmentId)\n      )\n      break\n      \n    case &#39;employee&#39;:\n      // Employees see only their own data\n      baseFilters.push(\n        eq(employees.id, ctx.securityContext.userId)\n      )\n      break\n      \n    default:\n      throw new Error(&#39;Invalid user role&#39;)\n  }\n  \n  return {\n    from: employees,\n    where: and(...baseFilters)\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n  const baseFilters = [\n    eq(employees.organisationId, ctx.securityContext.organisationId)\n  ]\n  \n  // Role-specific data access\n  switch (ctx.securityContext.userRole) {\n    case &#39;admin&#39;:\n      // Admins see all organization data\n      break\n      \n    case &#39;manager&#39;:\n      // Managers see their department only\n      baseFilters.push(\n        eq(employees.departmentId, ctx.securityContext.departmentId)\n      )\n      break\n      \n    case &#39;employee&#39;:\n      // Employees see only their own data\n      baseFilters.push(\n        eq(employees.id, ctx.securityContext.userId)\n      )\n      break\n      \n    default:\n      throw new Error(&#39;Invalid user role&#39;)\n  }\n  \n  return {\n    from: employees,\n    where: and(...baseFilters)\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"sql-injection-prevention\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">SQL Injection Prevention</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube prevents SQL injection through Drizzle ORM&#39;s parameterized queries and type-safe SQL builder.</p><h3 id=\"safe-practices-do\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Safe Practices (DO)</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// ✅ SAFE: Using Drizzle column references\nsql: employees.name\n\n// ✅ SAFE: Using Drizzle sql template with parameters\nsql: sql`${employees.salary} &gt; ${ctx.securityContext.minSalary}`\n\n// ✅ SAFE: Using Drizzle operators with parameters\nwhere: and(\n  eq(employees.organisationId, ctx.securityContext.organisationId),\n  gt(employees.salary, ctx.securityContext.minSalary)\n)\n\n// ✅ SAFE: Using security context values (pre-validated)\nwhere: eq(employees.departmentId, ctx.securityContext.departmentId)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// ✅ SAFE: Using Drizzle column references\nsql: employees.name\n\n// ✅ SAFE: Using Drizzle sql template with parameters\nsql: sql`${employees.salary} &gt; ${ctx.securityContext.minSalary}`\n\n// ✅ SAFE: Using Drizzle operators with parameters\nwhere: and(\n  eq(employees.organisationId, ctx.securityContext.organisationId),\n  gt(employees.salary, ctx.securityContext.minSalary)\n)\n\n// ✅ SAFE: Using security context values (pre-validated)\nwhere: eq(employees.departmentId, ctx.securityContext.departmentId)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"unsafe-practices-dont\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Unsafe Practices (DON&#39;T)</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// ❌ DANGEROUS: Raw string concatenation\nsql: `SELECT * FROM employees WHERE name = &#39;${userName}&#39;`\n\n// ❌ DANGEROUS: Dynamic SQL construction\nsql: `SELECT * FROM ${tableName} WHERE ${columnName} = ${value}`\n\n// ❌ DANGEROUS: Unvalidated user input\nsql: sql`SELECT * FROM employees WHERE ${sql.raw(userInput)}`</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// ❌ DANGEROUS: Raw string concatenation\nsql: `SELECT * FROM employees WHERE name = &#39;${userName}&#39;`\n\n// ❌ DANGEROUS: Dynamic SQL construction\nsql: `SELECT * FROM ${tableName} WHERE ${columnName} = ${value}`\n\n// ❌ DANGEROUS: Unvalidated user input\nsql: sql`SELECT * FROM employees WHERE ${sql.raw(userInput)}`\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"secure-parameter-handling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Secure Parameter Handling</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// ✅ CORRECT: Parameters automatically escaped\ndimensions: {\n  searchResults: {\n    name: &#39;searchResults&#39;,\n    title: &#39;Search Results&#39;,\n    type: &#39;string&#39;,\n    sql: sql`\n      CASE \n        WHEN ${employees.name} ILIKE ${`%${ctx.query.searchTerm}%`} THEN &#39;Match&#39;\n        ELSE &#39;No Match&#39;\n      END\n    `\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// ✅ CORRECT: Parameters automatically escaped\ndimensions: {\n  searchResults: {\n    name: &#39;searchResults&#39;,\n    title: &#39;Search Results&#39;,\n    type: &#39;string&#39;,\n    sql: sql`\n      CASE \n        WHEN ${employees.name} ILIKE ${`%${ctx.query.searchTerm}%`} THEN &#39;Match&#39;\n        ELSE &#39;No Match&#39;\n      END\n    `\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"data-masking-and-privacy\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Data Masking and Privacy</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Implement data masking for sensitive information:</p><h3 id=\"column-level-security\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Column-Level Security</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  email: {\n    name: &#39;email&#39;,\n    title: &#39;Email&#39;,\n    type: &#39;string&#39;,\n    sql: ctx.securityContext.userRole === &#39;admin&#39; \n      ? employees.email\n      : sql`REGEXP_REPLACE(${employees.email}, &#39;(.{2}).*(@.*)&#39;, &#39;\\\\1***\\\\2&#39;)`\n  },\n  \n  salary: {\n    name: &#39;salary&#39;,\n    title: &#39;Salary&#39;,\n    type: &#39;number&#39;,\n    sql: [&#39;admin&#39;, &#39;hr&#39;].includes(ctx.securityContext.userRole)\n      ? employees.salary\n      : sql`NULL` // Hide salary for non-authorized users\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  email: {\n    name: &#39;email&#39;,\n    title: &#39;Email&#39;,\n    type: &#39;string&#39;,\n    sql: ctx.securityContext.userRole === &#39;admin&#39; \n      ? employees.email\n      : sql`REGEXP_REPLACE(${employees.email}, &#39;(.{2}).*(@.*)&#39;, &#39;\\\\1***\\\\2&#39;)`\n  },\n  \n  salary: {\n    name: &#39;salary&#39;,\n    title: &#39;Salary&#39;,\n    type: &#39;number&#39;,\n    sql: [&#39;admin&#39;, &#39;hr&#39;].includes(ctx.securityContext.userRole)\n      ? employees.salary\n      : sql`NULL` // Hide salary for non-authorized users\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"conditional-measure-access\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Conditional Measure Access</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  avgSalary: {\n    name: &#39;avgSalary&#39;,\n    title: &#39;Average Salary&#39;,\n    type: &#39;avg&#39;,\n    sql: [&#39;admin&#39;, &#39;hr&#39;].includes(ctx.securityContext.userRole)\n      ? employees.salary\n      : sql`NULL`,\n    description: &#39;Available to HR and Admin roles only&#39;\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  avgSalary: {\n    name: &#39;avgSalary&#39;,\n    title: &#39;Average Salary&#39;,\n    type: &#39;avg&#39;,\n    sql: [&#39;admin&#39;, &#39;hr&#39;].includes(ctx.securityContext.userRole)\n      ? employees.salary\n      : sql`NULL`,\n    description: &#39;Available to HR and Admin roles only&#39;\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"audit-and-logging\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Audit and Logging</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Track data access for compliance and security monitoring:</p><h3 id=\"query-logging\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Logging</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// In your adapter or middleware\nconst logQuery = (query: SemanticQuery, context: SecurityContext) =&gt; {\n  console.log(&#39;Analytics Query:&#39;, {\n    timestamp: new Date().toISOString(),\n    userId: context.userId,\n    organisationId: context.organisationId,\n    cubes: query.measures?.map(m =&gt; m.split(&#39;.&#39;)[0]) || [],\n    dimensions: query.dimensions || [],\n    filters: query.filters || []\n  })\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// In your adapter or middleware\nconst logQuery = (query: SemanticQuery, context: SecurityContext) =&gt; {\n  console.log(&#39;Analytics Query:&#39;, {\n    timestamp: new Date().toISOString(),\n    userId: context.userId,\n    organisationId: context.organisationId,\n    cubes: query.measures?.map(m =&gt; m.split(&#39;.&#39;)[0]) || [],\n    dimensions: query.dimensions || [],\n    filters: query.filters || []\n  })\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"access-control-logging\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Access Control Logging</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n  // Log access attempt\n  if (ctx.securityContext.userRole !== &#39;admin&#39;) {\n    logAccess({\n      action: &#39;CUBE_ACCESS&#39;,\n      cube: &#39;SalaryAnalytics&#39;,\n      userId: ctx.securityContext.userId,\n      result: &#39;DENIED&#39;\n    })\n    throw new Error(&#39;Access denied&#39;)\n  }\n  \n  return {\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n  // Log access attempt\n  if (ctx.securityContext.userRole !== &#39;admin&#39;) {\n    logAccess({\n      action: &#39;CUBE_ACCESS&#39;,\n      cube: &#39;SalaryAnalytics&#39;,\n      userId: ctx.securityContext.userId,\n      result: &#39;DENIED&#39;\n    })\n    throw new Error(&#39;Access denied&#39;)\n  }\n  \n  return {\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"testing-security\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Security</h2><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">CRITICAL</strong>: Always test security isolation to prevent data leakage.</p><h3 id=\"multi-tenant-isolation-tests\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Multi-Tenant Isolation Tests</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">describe(&#39;Security Isolation&#39;, () =&gt; {\n  it(&#39;should isolate data by organisation&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    }\n    \n    // Test org 1\n    const result1 = await semanticLayer.load(query, {\n      organisationId: &#39;org-1&#39;\n    })\n    \n    // Test org 2\n    const result2 = await semanticLayer.load(query, {\n      organisationId: &#39;org-2&#39;  \n    })\n    \n    // Results should be different and non-overlapping\n    expect(result1.rawData()).not.toEqual(result2.rawData())\n  })\n  \n  it(&#39;should enforce role-based access&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.avgSalary&#39;],\n      dimensions: []\n    }\n    \n    // Should succeed for admin\n    const adminResult = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;,\n      userRole: &#39;admin&#39;\n    })\n    expect(adminResult.rawData()[0][&#39;Employees.avgSalary&#39;]).toBeDefined()\n    \n    // Should fail or return null for regular employee\n    const employeeResult = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;,\n      userRole: &#39;employee&#39;\n    })\n    expect(employeeResult.rawData()[0][&#39;Employees.avgSalary&#39;]).toBeNull()\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"describe(&#39;Security Isolation&#39;, () =&gt; {\n  it(&#39;should isolate data by organisation&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    }\n    \n    // Test org 1\n    const result1 = await semanticLayer.load(query, {\n      organisationId: &#39;org-1&#39;\n    })\n    \n    // Test org 2\n    const result2 = await semanticLayer.load(query, {\n      organisationId: &#39;org-2&#39;  \n    })\n    \n    // Results should be different and non-overlapping\n    expect(result1.rawData()).not.toEqual(result2.rawData())\n  })\n  \n  it(&#39;should enforce role-based access&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.avgSalary&#39;],\n      dimensions: []\n    }\n    \n    // Should succeed for admin\n    const adminResult = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;,\n      userRole: &#39;admin&#39;\n    })\n    expect(adminResult.rawData()[0][&#39;Employees.avgSalary&#39;]).toBeDefined()\n    \n    // Should fail or return null for regular employee\n    const employeeResult = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;,\n      userRole: &#39;employee&#39;\n    })\n    expect(employeeResult.rawData()[0][&#39;Employees.avgSalary&#39;]).toBeNull()\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"security-context-validation\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Security Context Validation</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">describe(&#39;Security Context&#39;, () =&gt; {\n  it(&#39;should require organisation ID&#39;, async () =&gt; {\n    const query = { measures: [&#39;Employees.count&#39;], dimensions: [] }\n    \n    await expect(\n      semanticLayer.load(query, {})  // Missing organisationId\n    ).rejects.toThrow(&#39;organisationId is required&#39;)\n  })\n  \n  it(&#39;should validate user permissions&#39;, async () =&gt; {\n    await expect(\n      semanticLayer.load(\n        { measures: [&#39;SalaryAnalytics.count&#39;], dimensions: [] },\n        { organisationId: &#39;test-org&#39;, userRole: &#39;employee&#39; }\n      )\n    ).rejects.toThrow(&#39;Access denied&#39;)\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"describe(&#39;Security Context&#39;, () =&gt; {\n  it(&#39;should require organisation ID&#39;, async () =&gt; {\n    const query = { measures: [&#39;Employees.count&#39;], dimensions: [] }\n    \n    await expect(\n      semanticLayer.load(query, {})  // Missing organisationId\n    ).rejects.toThrow(&#39;organisationId is required&#39;)\n  })\n  \n  it(&#39;should validate user permissions&#39;, async () =&gt; {\n    await expect(\n      semanticLayer.load(\n        { measures: [&#39;SalaryAnalytics.count&#39;], dimensions: [] },\n        { organisationId: &#39;test-org&#39;, userRole: &#39;employee&#39; }\n      )\n    ).rejects.toThrow(&#39;Access denied&#39;)\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Organization Filtering</strong>: ALWAYS filter by organizationId in every cube</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Join Security</strong>: Apply security context to ALL joined tables</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Parameter Safety</strong>: Use Drizzle&#39;s parameterized queries exclusively</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Role Validation</strong>: Validate user roles before data access</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Audit Logging</strong>: Log all data access for compliance</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Test Security</strong>: Write comprehensive security isolation tests</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Principle of Least Privilege</strong>: Grant minimal necessary access</li></ol><h2 id=\"security-checklist\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Security Checklist</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><input disabled=\"\" type=\"checkbox\"> Every cube filters by <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">organisationId</code></li><li class=\"leading-relaxed\"><input disabled=\"\" type=\"checkbox\"> All joined tables include security context filtering</li><li class=\"leading-relaxed\"><input disabled=\"\" type=\"checkbox\"> No raw SQL string concatenation</li><li class=\"leading-relaxed\"><input disabled=\"\" type=\"checkbox\"> Role-based access controls implemented</li><li class=\"leading-relaxed\"><input disabled=\"\" type=\"checkbox\"> Sensitive data is masked appropriately</li><li class=\"leading-relaxed\"><input disabled=\"\" type=\"checkbox\"> Security tests cover tenant isolation</li><li class=\"leading-relaxed\"><input disabled=\"\" type=\"checkbox\"> Audit logging is in place</li><li class=\"leading-relaxed\"><input disabled=\"\" type=\"checkbox\"> Security context validation is implemented</li></ul><h2 id=\"common-security-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Security Patterns</h2><h3 id=\"basic-tenant-isolation\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Tenant Isolation</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">where: eq(table.organisationId, ctx.securityContext.organisationId)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"where: eq(table.organisationId, ctx.securityContext.organisationId)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"role-based-access\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Role-Based Access</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx) =&gt; {\n  if (ctx.securityContext.userRole !== &#39;admin&#39;) {\n    throw new Error(&#39;Access denied&#39;)\n  }\n  // ... cube definition\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx) =&gt; {\n  if (ctx.securityContext.userRole !== &#39;admin&#39;) {\n    throw new Error(&#39;Access denied&#39;)\n  }\n  // ... cube definition\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"department-level-security\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Department-Level Security</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">where: and(\n  eq(table.organisationId, ctx.securityContext.organisationId),\n  eq(table.departmentId, ctx.securityContext.departmentId)\n)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"where: and(\n  eq(table.organisationId, ctx.securityContext.organisationId),\n  eq(table.departmentId, ctx.securityContext.departmentId)\n)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"secure-join-pattern\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Secure Join Pattern</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: [{\n  table: joinedTable,\n  on: and(\n    eq(mainTable.foreignKey, joinedTable.id),\n    eq(joinedTable.organisationId, ctx.securityContext.organisationId)\n  )\n}]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: [{\n  table: joinedTable,\n  on: and(\n    eq(mainTable.foreignKey, joinedTable.id),\n    eq(joinedTable.organisationId, ctx.securityContext.organisationId)\n  )\n}]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Review <a href=\"#\" data-help-link=\"semantic-layer/cubes\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Cubes</a> for complete security implementation</li><li class=\"leading-relaxed\">Understand <a href=\"#\" data-help-link=\"semantic-layer/joins\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Joins</a> security requirements</li><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"adapters/hono\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Adapters</a> security context extraction</li><li class=\"leading-relaxed\">Implement comprehensive security testing</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Advanced RBAC with fine-grained permissions</li><li class=\"leading-relaxed\">Field-level encryption for sensitive data</li><li class=\"leading-relaxed\">Security policy configuration UI</li><li class=\"leading-relaxed\">Automated security testing framework</li><li class=\"leading-relaxed\">Compliance reporting and audit trails</li><li class=\"leading-relaxed\">Integration with external identity providers</li></ul>",
    "path": "semantic-layer/security.md"
  }
];

export const helpContentMap: Record<string, HelpTopic> = {
  'adapters/custom': {"slug":"adapters/custom","title":"Custom Adapters","content":"<h1 id=\"custom-adapters\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Custom Adapters</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube&#39;s adapter system allows you to integrate the semantic layer with any web framework or runtime. Custom adapters provide the bridge between your application&#39;s HTTP layer and Drizzle Cube&#39;s query execution engine.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">An adapter is a framework-specific wrapper that:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Exposes Cube.js-compatible API endpoints</li><li class=\"leading-relaxed\">Handles HTTP requests and responses</li><li class=\"leading-relaxed\">Extracts security context from your application</li><li class=\"leading-relaxed\">Manages CORS and authentication</li><li class=\"leading-relaxed\">Provides error handling and logging</li></ul><h2 id=\"adapter-architecture\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Adapter Architecture</h2><h3 id=\"core-components\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Core Components</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Required adapter interface\ninterface DrizzleCubeAdapter {\n  // HTTP route handlers\n  handleLoad: (request: Request) =&gt; Promise&lt;Response&gt;\n  handleMeta: (request: Request) =&gt; Promise&lt;Response&gt;\n  \n  // Security context extraction\n  getSecurityContext: (request: Request) =&gt; Promise&lt;SecurityContext&gt;\n  \n  // Optional: Custom error handling\n  handleError?: (error: Error, request: Request) =&gt; Response\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Required adapter interface\ninterface DrizzleCubeAdapter {\n  // HTTP route handlers\n  handleLoad: (request: Request) =&gt; Promise&lt;Response&gt;\n  handleMeta: (request: Request) =&gt; Promise&lt;Response&gt;\n  \n  // Security context extraction\n  getSecurityContext: (request: Request) =&gt; Promise&lt;SecurityContext&gt;\n  \n  // Optional: Custom error handling\n  handleError?: (error: Error, request: Request) =&gt; Response\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"base-adapter-structure\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Base Adapter Structure</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { SemanticLayerCompiler, SecurityContext } from &#39;drizzle-cube/server&#39;\nimport type { DrizzleDatabase } from &#39;drizzle-cube/server&#39;\n\nexport interface AdapterOptions&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt; {\n  semanticLayer: SemanticLayerCompiler&lt;TSchema&gt;\n  drizzle: DrizzleDatabase&lt;TSchema&gt;\n  schema?: TSchema\n  getSecurityContext: (context: any) =&gt; SecurityContext | Promise&lt;SecurityContext&gt;\n  cors?: CorsOptions\n}\n\nexport abstract class BaseAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt; {\n  protected semanticLayer: SemanticLayerCompiler&lt;TSchema&gt;\n  protected drizzle: DrizzleDatabase&lt;TSchema&gt;\n  protected schema?: TSchema\n  protected getSecurityContext: (context: any) =&gt; SecurityContext | Promise&lt;SecurityContext&gt;\n\n  constructor(options: AdapterOptions&lt;TSchema&gt;) {\n    this.semanticLayer = options.semanticLayer\n    this.drizzle = options.drizzle\n    this.schema = options.schema\n    this.getSecurityContext = options.getSecurityContext\n  }\n\n  abstract setupRoutes(): void\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { SemanticLayerCompiler, SecurityContext } from &#39;drizzle-cube/server&#39;\nimport type { DrizzleDatabase } from &#39;drizzle-cube/server&#39;\n\nexport interface AdapterOptions&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt; {\n  semanticLayer: SemanticLayerCompiler&lt;TSchema&gt;\n  drizzle: DrizzleDatabase&lt;TSchema&gt;\n  schema?: TSchema\n  getSecurityContext: (context: any) =&gt; SecurityContext | Promise&lt;SecurityContext&gt;\n  cors?: CorsOptions\n}\n\nexport abstract class BaseAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt; {\n  protected semanticLayer: SemanticLayerCompiler&lt;TSchema&gt;\n  protected drizzle: DrizzleDatabase&lt;TSchema&gt;\n  protected schema?: TSchema\n  protected getSecurityContext: (context: any) =&gt; SecurityContext | Promise&lt;SecurityContext&gt;\n\n  constructor(options: AdapterOptions&lt;TSchema&gt;) {\n    this.semanticLayer = options.semanticLayer\n    this.drizzle = options.drizzle\n    this.schema = options.schema\n    this.getSecurityContext = options.getSecurityContext\n  }\n\n  abstract setupRoutes(): void\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"creating-a-custom-adapter\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Creating a Custom Adapter</h2><h3 id=\"step-1-define-adapter-interface\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Step 1: Define Adapter Interface</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// adapters/fastify/index.ts\nimport { FastifyInstance, FastifyRequest, FastifyReply } from &#39;fastify&#39;\nimport { BaseAdapter, AdapterOptions } from &#39;drizzle-cube/server&#39;\n\nexport interface FastifyAdapterOptions&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends AdapterOptions&lt;TSchema&gt; {\n  prefix?: string  // API route prefix\n  corsOrigin?: string | string[]\n}\n\nexport class FastifyAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends BaseAdapter&lt;TSchema&gt; {\n  private app: FastifyInstance\n  private prefix: string\n\n  constructor(app: FastifyInstance, options: FastifyAdapterOptions&lt;TSchema&gt;) {\n    super(options)\n    this.app = app\n    this.prefix = options.prefix || &#39;/cubejs-api/v1&#39;\n  }\n\n  setupRoutes() {\n    // Register Cube.js API endpoints\n    this.app.post(`${this.prefix}/load`, this.handleLoad.bind(this))\n    this.app.get(`${this.prefix}/meta`, this.handleMeta.bind(this))\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// adapters/fastify/index.ts\nimport { FastifyInstance, FastifyRequest, FastifyReply } from &#39;fastify&#39;\nimport { BaseAdapter, AdapterOptions } from &#39;drizzle-cube/server&#39;\n\nexport interface FastifyAdapterOptions&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends AdapterOptions&lt;TSchema&gt; {\n  prefix?: string  // API route prefix\n  corsOrigin?: string | string[]\n}\n\nexport class FastifyAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends BaseAdapter&lt;TSchema&gt; {\n  private app: FastifyInstance\n  private prefix: string\n\n  constructor(app: FastifyInstance, options: FastifyAdapterOptions&lt;TSchema&gt;) {\n    super(options)\n    this.app = app\n    this.prefix = options.prefix || &#39;/cubejs-api/v1&#39;\n  }\n\n  setupRoutes() {\n    // Register Cube.js API endpoints\n    this.app.post(`${this.prefix}/load`, this.handleLoad.bind(this))\n    this.app.get(`${this.prefix}/meta`, this.handleMeta.bind(this))\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"step-2-implement-route-handlers\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Step 2: Implement Route Handlers</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export class FastifyAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  async handleLoad(request: FastifyRequest, reply: FastifyReply) {\n    try {\n      // Extract security context from Fastify request\n      const securityContext = await this.getSecurityContext(request)\n      \n      // Parse query from request body\n      const query = request.body as SemanticQuery\n      \n      // Execute query using semantic layer\n      const result = await this.semanticLayer.load(query, securityContext)\n      \n      // Return Cube.js-compatible response\n      reply.send({\n        query,\n        data: result.rawData(),\n        annotation: result.annotation(),\n        lastRefreshTime: new Date().toISOString()\n      })\n      \n    } catch (error) {\n      reply.status(400).send({\n        error: error.message,\n        type: error.constructor.name\n      })\n    }\n  }\n\n  async handleMeta(request: FastifyRequest, reply: FastifyReply) {\n    try {\n      // Extract security context\n      const securityContext = await this.getSecurityContext(request)\n      \n      // Get cube metadata\n      const cubes = await this.semanticLayer.getMetadata(securityContext)\n      \n      reply.send({ cubes })\n      \n    } catch (error) {\n      reply.status(400).send({\n        error: error.message,\n        type: error.constructor.name\n      })\n    }\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export class FastifyAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  async handleLoad(request: FastifyRequest, reply: FastifyReply) {\n    try {\n      // Extract security context from Fastify request\n      const securityContext = await this.getSecurityContext(request)\n      \n      // Parse query from request body\n      const query = request.body as SemanticQuery\n      \n      // Execute query using semantic layer\n      const result = await this.semanticLayer.load(query, securityContext)\n      \n      // Return Cube.js-compatible response\n      reply.send({\n        query,\n        data: result.rawData(),\n        annotation: result.annotation(),\n        lastRefreshTime: new Date().toISOString()\n      })\n      \n    } catch (error) {\n      reply.status(400).send({\n        error: error.message,\n        type: error.constructor.name\n      })\n    }\n  }\n\n  async handleMeta(request: FastifyRequest, reply: FastifyReply) {\n    try {\n      // Extract security context\n      const securityContext = await this.getSecurityContext(request)\n      \n      // Get cube metadata\n      const cubes = await this.semanticLayer.getMetadata(securityContext)\n      \n      reply.send({ cubes })\n      \n    } catch (error) {\n      reply.status(400).send({\n        error: error.message,\n        type: error.constructor.name\n      })\n    }\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"step-3-security-context-extraction\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Step 3: Security Context Extraction</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export class FastifyAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  constructor(app: FastifyInstance, options: FastifyAdapterOptions&lt;TSchema&gt;) {\n    super(options)\n    this.app = app\n    this.prefix = options.prefix || &#39;/cubejs-api/v1&#39;\n    \n    // Setup CORS if configured\n    if (options.corsOrigin) {\n      this.app.register(require(&#39;@fastify/cors&#39;), {\n        origin: options.corsOrigin\n      })\n    }\n  }\n\n  // Example security context extraction\n  private async extractSecurityContext(request: FastifyRequest): Promise&lt;SecurityContext&gt; {\n    // Extract JWT token from Authorization header\n    const authHeader = request.headers.authorization\n    if (!authHeader?.startsWith(&#39;Bearer &#39;)) {\n      throw new Error(&#39;Missing or invalid authorization header&#39;)\n    }\n\n    const token = authHeader.substring(7)\n    const payload = await validateJWT(token)\n\n    return {\n      organisationId: payload.orgId,    // REQUIRED for multi-tenant security\n      userId: payload.userId,\n      userRole: payload.role,\n      permissions: payload.permissions\n    }\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export class FastifyAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  constructor(app: FastifyInstance, options: FastifyAdapterOptions&lt;TSchema&gt;) {\n    super(options)\n    this.app = app\n    this.prefix = options.prefix || &#39;/cubejs-api/v1&#39;\n    \n    // Setup CORS if configured\n    if (options.corsOrigin) {\n      this.app.register(require(&#39;@fastify/cors&#39;), {\n        origin: options.corsOrigin\n      })\n    }\n  }\n\n  // Example security context extraction\n  private async extractSecurityContext(request: FastifyRequest): Promise&lt;SecurityContext&gt; {\n    // Extract JWT token from Authorization header\n    const authHeader = request.headers.authorization\n    if (!authHeader?.startsWith(&#39;Bearer &#39;)) {\n      throw new Error(&#39;Missing or invalid authorization header&#39;)\n    }\n\n    const token = authHeader.substring(7)\n    const payload = await validateJWT(token)\n\n    return {\n      organisationId: payload.orgId,    // REQUIRED for multi-tenant security\n      userId: payload.userId,\n      userRole: payload.role,\n      permissions: payload.permissions\n    }\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"step-4-factory-function\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Step 4: Factory Function</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Export a factory function for easy setup\nexport function createFastifyAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;(\n  app: FastifyInstance,\n  options: FastifyAdapterOptions&lt;TSchema&gt;\n): FastifyAdapter&lt;TSchema&gt; {\n  const adapter = new FastifyAdapter(app, options)\n  adapter.setupRoutes()\n  return adapter\n}\n\n// Usage\nimport { createFastifyAdapter } from &#39;./adapters/fastify&#39;\n\nconst adapter = createFastifyAdapter(fastifyApp, {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; ({\n    organisationId: request.user.organisationId,\n    userId: request.user.id,\n    userRole: request.user.role\n  }),\n  prefix: &#39;/api/cube&#39;,\n  corsOrigin: [&#39;http://localhost:3000&#39;]\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Export a factory function for easy setup\nexport function createFastifyAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;(\n  app: FastifyInstance,\n  options: FastifyAdapterOptions&lt;TSchema&gt;\n): FastifyAdapter&lt;TSchema&gt; {\n  const adapter = new FastifyAdapter(app, options)\n  adapter.setupRoutes()\n  return adapter\n}\n\n// Usage\nimport { createFastifyAdapter } from &#39;./adapters/fastify&#39;\n\nconst adapter = createFastifyAdapter(fastifyApp, {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; ({\n    organisationId: request.user.organisationId,\n    userId: request.user.id,\n    userRole: request.user.role\n  }),\n  prefix: &#39;/api/cube&#39;,\n  corsOrigin: [&#39;http://localhost:3000&#39;]\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"framework-specific-examples\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Framework-Specific Examples</h2><h3 id=\"expressjs-adapter\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Express.js Adapter</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// adapters/express/index.ts\nimport express, { Request, Response, NextFunction } from &#39;express&#39;\nimport cors from &#39;cors&#39;\n\nexport class ExpressAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends BaseAdapter&lt;TSchema&gt; {\n  private app: express.Application\n  private router: express.Router\n\n  constructor(app: express.Application, options: AdapterOptions&lt;TSchema&gt;) {\n    super(options)\n    this.app = app\n    this.router = express.Router()\n    \n    // Setup middleware\n    this.router.use(express.json())\n    this.router.use(cors())\n  }\n\n  setupRoutes() {\n    this.router.post(&#39;/load&#39;, this.handleLoad.bind(this))\n    this.router.get(&#39;/meta&#39;, this.handleMeta.bind(this))\n    \n    // Mount router\n    this.app.use(&#39;/cubejs-api/v1&#39;, this.router)\n  }\n\n  async handleLoad(req: Request, res: Response, next: NextFunction) {\n    try {\n      const securityContext = await this.getSecurityContext(req)\n      const result = await this.semanticLayer.load(req.body, securityContext)\n      \n      res.json({\n        query: req.body,\n        data: result.rawData(),\n        annotation: result.annotation()\n      })\n    } catch (error) {\n      next(error)  // Express error handling\n    }\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// adapters/express/index.ts\nimport express, { Request, Response, NextFunction } from &#39;express&#39;\nimport cors from &#39;cors&#39;\n\nexport class ExpressAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends BaseAdapter&lt;TSchema&gt; {\n  private app: express.Application\n  private router: express.Router\n\n  constructor(app: express.Application, options: AdapterOptions&lt;TSchema&gt;) {\n    super(options)\n    this.app = app\n    this.router = express.Router()\n    \n    // Setup middleware\n    this.router.use(express.json())\n    this.router.use(cors())\n  }\n\n  setupRoutes() {\n    this.router.post(&#39;/load&#39;, this.handleLoad.bind(this))\n    this.router.get(&#39;/meta&#39;, this.handleMeta.bind(this))\n    \n    // Mount router\n    this.app.use(&#39;/cubejs-api/v1&#39;, this.router)\n  }\n\n  async handleLoad(req: Request, res: Response, next: NextFunction) {\n    try {\n      const securityContext = await this.getSecurityContext(req)\n      const result = await this.semanticLayer.load(req.body, securityContext)\n      \n      res.json({\n        query: req.body,\n        data: result.rawData(),\n        annotation: result.annotation()\n      })\n    } catch (error) {\n      next(error)  // Express error handling\n    }\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"nextjs-api-routes-adapter\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Next.js API Routes Adapter</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// adapters/nextjs/index.ts\nimport { NextApiRequest, NextApiResponse } from &#39;next&#39;\n\nexport class NextJSAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends BaseAdapter&lt;TSchema&gt; {\n\n  // Next.js API route handler factory\n  createLoadHandler() {\n    return async (req: NextApiRequest, res: NextApiResponse) =&gt; {\n      if (req.method !== &#39;POST&#39;) {\n        return res.status(405).json({ error: &#39;Method not allowed&#39; })\n      }\n\n      try {\n        const securityContext = await this.getSecurityContext(req)\n        const result = await this.semanticLayer.load(req.body, securityContext)\n        \n        res.json({\n          query: req.body,\n          data: result.rawData(),\n          annotation: result.annotation()\n        })\n      } catch (error) {\n        res.status(400).json({\n          error: error.message,\n          type: error.constructor.name\n        })\n      }\n    }\n  }\n\n  createMetaHandler() {\n    return async (req: NextApiRequest, res: NextApiResponse) =&gt; {\n      if (req.method !== &#39;GET&#39;) {\n        return res.status(405).json({ error: &#39;Method not allowed&#39; })\n      }\n\n      try {\n        const securityContext = await this.getSecurityContext(req)\n        const cubes = await this.semanticLayer.getMetadata(securityContext)\n        res.json({ cubes })\n      } catch (error) {\n        res.status(400).json({ error: error.message })\n      }\n    }\n  }\n}\n\n// Usage in pages/api/cubejs-api/v1/load.ts\nimport { NextJSAdapter } from &#39;../../../adapters/nextjs&#39;\n\nconst adapter = new NextJSAdapter({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; {\n    const token = req.headers.authorization?.substring(7)\n    const user = await validateToken(token)\n    return {\n      organisationId: user.organisationId,\n      userId: user.id\n    }\n  }\n})\n\nexport default adapter.createLoadHandler()</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// adapters/nextjs/index.ts\nimport { NextApiRequest, NextApiResponse } from &#39;next&#39;\n\nexport class NextJSAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends BaseAdapter&lt;TSchema&gt; {\n\n  // Next.js API route handler factory\n  createLoadHandler() {\n    return async (req: NextApiRequest, res: NextApiResponse) =&gt; {\n      if (req.method !== &#39;POST&#39;) {\n        return res.status(405).json({ error: &#39;Method not allowed&#39; })\n      }\n\n      try {\n        const securityContext = await this.getSecurityContext(req)\n        const result = await this.semanticLayer.load(req.body, securityContext)\n        \n        res.json({\n          query: req.body,\n          data: result.rawData(),\n          annotation: result.annotation()\n        })\n      } catch (error) {\n        res.status(400).json({\n          error: error.message,\n          type: error.constructor.name\n        })\n      }\n    }\n  }\n\n  createMetaHandler() {\n    return async (req: NextApiRequest, res: NextApiResponse) =&gt; {\n      if (req.method !== &#39;GET&#39;) {\n        return res.status(405).json({ error: &#39;Method not allowed&#39; })\n      }\n\n      try {\n        const securityContext = await this.getSecurityContext(req)\n        const cubes = await this.semanticLayer.getMetadata(securityContext)\n        res.json({ cubes })\n      } catch (error) {\n        res.status(400).json({ error: error.message })\n      }\n    }\n  }\n}\n\n// Usage in pages/api/cubejs-api/v1/load.ts\nimport { NextJSAdapter } from &#39;../../../adapters/nextjs&#39;\n\nconst adapter = new NextJSAdapter({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; {\n    const token = req.headers.authorization?.substring(7)\n    const user = await validateToken(token)\n    return {\n      organisationId: user.organisationId,\n      userId: user.id\n    }\n  }\n})\n\nexport default adapter.createLoadHandler()\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"cloudflare-workers-adapter\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Cloudflare Workers Adapter</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// adapters/cloudflare/index.ts\nexport class CloudflareWorkerAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends BaseAdapter&lt;TSchema&gt; {\n\n  async handleRequest(request: Request, env: any): Promise&lt;Response&gt; {\n    const url = new URL(request.url)\n    \n    // Route requests\n    if (url.pathname.endsWith(&#39;/load&#39;) &amp;&amp; request.method === &#39;POST&#39;) {\n      return this.handleLoad(request, env)\n    }\n    \n    if (url.pathname.endsWith(&#39;/meta&#39;) &amp;&amp; request.method === &#39;GET&#39;) {\n      return this.handleMeta(request, env)\n    }\n\n    return new Response(&#39;Not Found&#39;, { status: 404 })\n  }\n\n  async handleLoad(request: Request, env: any): Promise&lt;Response&gt; {\n    try {\n      const query = await request.json()\n      const securityContext = await this.getSecurityContext({ request, env })\n      \n      const result = await this.semanticLayer.load(query, securityContext)\n      \n      return new Response(JSON.stringify({\n        query,\n        data: result.rawData(),\n        annotation: result.annotation()\n      }), {\n        headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }\n      })\n      \n    } catch (error) {\n      return new Response(JSON.stringify({\n        error: error.message\n      }), {\n        status: 400,\n        headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }\n      })\n    }\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// adapters/cloudflare/index.ts\nexport class CloudflareWorkerAdapter&lt;TSchema extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt;\n  extends BaseAdapter&lt;TSchema&gt; {\n\n  async handleRequest(request: Request, env: any): Promise&lt;Response&gt; {\n    const url = new URL(request.url)\n    \n    // Route requests\n    if (url.pathname.endsWith(&#39;/load&#39;) &amp;&amp; request.method === &#39;POST&#39;) {\n      return this.handleLoad(request, env)\n    }\n    \n    if (url.pathname.endsWith(&#39;/meta&#39;) &amp;&amp; request.method === &#39;GET&#39;) {\n      return this.handleMeta(request, env)\n    }\n\n    return new Response(&#39;Not Found&#39;, { status: 404 })\n  }\n\n  async handleLoad(request: Request, env: any): Promise&lt;Response&gt; {\n    try {\n      const query = await request.json()\n      const securityContext = await this.getSecurityContext({ request, env })\n      \n      const result = await this.semanticLayer.load(query, securityContext)\n      \n      return new Response(JSON.stringify({\n        query,\n        data: result.rawData(),\n        annotation: result.annotation()\n      }), {\n        headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }\n      })\n      \n    } catch (error) {\n      return new Response(JSON.stringify({\n        error: error.message\n      }), {\n        status: 400,\n        headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }\n      })\n    }\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-features\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Features</h2><h3 id=\"custom-error-handling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Error Handling</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export class CustomAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  protected handleError(error: Error, context: any): Response {\n    // Log error\n    console.error(&#39;Drizzle Cube Error:&#39;, {\n      message: error.message,\n      stack: error.stack,\n      timestamp: new Date().toISOString(),\n      context: this.sanitizeContext(context)\n    })\n\n    // Return user-friendly error\n    if (error.message.includes(&#39;Access denied&#39;)) {\n      return this.errorResponse(403, &#39;Insufficient permissions&#39;)\n    }\n    \n    if (error.message.includes(&#39;organisationId&#39;)) {\n      return this.errorResponse(400, &#39;Invalid organization context&#39;)\n    }\n\n    return this.errorResponse(500, &#39;Internal server error&#39;)\n  }\n\n  private errorResponse(status: number, message: string) {\n    return new Response(JSON.stringify({ error: message }), {\n      status,\n      headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }\n    })\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export class CustomAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  protected handleError(error: Error, context: any): Response {\n    // Log error\n    console.error(&#39;Drizzle Cube Error:&#39;, {\n      message: error.message,\n      stack: error.stack,\n      timestamp: new Date().toISOString(),\n      context: this.sanitizeContext(context)\n    })\n\n    // Return user-friendly error\n    if (error.message.includes(&#39;Access denied&#39;)) {\n      return this.errorResponse(403, &#39;Insufficient permissions&#39;)\n    }\n    \n    if (error.message.includes(&#39;organisationId&#39;)) {\n      return this.errorResponse(400, &#39;Invalid organization context&#39;)\n    }\n\n    return this.errorResponse(500, &#39;Internal server error&#39;)\n  }\n\n  private errorResponse(status: number, message: string) {\n    return new Response(JSON.stringify({ error: message }), {\n      status,\n      headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }\n    })\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"request-middleware\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Request Middleware</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export class EnhancedAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  private async applyMiddleware(request: any, handler: Function) {\n    // Rate limiting\n    await this.checkRateLimit(request)\n    \n    // Request validation\n    await this.validateRequest(request)\n    \n    // Audit logging\n    await this.logRequest(request)\n    \n    // Execute handler\n    return handler(request)\n  }\n\n  private async checkRateLimit(request: any) {\n    const clientId = await this.getClientId(request)\n    const isAllowed = await this.rateLimiter.check(clientId)\n    \n    if (!isAllowed) {\n      throw new Error(&#39;Rate limit exceeded&#39;)\n    }\n  }\n\n  private async logRequest(request: any) {\n    const securityContext = await this.getSecurityContext(request)\n    \n    await this.auditLogger.log({\n      type: &#39;CUBE_QUERY&#39;,\n      userId: securityContext.userId,\n      organisationId: securityContext.organisationId,\n      timestamp: new Date(),\n      query: request.body\n    })\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export class EnhancedAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  private async applyMiddleware(request: any, handler: Function) {\n    // Rate limiting\n    await this.checkRateLimit(request)\n    \n    // Request validation\n    await this.validateRequest(request)\n    \n    // Audit logging\n    await this.logRequest(request)\n    \n    // Execute handler\n    return handler(request)\n  }\n\n  private async checkRateLimit(request: any) {\n    const clientId = await this.getClientId(request)\n    const isAllowed = await this.rateLimiter.check(clientId)\n    \n    if (!isAllowed) {\n      throw new Error(&#39;Rate limit exceeded&#39;)\n    }\n  }\n\n  private async logRequest(request: any) {\n    const securityContext = await this.getSecurityContext(request)\n    \n    await this.auditLogger.log({\n      type: &#39;CUBE_QUERY&#39;,\n      userId: securityContext.userId,\n      organisationId: securityContext.organisationId,\n      timestamp: new Date(),\n      query: request.body\n    })\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"response-caching\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Response Caching</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export class CachedAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  private cache: Map&lt;string, { data: any; timestamp: number }&gt; = new Map()\n\n  async handleLoad(request: any): Promise&lt;any&gt; {\n    const cacheKey = this.getCacheKey(request.body, await this.getSecurityContext(request))\n    \n    // Check cache\n    const cached = this.cache.get(cacheKey)\n    if (cached &amp;&amp; Date.now() - cached.timestamp &lt; 300000) { // 5 minutes\n      return cached.data\n    }\n\n    // Execute query\n    const result = await super.handleLoad(request)\n    \n    // Cache result\n    this.cache.set(cacheKey, {\n      data: result,\n      timestamp: Date.now()\n    })\n\n    return result\n  }\n\n  private getCacheKey(query: any, context: any): string {\n    return `${context.organisationId}:${JSON.stringify(query)}`\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export class CachedAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  private cache: Map&lt;string, { data: any; timestamp: number }&gt; = new Map()\n\n  async handleLoad(request: any): Promise&lt;any&gt; {\n    const cacheKey = this.getCacheKey(request.body, await this.getSecurityContext(request))\n    \n    // Check cache\n    const cached = this.cache.get(cacheKey)\n    if (cached &amp;&amp; Date.now() - cached.timestamp &lt; 300000) { // 5 minutes\n      return cached.data\n    }\n\n    // Execute query\n    const result = await super.handleLoad(request)\n    \n    // Cache result\n    this.cache.set(cacheKey, {\n      data: result,\n      timestamp: Date.now()\n    })\n\n    return result\n  }\n\n  private getCacheKey(query: any, context: any): string {\n    return `${context.organisationId}:${JSON.stringify(query)}`\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"testing-adapters\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Adapters</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { describe, it, expect, beforeEach } from &#39;vitest&#39;\nimport { createMockRequest, createMockContext } from &#39;./test-helpers&#39;\n\ndescribe(&#39;CustomAdapter&#39;, () =&gt; {\n  let adapter: CustomAdapter\n  let mockSemanticLayer: jest.Mocked&lt;SemanticLayerCompiler&gt;\n\n  beforeEach(() =&gt; {\n    mockSemanticLayer = createMockSemanticLayer()\n    adapter = new CustomAdapter({\n      semanticLayer: mockSemanticLayer,\n      drizzle: mockDb,\n      getSecurityContext: async () =&gt; ({\n        organisationId: &#39;test-org&#39;,\n        userId: &#39;test-user&#39;\n      })\n    })\n  })\n\n  it(&#39;should handle load requests&#39;, async () =&gt; {\n    const query = { measures: [&#39;Employees.count&#39;] }\n    const request = createMockRequest(&#39;POST&#39;, &#39;/load&#39;, query)\n    \n    mockSemanticLayer.load.mockResolvedValue(createMockResultSet())\n    \n    const response = await adapter.handleLoad(request)\n    \n    expect(response.status).toBe(200)\n    expect(mockSemanticLayer.load).toHaveBeenCalledWith(\n      query,\n      { organisationId: &#39;test-org&#39;, userId: &#39;test-user&#39; }\n    )\n  })\n\n  it(&#39;should handle security context errors&#39;, async () =&gt; {\n    adapter = new CustomAdapter({\n      semanticLayer: mockSemanticLayer,\n      drizzle: mockDb,\n      getSecurityContext: async () =&gt; {\n        throw new Error(&#39;Invalid token&#39;)\n      }\n    })\n\n    const request = createMockRequest(&#39;POST&#39;, &#39;/load&#39;, {})\n    const response = await adapter.handleLoad(request)\n    \n    expect(response.status).toBe(400)\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { describe, it, expect, beforeEach } from &#39;vitest&#39;\nimport { createMockRequest, createMockContext } from &#39;./test-helpers&#39;\n\ndescribe(&#39;CustomAdapter&#39;, () =&gt; {\n  let adapter: CustomAdapter\n  let mockSemanticLayer: jest.Mocked&lt;SemanticLayerCompiler&gt;\n\n  beforeEach(() =&gt; {\n    mockSemanticLayer = createMockSemanticLayer()\n    adapter = new CustomAdapter({\n      semanticLayer: mockSemanticLayer,\n      drizzle: mockDb,\n      getSecurityContext: async () =&gt; ({\n        organisationId: &#39;test-org&#39;,\n        userId: &#39;test-user&#39;\n      })\n    })\n  })\n\n  it(&#39;should handle load requests&#39;, async () =&gt; {\n    const query = { measures: [&#39;Employees.count&#39;] }\n    const request = createMockRequest(&#39;POST&#39;, &#39;/load&#39;, query)\n    \n    mockSemanticLayer.load.mockResolvedValue(createMockResultSet())\n    \n    const response = await adapter.handleLoad(request)\n    \n    expect(response.status).toBe(200)\n    expect(mockSemanticLayer.load).toHaveBeenCalledWith(\n      query,\n      { organisationId: &#39;test-org&#39;, userId: &#39;test-user&#39; }\n    )\n  })\n\n  it(&#39;should handle security context errors&#39;, async () =&gt; {\n    adapter = new CustomAdapter({\n      semanticLayer: mockSemanticLayer,\n      drizzle: mockDb,\n      getSecurityContext: async () =&gt; {\n        throw new Error(&#39;Invalid token&#39;)\n      }\n    })\n\n    const request = createMockRequest(&#39;POST&#39;, &#39;/load&#39;, {})\n    const response = await adapter.handleLoad(request)\n    \n    expect(response.status).toBe(400)\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security First</strong>: Always validate and sanitize security context</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Error Handling</strong>: Provide comprehensive error handling and logging</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type Safety</strong>: Use TypeScript for all adapter components</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Performance</strong>: Implement caching and rate limiting</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Testing</strong>: Write comprehensive tests for all adapter functionality</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Documentation</strong>: Document adapter-specific configuration options</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Monitoring</strong>: Add metrics and health checks for production deployment</li></ol><h2 id=\"deployment-considerations\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Deployment Considerations</h2><h3 id=\"environment-configuration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Environment Configuration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Environment-based configuration\nexport interface AdapterConfig {\n  apiUrl: string\n  corsOrigin: string[]\n  jwtSecret: string\n  rateLimitRpm?: number\n  cacheTimeout?: number\n  logLevel?: &#39;debug&#39; | &#39;info&#39; | &#39;warn&#39; | &#39;error&#39;\n}\n\nexport function createConfigFromEnv(): AdapterConfig {\n  return {\n    apiUrl: process.env.CUBE_API_URL || &#39;/cubejs-api/v1&#39;,\n    corsOrigin: process.env.CORS_ORIGIN?.split(&#39;,&#39;) || [&#39;*&#39;],\n    jwtSecret: process.env.JWT_SECRET || &#39;default-secret&#39;,\n    rateLimitRpm: parseInt(process.env.RATE_LIMIT_RPM || &#39;100&#39;),\n    cacheTimeout: parseInt(process.env.CACHE_TIMEOUT || &#39;300&#39;),\n    logLevel: (process.env.LOG_LEVEL as any) || &#39;info&#39;\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Environment-based configuration\nexport interface AdapterConfig {\n  apiUrl: string\n  corsOrigin: string[]\n  jwtSecret: string\n  rateLimitRpm?: number\n  cacheTimeout?: number\n  logLevel?: &#39;debug&#39; | &#39;info&#39; | &#39;warn&#39; | &#39;error&#39;\n}\n\nexport function createConfigFromEnv(): AdapterConfig {\n  return {\n    apiUrl: process.env.CUBE_API_URL || &#39;/cubejs-api/v1&#39;,\n    corsOrigin: process.env.CORS_ORIGIN?.split(&#39;,&#39;) || [&#39;*&#39;],\n    jwtSecret: process.env.JWT_SECRET || &#39;default-secret&#39;,\n    rateLimitRpm: parseInt(process.env.RATE_LIMIT_RPM || &#39;100&#39;),\n    cacheTimeout: parseInt(process.env.CACHE_TIMEOUT || &#39;300&#39;),\n    logLevel: (process.env.LOG_LEVEL as any) || &#39;info&#39;\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"health-checks\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Health Checks</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export class ProductionAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  setupHealthCheck() {\n    this.router.get(&#39;/health&#39;, async (req, res) =&gt; {\n      try {\n        // Test database connection\n        await this.drizzle.execute(sql`SELECT 1`)\n        \n        // Test semantic layer\n        await this.semanticLayer.getMetadata({ organisationId: &#39;health-check&#39; })\n        \n        res.json({\n          status: &#39;healthy&#39;,\n          timestamp: new Date().toISOString(),\n          version: process.env.npm_package_version\n        })\n      } catch (error) {\n        res.status(503).json({\n          status: &#39;unhealthy&#39;,\n          error: error.message\n        })\n      }\n    })\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export class ProductionAdapter&lt;TSchema&gt; extends BaseAdapter&lt;TSchema&gt; {\n  \n  setupHealthCheck() {\n    this.router.get(&#39;/health&#39;, async (req, res) =&gt; {\n      try {\n        // Test database connection\n        await this.drizzle.execute(sql`SELECT 1`)\n        \n        // Test semantic layer\n        await this.semanticLayer.getMetadata({ organisationId: &#39;health-check&#39; })\n        \n        res.json({\n          status: &#39;healthy&#39;,\n          timestamp: new Date().toISOString(),\n          version: process.env.npm_package_version\n        })\n      } catch (error) {\n        res.status(503).json({\n          status: &#39;unhealthy&#39;,\n          error: error.message\n        })\n      }\n    })\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Review the <a href=\"#\" data-help-link=\"adapters/hono\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Hono Adapter</a> implementation</li><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Security</a> context patterns</li><li class=\"leading-relaxed\">Explore deployment options for your chosen framework</li><li class=\"leading-relaxed\">Check out adapter examples in the repository</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Adapter generator CLI tool</li><li class=\"leading-relaxed\">Standard adapter middleware library</li><li class=\"leading-relaxed\">Adapter performance benchmarking tools</li><li class=\"leading-relaxed\">GraphQL adapter for Cube.js compatibility</li><li class=\"leading-relaxed\">WebSocket adapter for real-time queries</li><li class=\"leading-relaxed\">Serverless adapter optimizations</li></ul>","path":"adapters/custom.md"},
  'adapters/express': {"slug":"adapters/express","title":"Express Adapter","content":"<h1 id=\"express-adapter\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Express Adapter</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">The Express adapter provides Cube.js-compatible API endpoints for Express.js applications, offering a familiar and flexible integration path for Node.js web applications.</p><h2 id=\"installation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Installation</h2><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install drizzle-cube express cors</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install drizzle-cube express cors\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"setup-guide\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Setup Guide</h2><h3 id=\"1-define-your-schema\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">1. Define Your Schema</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// schema.ts\nimport { pgTable, integer, text, real, boolean, timestamp } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  email: text(&#39;email&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  departmentId: integer(&#39;department_id&#39;),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  salary: real(&#39;salary&#39;),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  budget: real(&#39;budget&#39;)\n})\n\nexport const schema = { employees, departments }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// schema.ts\nimport { pgTable, integer, text, real, boolean, timestamp } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  email: text(&#39;email&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  departmentId: integer(&#39;department_id&#39;),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  salary: real(&#39;salary&#39;),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  budget: real(&#39;budget&#39;)\n})\n\nexport const schema = { employees, departments }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"2-define-your-cubes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">2. Define Your Cubes</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// cubes.ts\nimport { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    isActive: {\n      name: &#39;isActive&#39;,\n      title: &#39;Active Status&#39;,\n      type: &#39;boolean&#39;,\n      sql: employees.active\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary\n    }\n  }\n})\n\nexport const departmentsCube = defineCube(&#39;Departments&#39;, {\n  title: &#39;Department Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: departments,\n    where: eq(departments.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Department Name&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Department Count&#39;,\n      type: &#39;count&#39;,\n      sql: departments.id\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// cubes.ts\nimport { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    isActive: {\n      name: &#39;isActive&#39;,\n      title: &#39;Active Status&#39;,\n      type: &#39;boolean&#39;,\n      sql: employees.active\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary\n    }\n  }\n})\n\nexport const departmentsCube = defineCube(&#39;Departments&#39;, {\n  title: &#39;Department Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: departments,\n    where: eq(departments.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Department Name&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Department Count&#39;,\n      type: &#39;count&#39;,\n      sql: departments.id\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"quick-start\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Quick Start</h2><h3 id=\"router-integration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Router Integration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import express from &#39;express&#39;\nimport { createCubeRouter } from &#39;drizzle-cube/adapters/express&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39; // Your Drizzle schema\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39; // Your cube definitions\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = express()\n\nconst cubeRouter = createCubeRouter({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (req, res) =&gt; {\n    // Called for EVERY API request - extract user permissions\n    const token = req.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await verifyJWT(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\napp.use(&#39;/&#39;, cubeRouter) // defaults to /cubejs-api/v1\napp.listen(3000)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import express from &#39;express&#39;\nimport { createCubeRouter } from &#39;drizzle-cube/adapters/express&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39; // Your Drizzle schema\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39; // Your cube definitions\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = express()\n\nconst cubeRouter = createCubeRouter({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (req, res) =&gt; {\n    // Called for EVERY API request - extract user permissions\n    const token = req.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await verifyJWT(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\napp.use(&#39;/&#39;, cubeRouter) // defaults to /cubejs-api/v1\napp.listen(3000)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"standalone-app\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Standalone App</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { createCubeApp } from &#39;drizzle-cube/adapters/express&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = createCubeApp({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (req, res) =&gt; {\n    const token = req.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await validateTokenAndGetContext(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\napp.listen(3000, () =&gt; {\n  console.log(&#39;Cube API server running on port 3000&#39;) // defaults to /cubejs-api/v1\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { createCubeApp } from &#39;drizzle-cube/adapters/express&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = createCubeApp({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (req, res) =&gt; {\n    const token = req.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await validateTokenAndGetContext(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\napp.listen(3000, () =&gt; {\n  console.log(&#39;Cube API server running on port 3000&#39;) // defaults to /cubejs-api/v1\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"mount-on-existing-app\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Mount on Existing App</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import express from &#39;express&#39;\nimport { mountCubeRoutes } from &#39;drizzle-cube/adapters/express&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = express()\n\n// Your existing routes\napp.get(&#39;/&#39;, (req, res) =&gt; {\n  res.json({ message: &#39;Hello World&#39; })\n})\n\n// Mount cube routes\nmountCubeRoutes(app, {\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (req, res) =&gt; {\n    const orgId = req.headers[&#39;x-org-id&#39;]\n    return { organisationId: orgId }\n  },\n  basePath: &#39;/analytics&#39; // Custom base path\n})\n\napp.listen(3000)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import express from &#39;express&#39;\nimport { mountCubeRoutes } from &#39;drizzle-cube/adapters/express&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = express()\n\n// Your existing routes\napp.get(&#39;/&#39;, (req, res) =&gt; {\n  res.json({ message: &#39;Hello World&#39; })\n})\n\n// Mount cube routes\nmountCubeRoutes(app, {\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (req, res) =&gt; {\n    const orgId = req.headers[&#39;x-org-id&#39;]\n    return { organisationId: orgId }\n  },\n  basePath: &#39;/analytics&#39; // Custom base path\n})\n\napp.listen(3000)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"configuration-options\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Configuration Options</h2><h3 id=\"expressadapteroptions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">ExpressAdapterOptions</h3><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Option</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Type</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Required</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Default</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Description</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`cubes`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`Cube[]`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Array of cube definitions to register</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`drizzle`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`DrizzleDatabase`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Fully connected Drizzle database instance</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`schema`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`TSchema`</td><td class=\"px-4 py-3 text-sm text-gray-600\">⚠️</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Database schema for type inference (recommended)</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`extractSecurityContext`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`Function`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Extract security context from HTTP requests (called for every request)</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`engineType`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`'postgres'|'mysql'|'sqlite'`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">auto-detected</td><td class=\"px-4 py-3 text-sm text-gray-600\">Database engine type</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`getSecurityContext`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`Function`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Function to extract security context from request</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`cors`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`CorsOptions`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">CORS configuration</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`basePath`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`string`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">`/cubejs-api/v1`</td><td class=\"px-4 py-3 text-sm text-gray-600\">API base path</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`jsonLimit`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`string`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">`'10mb'`</td><td class=\"px-4 py-3 text-sm text-gray-600\">JSON body parser limit</td></tr></tbody>\n    </table>\n  </div><h3 id=\"security-context-function\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Security Context Function</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">getSecurityContext</code> function receives the Express request and should return a <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">SecurityContext</code>:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const getSecurityContext = async (req: Request): Promise&lt;SecurityContext&gt; =&gt; {\n  // Extract from headers\n  const orgId = req.headers[&#39;x-organization-id&#39;]\n  \n  // Or from authenticated user\n  const user = req.user // From passport, express-jwt, etc.\n  \n  return {\n    organisationId: user.orgId,\n    userId: user.id,\n    roles: user.roles\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const getSecurityContext = async (req: Request): Promise&lt;SecurityContext&gt; =&gt; {\n  // Extract from headers\n  const orgId = req.headers[&#39;x-organization-id&#39;]\n  \n  // Or from authenticated user\n  const user = req.user // From passport, express-jwt, etc.\n  \n  return {\n    organisationId: user.orgId,\n    userId: user.id,\n    roles: user.roles\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-configuration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Configuration</h2><h3 id=\"with-cors-and-authentication\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">With CORS and Authentication</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import express from &#39;express&#39;\nimport jwt from &#39;express-jwt&#39;\nimport cors from &#39;cors&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/express&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; {\n    const user = req.user as any\n    return {\n      organisationId: user.orgId,\n      userId: user.sub,\n      roles: user.roles\n    }\n  },\n  cors: {\n    origin: process.env.ALLOWED_ORIGINS?.split(&#39;,&#39;) || [&#39;http://localhost:3000&#39;],\n    credentials: true,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;, &#39;x-organization-id&#39;]\n  },\n  jsonLimit: &#39;15mb&#39;\n})\n\n// Global JWT authentication\napp.use(jwt({\n  secret: process.env.JWT_SECRET,\n  algorithms: [&#39;HS256&#39;]\n}))\n\napp.listen(3000)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import express from &#39;express&#39;\nimport jwt from &#39;express-jwt&#39;\nimport cors from &#39;cors&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/express&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; {\n    const user = req.user as any\n    return {\n      organisationId: user.orgId,\n      userId: user.sub,\n      roles: user.roles\n    }\n  },\n  cors: {\n    origin: process.env.ALLOWED_ORIGINS?.split(&#39;,&#39;) || [&#39;http://localhost:3000&#39;],\n    credentials: true,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;, &#39;x-organization-id&#39;]\n  },\n  jsonLimit: &#39;15mb&#39;\n})\n\n// Global JWT authentication\napp.use(jwt({\n  secret: process.env.JWT_SECRET,\n  algorithms: [&#39;HS256&#39;]\n}))\n\napp.listen(3000)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"custom-middleware\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Middleware</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import express from &#39;express&#39;\nimport { createCubeRouter } from &#39;drizzle-cube/adapters/express&#39;\n\nconst app = express()\n\n// Global middleware\napp.use(express.json({ limit: &#39;20mb&#39; }))\napp.use(cors())\n\n// Custom authentication middleware\nconst authenticateUser = async (req: Request, res: Response, next: NextFunction) =&gt; {\n  try {\n    const token = req.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    req.user = await validateToken(token)\n    next()\n  } catch (error) {\n    res.status(401).json({ error: &#39;Unauthorized&#39; })\n  }\n}\n\napp.use(&#39;/api&#39;, authenticateUser)\n\nconst cubeRouter = createCubeRouter({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; ({\n    organisationId: req.user.organisationId,\n    userId: req.user.id\n  })\n})\n\napp.use(&#39;/api&#39;, cubeRouter)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import express from &#39;express&#39;\nimport { createCubeRouter } from &#39;drizzle-cube/adapters/express&#39;\n\nconst app = express()\n\n// Global middleware\napp.use(express.json({ limit: &#39;20mb&#39; }))\napp.use(cors())\n\n// Custom authentication middleware\nconst authenticateUser = async (req: Request, res: Response, next: NextFunction) =&gt; {\n  try {\n    const token = req.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    req.user = await validateToken(token)\n    next()\n  } catch (error) {\n    res.status(401).json({ error: &#39;Unauthorized&#39; })\n  }\n}\n\napp.use(&#39;/api&#39;, authenticateUser)\n\nconst cubeRouter = createCubeRouter({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; ({\n    organisationId: req.user.organisationId,\n    userId: req.user.id\n  })\n})\n\napp.use(&#39;/api&#39;, cubeRouter)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"performance-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Performance Optimization</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import express from &#39;express&#39;\nimport compression from &#39;compression&#39;\nimport helmet from &#39;helmet&#39;\nimport rateLimit from &#39;express-rate-limit&#39;\n\nconst app = express()\n\n// Security and performance middleware\napp.use(helmet())\napp.use(compression())\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100 // limit each IP to 100 requests per windowMs\n})\napp.use(&#39;/api&#39;, limiter)\n\n// Trust proxy (important for rate limiting behind reverse proxy)\napp.set(&#39;trust proxy&#39;, 1)\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext,\n  jsonLimit: &#39;15mb&#39;\n})\n\napp.use(&#39;/api&#39;, cubeApp)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import express from &#39;express&#39;\nimport compression from &#39;compression&#39;\nimport helmet from &#39;helmet&#39;\nimport rateLimit from &#39;express-rate-limit&#39;\n\nconst app = express()\n\n// Security and performance middleware\napp.use(helmet())\napp.use(compression())\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100 // limit each IP to 100 requests per windowMs\n})\napp.use(&#39;/api&#39;, limiter)\n\n// Trust proxy (important for rate limiting behind reverse proxy)\napp.set(&#39;trust proxy&#39;, 1)\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext,\n  jsonLimit: &#39;15mb&#39;\n})\n\napp.use(&#39;/api&#39;, cubeApp)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"api-endpoints\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">API Endpoints</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The Express adapter provides the same Cube.js-compatible endpoints as other adapters:</p><h3 id=\"post-cubejs-apiv1load\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">POST /cubejs-api/v1/load</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Execute analytical queries.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Request Body:</strong></p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;measures&quot;: [&quot;Orders.count&quot;, &quot;Orders.totalAmount&quot;],\n  &quot;dimensions&quot;: [&quot;Orders.status&quot;, &quot;Users.city&quot;],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Orders.status&quot;,\n    &quot;operator&quot;: &quot;equals&quot;,\n    &quot;values&quot;: [&quot;completed&quot;]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;measures&quot;: [&quot;Orders.count&quot;, &quot;Orders.totalAmount&quot;],\n  &quot;dimensions&quot;: [&quot;Orders.status&quot;, &quot;Users.city&quot;],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Orders.status&quot;,\n    &quot;operator&quot;: &quot;equals&quot;,\n    &quot;values&quot;: [&quot;completed&quot;]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"get-cubejs-apiv1loadqueryencoded_query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/load?query={encoded_query}</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Execute queries via GET with query string parameter.</p><h3 id=\"get-cubejs-apiv1meta\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/meta</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Get cube metadata and schema information.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Response:</strong></p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;cubes&quot;: [{\n    &quot;name&quot;: &quot;Orders&quot;,\n    &quot;measures&quot;: [...],\n    &quot;dimensions&quot;: [...],\n    &quot;segments&quot;: [...]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;cubes&quot;: [{\n    &quot;name&quot;: &quot;Orders&quot;,\n    &quot;measures&quot;: [...],\n    &quot;dimensions&quot;: [...],\n    &quot;segments&quot;: [...]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"post-cubejs-apiv1sql\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">POST /cubejs-api/v1/sql</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Generate SQL without execution (dry-run).</p><h3 id=\"get-cubejs-apiv1sqlqueryencoded_query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/sql?query={encoded_query}</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Generate SQL via GET request.</p><h3 id=\"post-cubejs-apiv1dry-run\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">POST /cubejs-api/v1/dry-run</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Validate queries and analyze complexity.</p><h3 id=\"get-cubejs-apiv1dry-runqueryencoded_query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/dry-run?query={encoded_query}</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Validate queries via GET request.</p><h2 id=\"error-handling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Handling</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The adapter includes comprehensive error handling with Express v5 async error support:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Automatic async error handling (Express v5)\napp.use((error: Error, req: Request, res: Response, next: NextFunction) =&gt; {\n  console.error(&#39;Express cube adapter error:&#39;, error)\n  \n  if (res.headersSent) {\n    return next(error)\n  }\n  \n  const status = (error as any).status || (error as any).statusCode || 500\n  res.status(status).json({\n    error: error.message || &#39;Internal server error&#39;,\n    status\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Automatic async error handling (Express v5)\napp.use((error: Error, req: Request, res: Response, next: NextFunction) =&gt; {\n  console.error(&#39;Express cube adapter error:&#39;, error)\n  \n  if (res.headersSent) {\n    return next(error)\n  }\n  \n  const status = (error as any).status || (error as any).statusCode || 500\n  res.status(status).json({\n    error: error.message || &#39;Internal server error&#39;,\n    status\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">Error responses follow this format:</p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;error&quot;: &quot;Query validation failed: measure Orders.invalidMeasure not found&quot;,\n  &quot;status&quot;: 400\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;error&quot;: &quot;Query validation failed: measure Orders.invalidMeasure not found&quot;,\n  &quot;status&quot;: 400\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"typescript-support\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">TypeScript Support</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The adapter provides full TypeScript support:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import type { ExpressAdapterOptions } from &#39;drizzle-cube/adapters/express&#39;\nimport type { Request, Response } from &#39;express&#39;\n\nconst options: ExpressAdapterOptions&lt;typeof schema&gt; = {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req: Request) =&gt; ({\n    organisationId: req.user?.organisationId\n  })\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import type { ExpressAdapterOptions } from &#39;drizzle-cube/adapters/express&#39;\nimport type { Request, Response } from &#39;express&#39;\n\nconst options: ExpressAdapterOptions&lt;typeof schema&gt; = {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req: Request) =&gt; ({\n    organisationId: req.user?.organisationId\n  })\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"middleware-integration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Middleware Integration</h2><h3 id=\"passportjs\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Passport.js</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import passport from &#39;passport&#39;\nimport { Strategy as JwtStrategy, ExtractJwt } from &#39;passport-jwt&#39;\n\npassport.use(new JwtStrategy({\n  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n  secretOrKey: process.env.JWT_SECRET\n}, async (payload, done) =&gt; {\n  try {\n    const user = await findUserById(payload.sub)\n    return done(null, user)\n  } catch (error) {\n    return done(error, false)\n  }\n}))\n\napp.use(passport.initialize())\napp.use(&#39;/api&#39;, passport.authenticate(&#39;jwt&#39;, { session: false }))\n\nconst cubeRouter = createCubeRouter({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; ({\n    organisationId: req.user.organisationId,\n    userId: req.user.id\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import passport from &#39;passport&#39;\nimport { Strategy as JwtStrategy, ExtractJwt } from &#39;passport-jwt&#39;\n\npassport.use(new JwtStrategy({\n  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n  secretOrKey: process.env.JWT_SECRET\n}, async (payload, done) =&gt; {\n  try {\n    const user = await findUserById(payload.sub)\n    return done(null, user)\n  } catch (error) {\n    return done(error, false)\n  }\n}))\n\napp.use(passport.initialize())\napp.use(&#39;/api&#39;, passport.authenticate(&#39;jwt&#39;, { session: false }))\n\nconst cubeRouter = createCubeRouter({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; ({\n    organisationId: req.user.organisationId,\n    userId: req.user.id\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"express-session\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Express Session</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import session from &#39;express-session&#39;\nimport connectRedis from &#39;connect-redis&#39;\nimport redis from &#39;redis&#39;\n\nconst RedisStore = connectRedis(session)\nconst redisClient = redis.createClient()\n\napp.use(session({\n  store: new RedisStore({ client: redisClient }),\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: false,\n  cookie: { secure: process.env.NODE_ENV === &#39;production&#39; }\n}))\n\nconst cubeRouter = createCubeRouter({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; ({\n    organisationId: req.session.user?.organisationId,\n    userId: req.session.user?.id\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import session from &#39;express-session&#39;\nimport connectRedis from &#39;connect-redis&#39;\nimport redis from &#39;redis&#39;\n\nconst RedisStore = connectRedis(session)\nconst redisClient = redis.createClient()\n\napp.use(session({\n  store: new RedisStore({ client: redisClient }),\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: false,\n  cookie: { secure: process.env.NODE_ENV === &#39;production&#39; }\n}))\n\nconst cubeRouter = createCubeRouter({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (req) =&gt; ({\n    organisationId: req.session.user?.organisationId,\n    userId: req.session.user?.id\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Familiar API</strong>: Leverages Express.js ecosystem</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Middleware support</strong>: Full Express middleware compatibility</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Flexible routing</strong>: Router, app mounting, and standalone options</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">JSON parsing</strong>: Configurable body limits</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Error handling</strong>: Express v5 async error support</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security</strong>: Helmet, rate limiting, and CORS support</li></ul><h2 id=\"testing\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Use Express testing utilities like Supertest:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import request from &#39;supertest&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/express&#39;\n\ndescribe(&#39;Cube API&#39;, () =&gt; {\n  const app = createCubeApp({\n    semanticLayer,\n    drizzle: db,\n    schema,\n    getSecurityContext: async () =&gt; ({ organisationId: &#39;test-org&#39; })\n  })\n\n  it(&#39;should return metadata&#39;, async () =&gt; {\n    const response = await request(app)\n      .get(&#39;/cubejs-api/v1/meta&#39;)\n      .expect(200)\n    \n    expect(response.body.cubes).toBeDefined()\n  })\n\n  it(&#39;should execute queries&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Orders.count&#39;],\n      dimensions: [&#39;Orders.status&#39;]\n    }\n\n    const response = await request(app)\n      .post(&#39;/cubejs-api/v1/load&#39;)\n      .send(query)\n      .expect(200)\n    \n    expect(response.body.data).toBeDefined()\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import request from &#39;supertest&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/express&#39;\n\ndescribe(&#39;Cube API&#39;, () =&gt; {\n  const app = createCubeApp({\n    semanticLayer,\n    drizzle: db,\n    schema,\n    getSecurityContext: async () =&gt; ({ organisationId: &#39;test-org&#39; })\n  })\n\n  it(&#39;should return metadata&#39;, async () =&gt; {\n    const response = await request(app)\n      .get(&#39;/cubejs-api/v1/meta&#39;)\n      .expect(200)\n    \n    expect(response.body.cubes).toBeDefined()\n  })\n\n  it(&#39;should execute queries&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Orders.count&#39;],\n      dimensions: [&#39;Orders.status&#39;]\n    }\n\n    const response = await request(app)\n      .post(&#39;/cubejs-api/v1/load&#39;)\n      .send(query)\n      .expect(200)\n    \n    expect(response.body.data).toBeDefined()\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"deployment\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Deployment</h2><h3 id=\"docker\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Docker</h3><div class=\"relative group\">\n    <pre class=\"language-docker rounded-lg overflow-x-auto mb-4\"><code class=\"language-docker\">FROM node:18-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\nCOPY . .\nEXPOSE 3000\nCMD [&quot;node&quot;, &quot;server.js&quot;]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"FROM node:18-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\nCOPY . .\nEXPOSE 3000\nCMD [&quot;node&quot;, &quot;server.js&quot;]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"pm2\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">PM2</h3><div class=\"relative group\">\n    <pre class=\"language-javascript rounded-lg overflow-x-auto mb-4\"><code class=\"language-javascript\">// ecosystem.config.js\nmodule.exports = {\n  apps: [{\n    name: &#39;cube-express-api&#39;,\n    script: &#39;./server.js&#39;,\n    instances: &#39;max&#39;,\n    exec_mode: &#39;cluster&#39;,\n    env: {\n      NODE_ENV: &#39;production&#39;,\n      PORT: 3000\n    },\n    env_production: {\n      NODE_ENV: &#39;production&#39;,\n      PORT: 80\n    }\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// ecosystem.config.js\nmodule.exports = {\n  apps: [{\n    name: &#39;cube-express-api&#39;,\n    script: &#39;./server.js&#39;,\n    instances: &#39;max&#39;,\n    exec_mode: &#39;cluster&#39;,\n    env: {\n      NODE_ENV: &#39;production&#39;,\n      PORT: 3000\n    },\n    env_production: {\n      NODE_ENV: &#39;production&#39;,\n      PORT: 80\n    }\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"nginx-reverse-proxy\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Nginx Reverse Proxy</h3><div class=\"relative group\">\n    <pre class=\"language-nginx rounded-lg overflow-x-auto mb-4\"><code class=\"language-nginx\">server {\n    listen 80;\n    server_name your-domain.com;\n    \n    location /api/ {\n        proxy_pass http://localhost:3000/;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &#39;upgrade&#39;;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"server {\n    listen 80;\n    server_name your-domain.com;\n    \n    location /api/ {\n        proxy_pass http://localhost:3000/;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &#39;upgrade&#39;;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"comparison-with-other-adapters\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Comparison with Other Adapters</h2><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Feature</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Express</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Fastify</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Hono</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Next.js</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Performance</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">TypeScript</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Middleware Ecosystem</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Learning Curve</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Bundle Size</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Community</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td></tr></tbody>\n    </table>\n  </div><h2 id=\"migration-from-other-adapters\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Migration from Other Adapters</h2><h3 id=\"from-fastify\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">From Fastify</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Key differences when migrating from Fastify:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Middleware</strong>: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">app.use()</code> instead of <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">server.register()</code></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Request/Response</strong>: Standard Express req/res objects</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Error handling</strong>: Traditional Express error middleware</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Body parsing</strong>: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">express.json()</code> explicitly</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Validation</strong>: Manual or third-party validation libraries</li></ol><h3 id=\"from-hono\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">From Hono</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Key differences when migrating from Hono:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Context</strong>: Express req/res instead of Hono context</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Middleware</strong>: Express middleware system</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Routing</strong>: Express Router patterns</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Environment</strong>: Node.js only (no edge runtime)</li></ol><h2 id=\"troubleshooting\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Troubleshooting</h2><h3 id=\"common-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Common Issues</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Body parsing errors:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Make sure express.json() is configured\napp.use(express.json({ limit: &#39;10mb&#39; }))</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Make sure express.json() is configured\napp.use(express.json({ limit: &#39;10mb&#39; }))\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">CORS issues:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Install and configure CORS middleware\nnpm install cors\napp.use(cors({\n  origin: [&#39;http://localhost:3000&#39;],\n  credentials: true\n}))</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Install and configure CORS middleware\nnpm install cors\napp.use(cors({\n  origin: [&#39;http://localhost:3000&#39;],\n  credentials: true\n}))\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Async error handling:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// For Express v4, use express-async-errors\nnpm install express-async-errors\nrequire(&#39;express-async-errors&#39;)\n\n// Or wrap async handlers manually\nconst asyncHandler = (fn) =&gt; (req, res, next) =&gt; {\n  Promise.resolve(fn(req, res, next)).catch(next)\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// For Express v4, use express-async-errors\nnpm install express-async-errors\nrequire(&#39;express-async-errors&#39;)\n\n// Or wrap async handlers manually\nconst asyncHandler = (fn) =&gt; (req, res, next) =&gt; {\n  Promise.resolve(fn(req, res, next)).catch(next)\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Route conflicts:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Mount cube routes after other routes\napp.use(&#39;/other-routes&#39;, otherRouter)\napp.use(&#39;/api&#39;, cubeRouter) // Mount last</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Mount cube routes after other routes\napp.use(&#39;/other-routes&#39;, otherRouter)\napp.use(&#39;/api&#39;, cubeRouter) // Mount last\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security context issues:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Ensure middleware runs before cube routes\napp.use(authenticationMiddleware)\napp.use(&#39;/api&#39;, cubeRouter)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Ensure middleware runs before cube routes\napp.use(authenticationMiddleware)\napp.use(&#39;/api&#39;, cubeRouter)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"support\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Support</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Framework</strong>: Express.js 4.x, 5.x</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Node.js</strong>: 18+</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">TypeScript</strong>: 4.5+</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dependencies</strong>: <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">cors</code> (optional), <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">helmet</code> (recommended)</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">For Express-specific issues, please check:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Middleware execution order</li><li class=\"leading-relaxed\">Express version compatibility</li><li class=\"leading-relaxed\">Error handling configuration</li><li class=\"leading-relaxed\">Body parsing setup</li></ol>","path":"external:../src/adapters/express/README.md"},
  'adapters/fastify': {"slug":"adapters/fastify","title":"Fastify Adapter","content":"<h1 id=\"fastify-adapter\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Fastify Adapter</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">The Fastify adapter provides Cube.js-compatible API endpoints as a Fastify plugin, leveraging the high performance and TypeScript-first approach of Fastify v5.</p><h2 id=\"installation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Installation</h2><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install drizzle-cube fastify @fastify/cors</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install drizzle-cube fastify @fastify/cors\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"setup-guide\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Setup Guide</h2><h3 id=\"1-define-your-schema\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">1. Define Your Schema</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// schema.ts\nimport { pgTable, integer, text, real, boolean, timestamp } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  email: text(&#39;email&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  departmentId: integer(&#39;department_id&#39;),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  salary: real(&#39;salary&#39;),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  budget: real(&#39;budget&#39;)\n})\n\nexport const schema = { employees, departments }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// schema.ts\nimport { pgTable, integer, text, real, boolean, timestamp } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  email: text(&#39;email&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  departmentId: integer(&#39;department_id&#39;),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  salary: real(&#39;salary&#39;),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  budget: real(&#39;budget&#39;)\n})\n\nexport const schema = { employees, departments }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"2-define-your-cubes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">2. Define Your Cubes</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// cubes.ts\nimport { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    isActive: {\n      name: &#39;isActive&#39;,\n      title: &#39;Active Status&#39;,\n      type: &#39;boolean&#39;,\n      sql: employees.active\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary\n    }\n  }\n})\n\nexport const departmentsCube = defineCube(&#39;Departments&#39;, {\n  title: &#39;Department Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: departments,\n    where: eq(departments.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Department Name&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Department Count&#39;,\n      type: &#39;count&#39;,\n      sql: departments.id\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// cubes.ts\nimport { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    isActive: {\n      name: &#39;isActive&#39;,\n      title: &#39;Active Status&#39;,\n      type: &#39;boolean&#39;,\n      sql: employees.active\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary\n    }\n  }\n})\n\nexport const departmentsCube = defineCube(&#39;Departments&#39;, {\n  title: &#39;Department Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: departments,\n    where: eq(departments.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Department Name&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Department Count&#39;,\n      type: &#39;count&#39;,\n      sql: departments.id\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"quick-start\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Quick Start</h2><h3 id=\"plugin-registration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Plugin Registration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import fastify from &#39;fastify&#39;\nimport { cubePlugin } from &#39;drizzle-cube/adapters/fastify&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39; // Your Drizzle schema\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39; // Your cube definitions\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst server = fastify({\n  logger: true\n})\n\nawait server.register(cubePlugin, {\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request) =&gt; {\n    // Called for EVERY API request - extract user permissions\n    const token = request.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await verifyJWT(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\nawait server.listen({ port: 3000 })</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import fastify from &#39;fastify&#39;\nimport { cubePlugin } from &#39;drizzle-cube/adapters/fastify&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39; // Your Drizzle schema\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39; // Your cube definitions\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst server = fastify({\n  logger: true\n})\n\nawait server.register(cubePlugin, {\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request) =&gt; {\n    // Called for EVERY API request - extract user permissions\n    const token = request.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await verifyJWT(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\nawait server.listen({ port: 3000 })\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"standalone-app\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Standalone App</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { createCubeApp } from &#39;drizzle-cube/adapters/fastify&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = createCubeApp({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request) =&gt; {\n    const token = request.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await validateTokenAndGetContext(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\nawait app.listen({ port: 3000 })</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { createCubeApp } from &#39;drizzle-cube/adapters/fastify&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = createCubeApp({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request) =&gt; {\n    const token = request.headers.authorization?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await validateTokenAndGetContext(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\nawait app.listen({ port: 3000 })\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"manual-registration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Manual Registration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import fastify from &#39;fastify&#39;\nimport { registerCubeRoutes } from &#39;drizzle-cube/adapters/fastify&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst server = fastify()\n\n// Your existing routes\nserver.get(&#39;/&#39;, async (request, reply) =&gt; {\n  return { hello: &#39;world&#39; }\n})\n\n// Register cube routes\nawait registerCubeRoutes(server, {\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request) =&gt; {\n    const orgId = request.headers[&#39;x-org-id&#39;]\n    return { organisationId: orgId }\n  }\n})\n\nawait server.listen({ port: 3000 })</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import fastify from &#39;fastify&#39;\nimport { registerCubeRoutes } from &#39;drizzle-cube/adapters/fastify&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst server = fastify()\n\n// Your existing routes\nserver.get(&#39;/&#39;, async (request, reply) =&gt; {\n  return { hello: &#39;world&#39; }\n})\n\n// Register cube routes\nawait registerCubeRoutes(server, {\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request) =&gt; {\n    const orgId = request.headers[&#39;x-org-id&#39;]\n    return { organisationId: orgId }\n  }\n})\n\nawait server.listen({ port: 3000 })\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"configuration-options\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Configuration Options</h2><h3 id=\"fastifyadapteroptions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">FastifyAdapterOptions</h3><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Option</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Type</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Required</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Default</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Description</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`cubes`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`Cube[]`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Array of cube definitions to register</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`drizzle`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`DrizzleDatabase`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Fully connected Drizzle database instance</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`schema`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`TSchema`</td><td class=\"px-4 py-3 text-sm text-gray-600\">⚠️</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Database schema for type inference (recommended)</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`extractSecurityContext`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`Function`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Extract security context from HTTP requests (called for every request)</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`engineType`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`'postgres'|'mysql'|'sqlite'`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">auto-detected</td><td class=\"px-4 py-3 text-sm text-gray-600\">Database engine type</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`cors`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`FastifyCorsOptions`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">CORS configuration</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`basePath`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`string`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">`/cubejs-api/v1`</td><td class=\"px-4 py-3 text-sm text-gray-600\">API base path</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`bodyLimit`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`number`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">`10485760`</td><td class=\"px-4 py-3 text-sm text-gray-600\">JSON body parser limit (10MB)</td></tr></tbody>\n    </table>\n  </div><h3 id=\"security-context-function\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Security Context Function</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">getSecurityContext</code> function receives the Fastify request and should return a <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">SecurityContext</code>:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const getSecurityContext = async (request: FastifyRequest): Promise&lt;SecurityContext&gt; =&gt; {\n  // Extract from headers\n  const orgId = request.headers[&#39;x-organization-id&#39;]\n  \n  // Or from authenticated user\n  const user = await request.jwtVerify()\n  \n  return {\n    organisationId: user.orgId,\n    userId: user.sub,\n    roles: user.roles\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const getSecurityContext = async (request: FastifyRequest): Promise&lt;SecurityContext&gt; =&gt; {\n  // Extract from headers\n  const orgId = request.headers[&#39;x-organization-id&#39;]\n  \n  // Or from authenticated user\n  const user = await request.jwtVerify()\n  \n  return {\n    organisationId: user.orgId,\n    userId: user.sub,\n    roles: user.roles\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-configuration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Configuration</h2><h3 id=\"with-cors-and-authentication\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">With CORS and Authentication</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import fastify from &#39;fastify&#39;\nimport jwt from &#39;@fastify/jwt&#39;\nimport { cubePlugin } from &#39;drizzle-cube/adapters/fastify&#39;\n\nconst server = fastify({ logger: true })\n\n// Register JWT plugin\nawait server.register(jwt, {\n  secret: process.env.JWT_SECRET\n})\n\n// Authentication hook\nserver.addHook(&#39;onRequest&#39;, async (request, reply) =&gt; {\n  try {\n    await request.jwtVerify()\n  } catch (err) {\n    reply.send(err)\n  }\n})\n\nawait server.register(cubePlugin, {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; {\n    const user = request.user as any\n    return {\n      organisationId: user.orgId,\n      userId: user.sub,\n      roles: user.roles\n    }\n  },\n  cors: {\n    origin: (origin, callback) =&gt; {\n      const allowedOrigins = process.env.ALLOWED_ORIGINS?.split(&#39;,&#39;) || []\n      callback(null, allowedOrigins.includes(origin))\n    },\n    credentials: true\n  },\n  bodyLimit: 15 * 1024 * 1024 // 15MB\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import fastify from &#39;fastify&#39;\nimport jwt from &#39;@fastify/jwt&#39;\nimport { cubePlugin } from &#39;drizzle-cube/adapters/fastify&#39;\n\nconst server = fastify({ logger: true })\n\n// Register JWT plugin\nawait server.register(jwt, {\n  secret: process.env.JWT_SECRET\n})\n\n// Authentication hook\nserver.addHook(&#39;onRequest&#39;, async (request, reply) =&gt; {\n  try {\n    await request.jwtVerify()\n  } catch (err) {\n    reply.send(err)\n  }\n})\n\nawait server.register(cubePlugin, {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; {\n    const user = request.user as any\n    return {\n      organisationId: user.orgId,\n      userId: user.sub,\n      roles: user.roles\n    }\n  },\n  cors: {\n    origin: (origin, callback) =&gt; {\n      const allowedOrigins = process.env.ALLOWED_ORIGINS?.split(&#39;,&#39;) || []\n      callback(null, allowedOrigins.includes(origin))\n    },\n    credentials: true\n  },\n  bodyLimit: 15 * 1024 * 1024 // 15MB\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"custom-base-path\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Base Path</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">await server.register(cubePlugin, {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext,\n  basePath: &#39;/api/analytics&#39; // Custom API path\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"await server.register(cubePlugin, {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext,\n  basePath: &#39;/api/analytics&#39; // Custom API path\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"performance-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Performance Optimization</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const server = fastify({\n  logger: {\n    level: &#39;info&#39;,\n    prettyPrint: process.env.NODE_ENV === &#39;development&#39;\n  },\n  bodyLimit: 20 * 1024 * 1024, // 20MB\n  trustProxy: true,\n  keepAliveTimeout: 5000,\n  connectionTimeout: 10000\n})\n\nawait server.register(cubePlugin, {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext,\n  bodyLimit: 15 * 1024 * 1024\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const server = fastify({\n  logger: {\n    level: &#39;info&#39;,\n    prettyPrint: process.env.NODE_ENV === &#39;development&#39;\n  },\n  bodyLimit: 20 * 1024 * 1024, // 20MB\n  trustProxy: true,\n  keepAliveTimeout: 5000,\n  connectionTimeout: 10000\n})\n\nawait server.register(cubePlugin, {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext,\n  bodyLimit: 15 * 1024 * 1024\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"api-endpoints\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">API Endpoints</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The Fastify adapter provides the same Cube.js-compatible endpoints as other adapters:</p><h3 id=\"post-cubejs-apiv1load\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">POST /cubejs-api/v1/load</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Execute analytical queries.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Request Body:</strong></p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;measures&quot;: [&quot;Orders.count&quot;, &quot;Orders.totalAmount&quot;],\n  &quot;dimensions&quot;: [&quot;Orders.status&quot;, &quot;Users.city&quot;],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Orders.status&quot;,\n    &quot;operator&quot;: &quot;equals&quot;,\n    &quot;values&quot;: [&quot;completed&quot;]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;measures&quot;: [&quot;Orders.count&quot;, &quot;Orders.totalAmount&quot;],\n  &quot;dimensions&quot;: [&quot;Orders.status&quot;, &quot;Users.city&quot;],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Orders.status&quot;,\n    &quot;operator&quot;: &quot;equals&quot;,\n    &quot;values&quot;: [&quot;completed&quot;]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"get-cubejs-apiv1loadqueryencoded_query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/load?query={encoded_query}</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Execute queries via GET with query string parameter.</p><h3 id=\"get-cubejs-apiv1meta\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/meta</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Get cube metadata and schema information.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Response:</strong></p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;cubes&quot;: [{\n    &quot;name&quot;: &quot;Orders&quot;,\n    &quot;measures&quot;: [...],\n    &quot;dimensions&quot;: [...],\n    &quot;segments&quot;: [...]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;cubes&quot;: [{\n    &quot;name&quot;: &quot;Orders&quot;,\n    &quot;measures&quot;: [...],\n    &quot;dimensions&quot;: [...],\n    &quot;segments&quot;: [...]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"post-cubejs-apiv1sql\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">POST /cubejs-api/v1/sql</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Generate SQL without execution (dry-run).</p><h3 id=\"get-cubejs-apiv1sqlqueryencoded_query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/sql?query={encoded_query}</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Generate SQL via GET request.</p><h3 id=\"post-cubejs-apiv1dry-run\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">POST /cubejs-api/v1/dry-run</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Validate queries and analyze complexity.</p><h3 id=\"get-cubejs-apiv1dry-runqueryencoded_query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/dry-run?query={encoded_query}</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Validate queries via GET request.</p><h2 id=\"schema-validation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Schema Validation</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Fastify&#39;s built-in schema validation is used for request validation:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Automatic validation for all endpoints\n{\n  body: {\n    type: &#39;object&#39;,\n    additionalProperties: true\n  }\n}\n\n{\n  querystring: {\n    type: &#39;object&#39;,\n    properties: {\n      query: { type: &#39;string&#39; }\n    },\n    required: [&#39;query&#39;]\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Automatic validation for all endpoints\n{\n  body: {\n    type: &#39;object&#39;,\n    additionalProperties: true\n  }\n}\n\n{\n  querystring: {\n    type: &#39;object&#39;,\n    properties: {\n      query: { type: &#39;string&#39; }\n    },\n    required: [&#39;query&#39;]\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"error-handling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Handling</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The adapter includes comprehensive error handling:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Global error handler\nfastify.setErrorHandler(async (error, request, reply) =&gt; {\n  request.log.error(error, &#39;Fastify cube adapter error&#39;)\n  \n  if (reply.statusCode &lt; 400) {\n    reply.status(500)\n  }\n  \n  return formatErrorResponse(error, reply.statusCode)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Global error handler\nfastify.setErrorHandler(async (error, request, reply) =&gt; {\n  request.log.error(error, &#39;Fastify cube adapter error&#39;)\n  \n  if (reply.statusCode &lt; 400) {\n    reply.status(500)\n  }\n  \n  return formatErrorResponse(error, reply.statusCode)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">Error responses follow this format:</p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;error&quot;: &quot;Query validation failed: measure Orders.invalidMeasure not found&quot;,\n  &quot;status&quot;: 400\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;error&quot;: &quot;Query validation failed: measure Orders.invalidMeasure not found&quot;,\n  &quot;status&quot;: 400\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"typescript-support\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">TypeScript Support</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The adapter provides full TypeScript support:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import type { FastifyAdapterOptions } from &#39;drizzle-cube/adapters/fastify&#39;\n\nconst options: FastifyAdapterOptions&lt;typeof schema&gt; = {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; ({\n    organisationId: request.user?.organisationId\n  })\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import type { FastifyAdapterOptions } from &#39;drizzle-cube/adapters/fastify&#39;\n\nconst options: FastifyAdapterOptions&lt;typeof schema&gt; = {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; ({\n    organisationId: request.user?.organisationId\n  })\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Fast startup</strong>: Leverages Fastify&#39;s optimized routing</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Low memory</strong>: Efficient request handling</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">High throughput</strong>: Built for high-load scenarios</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">JSON parsing</strong>: Optimized with custom body limits</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Schema validation</strong>: Built-in request validation</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Logging</strong>: Structured logging with Pino</li></ul><h2 id=\"testing\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Use Fastify&#39;s built-in testing utilities:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { test } from &#39;tap&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/fastify&#39;\n\ntest(&#39;cube API&#39;, async (t) =&gt; {\n  const app = createCubeApp({ ... })\n  \n  const response = await app.inject({\n    method: &#39;GET&#39;,\n    url: &#39;/cubejs-api/v1/meta&#39;\n  })\n  \n  t.equal(response.statusCode, 200)\n  const data = JSON.parse(response.payload)\n  t.ok(data.cubes)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { test } from &#39;tap&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/fastify&#39;\n\ntest(&#39;cube API&#39;, async (t) =&gt; {\n  const app = createCubeApp({ ... })\n  \n  const response = await app.inject({\n    method: &#39;GET&#39;,\n    url: &#39;/cubejs-api/v1/meta&#39;\n  })\n  \n  t.equal(response.statusCode, 200)\n  const data = JSON.parse(response.payload)\n  t.ok(data.cubes)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"deployment\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Deployment</h2><h3 id=\"docker\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Docker</h3><div class=\"relative group\">\n    <pre class=\"language-docker rounded-lg overflow-x-auto mb-4\"><code class=\"language-docker\">FROM node:18-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\nCOPY . .\nEXPOSE 3000\nCMD [&quot;node&quot;, &quot;server.js&quot;]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"FROM node:18-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\nCOPY . .\nEXPOSE 3000\nCMD [&quot;node&quot;, &quot;server.js&quot;]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"pm2\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">PM2</h3><div class=\"relative group\">\n    <pre class=\"language-javascript rounded-lg overflow-x-auto mb-4\"><code class=\"language-javascript\">// ecosystem.config.js\nmodule.exports = {\n  apps: [{\n    name: &#39;cube-api&#39;,\n    script: &#39;./server.js&#39;,\n    instances: &#39;max&#39;,\n    exec_mode: &#39;cluster&#39;,\n    env: {\n      NODE_ENV: &#39;production&#39;,\n      PORT: 3000\n    }\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// ecosystem.config.js\nmodule.exports = {\n  apps: [{\n    name: &#39;cube-api&#39;,\n    script: &#39;./server.js&#39;,\n    instances: &#39;max&#39;,\n    exec_mode: &#39;cluster&#39;,\n    env: {\n      NODE_ENV: &#39;production&#39;,\n      PORT: 3000\n    }\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"comparison-with-other-adapters\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Comparison with Other Adapters</h2><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Feature</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Fastify</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Express</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Hono</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Performance</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">TypeScript</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Schema Validation</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Plugin Ecosystem</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Bundle Size</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Learning Curve</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr></tbody>\n    </table>\n  </div><h2 id=\"migration-from-express\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Migration from Express</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Key differences when migrating from Express:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Plugin system</strong>: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">server.register()</code> instead of <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">app.use()</code></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Request/Reply</strong>: Different API surface</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Schema validation</strong>: Built-in validation</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Async/await</strong>: Required for all handlers</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Error handling</strong>: Uses <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">setErrorHandler()</code></li></ol><h2 id=\"troubleshooting\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Troubleshooting</h2><h3 id=\"common-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Common Issues</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Plugin registration fails:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// ❌ Wrong\nfastify.register(cubePlugin, options)\n\n// ✅ Correct\nawait fastify.register(cubePlugin, options)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// ❌ Wrong\nfastify.register(cubePlugin, options)\n\n// ✅ Correct\nawait fastify.register(cubePlugin, options)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">CORS not working:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Make sure @fastify/cors is installed\nnpm install @fastify/cors</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Make sure @fastify/cors is installed\nnpm install @fastify/cors\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Body parsing errors:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Increase body limit if needed\n{\n  bodyLimit: 50 * 1024 * 1024 // 50MB\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Increase body limit if needed\n{\n  bodyLimit: 50 * 1024 * 1024 // 50MB\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">TypeScript errors:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Use type assertion for complex cases\nawait fastify.register(cubePlugin as any, options)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Use type assertion for complex cases\nawait fastify.register(cubePlugin as any, options)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"support\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Support</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Framework</strong>: <a href=\"https://fastify.dev/\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Fastify v5+</a></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Node.js</strong>: 18+</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">TypeScript</strong>: 4.5+</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dependencies</strong>: <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">@fastify/cors</code> (optional)</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">For issues specific to the Fastify adapter, please check:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Fastify version compatibility</li><li class=\"leading-relaxed\">Plugin registration order</li><li class=\"leading-relaxed\">Request/response handling differences</li><li class=\"leading-relaxed\">Schema validation rules</li></ol>","path":"external:../src/adapters/fastify/README.md"},
  'adapters/hono': {"slug":"adapters/hono","title":"Hono Adapter","content":"<h1 id=\"hono-adapter\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Hono Adapter</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">The Hono adapter provides Cube.js-compatible API endpoints for Hono applications, offering high performance and edge runtime compatibility with a modern TypeScript-first API.</p><h2 id=\"installation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Installation</h2><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install drizzle-cube hono</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install drizzle-cube hono\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"setup-guide\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Setup Guide</h2><h3 id=\"1-define-your-schema\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">1. Define Your Schema</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// schema.ts\nimport { pgTable, integer, text, real, boolean, timestamp } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  email: text(&#39;email&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  departmentId: integer(&#39;department_id&#39;),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  salary: real(&#39;salary&#39;),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  budget: real(&#39;budget&#39;)\n})\n\nexport const schema = { employees, departments }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// schema.ts\nimport { pgTable, integer, text, real, boolean, timestamp } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  email: text(&#39;email&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  departmentId: integer(&#39;department_id&#39;),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  salary: real(&#39;salary&#39;),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  budget: real(&#39;budget&#39;)\n})\n\nexport const schema = { employees, departments }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"2-define-your-cubes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">2. Define Your Cubes</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// cubes.ts\nimport { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    isActive: {\n      name: &#39;isActive&#39;,\n      title: &#39;Active Status&#39;,\n      type: &#39;boolean&#39;,\n      sql: employees.active\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary\n    }\n  }\n})\n\nexport const departmentsCube = defineCube(&#39;Departments&#39;, {\n  title: &#39;Department Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: departments,\n    where: eq(departments.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Department Name&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Department Count&#39;,\n      type: &#39;count&#39;,\n      sql: departments.id\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// cubes.ts\nimport { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    isActive: {\n      name: &#39;isActive&#39;,\n      title: &#39;Active Status&#39;,\n      type: &#39;boolean&#39;,\n      sql: employees.active\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary\n    }\n  }\n})\n\nexport const departmentsCube = defineCube(&#39;Departments&#39;, {\n  title: &#39;Department Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: departments,\n    where: eq(departments.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Department Name&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Department Count&#39;,\n      type: &#39;count&#39;,\n      sql: departments.id\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"quick-start\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Quick Start</h2><h3 id=\"basic-integration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Integration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { Hono } from &#39;hono&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39; // Your Drizzle schema\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39; // Your cube definitions\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = createCubeApp({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (c) =&gt; {\n    // Called for EVERY API request - extract user permissions\n    const token = c.req.header(&#39;Authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await verifyJWT(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\nexport default app</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { Hono } from &#39;hono&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39; // Your Drizzle schema\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39; // Your cube definitions\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = createCubeApp({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (c) =&gt; {\n    // Called for EVERY API request - extract user permissions\n    const token = c.req.header(&#39;Authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await verifyJWT(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\nexport default app\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"mount-on-existing-app\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Mount on Existing App</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { Hono } from &#39;hono&#39;\nimport { createCubeRoutes } from &#39;drizzle-cube/adapters/hono&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = new Hono()\n\n// Your existing routes\napp.get(&#39;/&#39;, (c) =&gt; c.json({ message: &#39;Hello Hono!&#39; }))\n\n// Mount cube routes\nconst cubeRoutes = createCubeRoutes({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (c) =&gt; {\n    // Extract organisation ID from headers\n    const orgId = c.req.header(&#39;x-org-id&#39;)\n    return { organisationId: orgId }\n  }\n})\n\napp.route(&#39;/api&#39;, cubeRoutes)\n\nexport default app</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { Hono } from &#39;hono&#39;\nimport { createCubeRoutes } from &#39;drizzle-cube/adapters/hono&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst app = new Hono()\n\n// Your existing routes\napp.get(&#39;/&#39;, (c) =&gt; c.json({ message: &#39;Hello Hono!&#39; }))\n\n// Mount cube routes\nconst cubeRoutes = createCubeRoutes({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (c) =&gt; {\n    // Extract organisation ID from headers\n    const orgId = c.req.header(&#39;x-org-id&#39;)\n    return { organisationId: orgId }\n  }\n})\n\napp.route(&#39;/api&#39;, cubeRoutes)\n\nexport default app\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"custom-base-path\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Base Path</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const cubeApp = createCubeApp({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (c) =&gt; {\n    const user = c.get(&#39;user&#39;)\n    return { organisationId: user?.organisationId }\n  },\n  basePath: &#39;/analytics&#39; // Custom API path\n})\n\n// Routes will be available at:\n// /analytics/load, /analytics/meta, etc.</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const cubeApp = createCubeApp({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (c) =&gt; {\n    const user = c.get(&#39;user&#39;)\n    return { organisationId: user?.organisationId }\n  },\n  basePath: &#39;/analytics&#39; // Custom API path\n})\n\n// Routes will be available at:\n// /analytics/load, /analytics/meta, etc.\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"configuration-options\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Configuration Options</h2><h3 id=\"honoadapteroptions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">HonoAdapterOptions</h3><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Option</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Type</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Required</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Default</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Description</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`cubes`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`Cube[]`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Array of cube definitions to register</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`drizzle`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`DrizzleDatabase`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Fully connected Drizzle database instance</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`schema`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`TSchema`</td><td class=\"px-4 py-3 text-sm text-gray-600\">⚠️</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Database schema for type inference (recommended)</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`extractSecurityContext`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`Function`</td><td class=\"px-4 py-3 text-sm text-gray-600\">✅</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">Extract security context from HTTP requests (called for every request)</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`engineType`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`'postgres'|'mysql'|'sqlite'`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">auto-detected</td><td class=\"px-4 py-3 text-sm text-gray-600\">Database engine type</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`cors`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`CorsOptions`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">-</td><td class=\"px-4 py-3 text-sm text-gray-600\">CORS configuration</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`basePath`</td><td class=\"px-4 py-3 text-sm text-gray-600\">`string`</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">`/cubejs-api/v1`</td><td class=\"px-4 py-3 text-sm text-gray-600\">API base path</td></tr></tbody>\n    </table>\n  </div><h3 id=\"security-context-function\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Security Context Function</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">extractSecurityContext</code> function is <strong class=\"font-semibold text-slate-700\">called for every API request</strong> and extracts security information from the HTTP request. This is your security boundary for multi-tenant applications:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const extractSecurityContext = async (c: Context): Promise&lt;SecurityContext&gt; =&gt; {\n  // Extract from headers\n  const orgId = c.req.header(&#39;x-organization-id&#39;)\n  \n  // Or from authenticated user (set by middleware)\n  const user = c.get(&#39;user&#39;)\n  \n  // Or from JWT payload\n  const payload = c.get(&#39;jwtPayload&#39;)\n  \n  return {\n    organisationId: user?.orgId || orgId,\n    userId: user?.id || payload?.sub,\n    roles: user?.roles || payload?.roles\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const extractSecurityContext = async (c: Context): Promise&lt;SecurityContext&gt; =&gt; {\n  // Extract from headers\n  const orgId = c.req.header(&#39;x-organization-id&#39;)\n  \n  // Or from authenticated user (set by middleware)\n  const user = c.get(&#39;user&#39;)\n  \n  // Or from JWT payload\n  const payload = c.get(&#39;jwtPayload&#39;)\n  \n  return {\n    organisationId: user?.orgId || orgId,\n    userId: user?.id || payload?.sub,\n    roles: user?.roles || payload?.roles\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Important</strong>: This function must return consistent security context for the same user across all requests, as it&#39;s used to filter data in every database query.</p><h2 id=\"advanced-configuration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Configuration</h2><h3 id=\"with-jwt-authentication\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">With JWT Authentication</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { Hono } from &#39;hono&#39;\nimport { jwt } from &#39;hono/jwt&#39;\nimport { cors } from &#39;hono/cors&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = new Hono()\n\n// CORS middleware\napp.use(&#39;/api/*&#39;, cors({\n  origin: process.env.ALLOWED_ORIGINS?.split(&#39;,&#39;) || [&#39;http://localhost:3000&#39;],\n  allowHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;, &#39;x-organization-id&#39;],\n  allowMethods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n  credentials: true\n}))\n\n// JWT authentication\napp.use(&#39;/api/*&#39;, jwt({\n  secret: process.env.JWT_SECRET!\n}))\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    const payload = c.get(&#39;jwtPayload&#39;)\n    return {\n      organisationId: payload.orgId,\n      userId: payload.sub,\n      roles: payload.roles\n    }\n  }\n})\n\napp.route(&#39;/api&#39;, cubeApp)\n\nexport default app</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { Hono } from &#39;hono&#39;\nimport { jwt } from &#39;hono/jwt&#39;\nimport { cors } from &#39;hono/cors&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = new Hono()\n\n// CORS middleware\napp.use(&#39;/api/*&#39;, cors({\n  origin: process.env.ALLOWED_ORIGINS?.split(&#39;,&#39;) || [&#39;http://localhost:3000&#39;],\n  allowHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;, &#39;x-organization-id&#39;],\n  allowMethods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n  credentials: true\n}))\n\n// JWT authentication\napp.use(&#39;/api/*&#39;, jwt({\n  secret: process.env.JWT_SECRET!\n}))\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    const payload = c.get(&#39;jwtPayload&#39;)\n    return {\n      organisationId: payload.orgId,\n      userId: payload.sub,\n      roles: payload.roles\n    }\n  }\n})\n\napp.route(&#39;/api&#39;, cubeApp)\n\nexport default app\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"custom-authentication-middleware\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Authentication Middleware</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { Hono } from &#39;hono&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = new Hono()\n\n// Custom auth middleware\napp.use(&#39;/api/*&#39;, async (c, next) =&gt; {\n  const token = c.req.header(&#39;Authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n  \n  if (!token) {\n    return c.json({ error: &#39;Unauthorized&#39; }, 401)\n  }\n  \n  try {\n    const user = await validateToken(token)\n    c.set(&#39;user&#39;, user)\n    await next()\n  } catch (error) {\n    return c.json({ error: &#39;Invalid token&#39; }, 401)\n  }\n})\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    const user = c.get(&#39;user&#39;)\n    return {\n      organisationId: user.organisationId,\n      userId: user.id,\n      roles: user.roles\n    }\n  }\n})\n\napp.route(&#39;/api&#39;, cubeApp)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { Hono } from &#39;hono&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = new Hono()\n\n// Custom auth middleware\napp.use(&#39;/api/*&#39;, async (c, next) =&gt; {\n  const token = c.req.header(&#39;Authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n  \n  if (!token) {\n    return c.json({ error: &#39;Unauthorized&#39; }, 401)\n  }\n  \n  try {\n    const user = await validateToken(token)\n    c.set(&#39;user&#39;, user)\n    await next()\n  } catch (error) {\n    return c.json({ error: &#39;Invalid token&#39; }, 401)\n  }\n})\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    const user = c.get(&#39;user&#39;)\n    return {\n      organisationId: user.organisationId,\n      userId: user.id,\n      roles: user.roles\n    }\n  }\n})\n\napp.route(&#39;/api&#39;, cubeApp)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"edge-runtime-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Edge Runtime Optimization</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { Hono } from &#39;hono&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db, // Use edge-compatible database\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    // Optimized for edge runtime\n    const orgId = c.req.header(&#39;x-org-id&#39;)\n    return { organisationId: orgId }\n  }\n})\n\n// Export for various edge platforms\nexport default app\n\n// Cloudflare Workers\nexport default {\n  fetch: app.fetch\n}\n\n// Vercel Edge Runtime\nexport const runtime = &#39;edge&#39;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { Hono } from &#39;hono&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db, // Use edge-compatible database\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    // Optimized for edge runtime\n    const orgId = c.req.header(&#39;x-org-id&#39;)\n    return { organisationId: orgId }\n  }\n})\n\n// Export for various edge platforms\nexport default app\n\n// Cloudflare Workers\nexport default {\n  fetch: app.fetch\n}\n\n// Vercel Edge Runtime\nexport const runtime = &#39;edge&#39;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"api-endpoints\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">API Endpoints</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The Hono adapter provides the same Cube.js-compatible endpoints as other adapters:</p><h3 id=\"post-cubejs-apiv1load\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">POST /cubejs-api/v1/load</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Execute analytical queries.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Request Body:</strong></p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;measures&quot;: [&quot;Orders.count&quot;, &quot;Orders.totalAmount&quot;],\n  &quot;dimensions&quot;: [&quot;Orders.status&quot;, &quot;Users.city&quot;],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Orders.status&quot;,\n    &quot;operator&quot;: &quot;equals&quot;,\n    &quot;values&quot;: [&quot;completed&quot;]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;measures&quot;: [&quot;Orders.count&quot;, &quot;Orders.totalAmount&quot;],\n  &quot;dimensions&quot;: [&quot;Orders.status&quot;, &quot;Users.city&quot;],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Orders.status&quot;,\n    &quot;operator&quot;: &quot;equals&quot;,\n    &quot;values&quot;: [&quot;completed&quot;]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"get-cubejs-apiv1loadqueryencoded_query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/load?query={encoded_query}</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Execute queries via GET with query string parameter.</p><h3 id=\"get-cubejs-apiv1meta\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/meta</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Get cube metadata and schema information.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Response:</strong></p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;cubes&quot;: [{\n    &quot;name&quot;: &quot;Orders&quot;,\n    &quot;measures&quot;: [...],\n    &quot;dimensions&quot;: [...],\n    &quot;segments&quot;: [...]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;cubes&quot;: [{\n    &quot;name&quot;: &quot;Orders&quot;,\n    &quot;measures&quot;: [...],\n    &quot;dimensions&quot;: [...],\n    &quot;segments&quot;: [...]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"post-cubejs-apiv1sql\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">POST /cubejs-api/v1/sql</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Generate SQL without execution (dry-run).</p><h3 id=\"get-cubejs-apiv1sqlqueryencoded_query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/sql?query={encoded_query}</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Generate SQL via GET request.</p><h3 id=\"post-cubejs-apiv1dry-run\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">POST /cubejs-api/v1/dry-run</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Validate queries and analyze complexity.</p><h3 id=\"get-cubejs-apiv1dry-runqueryencoded_query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">GET /cubejs-api/v1/dry-run?query={encoded_query}</code></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Validate queries via GET request.</p><h2 id=\"error-handling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Handling</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The adapter includes comprehensive error handling with Hono&#39;s error handling patterns:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { HTTPException } from &#39;hono/http-exception&#39;\n\n// Error responses follow this format:\n{\n  &quot;error&quot;: &quot;Query validation failed: measure Orders.invalidMeasure not found&quot;,\n  &quot;status&quot;: 400\n}\n\n// Custom error handling\napp.onError((err, c) =&gt; {\n  console.error(&#39;Hono cube adapter error:&#39;, err)\n  \n  if (err instanceof HTTPException) {\n    return c.json({\n      error: err.message,\n      status: err.status\n    }, err.status)\n  }\n  \n  return c.json({\n    error: &#39;Internal server error&#39;,\n    status: 500\n  }, 500)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { HTTPException } from &#39;hono/http-exception&#39;\n\n// Error responses follow this format:\n{\n  &quot;error&quot;: &quot;Query validation failed: measure Orders.invalidMeasure not found&quot;,\n  &quot;status&quot;: 400\n}\n\n// Custom error handling\napp.onError((err, c) =&gt; {\n  console.error(&#39;Hono cube adapter error:&#39;, err)\n  \n  if (err instanceof HTTPException) {\n    return c.json({\n      error: err.message,\n      status: err.status\n    }, err.status)\n  }\n  \n  return c.json({\n    error: &#39;Internal server error&#39;,\n    status: 500\n  }, 500)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"typescript-support\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">TypeScript Support</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The adapter provides full TypeScript support with Hono&#39;s type system:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import type { HonoAdapterOptions } from &#39;drizzle-cube/adapters/hono&#39;\nimport type { Context } from &#39;hono&#39;\n\n// Type-safe configuration\nconst options: HonoAdapterOptions&lt;typeof schema&gt; = {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c: Context) =&gt; ({\n    organisationId: c.get(&#39;user&#39;)?.organisationId\n  })\n}\n\n// Type-safe context access\ntype Variables = {\n  user: { id: string; organisationId: string }\n  jwtPayload: { sub: string; orgId: string }\n}\n\nconst app = new Hono&lt;{ Variables: Variables }&gt;()</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import type { HonoAdapterOptions } from &#39;drizzle-cube/adapters/hono&#39;\nimport type { Context } from &#39;hono&#39;\n\n// Type-safe configuration\nconst options: HonoAdapterOptions&lt;typeof schema&gt; = {\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c: Context) =&gt; ({\n    organisationId: c.get(&#39;user&#39;)?.organisationId\n  })\n}\n\n// Type-safe context access\ntype Variables = {\n  user: { id: string; organisationId: string }\n  jwtPayload: { sub: string; orgId: string }\n}\n\nconst app = new Hono&lt;{ Variables: Variables }&gt;()\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"middleware-integration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Middleware Integration</h2><h3 id=\"built-in-hono-middleware\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Built-in Hono Middleware</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { Hono } from &#39;hono&#39;\nimport { logger } from &#39;hono/logger&#39;\nimport { timing } from &#39;hono/timing&#39;\nimport { requestId } from &#39;hono/request-id&#39;\nimport { compress } from &#39;hono/compress&#39;\n\nconst app = new Hono()\n\n// Performance and observability\napp.use(&#39;*&#39;, logger())\napp.use(&#39;*&#39;, timing())\napp.use(&#39;*&#39;, requestId())\napp.use(&#39;*&#39;, compress())\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\napp.route(&#39;/api&#39;, cubeApp)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { Hono } from &#39;hono&#39;\nimport { logger } from &#39;hono/logger&#39;\nimport { timing } from &#39;hono/timing&#39;\nimport { requestId } from &#39;hono/request-id&#39;\nimport { compress } from &#39;hono/compress&#39;\n\nconst app = new Hono()\n\n// Performance and observability\napp.use(&#39;*&#39;, logger())\napp.use(&#39;*&#39;, timing())\napp.use(&#39;*&#39;, requestId())\napp.use(&#39;*&#39;, compress())\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\napp.route(&#39;/api&#39;, cubeApp)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"rate-limiting\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Rate Limiting</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { Hono } from &#39;hono&#39;\nimport { rateLimiter } from &#39;hono/rate-limiter&#39;\n\nconst app = new Hono()\n\n// Rate limiting middleware\napp.use(&#39;/api/*&#39;, rateLimiter({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  limit: 100, // limit each IP to 100 requests per windowMs\n  keyGenerator: (c) =&gt; c.req.header(&#39;x-forwarded-for&#39;) || &#39;unknown&#39;\n}))\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\napp.route(&#39;/api&#39;, cubeApp)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { Hono } from &#39;hono&#39;\nimport { rateLimiter } from &#39;hono/rate-limiter&#39;\n\nconst app = new Hono()\n\n// Rate limiting middleware\napp.use(&#39;/api/*&#39;, rateLimiter({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  limit: 100, // limit each IP to 100 requests per windowMs\n  keyGenerator: (c) =&gt; c.req.header(&#39;x-forwarded-for&#39;) || &#39;unknown&#39;\n}))\n\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\napp.route(&#39;/api&#39;, cubeApp)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">High performance</strong>: Optimized for speed and low latency</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Edge runtime</strong>: Compatible with Cloudflare Workers, Vercel Edge</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Small bundle</strong>: Minimal overhead and dependencies</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Tree shaking</strong>: Only includes used functionality</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Streaming</strong>: Supports streaming responses</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Modern APIs</strong>: Uses modern Web APIs</li></ul><h2 id=\"platform-deployment\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Platform Deployment</h2><h3 id=\"cloudflare-workers\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Cloudflare Workers</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// wrangler.toml\nname = &quot;cube-api&quot;\nmain = &quot;src/index.ts&quot;\ncompatibility_date = &quot;2024-01-01&quot;\n\n[env.production.vars]\nDATABASE_URL = &quot;your-database-url&quot;\nJWT_SECRET = &quot;your-jwt-secret&quot;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// wrangler.toml\nname = &quot;cube-api&quot;\nmain = &quot;src/index.ts&quot;\ncompatibility_date = &quot;2024-01-01&quot;\n\n[env.production.vars]\nDATABASE_URL = &quot;your-database-url&quot;\nJWT_SECRET = &quot;your-jwt-secret&quot;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// src/index.ts\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    const token = c.req.header(&#39;Authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    return await getContextFromToken(token)\n  }\n})\n\nexport default app</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// src/index.ts\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    const token = c.req.header(&#39;Authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    return await getContextFromToken(token)\n  }\n})\n\nexport default app\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"vercel-edge-runtime\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Vercel Edge Runtime</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// api/cube/[...route].ts\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\nimport { handle } from &#39;hono/vercel&#39;\n\nexport const runtime = &#39;edge&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\nexport const GET = handle(app)\nexport const POST = handle(app)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// api/cube/[...route].ts\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\nimport { handle } from &#39;hono/vercel&#39;\n\nexport const runtime = &#39;edge&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\nexport const GET = handle(app)\nexport const POST = handle(app)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"deno-deploy\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Deno Deploy</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// main.ts\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\nDeno.serve(app.fetch)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// main.ts\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\nDeno.serve(app.fetch)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"bun\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Bun</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// server.ts\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\nexport default {\n  port: 3000,\n  fetch: app.fetch\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// server.ts\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext\n})\n\nexport default {\n  port: 3000,\n  fetch: app.fetch\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"testing\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Use Hono&#39;s testing utilities:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { testClient } from &#39;hono/testing&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\ndescribe(&#39;Cube API&#39;, () =&gt; {\n  const app = createCubeApp({\n    semanticLayer,\n    drizzle: db,\n    schema,\n    getSecurityContext: async () =&gt; ({ organisationId: &#39;test-org&#39; })\n  })\n  \n  const client = testClient(app)\n\n  it(&#39;should return metadata&#39;, async () =&gt; {\n    const res = await client.meta.$get()\n    expect(res.status).toBe(200)\n    \n    const data = await res.json()\n    expect(data.cubes).toBeDefined()\n  })\n\n  it(&#39;should execute queries&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Orders.count&#39;],\n      dimensions: [&#39;Orders.status&#39;]\n    }\n\n    const res = await client.load.$post({ json: query })\n    expect(res.status).toBe(200)\n    \n    const data = await res.json()\n    expect(data.data).toBeDefined()\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { testClient } from &#39;hono/testing&#39;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\ndescribe(&#39;Cube API&#39;, () =&gt; {\n  const app = createCubeApp({\n    semanticLayer,\n    drizzle: db,\n    schema,\n    getSecurityContext: async () =&gt; ({ organisationId: &#39;test-org&#39; })\n  })\n  \n  const client = testClient(app)\n\n  it(&#39;should return metadata&#39;, async () =&gt; {\n    const res = await client.meta.$get()\n    expect(res.status).toBe(200)\n    \n    const data = await res.json()\n    expect(data.cubes).toBeDefined()\n  })\n\n  it(&#39;should execute queries&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Orders.count&#39;],\n      dimensions: [&#39;Orders.status&#39;]\n    }\n\n    const res = await client.load.$post({ json: query })\n    expect(res.status).toBe(200)\n    \n    const data = await res.json()\n    expect(data.data).toBeDefined()\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"comparison-with-other-adapters\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Comparison with Other Adapters</h2><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Feature</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Hono</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Express</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Fastify</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Next.js</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Performance</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">TypeScript</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Edge Runtime</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">❌</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Bundle Size</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Learning Curve</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">Platform Support</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td><td class=\"px-4 py-3 text-sm text-gray-600\">⭐⭐</td></tr></tbody>\n    </table>\n  </div><h2 id=\"migration-from-other-adapters\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Migration from Other Adapters</h2><h3 id=\"from-express\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">From Express</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Key differences when migrating from Express:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Context API</strong>: Use Hono&#39;s <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">c</code> context instead of <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">req</code>/<code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">res</code></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Middleware</strong>: Different middleware system and patterns</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Routing</strong>: Hono&#39;s routing API</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Edge compatibility</strong>: Async/await patterns optimized for edge</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type safety</strong>: Enhanced TypeScript support</li></ol><h3 id=\"from-fastify\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">From Fastify</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Key differences when migrating from Fastify:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Plugin system</strong>: No plugin registration, direct middleware</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Context</strong>: Single context object instead of request/reply</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Schema validation</strong>: Manual validation or third-party libraries</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Edge runtime</strong>: Edge-first design patterns</li></ol><h2 id=\"troubleshooting\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Troubleshooting</h2><h3 id=\"common-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Common Issues</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Edge runtime compatibility:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Use edge-compatible database connections\nimport { neon } from &#39;@neondatabase/serverless&#39;\nconst db = drizzle(neon(process.env.DATABASE_URL))</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Use edge-compatible database connections\nimport { neon } from &#39;@neondatabase/serverless&#39;\nconst db = drizzle(neon(process.env.DATABASE_URL))\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Context access:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Access context correctly\nconst getSecurityContext = async (c) =&gt; {\n  const user = c.get(&#39;user&#39;) // From middleware\n  const header = c.req.header(&#39;x-org-id&#39;) // From headers\n  return { organisationId: user?.orgId || header }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Access context correctly\nconst getSecurityContext = async (c) =&gt; {\n  const user = c.get(&#39;user&#39;) // From middleware\n  const header = c.req.header(&#39;x-org-id&#39;) // From headers\n  return { organisationId: user?.orgId || header }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">CORS issues:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Configure CORS properly for your platform\nimport { cors } from &#39;hono/cors&#39;\n\napp.use(&#39;/api/*&#39;, cors({\n  origin: [&#39;https://your-domain.com&#39;],\n  credentials: true\n}))</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Configure CORS properly for your platform\nimport { cors } from &#39;hono/cors&#39;\n\napp.use(&#39;/api/*&#39;, cors({\n  origin: [&#39;https://your-domain.com&#39;],\n  credentials: true\n}))\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Bundle size:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Tree shake unused functionality\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n// Don&#39;t import entire Hono unless needed</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Tree shake unused functionality\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n// Don&#39;t import entire Hono unless needed\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"support\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Support</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Framework</strong>: Hono v4+</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Runtime</strong>: Node.js 18+, Deno, Bun, Cloudflare Workers, Vercel Edge</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">TypeScript</strong>: 4.5+</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dependencies</strong>: None (Hono is peer dependency)</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">For Hono-specific issues, please check:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Runtime compatibility (edge vs Node.js)</li><li class=\"leading-relaxed\">Context access patterns</li><li class=\"leading-relaxed\">Middleware execution order</li><li class=\"leading-relaxed\">Platform-specific configurations</li></ol>","path":"external:../src/adapters/hono/README.md"},
  'adapters/nextjs': {"slug":"adapters/nextjs","title":"Next.js Adapter for Drizzle Cube","content":"<h1 id=\"nextjs-adapter-for-drizzle-cube\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Next.js Adapter for Drizzle Cube</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">The Next.js adapter provides seamless integration between Drizzle Cube and Next.js 15 applications using the App Router. It creates route handlers that expose Cube.js-compatible API endpoints for your analytics and dashboard applications.</p><h2 id=\"features\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Features</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">🚀 <strong class=\"font-semibold text-slate-700\">App Router Support</strong> - Full Next.js 15 App Router integration</li><li class=\"leading-relaxed\">🔒 <strong class=\"font-semibold text-slate-700\">Type Safety</strong> - Complete TypeScript support with Drizzle schema inference</li><li class=\"leading-relaxed\">⚡ <strong class=\"font-semibold text-slate-700\">Edge Runtime</strong> - Optional Edge Runtime support for global deployment</li><li class=\"leading-relaxed\">🌐 <strong class=\"font-semibold text-slate-700\">CORS Support</strong> - Built-in CORS handling for cross-origin requests</li><li class=\"leading-relaxed\">🛡️ <strong class=\"font-semibold text-slate-700\">Security Context</strong> - Flexible authentication and authorization integration</li><li class=\"leading-relaxed\">📊 <strong class=\"font-semibold text-slate-700\">Cube.js Compatible</strong> - Drop-in replacement for Cube.js API endpoints</li><li class=\"leading-relaxed\">🔄 <strong class=\"font-semibold text-slate-700\">Multiple Formats</strong> - Support for both GET and POST requests</li></ul><h2 id=\"installation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Installation</h2><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install drizzle-cube next</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install drizzle-cube next\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"setup-guide\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Setup Guide</h2><h3 id=\"1-define-your-schema\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">1. Define Your Schema</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// lib/schema.ts\nimport { pgTable, integer, text, real, boolean, timestamp } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  email: text(&#39;email&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  departmentId: integer(&#39;department_id&#39;),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  salary: real(&#39;salary&#39;),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  budget: real(&#39;budget&#39;)\n})\n\nexport const schema = { employees, departments }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// lib/schema.ts\nimport { pgTable, integer, text, real, boolean, timestamp } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  email: text(&#39;email&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  departmentId: integer(&#39;department_id&#39;),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  salary: real(&#39;salary&#39;),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: integer(&#39;id&#39;).primaryKey().generatedAlwaysAsIdentity(),\n  name: text(&#39;name&#39;).notNull(),\n  organisationId: integer(&#39;organisation_id&#39;).notNull(),\n  budget: real(&#39;budget&#39;)\n})\n\nexport const schema = { employees, departments }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"2-define-your-cubes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">2. Define Your Cubes</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// lib/cubes.ts\nimport { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    isActive: {\n      name: &#39;isActive&#39;,\n      title: &#39;Active Status&#39;,\n      type: &#39;boolean&#39;,\n      sql: employees.active\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary\n    }\n  }\n})\n\nexport const departmentsCube = defineCube(&#39;Departments&#39;, {\n  title: &#39;Department Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: departments,\n    where: eq(departments.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Department Name&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Department Count&#39;,\n      type: &#39;count&#39;,\n      sql: departments.id\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// lib/cubes.ts\nimport { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    isActive: {\n      name: &#39;isActive&#39;,\n      title: &#39;Active Status&#39;,\n      type: &#39;boolean&#39;,\n      sql: employees.active\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary\n    }\n  }\n})\n\nexport const departmentsCube = defineCube(&#39;Departments&#39;, {\n  title: &#39;Department Analytics&#39;,\n  sql: (ctx) =&gt; ({\n    from: departments,\n    where: eq(departments.organisationId, ctx.securityContext.organisationId)\n  }),\n  dimensions: {\n    name: {\n      name: &#39;name&#39;,\n      title: &#39;Department Name&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    }\n  },\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Department Count&#39;,\n      type: &#39;count&#39;,\n      sql: departments.id\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"quick-start\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Quick Start</h2><h3 id=\"1-create-route-handlers\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">1. Create Route Handlers</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create API route handlers in your Next.js app directory:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// app/api/cubejs/v1/load/route.ts\nimport { createLoadHandler } from &#39;drizzle-cube/adapters/nextjs&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;@/lib/schema&#39;\nimport { employeesCube, departmentsCube } from &#39;@/lib/cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst handler = createLoadHandler({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request) =&gt; {\n    // Called for EVERY API request - extract user permissions\n    const token = request.headers.get(&#39;authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await validateToken(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\nexport { handler as GET, handler as POST }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// app/api/cubejs/v1/load/route.ts\nimport { createLoadHandler } from &#39;drizzle-cube/adapters/nextjs&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;@/lib/schema&#39;\nimport { employeesCube, departmentsCube } from &#39;@/lib/cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst handler = createLoadHandler({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request) =&gt; {\n    // Called for EVERY API request - extract user permissions\n    const token = request.headers.get(&#39;authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await validateToken(token)\n    \n    return {\n      organisationId: decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  }\n})\n\nexport { handler as GET, handler as POST }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"2-create-all-endpoints\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">2. Create All Endpoints</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">For a complete setup, create all four Cube.js API endpoints:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// app/api/cubejs/v1/[...endpoint]/route.ts\nimport { createCubeHandlers } from &#39;drizzle-cube/adapters/nextjs&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;@/lib/schema&#39;\nimport { employeesCube, departmentsCube } from &#39;@/lib/cubes&#39;\nimport { getServerSession } from &#39;next-auth&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst handlers = createCubeHandlers({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request, context) =&gt; {\n    const session = await getServerSession()\n    const token = request.headers.get(&#39;authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await validateToken(token)\n    \n    return {\n      organisationId: session?.user?.organisationId || decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  },\n  cors: {\n    origin: [&#39;http://localhost:3000&#39;, &#39;https://yourdomain.com&#39;],\n    credentials: true,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;]\n  }\n})\n\nexport async function GET(request: NextRequest, context: RouteContext) {\n  const { endpoint } = context.params\n  \n  switch (endpoint[0]) {\n    case &#39;load&#39;:\n      return handlers.load(request, context)\n    case &#39;meta&#39;:\n      return handlers.meta(request, context)\n    case &#39;sql&#39;:\n      return handlers.sql(request, context)\n    case &#39;dry-run&#39;:\n      return handlers.dryRun(request, context)\n    default:\n      return NextResponse.json({ error: &#39;Not found&#39; }, { status: 404 })\n  }\n}\n\nexport async function POST(request: NextRequest, context: RouteContext) {\n  const { endpoint } = context.params\n  \n  switch (endpoint[0]) {\n    case &#39;load&#39;:\n      return handlers.load(request, context)\n    case &#39;sql&#39;:\n      return handlers.sql(request, context)\n    case &#39;dry-run&#39;:\n      return handlers.dryRun(request, context)\n    default:\n      return NextResponse.json({ error: &#39;Method not allowed&#39; }, { status: 405 })\n  }\n}\n\n// Handle CORS preflight requests\nexport async function OPTIONS(request: NextRequest) {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      &#39;Access-Control-Allow-Origin&#39;: &#39;*&#39;,\n      &#39;Access-Control-Allow-Methods&#39;: &#39;GET, POST, OPTIONS&#39;,\n      &#39;Access-Control-Allow-Headers&#39;: &#39;Content-Type, Authorization&#39;\n    }\n  })\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// app/api/cubejs/v1/[...endpoint]/route.ts\nimport { createCubeHandlers } from &#39;drizzle-cube/adapters/nextjs&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;@/lib/schema&#39;\nimport { employeesCube, departmentsCube } from &#39;@/lib/cubes&#39;\nimport { getServerSession } from &#39;next-auth&#39;\n\n// Create fully connected Drizzle database instance\nconst client = postgres(process.env.DATABASE_URL!)\nconst db = drizzle(client, { schema })\n\nconst handlers = createCubeHandlers({\n  cubes: [employeesCube, departmentsCube],\n  drizzle: db,\n  schema,\n  extractSecurityContext: async (request, context) =&gt; {\n    const session = await getServerSession()\n    const token = request.headers.get(&#39;authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const decoded = await validateToken(token)\n    \n    return {\n      organisationId: session?.user?.organisationId || decoded.orgId,\n      userId: decoded.userId,\n      roles: decoded.roles\n    }\n  },\n  cors: {\n    origin: [&#39;http://localhost:3000&#39;, &#39;https://yourdomain.com&#39;],\n    credentials: true,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;]\n  }\n})\n\nexport async function GET(request: NextRequest, context: RouteContext) {\n  const { endpoint } = context.params\n  \n  switch (endpoint[0]) {\n    case &#39;load&#39;:\n      return handlers.load(request, context)\n    case &#39;meta&#39;:\n      return handlers.meta(request, context)\n    case &#39;sql&#39;:\n      return handlers.sql(request, context)\n    case &#39;dry-run&#39;:\n      return handlers.dryRun(request, context)\n    default:\n      return NextResponse.json({ error: &#39;Not found&#39; }, { status: 404 })\n  }\n}\n\nexport async function POST(request: NextRequest, context: RouteContext) {\n  const { endpoint } = context.params\n  \n  switch (endpoint[0]) {\n    case &#39;load&#39;:\n      return handlers.load(request, context)\n    case &#39;sql&#39;:\n      return handlers.sql(request, context)\n    case &#39;dry-run&#39;:\n      return handlers.dryRun(request, context)\n    default:\n      return NextResponse.json({ error: &#39;Method not allowed&#39; }, { status: 405 })\n  }\n}\n\n// Handle CORS preflight requests\nexport async function OPTIONS(request: NextRequest) {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      &#39;Access-Control-Allow-Origin&#39;: &#39;*&#39;,\n      &#39;Access-Control-Allow-Methods&#39;: &#39;GET, POST, OPTIONS&#39;,\n      &#39;Access-Control-Allow-Headers&#39;: &#39;Content-Type, Authorization&#39;\n    }\n  })\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"3-semantic-layer-configuration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">3. Semantic Layer Configuration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// lib/cube-config.ts\nimport { SemanticLayerCompiler } from &#39;drizzle-cube/server&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst connectionString = process.env.DATABASE_URL!\nconst client = postgres(connectionString)\nexport const db = drizzle(client, { schema })\n\n// Create semantic layer and register cubes\nexport const semanticLayer = new SemanticLayerCompiler({\n  drizzle: db,\n  schema,\n  engineType: &#39;postgres&#39;\n})\n\n// Register your cubes\nsemanticLayer.registerCube(employeesCube)\nsemanticLayer.registerCube(departmentsCube)\n\nexport { schema }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// lib/cube-config.ts\nimport { SemanticLayerCompiler } from &#39;drizzle-cube/server&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\nimport { schema } from &#39;./schema&#39;\nimport { employeesCube, departmentsCube } from &#39;./cubes&#39;\n\n// Create fully connected Drizzle database instance\nconst connectionString = process.env.DATABASE_URL!\nconst client = postgres(connectionString)\nexport const db = drizzle(client, { schema })\n\n// Create semantic layer and register cubes\nexport const semanticLayer = new SemanticLayerCompiler({\n  drizzle: db,\n  schema,\n  engineType: &#39;postgres&#39;\n})\n\n// Register your cubes\nsemanticLayer.registerCube(employeesCube)\nsemanticLayer.registerCube(departmentsCube)\n\nexport { schema }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"api-reference\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">API Reference</h2><h3 id=\"route-handler-functions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Route Handler Functions</h3><h4 id=\"createloadhandleroptions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">createLoadHandler(options)</code></h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Creates a route handler for query execution (<code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">/load</code> endpoint).</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const loadHandler = createLoadHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\nexport { loadHandler as GET, loadHandler as POST }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const loadHandler = createLoadHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\nexport { loadHandler as GET, loadHandler as POST }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"createmetahandleroptions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">createMetaHandler(options)</code></h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Creates a route handler for metadata retrieval (<code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">/meta</code> endpoint).</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const metaHandler = createMetaHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\nexport { metaHandler as GET }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const metaHandler = createMetaHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\nexport { metaHandler as GET }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"createsqlhandleroptions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">createSqlHandler(options)</code></h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Creates a route handler for SQL generation (<code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">/sql</code> endpoint).</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const sqlHandler = createSqlHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\nexport { sqlHandler as GET, sqlHandler as POST }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const sqlHandler = createSqlHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\nexport { sqlHandler as GET, sqlHandler as POST }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"createdryrunhandleroptions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">createDryRunHandler(options)</code></h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Creates a route handler for query validation (<code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">/dry-run</code> endpoint).</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const dryRunHandler = createDryRunHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\nexport { dryRunHandler as GET, dryRunHandler as POST }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const dryRunHandler = createDryRunHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\nexport { dryRunHandler as GET, dryRunHandler as POST }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"createcubehandlersoptions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">createCubeHandlers(options)</code></h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Convenience function that creates all four handlers at once.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const { load, meta, sql, dryRun } = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\n// Use in individual route files\nexport { load as GET, load as POST }  // In load/route.ts\nexport { meta as GET }                // In meta/route.ts</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const { load, meta, sql, dryRun } = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; ({ \n    organisationId: &#39;org-123&#39; \n  })\n})\n\n// Use in individual route files\nexport { load as GET, load as POST }  // In load/route.ts\nexport { meta as GET }                // In meta/route.ts\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"configuration-options\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Configuration Options</h3><h4 id=\"nextadapteroptions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">NextAdapterOptions</code></h4><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface NextAdapterOptions&lt;TSchema&gt; {\n  semanticLayer: SemanticLayerCompiler&lt;TSchema&gt;  // Semantic layer instance with registered cubes\n  drizzle: DrizzleDatabase&lt;TSchema&gt;              // Fully connected Drizzle database instance\n  schema?: TSchema                               // Database schema for type inference (recommended)\n  getSecurityContext: (request: NextRequest, context?: RouteContext) =&gt; SecurityContext | Promise&lt;SecurityContext&gt;\n  cors?: NextCorsOptions                         // CORS configuration\n  runtime?: &#39;edge&#39; | &#39;nodejs&#39;                   // Runtime environment\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface NextAdapterOptions&lt;TSchema&gt; {\n  semanticLayer: SemanticLayerCompiler&lt;TSchema&gt;  // Semantic layer instance with registered cubes\n  drizzle: DrizzleDatabase&lt;TSchema&gt;              // Fully connected Drizzle database instance\n  schema?: TSchema                               // Database schema for type inference (recommended)\n  getSecurityContext: (request: NextRequest, context?: RouteContext) =&gt; SecurityContext | Promise&lt;SecurityContext&gt;\n  cors?: NextCorsOptions                         // CORS configuration\n  runtime?: &#39;edge&#39; | &#39;nodejs&#39;                   // Runtime environment\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"nextcorsoptions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">NextCorsOptions</code></h4><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface NextCorsOptions {\n  origin?: string | string[] | ((origin: string) =&gt; boolean)\n  methods?: string[]\n  allowedHeaders?: string[]\n  credentials?: boolean\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface NextCorsOptions {\n  origin?: string | string[] | ((origin: string) =&gt; boolean)\n  methods?: string[]\n  allowedHeaders?: string[]\n  credentials?: boolean\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"usage-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Usage Patterns</h2><h3 id=\"individual-route-files\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Individual Route Files</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create separate route files for each endpoint:</p><div class=\"relative group\">\n    <pre class=\"language-text rounded-lg overflow-x-auto mb-4\"><code class=\"language-text\">app/api/cubejs/v1/\n├── load/route.ts\n├── meta/route.ts\n├── sql/route.ts\n└── dry-run/route.ts</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"app/api/cubejs/v1/\n├── load/route.ts\n├── meta/route.ts\n├── sql/route.ts\n└── dry-run/route.ts\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// app/api/cubejs/v1/load/route.ts\nimport { createLoadHandler } from &#39;drizzle-cube/adapters/nextjs&#39;\nimport { cubeConfig } from &#39;@/lib/cube-config&#39;\n\nconst handler = createLoadHandler(cubeConfig)\nexport { handler as GET, handler as POST }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// app/api/cubejs/v1/load/route.ts\nimport { createLoadHandler } from &#39;drizzle-cube/adapters/nextjs&#39;\nimport { cubeConfig } from &#39;@/lib/cube-config&#39;\n\nconst handler = createLoadHandler(cubeConfig)\nexport { handler as GET, handler as POST }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"catch-all-route\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Catch-All Route</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Use a dynamic catch-all route for simpler setup:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// app/api/cubejs/v1/[...endpoint]/route.ts\nimport { createCubeHandlers } from &#39;drizzle-cube/adapters/nextjs&#39;\nimport { cubeConfig } from &#39;@/lib/cube-config&#39;\n\nconst handlers = createCubeHandlers(cubeConfig)\n\nexport async function GET(request: NextRequest, { params }: { params: { endpoint: string[] } }) {\n  const endpoint = params.endpoint[0]\n  \n  switch (endpoint) {\n    case &#39;load&#39;: return handlers.load(request)\n    case &#39;meta&#39;: return handlers.meta(request)\n    case &#39;sql&#39;: return handlers.sql(request)\n    case &#39;dry-run&#39;: return handlers.dryRun(request)\n    default: return NextResponse.json({ error: &#39;Not found&#39; }, { status: 404 })\n  }\n}\n\nexport async function POST(request: NextRequest, { params }: { params: { endpoint: string[] } }) {\n  const endpoint = params.endpoint[0]\n  \n  switch (endpoint) {\n    case &#39;load&#39;: return handlers.load(request)\n    case &#39;sql&#39;: return handlers.sql(request)\n    case &#39;dry-run&#39;: return handlers.dryRun(request)\n    default: return NextResponse.json({ error: &#39;Method not allowed&#39; }, { status: 405 })\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// app/api/cubejs/v1/[...endpoint]/route.ts\nimport { createCubeHandlers } from &#39;drizzle-cube/adapters/nextjs&#39;\nimport { cubeConfig } from &#39;@/lib/cube-config&#39;\n\nconst handlers = createCubeHandlers(cubeConfig)\n\nexport async function GET(request: NextRequest, { params }: { params: { endpoint: string[] } }) {\n  const endpoint = params.endpoint[0]\n  \n  switch (endpoint) {\n    case &#39;load&#39;: return handlers.load(request)\n    case &#39;meta&#39;: return handlers.meta(request)\n    case &#39;sql&#39;: return handlers.sql(request)\n    case &#39;dry-run&#39;: return handlers.dryRun(request)\n    default: return NextResponse.json({ error: &#39;Not found&#39; }, { status: 404 })\n  }\n}\n\nexport async function POST(request: NextRequest, { params }: { params: { endpoint: string[] } }) {\n  const endpoint = params.endpoint[0]\n  \n  switch (endpoint) {\n    case &#39;load&#39;: return handlers.load(request)\n    case &#39;sql&#39;: return handlers.sql(request)\n    case &#39;dry-run&#39;: return handlers.dryRun(request)\n    default: return NextResponse.json({ error: &#39;Method not allowed&#39; }, { status: 405 })\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"authentication-authorization\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Authentication &amp; Authorization</h2><h3 id=\"next-auth-integration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Next-Auth Integration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { getServerSession } from &#39;next-auth&#39;\nimport { authOptions } from &#39;@/lib/auth&#39;\n\nconst handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; {\n    const session = await getServerSession(authOptions)\n    \n    if (!session?.user) {\n      throw new Error(&#39;Unauthorized&#39;)\n    }\n    \n    return {\n      organisationId: session.user.organisationId,\n      userId: session.user.id,\n      roles: session.user.roles\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { getServerSession } from &#39;next-auth&#39;\nimport { authOptions } from &#39;@/lib/auth&#39;\n\nconst handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; {\n    const session = await getServerSession(authOptions)\n    \n    if (!session?.user) {\n      throw new Error(&#39;Unauthorized&#39;)\n    }\n    \n    return {\n      organisationId: session.user.organisationId,\n      userId: session.user.id,\n      roles: session.user.roles\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"custom-jwt-authentication\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom JWT Authentication</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { verify } from &#39;jsonwebtoken&#39;\n\nconst handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; {\n    const token = request.headers.get(&#39;authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    \n    if (!token) {\n      throw new Error(&#39;Missing authorization token&#39;)\n    }\n    \n    try {\n      const payload = verify(token, process.env.JWT_SECRET!) as any\n      return {\n        organisationId: payload.orgId,\n        userId: payload.sub\n      }\n    } catch {\n      throw new Error(&#39;Invalid token&#39;)\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { verify } from &#39;jsonwebtoken&#39;\n\nconst handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; {\n    const token = request.headers.get(&#39;authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    \n    if (!token) {\n      throw new Error(&#39;Missing authorization token&#39;)\n    }\n    \n    try {\n      const payload = verify(token, process.env.JWT_SECRET!) as any\n      return {\n        organisationId: payload.orgId,\n        userId: payload.sub\n      }\n    } catch {\n      throw new Error(&#39;Invalid token&#39;)\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"header-based-context\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Header-Based Context</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; {\n    // Extract from custom headers\n    const orgId = request.headers.get(&#39;x-organization-id&#39;)\n    const userId = request.headers.get(&#39;x-user-id&#39;)\n    \n    // Or from route parameters\n    const routeOrgId = context?.params?.orgId\n    \n    return {\n      organisationId: orgId || routeOrgId,\n      userId\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request, context) =&gt; {\n    // Extract from custom headers\n    const orgId = request.headers.get(&#39;x-organization-id&#39;)\n    const userId = request.headers.get(&#39;x-user-id&#39;)\n    \n    // Or from route parameters\n    const routeOrgId = context?.params?.orgId\n    \n    return {\n      organisationId: orgId || routeOrgId,\n      userId\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"cors-configuration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">CORS Configuration</h2><h3 id=\"basic-cors\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic CORS</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const handlers = createCubeHandlers({\n  // ... other options\n  cors: {\n    origin: &#39;*&#39;,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;]\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const handlers = createCubeHandlers({\n  // ... other options\n  cors: {\n    origin: &#39;*&#39;,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;]\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"environment-based-cors\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Environment-Based CORS</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const handlers = createCubeHandlers({\n  // ... other options\n  cors: {\n    origin: process.env.NODE_ENV === &#39;production&#39; \n      ? [&#39;https://yourdomain.com&#39;, &#39;https://app.yourdomain.com&#39;]\n      : [&#39;http://localhost:3000&#39;, &#39;http://localhost:3001&#39;],\n    credentials: true,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;]\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const handlers = createCubeHandlers({\n  // ... other options\n  cors: {\n    origin: process.env.NODE_ENV === &#39;production&#39; \n      ? [&#39;https://yourdomain.com&#39;, &#39;https://app.yourdomain.com&#39;]\n      : [&#39;http://localhost:3000&#39;, &#39;http://localhost:3001&#39;],\n    credentials: true,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;]\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"dynamic-cors\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dynamic CORS</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const handlers = createCubeHandlers({\n  // ... other options\n  cors: {\n    origin: (origin) =&gt; {\n      // Allow requests from subdomains\n      return origin?.endsWith(&#39;.yourdomain.com&#39;) || \n             origin === &#39;http://localhost:3000&#39;\n    },\n    credentials: true,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;]\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const handlers = createCubeHandlers({\n  // ... other options\n  cors: {\n    origin: (origin) =&gt; {\n      // Allow requests from subdomains\n      return origin?.endsWith(&#39;.yourdomain.com&#39;) || \n             origin === &#39;http://localhost:3000&#39;\n    },\n    credentials: true,\n    methods: [&#39;GET&#39;, &#39;POST&#39;, &#39;OPTIONS&#39;],\n    allowedHeaders: [&#39;Content-Type&#39;, &#39;Authorization&#39;]\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"edge-runtime-support\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Edge Runtime Support</h2><h3 id=\"basic-edge-configuration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Edge Configuration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// app/api/cubejs/v1/load/route.ts\nexport const runtime = &#39;edge&#39;\n\nimport { createLoadHandler } from &#39;drizzle-cube/adapters/nextjs&#39;\n\nconst handler = createLoadHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  runtime: &#39;edge&#39;, // Must match the export above\n  getSecurityContext: async (request) =&gt; {\n    // Use only Web APIs in Edge Runtime\n    const token = request.headers.get(&#39;authorization&#39;)\n    return await validateTokenEdge(token)\n  }\n})\n\nexport { handler as GET, handler as POST }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// app/api/cubejs/v1/load/route.ts\nexport const runtime = &#39;edge&#39;\n\nimport { createLoadHandler } from &#39;drizzle-cube/adapters/nextjs&#39;\n\nconst handler = createLoadHandler({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  runtime: &#39;edge&#39;, // Must match the export above\n  getSecurityContext: async (request) =&gt; {\n    // Use only Web APIs in Edge Runtime\n    const token = request.headers.get(&#39;authorization&#39;)\n    return await validateTokenEdge(token)\n  }\n})\n\nexport { handler as GET, handler as POST }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"edge-runtime-considerations\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Edge Runtime Considerations</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Web APIs Only</strong>: Use only Web APIs, no Node.js specific features</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Database Connections</strong>: Use edge-compatible database drivers like <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">@neondatabase/serverless</code></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Authentication</strong>: Use JWT libraries that work in Edge Runtime</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">File System</strong>: No access to Node.js <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">fs</code> module</li></ul><h2 id=\"server-component-integration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Server Component Integration</h2><h3 id=\"server-side-data-fetching\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Server-Side Data Fetching</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// app/dashboard/page.tsx\nimport { semanticLayer } from &#39;@/lib/cube-config&#39;\nimport { DashboardClient } from &#39;./dashboard-client&#39;\n\nexport default async function DashboardPage() {\n  // Get metadata on server-side for faster initial load\n  const metadata = semanticLayer.getMetadata()\n  \n  // Optionally, pre-fetch some data\n  const initialData = await semanticLayer.executeMultiCubeQuery({\n    measures: [&#39;Sales.totalRevenue&#39;],\n    dimensions: [&#39;Sales.date&#39;],\n    timeDimensions: [{\n      dimension: &#39;Sales.date&#39;,\n      granularity: &#39;month&#39;,\n      dateRange: &#39;last 12 months&#39;\n    }]\n  }, { organisationId: &#39;org-123&#39; })\n  \n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Analytics Dashboard&lt;/h1&gt;\n      &lt;DashboardClient \n        initialMetadata={metadata}\n        initialData={initialData}\n        apiBasePath=&quot;/api/cubejs/v1&quot;\n      /&gt;\n    &lt;/div&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// app/dashboard/page.tsx\nimport { semanticLayer } from &#39;@/lib/cube-config&#39;\nimport { DashboardClient } from &#39;./dashboard-client&#39;\n\nexport default async function DashboardPage() {\n  // Get metadata on server-side for faster initial load\n  const metadata = semanticLayer.getMetadata()\n  \n  // Optionally, pre-fetch some data\n  const initialData = await semanticLayer.executeMultiCubeQuery({\n    measures: [&#39;Sales.totalRevenue&#39;],\n    dimensions: [&#39;Sales.date&#39;],\n    timeDimensions: [{\n      dimension: &#39;Sales.date&#39;,\n      granularity: &#39;month&#39;,\n      dateRange: &#39;last 12 months&#39;\n    }]\n  }, { organisationId: &#39;org-123&#39; })\n  \n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Analytics Dashboard&lt;/h1&gt;\n      &lt;DashboardClient \n        initialMetadata={metadata}\n        initialData={initialData}\n        apiBasePath=&quot;/api/cubejs/v1&quot;\n      /&gt;\n    &lt;/div&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"client-component\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Client Component</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// app/dashboard/dashboard-client.tsx\n&#39;use client&#39;\n\nimport { CubeProvider } from &#39;drizzle-cube/client&#39;\n\ninterface DashboardClientProps {\n  initialMetadata: any\n  initialData?: any\n  apiBasePath: string\n}\n\nexport function DashboardClient({ \n  initialMetadata, \n  initialData, \n  apiBasePath \n}: DashboardClientProps) {\n  return (\n    &lt;CubeProvider \n      apiUrl={apiBasePath}\n      headers={{\n        &#39;Authorization&#39;: `Bearer ${getToken()}`\n      }}\n    &gt;\n      &lt;Dashboard \n        initialMetadata={initialMetadata}\n        initialData={initialData}\n      /&gt;\n    &lt;/CubeProvider&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// app/dashboard/dashboard-client.tsx\n&#39;use client&#39;\n\nimport { CubeProvider } from &#39;drizzle-cube/client&#39;\n\ninterface DashboardClientProps {\n  initialMetadata: any\n  initialData?: any\n  apiBasePath: string\n}\n\nexport function DashboardClient({ \n  initialMetadata, \n  initialData, \n  apiBasePath \n}: DashboardClientProps) {\n  return (\n    &lt;CubeProvider \n      apiUrl={apiBasePath}\n      headers={{\n        &#39;Authorization&#39;: `Bearer ${getToken()}`\n      }}\n    &gt;\n      &lt;Dashboard \n        initialMetadata={initialMetadata}\n        initialData={initialData}\n      /&gt;\n    &lt;/CubeProvider&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"error-handling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Handling</h2><h3 id=\"global-error-handling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Global Error Handling</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// app/api/cubejs/v1/error.ts\nimport { NextRequest } from &#39;next/server&#39;\n\nexport default function ErrorHandler(\n  error: Error,\n  request: NextRequest\n) {\n  console.error(&#39;Cube API Error:&#39;, error)\n  \n  // Log to external service\n  if (process.env.NODE_ENV === &#39;production&#39;) {\n    logErrorToService(error, request)\n  }\n  \n  return NextResponse.json({\n    error: &#39;Internal server error&#39;,\n    requestId: request.headers.get(&#39;x-request-id&#39;)\n  }, { status: 500 })\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// app/api/cubejs/v1/error.ts\nimport { NextRequest } from &#39;next/server&#39;\n\nexport default function ErrorHandler(\n  error: Error,\n  request: NextRequest\n) {\n  console.error(&#39;Cube API Error:&#39;, error)\n  \n  // Log to external service\n  if (process.env.NODE_ENV === &#39;production&#39;) {\n    logErrorToService(error, request)\n  }\n  \n  return NextResponse.json({\n    error: &#39;Internal server error&#39;,\n    requestId: request.headers.get(&#39;x-request-id&#39;)\n  }, { status: 500 })\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"custom-error-responses\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Error Responses</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; {\n    try {\n      return await getContext(request)\n    } catch (error) {\n      if (error.message === &#39;Unauthorized&#39;) {\n        throw new Error(&#39;Please log in to access analytics&#39;)\n      }\n      throw error\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; {\n    try {\n      return await getContext(request)\n    } catch (error) {\n      if (error.message === &#39;Unauthorized&#39;) {\n        throw new Error(&#39;Please log in to access analytics&#39;)\n      }\n      throw error\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance-optimization\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Optimization</h2><h3 id=\"caching\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Caching</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// app/api/cubejs/v1/meta/route.ts\nimport { unstable_cache } from &#39;next/cache&#39;\n\nconst getCachedMetadata = unstable_cache(\n  async () =&gt; semanticLayer.getMetadata(),\n  [&#39;cube-metadata&#39;],\n  { revalidate: 3600 } // Cache for 1 hour\n)\n\nexport async function GET() {\n  const metadata = await getCachedMetadata()\n  return NextResponse.json({ cubes: metadata })\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// app/api/cubejs/v1/meta/route.ts\nimport { unstable_cache } from &#39;next/cache&#39;\n\nconst getCachedMetadata = unstable_cache(\n  async () =&gt; semanticLayer.getMetadata(),\n  [&#39;cube-metadata&#39;],\n  { revalidate: 3600 } // Cache for 1 hour\n)\n\nexport async function GET() {\n  const metadata = await getCachedMetadata()\n  return NextResponse.json({ cubes: metadata })\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"database-connection-pooling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Database Connection Pooling</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// lib/database.ts\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\n\n// Configure connection pooling\nconst client = postgres(process.env.DATABASE_URL!, {\n  max: 20,\n  idle_timeout: 20,\n  max_lifetime: 60 * 30\n})\n\nexport const db = drizzle(client, { schema })</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// lib/database.ts\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\nimport postgres from &#39;postgres&#39;\n\n// Configure connection pooling\nconst client = postgres(process.env.DATABASE_URL!, {\n  max: 20,\n  idle_timeout: 20,\n  max_lifetime: 60 * 30\n})\n\nexport const db = drizzle(client, { schema })\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"deployment\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Deployment</h2><h3 id=\"vercel-deployment\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Vercel Deployment</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// vercel.json\n{\n  &quot;functions&quot;: {\n    &quot;app/api/cubejs/v1/[...endpoint]/route.ts&quot;: {\n      &quot;maxDuration&quot;: 30\n    }\n  },\n  &quot;env&quot;: {\n    &quot;DATABASE_URL&quot;: &quot;@database-url&quot;\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// vercel.json\n{\n  &quot;functions&quot;: {\n    &quot;app/api/cubejs/v1/[...endpoint]/route.ts&quot;: {\n      &quot;maxDuration&quot;: 30\n    }\n  },\n  &quot;env&quot;: {\n    &quot;DATABASE_URL&quot;: &quot;@database-url&quot;\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"environment-variables\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Environment Variables</h3><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\"># .env.local\nDATABASE_URL=postgresql://user:password@localhost:5432/mydb\nNEXTAUTH_SECRET=your-secret-here\nNEXTAUTH_URL=http://localhost:3000\nJWT_SECRET=your-jwt-secret</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"# .env.local\nDATABASE_URL=postgresql://user:password@localhost:5432/mydb\nNEXTAUTH_SECRET=your-secret-here\nNEXTAUTH_URL=http://localhost:3000\nJWT_SECRET=your-jwt-secret\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"typescript-configuration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">TypeScript Configuration</h2><h3 id=\"tsconfigjson\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">tsconfig.json</h3><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;es2017&quot;,\n    &quot;lib&quot;: [&quot;dom&quot;, &quot;dom.iterable&quot;, &quot;es6&quot;],\n    &quot;allowJs&quot;: true,\n    &quot;skipLibCheck&quot;: true,\n    &quot;strict&quot;: true,\n    &quot;forceConsistentCasingInFileNames&quot;: true,\n    &quot;noEmit&quot;: true,\n    &quot;esModuleInterop&quot;: true,\n    &quot;module&quot;: &quot;esnext&quot;,\n    &quot;moduleResolution&quot;: &quot;node&quot;,\n    &quot;resolveJsonModule&quot;: true,\n    &quot;isolatedModules&quot;: true,\n    &quot;jsx&quot;: &quot;preserve&quot;,\n    &quot;incremental&quot;: true,\n    &quot;plugins&quot;: [\n      {\n        &quot;name&quot;: &quot;next&quot;\n      }\n    ],\n    &quot;baseUrl&quot;: &quot;.&quot;,\n    &quot;paths&quot;: {\n      &quot;@/*&quot;: [&quot;./*&quot;]\n    }\n  },\n  &quot;include&quot;: [&quot;next-env.d.ts&quot;, &quot;**/*.ts&quot;, &quot;**/*.tsx&quot;, &quot;.next/types/**/*.ts&quot;],\n  &quot;exclude&quot;: [&quot;node_modules&quot;]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;es2017&quot;,\n    &quot;lib&quot;: [&quot;dom&quot;, &quot;dom.iterable&quot;, &quot;es6&quot;],\n    &quot;allowJs&quot;: true,\n    &quot;skipLibCheck&quot;: true,\n    &quot;strict&quot;: true,\n    &quot;forceConsistentCasingInFileNames&quot;: true,\n    &quot;noEmit&quot;: true,\n    &quot;esModuleInterop&quot;: true,\n    &quot;module&quot;: &quot;esnext&quot;,\n    &quot;moduleResolution&quot;: &quot;node&quot;,\n    &quot;resolveJsonModule&quot;: true,\n    &quot;isolatedModules&quot;: true,\n    &quot;jsx&quot;: &quot;preserve&quot;,\n    &quot;incremental&quot;: true,\n    &quot;plugins&quot;: [\n      {\n        &quot;name&quot;: &quot;next&quot;\n      }\n    ],\n    &quot;baseUrl&quot;: &quot;.&quot;,\n    &quot;paths&quot;: {\n      &quot;@/*&quot;: [&quot;./*&quot;]\n    }\n  },\n  &quot;include&quot;: [&quot;next-env.d.ts&quot;, &quot;**/*.ts&quot;, &quot;**/*.tsx&quot;, &quot;.next/types/**/*.ts&quot;],\n  &quot;exclude&quot;: [&quot;node_modules&quot;]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"examples\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Examples</h2><h3 id=\"complete-example-app\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Complete Example App</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">See the <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">/examples/nextjs-app</code> directory for a complete working example with:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Authentication using NextAuth.js</li><li class=\"leading-relaxed\">Dashboard with multiple charts</li><li class=\"leading-relaxed\">Real-time data updates</li><li class=\"leading-relaxed\">TypeScript throughout</li><li class=\"leading-relaxed\">Edge Runtime deployment</li></ul><h3 id=\"migration-from-cubejs\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Migration from Cube.js</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Before (Cube.js)\nimport { CubejsServerCore } from &#39;@cubejs-backend/server-core&#39;\n\nconst serverCore = CubejsServerCore.create({\n  schemaPath: &#39;schema&#39;,\n  dbType: &#39;postgres&#39;,\n  driverFactory: () =&gt; new PostgresDriver()\n})\n\n// After (Drizzle Cube)\nimport { createCubeHandlers } from &#39;drizzle-cube/adapters/nextjs&#39;\n\nconst handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; ({ organisationId: &#39;org-123&#39; })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Before (Cube.js)\nimport { CubejsServerCore } from &#39;@cubejs-backend/server-core&#39;\n\nconst serverCore = CubejsServerCore.create({\n  schemaPath: &#39;schema&#39;,\n  dbType: &#39;postgres&#39;,\n  driverFactory: () =&gt; new PostgresDriver()\n})\n\n// After (Drizzle Cube)\nimport { createCubeHandlers } from &#39;drizzle-cube/adapters/nextjs&#39;\n\nconst handlers = createCubeHandlers({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (request) =&gt; ({ organisationId: &#39;org-123&#39; })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"troubleshooting\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Troubleshooting</h2><h3 id=\"common-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Common Issues</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Issue</strong>: <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">Cannot find module &amp;#39;next/server&amp;#39;</code>\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Ensure Next.js 15+ is installed: <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">npm install next@latest</code></p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Issue</strong>: Edge Runtime errors\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Use only Web APIs and edge-compatible libraries</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Issue</strong>: CORS errors in development\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Add localhost to CORS origins:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">cors: {\n  origin: [&#39;http://localhost:3000&#39;, &#39;http://localhost:3001&#39;]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"cors: {\n  origin: [&#39;http://localhost:3000&#39;, &#39;http://localhost:3001&#39;]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Issue</strong>: Authentication context not available\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Ensure <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">getSecurityContext</code> returns the required context:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">getSecurityContext: async (request) =&gt; {\n  // Must return an object with organisationId\n  return { organisationId: &#39;required-field&#39; }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"getSecurityContext: async (request) =&gt; {\n  // Must return an object with organisationId\n  return { organisationId: &#39;required-field&#39; }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"debug-mode\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Debug Mode</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Enable debug logging\nconst handlers = createCubeHandlers({\n  // ... other options\n  getSecurityContext: async (request, context) =&gt; {\n    console.log(&#39;Request headers:&#39;, Object.fromEntries(request.headers))\n    console.log(&#39;Route context:&#39;, context)\n    \n    const securityContext = await extractContext(request)\n    console.log(&#39;Security context:&#39;, securityContext)\n    \n    return securityContext\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Enable debug logging\nconst handlers = createCubeHandlers({\n  // ... other options\n  getSecurityContext: async (request, context) =&gt; {\n    console.log(&#39;Request headers:&#39;, Object.fromEntries(request.headers))\n    console.log(&#39;Route context:&#39;, context)\n    \n    const securityContext = await extractContext(request)\n    console.log(&#39;Security context:&#39;, securityContext)\n    \n    return securityContext\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"contributing\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Contributing</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Found a bug or want to contribute? Please see our <a href=\"../../../CONTRIBUTING.md\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Contributing Guide</a> for details on how to get started.</p><h2 id=\"license\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">License</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">This project is licensed under the MIT License - see the <a href=\"../../../LICENSE\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">LICENSE</a> file for details.</p>","path":"external:../src/adapters/nextjs/README.md"},
  'advanced/performance': {"slug":"advanced/performance","title":"Performance","content":"<h1 id=\"performance\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Performance</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube is designed for high-performance analytics with multiple optimization strategies built on Drizzle ORM&#39;s efficient query generation and execution. This guide covers performance optimization techniques, monitoring, and best practices.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Performance in Drizzle Cube is achieved through:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Drizzle ORM Query Optimization</strong>: Prepared statements and efficient SQL generation</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Database-Level Optimization</strong>: Proper indexing and query planning</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Application-Level Caching</strong>: Result set caching and query memoization</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Smart Query Execution</strong>: Query path resolution and join optimization</li></ul><h2 id=\"database-performance\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Database Performance</h2><h3 id=\"query-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Optimization</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube generates optimized SQL through Drizzle ORM&#39;s query builder:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Efficient query generation\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  joins: [\n    {\n      table: departments,\n      on: eq(employees.departmentId, departments.id), // Uses index\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(employees.organisationId, ctx.securityContext.organisationId) // Indexed filter\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Efficient query generation\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  joins: [\n    {\n      table: departments,\n      on: eq(employees.departmentId, departments.id), // Uses index\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(employees.organisationId, ctx.securityContext.organisationId) // Indexed filter\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Optimization Features:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Prepared statements prevent SQL injection and improve performance</li><li class=\"leading-relaxed\">Parameter binding reduces query parsing overhead</li><li class=\"leading-relaxed\">Efficient join ordering based on selectivity</li><li class=\"leading-relaxed\">Automatic WHERE clause optimization</li></ul><h3 id=\"database-indexing\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Database Indexing</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Proper indexing is crucial for Drizzle Cube performance:</p><div class=\"relative group\">\n    <pre class=\"language-sql rounded-lg overflow-x-auto mb-4\"><code class=\"language-sql\">-- Essential indexes for multi-tenant security\nCREATE INDEX idx_employees_organisation_id ON employees(organisation_id);\nCREATE INDEX idx_departments_organisation_id ON departments(organisation_id);\nCREATE INDEX idx_productivity_organisation_id ON productivity(organisation_id);\n\n-- Foreign key indexes for joins\nCREATE INDEX idx_employees_department_id ON employees(department_id);\nCREATE INDEX idx_productivity_employee_id ON productivity(employee_id);\n\n-- Time dimension indexes for time-series queries\nCREATE INDEX idx_productivity_date ON productivity(date);\nCREATE INDEX idx_employees_created_at ON employees(created_at);\n\n-- Composite indexes for common query patterns\nCREATE INDEX idx_employees_org_dept ON employees(organisation_id, department_id);\nCREATE INDEX idx_productivity_org_date ON productivity(organisation_id, date);</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"-- Essential indexes for multi-tenant security\nCREATE INDEX idx_employees_organisation_id ON employees(organisation_id);\nCREATE INDEX idx_departments_organisation_id ON departments(organisation_id);\nCREATE INDEX idx_productivity_organisation_id ON productivity(organisation_id);\n\n-- Foreign key indexes for joins\nCREATE INDEX idx_employees_department_id ON employees(department_id);\nCREATE INDEX idx_productivity_employee_id ON productivity(employee_id);\n\n-- Time dimension indexes for time-series queries\nCREATE INDEX idx_productivity_date ON productivity(date);\nCREATE INDEX idx_employees_created_at ON employees(created_at);\n\n-- Composite indexes for common query patterns\nCREATE INDEX idx_employees_org_dept ON employees(organisation_id, department_id);\nCREATE INDEX idx_productivity_org_date ON productivity(organisation_id, date);\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"query-execution-plans\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Execution Plans</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Monitor and optimize query execution:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Enable query logging for performance analysis\nexport const performanceTestCube: Cube&lt;Schema&gt; = defineCube(&#39;Performance&#39;, {\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n    // Log query execution time in development\n    if (process.env.NODE_ENV === &#39;development&#39;) {\n      console.time(`Query: ${ctx.cube.name}`)\n    }\n    \n    return {\n      from: largeTable,\n      where: and(\n        eq(largeTable.organisationId, ctx.securityContext.organisationId),\n        // Add selective filters early\n        gte(largeTable.createdAt, ctx.query.dateRange?.[0] || &#39;2023-01-01&#39;)\n      )\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Enable query logging for performance analysis\nexport const performanceTestCube: Cube&lt;Schema&gt; = defineCube(&#39;Performance&#39;, {\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n    // Log query execution time in development\n    if (process.env.NODE_ENV === &#39;development&#39;) {\n      console.time(`Query: ${ctx.cube.name}`)\n    }\n    \n    return {\n      from: largeTable,\n      where: and(\n        eq(largeTable.organisationId, ctx.securityContext.organisationId),\n        // Add selective filters early\n        gte(largeTable.createdAt, ctx.query.dateRange?.[0] || &#39;2023-01-01&#39;)\n      )\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"application-performance\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Application Performance</h2><h3 id=\"result-set-caching\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Result Set Caching</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube provides basic query memoization. For advanced caching, you can implement additional caching layers:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Client-side caching with useCubeQuery\nfunction CachedQuery() {\n  const query = useMemo(() =&gt; ({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;]\n  }), []) // Memoize query to enable caching\n\n  const { resultSet } = useCubeQuery(query) // Automatically cached\n}\n\n// Server-side result caching\nclass CachedSemanticLayer extends SemanticLayerCompiler {\n  private cache = new Map&lt;string, { result: any; timestamp: number }&gt;()\n  \n  async load(query: SemanticQuery, context: SecurityContext) {\n    const cacheKey = this.getCacheKey(query, context)\n    const cached = this.cache.get(cacheKey)\n    \n    // Return cached result if fresh (5 minutes)\n    if (cached &amp;&amp; Date.now() - cached.timestamp &lt; 300000) {\n      return cached.result\n    }\n    \n    const result = await super.load(query, context)\n    \n    this.cache.set(cacheKey, {\n      result,\n      timestamp: Date.now()\n    })\n    \n    return result\n  }\n  \n  private getCacheKey(query: SemanticQuery, context: SecurityContext): string {\n    return `${context.organisationId}:${JSON.stringify(query)}`\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Client-side caching with useCubeQuery\nfunction CachedQuery() {\n  const query = useMemo(() =&gt; ({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;]\n  }), []) // Memoize query to enable caching\n\n  const { resultSet } = useCubeQuery(query) // Automatically cached\n}\n\n// Server-side result caching\nclass CachedSemanticLayer extends SemanticLayerCompiler {\n  private cache = new Map&lt;string, { result: any; timestamp: number }&gt;()\n  \n  async load(query: SemanticQuery, context: SecurityContext) {\n    const cacheKey = this.getCacheKey(query, context)\n    const cached = this.cache.get(cacheKey)\n    \n    // Return cached result if fresh (5 minutes)\n    if (cached &amp;&amp; Date.now() - cached.timestamp &lt; 300000) {\n      return cached.result\n    }\n    \n    const result = await super.load(query, context)\n    \n    this.cache.set(cacheKey, {\n      result,\n      timestamp: Date.now()\n    })\n    \n    return result\n  }\n  \n  private getCacheKey(query: SemanticQuery, context: SecurityContext): string {\n    return `${context.organisationId}:${JSON.stringify(query)}`\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><blockquote class=\"border-l-4 border-drizzle-400 pl-4 italic text-gray-600 mb-4 bg-drizzle-50 py-2\">**Note**: The `CachedSemanticLayer` example above is custom implementation code that you would need to build. Drizzle Cube currently provides basic client-side query memoization but does not include built-in server-side result caching.</blockquote><h3 id=\"query-batching\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Batching</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Batch multiple queries for efficiency:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Batch multiple related queries\nasync function loadDashboardData(\n  semanticLayer: SemanticLayerCompiler,\n  context: SecurityContext\n) {\n  // Execute queries in parallel\n  const [employeeMetrics, revenueData, productivityStats] = await Promise.all([\n    semanticLayer.load({\n      measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n      dimensions: [&#39;Employees.departmentName&#39;]\n    }, context),\n    \n    semanticLayer.load({\n      measures: [&#39;Orders.totalRevenue&#39;],\n      timeDimensions: [{\n        dimension: &#39;Orders.createdAt&#39;,\n        granularity: &#39;month&#39;\n      }]\n    }, context),\n    \n    semanticLayer.load({\n      measures: [&#39;Productivity.avgLinesOfCode&#39;],\n      dimensions: [&#39;Productivity.employeeName&#39;]\n    }, context)\n  ])\n\n  return {\n    employees: employeeMetrics.rawData(),\n    revenue: revenueData.rawData(), \n    productivity: productivityStats.rawData()\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Batch multiple related queries\nasync function loadDashboardData(\n  semanticLayer: SemanticLayerCompiler,\n  context: SecurityContext\n) {\n  // Execute queries in parallel\n  const [employeeMetrics, revenueData, productivityStats] = await Promise.all([\n    semanticLayer.load({\n      measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n      dimensions: [&#39;Employees.departmentName&#39;]\n    }, context),\n    \n    semanticLayer.load({\n      measures: [&#39;Orders.totalRevenue&#39;],\n      timeDimensions: [{\n        dimension: &#39;Orders.createdAt&#39;,\n        granularity: &#39;month&#39;\n      }]\n    }, context),\n    \n    semanticLayer.load({\n      measures: [&#39;Productivity.avgLinesOfCode&#39;],\n      dimensions: [&#39;Productivity.employeeName&#39;]\n    }, context)\n  ])\n\n  return {\n    employees: employeeMetrics.rawData(),\n    revenue: revenueData.rawData(), \n    productivity: productivityStats.rawData()\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"connection-pooling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Connection Pooling</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Optimize database connections:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// PostgreSQL with connection pooling\nimport postgres from &#39;postgres&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\n\nconst sql = postgres(connectionString, {\n  max: 20,              // Maximum connections\n  idle_timeout: 20,     // Close connections after 20s idle\n  connect_timeout: 10,  // 10s connection timeout\n  prepare: true         // Use prepared statements\n})\n\nconst db = drizzle(sql, { schema })\n\n// Create executor with optimized connection\nconst executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// PostgreSQL with connection pooling\nimport postgres from &#39;postgres&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\n\nconst sql = postgres(connectionString, {\n  max: 20,              // Maximum connections\n  idle_timeout: 20,     // Close connections after 20s idle\n  connect_timeout: 10,  // 10s connection timeout\n  prepare: true         // Use prepared statements\n})\n\nconst db = drizzle(sql, { schema })\n\n// Create executor with optimized connection\nconst executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"frontend-performance\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Frontend Performance</h2><h3 id=\"react-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">React Optimization</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Optimize React components for better performance:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { memo, useMemo, useCallback } from &#39;react&#39;\n\n// Memoize chart components\nconst OptimizedBarChart = memo(RechartsBarChart)\n\n// Memoize expensive calculations\nfunction DashboardCard({ query, config }) {\n  const memoizedQuery = useMemo(() =&gt; query, [JSON.stringify(query)])\n  \n  const handleRefresh = useCallback(() =&gt; {\n    // Handle refresh without recreating function\n  }, [])\n\n  const { resultSet, isLoading } = useCubeQuery(memoizedQuery)\n  \n  return (\n    &lt;OptimizedBarChart \n      resultSet={resultSet}\n      chartConfig={config}\n      onRefresh={handleRefresh}\n    /&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { memo, useMemo, useCallback } from &#39;react&#39;\n\n// Memoize chart components\nconst OptimizedBarChart = memo(RechartsBarChart)\n\n// Memoize expensive calculations\nfunction DashboardCard({ query, config }) {\n  const memoizedQuery = useMemo(() =&gt; query, [JSON.stringify(query)])\n  \n  const handleRefresh = useCallback(() =&gt; {\n    // Handle refresh without recreating function\n  }, [])\n\n  const { resultSet, isLoading } = useCubeQuery(memoizedQuery)\n  \n  return (\n    &lt;OptimizedBarChart \n      resultSet={resultSet}\n      chartConfig={config}\n      onRefresh={handleRefresh}\n    /&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"lazy-loading\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Lazy Loading</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Load components and data on demand:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { lazy, Suspense } from &#39;react&#39;\n\n// Lazy load chart components\nconst LazyBarChart = lazy(() =&gt; \n  import(&#39;drizzle-cube/client&#39;).then(m =&gt; ({ default: m.RechartsBarChart }))\n)\n\n// Lazy load heavy dashboards\nconst LazyDashboard = lazy(() =&gt; import(&#39;./HeavyDashboard&#39;))\n\nfunction App() {\n  return (\n    &lt;Suspense fallback={&lt;ChartSkeleton /&gt;}&gt;\n      &lt;LazyBarChart resultSet={resultSet} /&gt;\n      &lt;LazyDashboard /&gt;\n    &lt;/Suspense&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { lazy, Suspense } from &#39;react&#39;\n\n// Lazy load chart components\nconst LazyBarChart = lazy(() =&gt; \n  import(&#39;drizzle-cube/client&#39;).then(m =&gt; ({ default: m.RechartsBarChart }))\n)\n\n// Lazy load heavy dashboards\nconst LazyDashboard = lazy(() =&gt; import(&#39;./HeavyDashboard&#39;))\n\nfunction App() {\n  return (\n    &lt;Suspense fallback={&lt;ChartSkeleton /&gt;}&gt;\n      &lt;LazyBarChart resultSet={resultSet} /&gt;\n      &lt;LazyDashboard /&gt;\n    &lt;/Suspense&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"virtual-scrolling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Virtual Scrolling</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Handle large datasets efficiently:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Virtual scrolling for large data tables\nimport { FixedSizeList as List } from &#39;react-window&#39;\n\nfunction LargeDataTable({ resultSet }) {\n  const data = resultSet.rawData()\n  \n  const Row = ({ index, style }) =&gt; (\n    &lt;div style={style}&gt;\n      {Object.values(data[index]).join(&#39; | &#39;)}\n    &lt;/div&gt;\n  )\n\n  return (\n    &lt;List\n      height={400}\n      itemCount={data.length}\n      itemSize={35}\n      overscanCount={5}\n    &gt;\n      {Row}\n    &lt;/List&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Virtual scrolling for large data tables\nimport { FixedSizeList as List } from &#39;react-window&#39;\n\nfunction LargeDataTable({ resultSet }) {\n  const data = resultSet.rawData()\n  \n  const Row = ({ index, style }) =&gt; (\n    &lt;div style={style}&gt;\n      {Object.values(data[index]).join(&#39; | &#39;)}\n    &lt;/div&gt;\n  )\n\n  return (\n    &lt;List\n      height={400}\n      itemCount={data.length}\n      itemSize={35}\n      overscanCount={5}\n    &gt;\n      {Row}\n    &lt;/List&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"monitoring-and-profiling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Monitoring and Profiling</h2><h3 id=\"performance-metrics\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Performance Metrics</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Track key performance indicators:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Performance monitoring middleware\nclass PerformanceMonitor {\n  private metrics = new Map&lt;string, number[]&gt;()\n\n  async measureQuery&lt;T&gt;(\n    operation: string,\n    queryFn: () =&gt; Promise&lt;T&gt;\n  ): Promise&lt;T&gt; {\n    const startTime = performance.now()\n    \n    try {\n      const result = await queryFn()\n      const duration = performance.now() - startTime\n      \n      this.recordMetric(operation, duration)\n      \n      // Log slow queries\n      if (duration &gt; 1000) {\n        console.warn(`Slow query detected: ${operation} took ${duration}ms`)\n      }\n      \n      return result\n    } catch (error) {\n      const duration = performance.now() - startTime\n      console.error(`Query failed: ${operation} after ${duration}ms`, error)\n      throw error\n    }\n  }\n\n  private recordMetric(operation: string, duration: number) {\n    if (!this.metrics.has(operation)) {\n      this.metrics.set(operation, [])\n    }\n    \n    const metrics = this.metrics.get(operation)!\n    metrics.push(duration)\n    \n    // Keep only last 100 measurements\n    if (metrics.length &gt; 100) {\n      metrics.shift()\n    }\n  }\n\n  getAverageTime(operation: string): number {\n    const metrics = this.metrics.get(operation)\n    if (!metrics || metrics.length === 0) return 0\n    \n    return metrics.reduce((sum, time) =&gt; sum + time, 0) / metrics.length\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Performance monitoring middleware\nclass PerformanceMonitor {\n  private metrics = new Map&lt;string, number[]&gt;()\n\n  async measureQuery&lt;T&gt;(\n    operation: string,\n    queryFn: () =&gt; Promise&lt;T&gt;\n  ): Promise&lt;T&gt; {\n    const startTime = performance.now()\n    \n    try {\n      const result = await queryFn()\n      const duration = performance.now() - startTime\n      \n      this.recordMetric(operation, duration)\n      \n      // Log slow queries\n      if (duration &gt; 1000) {\n        console.warn(`Slow query detected: ${operation} took ${duration}ms`)\n      }\n      \n      return result\n    } catch (error) {\n      const duration = performance.now() - startTime\n      console.error(`Query failed: ${operation} after ${duration}ms`, error)\n      throw error\n    }\n  }\n\n  private recordMetric(operation: string, duration: number) {\n    if (!this.metrics.has(operation)) {\n      this.metrics.set(operation, [])\n    }\n    \n    const metrics = this.metrics.get(operation)!\n    metrics.push(duration)\n    \n    // Keep only last 100 measurements\n    if (metrics.length &gt; 100) {\n      metrics.shift()\n    }\n  }\n\n  getAverageTime(operation: string): number {\n    const metrics = this.metrics.get(operation)\n    if (!metrics || metrics.length === 0) return 0\n    \n    return metrics.reduce((sum, time) =&gt; sum + time, 0) / metrics.length\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"query-analysis\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Analysis</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Analyze query patterns and performance:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Query performance analyzer\nclass QueryAnalyzer {\n  private queryLog: Array&lt;{\n    query: SemanticQuery\n    context: SecurityContext\n    duration: number\n    resultSize: number\n    timestamp: Date\n  }&gt; = []\n\n  logQuery(\n    query: SemanticQuery, \n    context: SecurityContext, \n    duration: number, \n    resultSize: number\n  ) {\n    this.queryLog.push({\n      query,\n      context,\n      duration,\n      resultSize,\n      timestamp: new Date()\n    })\n\n    // Analyze for optimization opportunities\n    this.analyzeQuery(query, duration, resultSize)\n  }\n\n  private analyzeQuery(query: SemanticQuery, duration: number, resultSize: number) {\n    // Flag expensive queries\n    if (duration &gt; 5000) {\n      console.warn(&#39;Expensive query detected:&#39;, {\n        cubes: query.measures?.map(m =&gt; m.split(&#39;.&#39;)[0]),\n        duration,\n        resultSize\n      })\n    }\n\n    // Flag large result sets\n    if (resultSize &gt; 10000) {\n      console.warn(&#39;Large result set:&#39;, {\n        query,\n        resultSize,\n        suggestion: &#39;Consider adding filters or pagination&#39;\n      })\n    }\n\n    // Suggest optimizations\n    if (!query.filters?.length &amp;&amp; duration &gt; 1000) {\n      console.info(&#39;Consider adding filters to improve performance&#39;)\n    }\n  }\n\n  getSlowQueries(threshold: number = 1000) {\n    return this.queryLog\n      .filter(log =&gt; log.duration &gt; threshold)\n      .sort((a, b) =&gt; b.duration - a.duration)\n  }\n\n  getCubeUsageStats() {\n    const stats = new Map&lt;string, { count: number; avgDuration: number }&gt;()\n    \n    this.queryLog.forEach(log =&gt; {\n      const cubes = log.query.measures?.map(m =&gt; m.split(&#39;.&#39;)[0]) || []\n      \n      cubes.forEach(cube =&gt; {\n        if (!stats.has(cube)) {\n          stats.set(cube, { count: 0, avgDuration: 0 })\n        }\n        \n        const stat = stats.get(cube)!\n        stat.count++\n        stat.avgDuration = (stat.avgDuration * (stat.count - 1) + log.duration) / stat.count\n      })\n    })\n    \n    return stats\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Query performance analyzer\nclass QueryAnalyzer {\n  private queryLog: Array&lt;{\n    query: SemanticQuery\n    context: SecurityContext\n    duration: number\n    resultSize: number\n    timestamp: Date\n  }&gt; = []\n\n  logQuery(\n    query: SemanticQuery, \n    context: SecurityContext, \n    duration: number, \n    resultSize: number\n  ) {\n    this.queryLog.push({\n      query,\n      context,\n      duration,\n      resultSize,\n      timestamp: new Date()\n    })\n\n    // Analyze for optimization opportunities\n    this.analyzeQuery(query, duration, resultSize)\n  }\n\n  private analyzeQuery(query: SemanticQuery, duration: number, resultSize: number) {\n    // Flag expensive queries\n    if (duration &gt; 5000) {\n      console.warn(&#39;Expensive query detected:&#39;, {\n        cubes: query.measures?.map(m =&gt; m.split(&#39;.&#39;)[0]),\n        duration,\n        resultSize\n      })\n    }\n\n    // Flag large result sets\n    if (resultSize &gt; 10000) {\n      console.warn(&#39;Large result set:&#39;, {\n        query,\n        resultSize,\n        suggestion: &#39;Consider adding filters or pagination&#39;\n      })\n    }\n\n    // Suggest optimizations\n    if (!query.filters?.length &amp;&amp; duration &gt; 1000) {\n      console.info(&#39;Consider adding filters to improve performance&#39;)\n    }\n  }\n\n  getSlowQueries(threshold: number = 1000) {\n    return this.queryLog\n      .filter(log =&gt; log.duration &gt; threshold)\n      .sort((a, b) =&gt; b.duration - a.duration)\n  }\n\n  getCubeUsageStats() {\n    const stats = new Map&lt;string, { count: number; avgDuration: number }&gt;()\n    \n    this.queryLog.forEach(log =&gt; {\n      const cubes = log.query.measures?.map(m =&gt; m.split(&#39;.&#39;)[0]) || []\n      \n      cubes.forEach(cube =&gt; {\n        if (!stats.has(cube)) {\n          stats.set(cube, { count: 0, avgDuration: 0 })\n        }\n        \n        const stat = stats.get(cube)!\n        stat.count++\n        stat.avgDuration = (stat.avgDuration * (stat.count - 1) + log.duration) / stat.count\n      })\n    })\n    \n    return stats\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance-best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Best Practices</h2><h3 id=\"query-design\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Design</h3><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Filter Early</strong>: Apply most selective filters first</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Limit Results</strong>: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">limit</code> and pagination for large datasets</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Index Foreign Keys</strong>: Ensure all join columns are indexed</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Avoid N+1 Queries</strong>: Use joins instead of separate queries</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Time Range Filters</strong>: Always filter time dimensions to reasonable ranges</li></ol><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Good: Selective filtering\nconst optimizedQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  filters: [\n    { member: &#39;Employees.isActive&#39;, operator: &#39;equals&#39;, values: [true] },\n    { member: &#39;Employees.createdAt&#39;, operator: &#39;inDateRange&#39;, values: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;] }\n  ],\n  limit: 100\n}\n\n// Bad: No filtering, potentially large result set\nconst unoptimizedQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.name&#39;] // Could return thousands of rows\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Good: Selective filtering\nconst optimizedQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  filters: [\n    { member: &#39;Employees.isActive&#39;, operator: &#39;equals&#39;, values: [true] },\n    { member: &#39;Employees.createdAt&#39;, operator: &#39;inDateRange&#39;, values: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;] }\n  ],\n  limit: 100\n}\n\n// Bad: No filtering, potentially large result set\nconst unoptimizedQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.name&#39;] // Could return thousands of rows\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"database-schema-design\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Database Schema Design</h3><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Proper Indexing</strong>: Index all foreign keys and filter columns</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Denormalization</strong>: Consider denormalizing for read-heavy workloads</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Partitioning</strong>: Partition large tables by date or organization</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Statistics</strong>: Keep database statistics up to date</li></ol><div class=\"relative group\">\n    <pre class=\"language-sql rounded-lg overflow-x-auto mb-4\"><code class=\"language-sql\">-- Partitioning example for large time-series data\nCREATE TABLE productivity (\n    id SERIAL,\n    employee_id INTEGER,\n    organisation_id UUID,\n    date DATE,\n    lines_of_code INTEGER,\n    -- other columns...\n) PARTITION BY RANGE (date);\n\n-- Create partitions\nCREATE TABLE productivity_2023 PARTITION OF productivity\n    FOR VALUES FROM (&#39;2023-01-01&#39;) TO (&#39;2024-01-01&#39;);\n\nCREATE TABLE productivity_2024 PARTITION OF productivity\n    FOR VALUES FROM (&#39;2024-01-01&#39;) TO (&#39;2025-01-01&#39;);</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"-- Partitioning example for large time-series data\nCREATE TABLE productivity (\n    id SERIAL,\n    employee_id INTEGER,\n    organisation_id UUID,\n    date DATE,\n    lines_of_code INTEGER,\n    -- other columns...\n) PARTITION BY RANGE (date);\n\n-- Create partitions\nCREATE TABLE productivity_2023 PARTITION OF productivity\n    FOR VALUES FROM (&#39;2023-01-01&#39;) TO (&#39;2024-01-01&#39;);\n\nCREATE TABLE productivity_2024 PARTITION OF productivity\n    FOR VALUES FROM (&#39;2024-01-01&#39;) TO (&#39;2025-01-01&#39;);\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"application-architecture\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Application Architecture</h3><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Connection Pooling</strong>: Use appropriate pool sizes</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Caching Strategy</strong>: Implement multi-level caching</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Load Balancing</strong>: Distribute load across multiple instances</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Async Processing</strong>: Use background jobs for expensive operations</li></ol><h2 id=\"performance-testing\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Testing</h2><h3 id=\"load-testing\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Load Testing</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Test your Drizzle Cube deployment under load:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Load test script example\nimport { performance } from &#39;perf_hooks&#39;\n\nasync function loadTest() {\n  const queries = [\n    { measures: [&#39;Employees.count&#39;], dimensions: [&#39;Employees.departmentName&#39;] },\n    { measures: [&#39;Orders.totalRevenue&#39;], timeDimensions: [{ dimension: &#39;Orders.createdAt&#39;, granularity: &#39;month&#39; }] },\n    { measures: [&#39;Productivity.avgLinesOfCode&#39;], dimensions: [&#39;Productivity.employeeName&#39;] }\n  ]\n\n  const concurrency = 10\n  const iterations = 100\n\n  console.log(`Starting load test: ${concurrency} concurrent users, ${iterations} iterations`)\n\n  const startTime = performance.now()\n  \n  const promises = Array.from({ length: concurrency }, async () =&gt; {\n    for (let i = 0; i &lt; iterations; i++) {\n      const query = queries[i % queries.length]\n      await fetch(&#39;/cubejs-api/v1/load&#39;, {\n        method: &#39;POST&#39;,\n        headers: { &#39;Content-Type&#39;: &#39;application/json&#39; },\n        body: JSON.stringify({ query })\n      })\n    }\n  })\n\n  await Promise.all(promises)\n  \n  const totalTime = performance.now() - startTime\n  const totalRequests = concurrency * iterations\n  const requestsPerSecond = totalRequests / (totalTime / 1000)\n\n  console.log(`Load test complete:`)\n  console.log(`Total time: ${totalTime}ms`)\n  console.log(`Total requests: ${totalRequests}`)\n  console.log(`Requests per second: ${requestsPerSecond.toFixed(2)}`)\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Load test script example\nimport { performance } from &#39;perf_hooks&#39;\n\nasync function loadTest() {\n  const queries = [\n    { measures: [&#39;Employees.count&#39;], dimensions: [&#39;Employees.departmentName&#39;] },\n    { measures: [&#39;Orders.totalRevenue&#39;], timeDimensions: [{ dimension: &#39;Orders.createdAt&#39;, granularity: &#39;month&#39; }] },\n    { measures: [&#39;Productivity.avgLinesOfCode&#39;], dimensions: [&#39;Productivity.employeeName&#39;] }\n  ]\n\n  const concurrency = 10\n  const iterations = 100\n\n  console.log(`Starting load test: ${concurrency} concurrent users, ${iterations} iterations`)\n\n  const startTime = performance.now()\n  \n  const promises = Array.from({ length: concurrency }, async () =&gt; {\n    for (let i = 0; i &lt; iterations; i++) {\n      const query = queries[i % queries.length]\n      await fetch(&#39;/cubejs-api/v1/load&#39;, {\n        method: &#39;POST&#39;,\n        headers: { &#39;Content-Type&#39;: &#39;application/json&#39; },\n        body: JSON.stringify({ query })\n      })\n    }\n  })\n\n  await Promise.all(promises)\n  \n  const totalTime = performance.now() - startTime\n  const totalRequests = concurrency * iterations\n  const requestsPerSecond = totalRequests / (totalTime / 1000)\n\n  console.log(`Load test complete:`)\n  console.log(`Total time: ${totalTime}ms`)\n  console.log(`Total requests: ${totalRequests}`)\n  console.log(`Requests per second: ${requestsPerSecond.toFixed(2)}`)\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"benchmarking\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Benchmarking</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Compare performance across different configurations:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Benchmark different query patterns\nasync function benchmarkQueries() {\n  const testCases = [\n    { name: &#39;Simple Count&#39;, query: { measures: [&#39;Employees.count&#39;] } },\n    { name: &#39;Grouped Count&#39;, query: { measures: [&#39;Employees.count&#39;], dimensions: [&#39;Employees.departmentName&#39;] } },\n    { name: &#39;Time Series&#39;, query: { measures: [&#39;Employees.count&#39;], timeDimensions: [{ dimension: &#39;Employees.createdAt&#39;, granularity: &#39;month&#39; }] } },\n    { name: &#39;Multi-Cube&#39;, query: { measures: [&#39;Employees.count&#39;, &#39;Departments.totalBudget&#39;] } }\n  ]\n\n  for (const testCase of testCases) {\n    const times = []\n    \n    // Run each test 10 times\n    for (let i = 0; i &lt; 10; i++) {\n      const start = performance.now()\n      await semanticLayer.load(testCase.query, securityContext)\n      const duration = performance.now() - start\n      times.push(duration)\n    }\n\n    const avg = times.reduce((sum, time) =&gt; sum + time, 0) / times.length\n    const min = Math.min(...times)\n    const max = Math.max(...times)\n\n    console.log(`${testCase.name}: avg=${avg.toFixed(2)}ms, min=${min.toFixed(2)}ms, max=${max.toFixed(2)}ms`)\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Benchmark different query patterns\nasync function benchmarkQueries() {\n  const testCases = [\n    { name: &#39;Simple Count&#39;, query: { measures: [&#39;Employees.count&#39;] } },\n    { name: &#39;Grouped Count&#39;, query: { measures: [&#39;Employees.count&#39;], dimensions: [&#39;Employees.departmentName&#39;] } },\n    { name: &#39;Time Series&#39;, query: { measures: [&#39;Employees.count&#39;], timeDimensions: [{ dimension: &#39;Employees.createdAt&#39;, granularity: &#39;month&#39; }] } },\n    { name: &#39;Multi-Cube&#39;, query: { measures: [&#39;Employees.count&#39;, &#39;Departments.totalBudget&#39;] } }\n  ]\n\n  for (const testCase of testCases) {\n    const times = []\n    \n    // Run each test 10 times\n    for (let i = 0; i &lt; 10; i++) {\n      const start = performance.now()\n      await semanticLayer.load(testCase.query, securityContext)\n      const duration = performance.now() - start\n      times.push(duration)\n    }\n\n    const avg = times.reduce((sum, time) =&gt; sum + time, 0) / times.length\n    const min = Math.min(...times)\n    const max = Math.max(...times)\n\n    console.log(`${testCase.name}: avg=${avg.toFixed(2)}ms, min=${min.toFixed(2)}ms, max=${max.toFixed(2)}ms`)\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"common-performance-issues\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Performance Issues</h2><h3 id=\"issue-slow-multi-tenant-queries\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Issue: Slow Multi-Tenant Queries</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Problem</strong>: Queries are slow when filtering by organization\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Add composite indexes on (organisation_id, other_filter_columns)</p><div class=\"relative group\">\n    <pre class=\"language-sql rounded-lg overflow-x-auto mb-4\"><code class=\"language-sql\">CREATE INDEX idx_employees_org_active ON employees(organisation_id, active);\nCREATE INDEX idx_productivity_org_date ON productivity(organisation_id, date);</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"CREATE INDEX idx_employees_org_active ON employees(organisation_id, active);\nCREATE INDEX idx_productivity_org_date ON productivity(organisation_id, date);\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"issue-large-result-sets\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Issue: Large Result Sets</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Problem</strong>: Queries returning thousands of rows cause memory issues\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Implement pagination and result limiting</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Add pagination to large queries\nconst paginatedQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.name&#39;],\n  limit: 50,\n  offset: page * 50\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Add pagination to large queries\nconst paginatedQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.name&#39;],\n  limit: 50,\n  offset: page * 50\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"issue-complex-join-performance\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Issue: Complex Join Performance</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Problem</strong>: Multi-table joins are slow\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Optimize join order and add covering indexes</p><div class=\"relative group\">\n    <pre class=\"language-sql rounded-lg overflow-x-auto mb-4\"><code class=\"language-sql\">-- Covering index for common join pattern\nCREATE INDEX idx_productivity_employee_lookup \nON productivity(employee_id, organisation_id) \nINCLUDE (lines_of_code, date);</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"-- Covering index for common join pattern\nCREATE INDEX idx_productivity_employee_lookup \nON productivity(employee_id, organisation_id) \nINCLUDE (lines_of_code, date);\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"advanced/troubleshooting\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Troubleshooting</a> common issues</li><li class=\"leading-relaxed\">Explore <a href=\"#\" data-help-link=\"advanced/typescript\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >TypeScript</a> advanced patterns</li><li class=\"leading-relaxed\">Review database-specific optimization guides</li><li class=\"leading-relaxed\">Set up performance monitoring in production</li></ul><h2 id=\"future-performance-features-planned-for-upcoming-releases\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Future Performance Features <em class=\"italic text-gray-700\">(Planned for Upcoming Releases)</em></h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The following performance enhancements are planned for future versions of Drizzle Cube:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Automatic query optimization suggestions</strong> - AI-powered query analysis</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Built-in performance monitoring dashboard</strong> - Real-time performance metrics</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Query execution plan visualization</strong> - Visual query plan analysis</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Intelligent caching strategies</strong> - Smart pre-computation and cache invalidation</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Performance regression testing</strong> - Automated performance testing suite</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Cost-based query optimization</strong> - Advanced query planning algorithms</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">These features are not currently available but are on our development roadmap.</p>","path":"advanced/performance.md"},
  'advanced/troubleshooting': {"slug":"advanced/troubleshooting","title":"Troubleshooting","content":"<h1 id=\"troubleshooting\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Troubleshooting</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">This guide covers common issues, error messages, and debugging techniques for Drizzle Cube. Most problems stem from configuration, security context, database connections, or query construction.</p><h2 id=\"common-issues\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Issues</h2><h3 id=\"database-connection-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Database Connection Issues</h3><h4 id=\"error-connection-timeout\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;Connection timeout&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Queries hanging or timing out</li><li class=\"leading-relaxed\">Connection pool exhausted errors</li><li class=\"leading-relaxed\">Intermittent database connection failures</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Check connection configuration\nimport postgres from &#39;postgres&#39;\n\nconst sql = postgres(connectionString, {\n  max: 20,              // Increase pool size if needed\n  idle_timeout: 20,     // Reduce if connections are being held\n  connect_timeout: 30,  // Increase for slow networks\n  debug: process.env.NODE_ENV === &#39;development&#39; // Enable debugging\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Check connection configuration\nimport postgres from &#39;postgres&#39;\n\nconst sql = postgres(connectionString, {\n  max: 20,              // Increase pool size if needed\n  idle_timeout: 20,     // Reduce if connections are being held\n  connect_timeout: 30,  // Increase for slow networks\n  debug: process.env.NODE_ENV === &#39;development&#39; // Enable debugging\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Debugging Steps:</strong></p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Test database connection directly</li><li class=\"leading-relaxed\">Check firewall and network settings</li><li class=\"leading-relaxed\">Monitor connection pool usage</li><li class=\"leading-relaxed\">Verify connection string format</li></ol><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\"># Test PostgreSQL connection\npsql &quot;postgresql://user:password@host:port/database&quot;\n\n# Monitor connection pools\nSELECT state, count(*) FROM pg_stat_activity GROUP BY state;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"# Test PostgreSQL connection\npsql &quot;postgresql://user:password@host:port/database&quot;\n\n# Monitor connection pools\nSELECT state, count(*) FROM pg_stat_activity GROUP BY state;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"error-database-schema-not-found\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;Database schema not found&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Table or column does not exist errors</li><li class=\"leading-relaxed\">Schema-related query failures</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Ensure schema is properly imported and registered\nimport * as schema from &#39;./schema&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\n\nconst db = drizzle(sql, { schema }) // Pass schema to drizzle\n\n// Verify schema registration\nconst executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)\nconsole.log(&#39;Available tables:&#39;, Object.keys(schema))</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Ensure schema is properly imported and registered\nimport * as schema from &#39;./schema&#39;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;\n\nconst db = drizzle(sql, { schema }) // Pass schema to drizzle\n\n// Verify schema registration\nconst executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)\nconsole.log(&#39;Available tables:&#39;, Object.keys(schema))\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"security-context-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Security Context Issues</h3><h4 id=\"error-organisationid-is-required\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;organisationId is required&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Access denied errors on all queries</li><li class=\"leading-relaxed\">Security context extraction failures</li><li class=\"leading-relaxed\">Multi-tenant isolation problems</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Ensure security context extraction is correct\nexport const getSecurityContext = async (c: any): Promise&lt;SecurityContext&gt; =&gt; {\n  const authHeader = c.req.header(&#39;Authorization&#39;)\n  if (!authHeader) {\n    throw new Error(&#39;Missing Authorization header&#39;)\n  }\n\n  // Note: Authorization header is now used as-is (no &#39;Bearer &#39; prefix removal needed)\n  const token = authHeader\n  const user = await validateJWT(token)\n  \n  if (!user.organisationId) {\n    throw new Error(&#39;User token missing organisationId&#39;)\n  }\n\n  return {\n    organisationId: user.organisationId, // REQUIRED\n    userId: user.id,\n    userRole: user.role\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Ensure security context extraction is correct\nexport const getSecurityContext = async (c: any): Promise&lt;SecurityContext&gt; =&gt; {\n  const authHeader = c.req.header(&#39;Authorization&#39;)\n  if (!authHeader) {\n    throw new Error(&#39;Missing Authorization header&#39;)\n  }\n\n  // Note: Authorization header is now used as-is (no &#39;Bearer &#39; prefix removal needed)\n  const token = authHeader\n  const user = await validateJWT(token)\n  \n  if (!user.organisationId) {\n    throw new Error(&#39;User token missing organisationId&#39;)\n  }\n\n  return {\n    organisationId: user.organisationId, // REQUIRED\n    userId: user.id,\n    userRole: user.role\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Debugging Steps:</strong></p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Log the extracted security context</li><li class=\"leading-relaxed\">Verify JWT token contains required fields</li><li class=\"leading-relaxed\">Check token validation logic</li><li class=\"leading-relaxed\">Test with a known good token</li></ol><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Add debug logging\nexport const getSecurityContext = async (c: any): Promise&lt;SecurityContext&gt; =&gt; {\n  try {\n    const context = await extractContext(c)\n    console.log(&#39;Security context:&#39;, context) // Debug log\n    return context\n  } catch (error) {\n    console.error(&#39;Security context extraction failed:&#39;, error)\n    throw error\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Add debug logging\nexport const getSecurityContext = async (c: any): Promise&lt;SecurityContext&gt; =&gt; {\n  try {\n    const context = await extractContext(c)\n    console.log(&#39;Security context:&#39;, context) // Debug log\n    return context\n  } catch (error) {\n    console.error(&#39;Security context extraction failed:&#39;, error)\n    throw error\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"error-access-denied\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;Access denied&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Queries returning empty results</li><li class=\"leading-relaxed\">Permission-based errors</li><li class=\"leading-relaxed\">Role-based access failures</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Check cube-level security filtering\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  // Ensure security context is applied\n  where: and(\n    eq(employees.organisationId, ctx.securityContext.organisationId),\n    // Add role-based filtering if needed\n    ctx.securityContext.userRole !== &#39;admin&#39; \n      ? eq(employees.departmentId, ctx.securityContext.departmentId)\n      : sql`true`\n  )\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Check cube-level security filtering\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  // Ensure security context is applied\n  where: and(\n    eq(employees.organisationId, ctx.securityContext.organisationId),\n    // Add role-based filtering if needed\n    ctx.securityContext.userRole !== &#39;admin&#39; \n      ? eq(employees.departmentId, ctx.securityContext.departmentId)\n      : sql`true`\n  )\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"query-construction-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Construction Issues</h3><h4 id=\"error-invalid-query-measures-or-dimensions-required\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;Invalid query: measures or dimensions required&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Empty query objects</li><li class=\"leading-relaxed\">Missing required query fields</li><li class=\"leading-relaxed\">Malformed query structure</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Ensure query has required fields\nconst validQuery = {\n  measures: [&#39;Employees.count&#39;], // At least one measure OR dimension required\n  dimensions: [], // Optional but recommended\n  filters: [], // Optional\n  order: [] // Optional\n}\n\n// Validate query before execution\nfunction validateQuery(query: CubeQuery): void {\n  if (!query.measures?.length &amp;&amp; !query.dimensions?.length) {\n    throw new Error(&#39;Query must have at least one measure or dimension&#39;)\n  }\n  \n  if (!query.measures) {\n    query.measures = []\n  }\n  \n  if (!query.dimensions) {\n    query.dimensions = []\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Ensure query has required fields\nconst validQuery = {\n  measures: [&#39;Employees.count&#39;], // At least one measure OR dimension required\n  dimensions: [], // Optional but recommended\n  filters: [], // Optional\n  order: [] // Optional\n}\n\n// Validate query before execution\nfunction validateQuery(query: CubeQuery): void {\n  if (!query.measures?.length &amp;&amp; !query.dimensions?.length) {\n    throw new Error(&#39;Query must have at least one measure or dimension&#39;)\n  }\n  \n  if (!query.measures) {\n    query.measures = []\n  }\n  \n  if (!query.dimensions) {\n    query.dimensions = []\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"error-unknown-cube-member-cubenamefield\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;Unknown cube member: [CubeName].[field]&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Reference to non-existent cube or field</li><li class=\"leading-relaxed\">Typos in cube/field names</li><li class=\"leading-relaxed\">Case sensitivity issues</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Check cube registration\nconst semanticLayer = new SemanticLayerCompiler({ databaseExecutor: executor })\n\n// Register all cubes\nsemanticLayer.registerCube(employeesCube)\nsemanticLayer.registerCube(departmentsCube)\n// ... ensure all cubes are registered\n\n// Verify cube names match exactly\nconsole.log(&#39;Registered cubes:&#39;, semanticLayer.getCubeNames())\n\n// Check field names in cube definitions\nexport const employeesCube = defineCube(&#39;Employees&#39;, { // Case-sensitive\n  dimensions: {\n    name: { // Field name must match query exactly\n      name: &#39;name&#39;,\n      sql: employees.name\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Check cube registration\nconst semanticLayer = new SemanticLayerCompiler({ databaseExecutor: executor })\n\n// Register all cubes\nsemanticLayer.registerCube(employeesCube)\nsemanticLayer.registerCube(departmentsCube)\n// ... ensure all cubes are registered\n\n// Verify cube names match exactly\nconsole.log(&#39;Registered cubes:&#39;, semanticLayer.getCubeNames())\n\n// Check field names in cube definitions\nexport const employeesCube = defineCube(&#39;Employees&#39;, { // Case-sensitive\n  dimensions: {\n    name: { // Field name must match query exactly\n      name: &#39;name&#39;,\n      sql: employees.name\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"time-dimension-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Time Dimension Issues</h3><h4 id=\"error-invalid-time-dimension-format\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;Invalid time dimension format&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Time formatting errors</li><li class=\"leading-relaxed\">Granularity issues</li><li class=\"leading-relaxed\">Date parsing failures</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Ensure proper time dimension structure\nconst query = {\n  measures: [&#39;Orders.count&#39;],\n  timeDimensions: [{\n    dimension: &#39;Orders.createdAt&#39;, // Must match cube definition exactly\n    granularity: &#39;month&#39;, // Use valid granularity\n    dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;] // ISO date format\n  }]\n}\n\n// Valid granularity options\nconst validGranularities = [&#39;year&#39;, &#39;quarter&#39;, &#39;month&#39;, &#39;week&#39;, &#39;day&#39;, &#39;hour&#39;]\n\n// Check date format\nfunction validateDateRange(dateRange: [string, string]): void {\n  const [start, end] = dateRange\n  \n  if (!Date.parse(start) || !Date.parse(end)) {\n    throw new Error(&#39;Invalid date format. Use ISO format: YYYY-MM-DD&#39;)\n  }\n  \n  if (new Date(start) &gt;= new Date(end)) {\n    throw new Error(&#39;Start date must be before end date&#39;)\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Ensure proper time dimension structure\nconst query = {\n  measures: [&#39;Orders.count&#39;],\n  timeDimensions: [{\n    dimension: &#39;Orders.createdAt&#39;, // Must match cube definition exactly\n    granularity: &#39;month&#39;, // Use valid granularity\n    dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;] // ISO date format\n  }]\n}\n\n// Valid granularity options\nconst validGranularities = [&#39;year&#39;, &#39;quarter&#39;, &#39;month&#39;, &#39;week&#39;, &#39;day&#39;, &#39;hour&#39;]\n\n// Check date format\nfunction validateDateRange(dateRange: [string, string]): void {\n  const [start, end] = dateRange\n  \n  if (!Date.parse(start) || !Date.parse(end)) {\n    throw new Error(&#39;Invalid date format. Use ISO format: YYYY-MM-DD&#39;)\n  }\n  \n  if (new Date(start) &gt;= new Date(end)) {\n    throw new Error(&#39;Start date must be before end date&#39;)\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"error-time-dimension-not-displaying-correctly\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;Time dimension not displaying correctly&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Raw timestamps in charts instead of formatted dates</li><li class=\"leading-relaxed\">Incorrect time grouping</li><li class=\"leading-relaxed\">Missing time data</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Ensure time dimension is defined correctly in cube\ndimensions: {\n  createdAt: {\n    name: &#39;createdAt&#39;,\n    title: &#39;Created Date&#39;,\n    type: &#39;time&#39;, // Must be &#39;time&#39; type\n    sql: employees.createdAt // Column must be date/timestamp type\n  }\n}\n\n// Use timeDimensions in queries (not regular dimensions)\nconst timeSeriesQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [], // Don&#39;t put time fields here\n  timeDimensions: [{ // Put time fields here\n    dimension: &#39;Employees.createdAt&#39;,\n    granularity: &#39;month&#39;\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Ensure time dimension is defined correctly in cube\ndimensions: {\n  createdAt: {\n    name: &#39;createdAt&#39;,\n    title: &#39;Created Date&#39;,\n    type: &#39;time&#39;, // Must be &#39;time&#39; type\n    sql: employees.createdAt // Column must be date/timestamp type\n  }\n}\n\n// Use timeDimensions in queries (not regular dimensions)\nconst timeSeriesQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [], // Don&#39;t put time fields here\n  timeDimensions: [{ // Put time fields here\n    dimension: &#39;Employees.createdAt&#39;,\n    granularity: &#39;month&#39;\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"debugging-techniques\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Debugging Techniques</h2><h3 id=\"enable-debug-logging\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Enable Debug Logging</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Add comprehensive logging to track issues:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Enable SQL query logging\nif (process.env.NODE_ENV === &#39;development&#39;) {\n  const originalExecute = executor.execute\n  executor.execute = async function(query, measureFields) {\n    console.log(&#39;Executing SQL:&#39;, query.toQuery())\n    const start = performance.now()\n    \n    try {\n      const result = await originalExecute.call(this, query, measureFields)\n      console.log(`Query completed in ${performance.now() - start}ms`)\n      return result\n    } catch (error) {\n      console.error(&#39;Query failed:&#39;, error)\n      throw error\n    }\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Enable SQL query logging\nif (process.env.NODE_ENV === &#39;development&#39;) {\n  const originalExecute = executor.execute\n  executor.execute = async function(query, measureFields) {\n    console.log(&#39;Executing SQL:&#39;, query.toQuery())\n    const start = performance.now()\n    \n    try {\n      const result = await originalExecute.call(this, query, measureFields)\n      console.log(`Query completed in ${performance.now() - start}ms`)\n      return result\n    } catch (error) {\n      console.error(&#39;Query failed:&#39;, error)\n      throw error\n    }\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"query-analysis\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Analysis</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Analyze generated SQL and execution plans:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Log generated queries for analysis\nexport const debugCube = defineCube(&#39;Debug&#39;, {\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n    const query = {\n      from: employees,\n      where: eq(employees.organisationId, ctx.securityContext.organisationId)\n    }\n    \n    // Log the query context for debugging\n    console.log(&#39;Cube query context:&#39;, {\n      cubeName: &#39;Debug&#39;,\n      securityContext: ctx.securityContext,\n      requestedQuery: ctx.query\n    })\n    \n    return query\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Log generated queries for analysis\nexport const debugCube = defineCube(&#39;Debug&#39;, {\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n    const query = {\n      from: employees,\n      where: eq(employees.organisationId, ctx.securityContext.organisationId)\n    }\n    \n    // Log the query context for debugging\n    console.log(&#39;Cube query context:&#39;, {\n      cubeName: &#39;Debug&#39;,\n      securityContext: ctx.securityContext,\n      requestedQuery: ctx.query\n    })\n    \n    return query\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"api-response-format-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">API Response Format Issues</h3><h4 id=\"error-cannot-read-property-data-of-undefined\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;Cannot read property &#39;data&#39; of undefined&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Client fails to read response data</li><li class=\"leading-relaxed\">Undefined response structure errors</li><li class=\"leading-relaxed\">Charts not rendering despite successful API calls</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><p class=\"mb-4 text-gray-600 leading-relaxed\">The API now returns Cube.js-compatible response format. Update client code:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// OLD format (deprecated)\n{\n  data: [...],\n  annotation: {...},\n  query: {...}\n}\n\n// NEW format (current)\n{\n  queryType: &quot;regularQuery&quot;,\n  results: [{\n    data: [...],           // Raw data moved to results[0].data\n    annotation: {...},     // Annotation moved to results[0].annotation\n    query: {...},\n    requestId: &quot;...&quot;,\n    lastRefreshTime: &quot;...&quot;\n  }],\n  pivotQuery: {...},\n  slowQuery: false\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// OLD format (deprecated)\n{\n  data: [...],\n  annotation: {...},\n  query: {...}\n}\n\n// NEW format (current)\n{\n  queryType: &quot;regularQuery&quot;,\n  results: [{\n    data: [...],           // Raw data moved to results[0].data\n    annotation: {...},     // Annotation moved to results[0].annotation\n    query: {...},\n    requestId: &quot;...&quot;,\n    lastRefreshTime: &quot;...&quot;\n  }],\n  pivotQuery: {...},\n  slowQuery: false\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">The CubeClient automatically handles both formats, but custom client code needs updates:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Update manual API handling\nconst response = await fetch(&#39;/api/cube/load?query=&#39; + encodeURIComponent(JSON.stringify(query)))\nconst result = await response.json()\n\n// Handle both old and new response formats\nconst data = result.results?.[0]?.data || result.data || []\nconst annotation = result.results?.[0]?.annotation || result.annotation || {}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Update manual API handling\nconst response = await fetch(&#39;/api/cube/load?query=&#39; + encodeURIComponent(JSON.stringify(query)))\nconst result = await response.json()\n\n// Handle both old and new response formats\nconst data = result.results?.[0]?.data || result.data || []\nconst annotation = result.results?.[0]?.annotation || result.annotation || {}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"error-http-method-not-allowed\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Error: &quot;HTTP method not allowed&quot;</h4><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Symptoms:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">405 Method Not Allowed errors</li><li class=\"leading-relaxed\">API endpoints returning wrong status codes</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Solutions:</strong></p><p class=\"mb-4 text-gray-600 leading-relaxed\">API endpoints now use different HTTP methods:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// OLD: POST with body\nfetch(&#39;/api/cube/load&#39;, {\n  method: &#39;POST&#39;,\n  body: JSON.stringify({ query })\n})\n\n// NEW: GET with query parameter\nconst queryParam = encodeURIComponent(JSON.stringify(query))\nfetch(`/api/cube/load?query=${queryParam}`, {\n  method: &#39;GET&#39;\n})\n\n// SQL endpoint also uses GET now\nfetch(`/api/cube/sql?query=${queryParam}`, {\n  method: &#39;GET&#39;\n})\n\n// New dry-run endpoint uses POST\nfetch(&#39;/api/cube/dry-run&#39;, {\n  method: &#39;POST&#39;,\n  body: JSON.stringify({ query })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// OLD: POST with body\nfetch(&#39;/api/cube/load&#39;, {\n  method: &#39;POST&#39;,\n  body: JSON.stringify({ query })\n})\n\n// NEW: GET with query parameter\nconst queryParam = encodeURIComponent(JSON.stringify(query))\nfetch(`/api/cube/load?query=${queryParam}`, {\n  method: &#39;GET&#39;\n})\n\n// SQL endpoint also uses GET now\nfetch(`/api/cube/sql?query=${queryParam}`, {\n  method: &#39;GET&#39;\n})\n\n// New dry-run endpoint uses POST\nfetch(&#39;/api/cube/dry-run&#39;, {\n  method: &#39;POST&#39;,\n  body: JSON.stringify({ query })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"network-debugging\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Network Debugging</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Debug API communication issues:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Client-side debugging with updated CubeClient\nimport { CubeClient } from &#39;drizzle-cube/client&#39;\n\nconst cubeClient = new CubeClient(&#39;your-token&#39;, {\n  apiUrl: &#39;/api/cube&#39;,\n  headers: {\n    &#39;X-Organisation-ID&#39;: &#39;1&#39;\n  }\n})\n\n// Test different endpoints\ntry {\n  // Test load endpoint (GET method)\n  const result = await cubeClient.load(query)\n  console.log(&#39;Load result:&#39;, result.rawData())\n  \n  // Test SQL generation (GET method)  \n  const sqlResult = await cubeClient.sql(query)\n  console.log(&#39;Generated SQL:&#39;, sqlResult)\n  \n  // Test dry run (POST method)\n  const dryRunResult = await cubeClient.dryRun(query)\n  console.log(&#39;Dry run result:&#39;, dryRunResult)\n  \n} catch (error) {\n  console.error(&#39;API Error:&#39;, error.message)\n  \n  // Enhanced error logging\n  if (error.response) {\n    console.error(&#39;Response status:&#39;, error.response.status)\n    console.error(&#39;Response headers:&#39;, error.response.headers)\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Client-side debugging with updated CubeClient\nimport { CubeClient } from &#39;drizzle-cube/client&#39;\n\nconst cubeClient = new CubeClient(&#39;your-token&#39;, {\n  apiUrl: &#39;/api/cube&#39;,\n  headers: {\n    &#39;X-Organisation-ID&#39;: &#39;1&#39;\n  }\n})\n\n// Test different endpoints\ntry {\n  // Test load endpoint (GET method)\n  const result = await cubeClient.load(query)\n  console.log(&#39;Load result:&#39;, result.rawData())\n  \n  // Test SQL generation (GET method)  \n  const sqlResult = await cubeClient.sql(query)\n  console.log(&#39;Generated SQL:&#39;, sqlResult)\n  \n  // Test dry run (POST method)\n  const dryRunResult = await cubeClient.dryRun(query)\n  console.log(&#39;Dry run result:&#39;, dryRunResult)\n  \n} catch (error) {\n  console.error(&#39;API Error:&#39;, error.message)\n  \n  // Enhanced error logging\n  if (error.response) {\n    console.error(&#39;Response status:&#39;, error.response.status)\n    console.error(&#39;Response headers:&#39;, error.response.headers)\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"error-reference\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Reference</h2><h3 id=\"common-error-messages\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Common Error Messages</h3><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Error</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Cause</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Solution</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`organisationId is required`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Missing security context</td><td class=\"px-4 py-3 text-sm text-gray-600\">Check JWT token and extraction logic</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`Unknown cube member`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Typo in cube/field name</td><td class=\"px-4 py-3 text-sm text-gray-600\">Verify exact names and registration</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`Connection timeout`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Database connection issue</td><td class=\"px-4 py-3 text-sm text-gray-600\">Check connection string and network</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`Access denied`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Security context/permissions</td><td class=\"px-4 py-3 text-sm text-gray-600\">Verify security filtering and roles</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`Invalid date format`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Wrong date string format</td><td class=\"px-4 py-3 text-sm text-gray-600\">Use ISO format: YYYY-MM-DD</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`Table does not exist`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Schema not found</td><td class=\"px-4 py-3 text-sm text-gray-600\">Check Drizzle schema import and registration</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`Cannot read property 'data'`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Old response format handling</td><td class=\"px-4 py-3 text-sm text-gray-600\">Update to use results[0].data format</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`HTTP method not allowed`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Wrong HTTP method</td><td class=\"px-4 py-3 text-sm text-gray-600\">Use GET for /load and /sql, POST for /dry-run</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`Dry run failed`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Query validation error</td><td class=\"px-4 py-3 text-sm text-gray-600\">Check query structure and cube references</td></tr></tbody>\n    </table>\n  </div><h3 id=\"http-status-codes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">HTTP Status Codes</h3><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Status</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Meaning</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Common Causes</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">400</td><td class=\"px-4 py-3 text-sm text-gray-600\">Bad Request</td><td class=\"px-4 py-3 text-sm text-gray-600\">Invalid query structure, missing fields</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">401</td><td class=\"px-4 py-3 text-sm text-gray-600\">Unauthorized</td><td class=\"px-4 py-3 text-sm text-gray-600\">Missing or invalid JWT token</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">403</td><td class=\"px-4 py-3 text-sm text-gray-600\">Forbidden</td><td class=\"px-4 py-3 text-sm text-gray-600\">Insufficient permissions for data access</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">404</td><td class=\"px-4 py-3 text-sm text-gray-600\">Not Found</td><td class=\"px-4 py-3 text-sm text-gray-600\">API endpoint not found, routing issue</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">500</td><td class=\"px-4 py-3 text-sm text-gray-600\">Internal Error</td><td class=\"px-4 py-3 text-sm text-gray-600\">Database connection, code errors</td></tr></tbody>\n    </table>\n  </div><h2 id=\"development-debugging\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Development Debugging</h2><h3 id=\"test-environment-setup\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Test Environment Setup</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Set up a debugging-friendly test environment:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// test-setup.ts\nimport { SemanticLayerCompiler } from &#39;drizzle-cube/server&#39;\nimport { createTestDatabase } from &#39;./helpers/test-database&#39;\n\n// Create test environment with debugging\nexport async function setupTestEnvironment() {\n  const { db, schema } = await createTestDatabase()\n  \n  const executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)\n  const semanticLayer = new SemanticLayerCompiler({ \n    databaseExecutor: executor,\n    debug: true // Enable debug mode\n  })\n\n  // Add debug logging\n  const originalLoad = semanticLayer.load\n  semanticLayer.load = async function(query, context) {\n    console.log(&#39;Test Query:&#39;, JSON.stringify(query, null, 2))\n    console.log(&#39;Test Context:&#39;, context)\n    \n    try {\n      const result = await originalLoad.call(this, query, context)\n      console.log(&#39;Test Result Count:&#39;, result.rawData().length)\n      return result\n    } catch (error) {\n      console.error(&#39;Test Query Failed:&#39;, error)\n      throw error\n    }\n  }\n\n  return { semanticLayer, db, schema }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// test-setup.ts\nimport { SemanticLayerCompiler } from &#39;drizzle-cube/server&#39;\nimport { createTestDatabase } from &#39;./helpers/test-database&#39;\n\n// Create test environment with debugging\nexport async function setupTestEnvironment() {\n  const { db, schema } = await createTestDatabase()\n  \n  const executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)\n  const semanticLayer = new SemanticLayerCompiler({ \n    databaseExecutor: executor,\n    debug: true // Enable debug mode\n  })\n\n  // Add debug logging\n  const originalLoad = semanticLayer.load\n  semanticLayer.load = async function(query, context) {\n    console.log(&#39;Test Query:&#39;, JSON.stringify(query, null, 2))\n    console.log(&#39;Test Context:&#39;, context)\n    \n    try {\n      const result = await originalLoad.call(this, query, context)\n      console.log(&#39;Test Result Count:&#39;, result.rawData().length)\n      return result\n    } catch (error) {\n      console.error(&#39;Test Query Failed:&#39;, error)\n      throw error\n    }\n  }\n\n  return { semanticLayer, db, schema }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"ide-debugging\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">IDE Debugging</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Set up debugger for step-through debugging:</p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">// .vscode/launch.json\n{\n  &quot;version&quot;: &quot;0.2.0&quot;,\n  &quot;configurations&quot;: [\n    {\n      &quot;name&quot;: &quot;Debug Drizzle Cube&quot;,\n      &quot;type&quot;: &quot;node&quot;,\n      &quot;request&quot;: &quot;launch&quot;,\n      &quot;program&quot;: &quot;${workspaceFolder}/src/index.ts&quot;,\n      &quot;env&quot;: {\n        &quot;NODE_ENV&quot;: &quot;development&quot;,\n        &quot;DEBUG&quot;: &quot;drizzle-cube:*&quot;\n      },\n      &quot;runtimeArgs&quot;: [&quot;-r&quot;, &quot;ts-node/register&quot;],\n      &quot;sourceMaps&quot;: true,\n      &quot;cwd&quot;: &quot;${workspaceFolder}&quot;,\n      &quot;protocol&quot;: &quot;inspector&quot;,\n      &quot;restart&quot;: true,\n      &quot;console&quot;: &quot;integratedTerminal&quot;\n    }\n  ]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// .vscode/launch.json\n{\n  &quot;version&quot;: &quot;0.2.0&quot;,\n  &quot;configurations&quot;: [\n    {\n      &quot;name&quot;: &quot;Debug Drizzle Cube&quot;,\n      &quot;type&quot;: &quot;node&quot;,\n      &quot;request&quot;: &quot;launch&quot;,\n      &quot;program&quot;: &quot;${workspaceFolder}/src/index.ts&quot;,\n      &quot;env&quot;: {\n        &quot;NODE_ENV&quot;: &quot;development&quot;,\n        &quot;DEBUG&quot;: &quot;drizzle-cube:*&quot;\n      },\n      &quot;runtimeArgs&quot;: [&quot;-r&quot;, &quot;ts-node/register&quot;],\n      &quot;sourceMaps&quot;: true,\n      &quot;cwd&quot;: &quot;${workspaceFolder}&quot;,\n      &quot;protocol&quot;: &quot;inspector&quot;,\n      &quot;restart&quot;: true,\n      &quot;console&quot;: &quot;integratedTerminal&quot;\n    }\n  ]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"production-debugging\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Production Debugging</h2><h3 id=\"health-check-endpoints\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Health Check Endpoints</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Implement health checks for production monitoring:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Health check route\napp.get(&#39;/health&#39;, async (req, res) =&gt; {\n  try {\n    // Test database connection\n    await db.execute(sql`SELECT 1`)\n    \n    // Test cube compilation\n    const testContext = { organisationId: &#39;health-check&#39; }\n    const cubes = await semanticLayer.getMetadata(testContext)\n    \n    res.json({\n      status: &#39;healthy&#39;,\n      timestamp: new Date().toISOString(),\n      database: &#39;connected&#39;,\n      cubes: cubes.length,\n      version: process.env.npm_package_version\n    })\n  } catch (error) {\n    res.status(503).json({\n      status: &#39;unhealthy&#39;,\n      error: error.message,\n      timestamp: new Date().toISOString()\n    })\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Health check route\napp.get(&#39;/health&#39;, async (req, res) =&gt; {\n  try {\n    // Test database connection\n    await db.execute(sql`SELECT 1`)\n    \n    // Test cube compilation\n    const testContext = { organisationId: &#39;health-check&#39; }\n    const cubes = await semanticLayer.getMetadata(testContext)\n    \n    res.json({\n      status: &#39;healthy&#39;,\n      timestamp: new Date().toISOString(),\n      database: &#39;connected&#39;,\n      cubes: cubes.length,\n      version: process.env.npm_package_version\n    })\n  } catch (error) {\n    res.status(503).json({\n      status: &#39;unhealthy&#39;,\n      error: error.message,\n      timestamp: new Date().toISOString()\n    })\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"error-monitoring\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Error Monitoring</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Set up error tracking and alerting:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Error monitoring middleware\nimport * as Sentry from &#39;@sentry/node&#39;\n\nexport function errorHandler(error: Error, req: any, res: any, next: any) {\n  // Log error details\n  console.error(&#39;Drizzle Cube Error:&#39;, {\n    message: error.message,\n    stack: error.stack,\n    url: req.url,\n    method: req.method,\n    body: req.body,\n    user: req.user?.id,\n    timestamp: new Date().toISOString()\n  })\n\n  // Send to error tracking service\n  Sentry.captureException(error, {\n    tags: {\n      component: &#39;drizzle-cube&#39;,\n      url: req.url\n    },\n    user: {\n      id: req.user?.id,\n      org: req.user?.organisationId\n    }\n  })\n\n  // Return user-friendly error\n  res.status(500).json({\n    error: &#39;Internal server error&#39;,\n    id: Sentry.lastEventId() // For tracking\n  })\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Error monitoring middleware\nimport * as Sentry from &#39;@sentry/node&#39;\n\nexport function errorHandler(error: Error, req: any, res: any, next: any) {\n  // Log error details\n  console.error(&#39;Drizzle Cube Error:&#39;, {\n    message: error.message,\n    stack: error.stack,\n    url: req.url,\n    method: req.method,\n    body: req.body,\n    user: req.user?.id,\n    timestamp: new Date().toISOString()\n  })\n\n  // Send to error tracking service\n  Sentry.captureException(error, {\n    tags: {\n      component: &#39;drizzle-cube&#39;,\n      url: req.url\n    },\n    user: {\n      id: req.user?.id,\n      org: req.user?.organisationId\n    }\n  })\n\n  // Return user-friendly error\n  res.status(500).json({\n    error: &#39;Internal server error&#39;,\n    id: Sentry.lastEventId() // For tracking\n  })\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"getting-help\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Getting Help</h2><h3 id=\"diagnostic-information\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Diagnostic Information</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">When reporting issues, include:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Environment Information:</strong><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Node.js version</li><li class=\"leading-relaxed\">Database type and version</li><li class=\"leading-relaxed\">Drizzle Cube version</li><li class=\"leading-relaxed\">Operating system</li></ul></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Query Information:</strong><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Complete query object</li><li class=\"leading-relaxed\">Security context (sanitized)</li><li class=\"leading-relaxed\">Expected vs. actual results</li></ul></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Error Details:</strong><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Complete error message and stack trace</li><li class=\"leading-relaxed\">SQL query (if available)</li><li class=\"leading-relaxed\">Steps to reproduce</li></ul></li></ol><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Generate diagnostic report\nfunction generateDiagnosticReport() {\n  return {\n    environment: {\n      nodeVersion: process.version,\n      platform: process.platform,\n      drizzleCubeVersion: require(&#39;../package.json&#39;).version\n    },\n    database: {\n      type: &#39;postgresql&#39;, // or mysql, sqlite\n      version: &#39;SELECT version()&#39; // Run this query\n    },\n    lastError: {\n      message: &#39;Copy error message here&#39;,\n      stack: &#39;Copy stack trace here&#39;\n    },\n    queryExample: {\n      // Include problematic query\n    }\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Generate diagnostic report\nfunction generateDiagnosticReport() {\n  return {\n    environment: {\n      nodeVersion: process.version,\n      platform: process.platform,\n      drizzleCubeVersion: require(&#39;../package.json&#39;).version\n    },\n    database: {\n      type: &#39;postgresql&#39;, // or mysql, sqlite\n      version: &#39;SELECT version()&#39; // Run this query\n    },\n    lastError: {\n      message: &#39;Copy error message here&#39;,\n      stack: &#39;Copy stack trace here&#39;\n    },\n    queryExample: {\n      // Include problematic query\n    }\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"community-resources\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Community Resources</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">GitHub Issues</strong>: <a href=\"https://github.com/cliftonc/drizzle-cube/issues\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/cliftonc/drizzle-cube/issues</a></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Documentation</strong>: Check help site for examples</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Database Documentation</strong>: Refer to Drizzle ORM docs</li></ul><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Review <a href=\"#\" data-help-link=\"advanced/performance\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Performance</a> optimization techniques</li><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"advanced/typescript\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >TypeScript</a> advanced patterns</li><li class=\"leading-relaxed\">Check the repository for example implementations</li><li class=\"leading-relaxed\">Set up proper monitoring and logging</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Automatic error detection and suggestions</li><li class=\"leading-relaxed\">Built-in debugging tools and query analyzer</li><li class=\"leading-relaxed\">Performance profiling and optimization recommendations</li><li class=\"leading-relaxed\">Interactive troubleshooting guide</li><li class=\"leading-relaxed\">Error tracking integration templates</li></ul>","path":"advanced/troubleshooting.md"},
  'advanced/typescript': {"slug":"advanced/typescript","title":"TypeScript","content":"<h1 id=\"typescript\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">TypeScript</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube is built with TypeScript-first design, providing comprehensive type safety from database schema to API responses. This guide covers advanced TypeScript patterns, type inference, and best practices for building type-safe analytics.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube&#39;s type system ensures:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Schema-to-Query Type Safety</strong>: Cube definitions are validated against database schema</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Query Result Type Inference</strong>: Results are properly typed based on requested fields</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security Context Typing</strong>: Type-safe security context throughout the application</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Framework Integration</strong>: Full TypeScript support for all major frameworks</li></ul><h2 id=\"schema-first-types\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Schema-First Types</h2><h3 id=\"drizzle-schema-integration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Drizzle Schema Integration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// schema.ts - Define your database schema with Drizzle\nimport { pgTable, serial, varchar, timestamp, integer, boolean } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  name: varchar(&#39;name&#39;, { length: 255 }).notNull(),\n  email: varchar(&#39;email&#39;, { length: 255 }).unique().notNull(),\n  departmentId: integer(&#39;department_id&#39;).references(() =&gt; departments.id),\n  salary: integer(&#39;salary&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow(),\n  organisationId: varchar(&#39;organisation_id&#39;, { length: 255 }).notNull()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  name: varchar(&#39;name&#39;, { length: 255 }).notNull(),\n  budget: integer(&#39;budget&#39;),\n  organisationId: varchar(&#39;organisation_id&#39;, { length: 255 }).notNull()\n})\n\n// Export schema type for use throughout application\nexport type Schema = {\n  employees: typeof employees\n  departments: typeof departments\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// schema.ts - Define your database schema with Drizzle\nimport { pgTable, serial, varchar, timestamp, integer, boolean } from &#39;drizzle-orm/pg-core&#39;\n\nexport const employees = pgTable(&#39;employees&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  name: varchar(&#39;name&#39;, { length: 255 }).notNull(),\n  email: varchar(&#39;email&#39;, { length: 255 }).unique().notNull(),\n  departmentId: integer(&#39;department_id&#39;).references(() =&gt; departments.id),\n  salary: integer(&#39;salary&#39;),\n  active: boolean(&#39;active&#39;).default(true),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow(),\n  organisationId: varchar(&#39;organisation_id&#39;, { length: 255 }).notNull()\n})\n\nexport const departments = pgTable(&#39;departments&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  name: varchar(&#39;name&#39;, { length: 255 }).notNull(),\n  budget: integer(&#39;budget&#39;),\n  organisationId: varchar(&#39;organisation_id&#39;, { length: 255 }).notNull()\n})\n\n// Export schema type for use throughout application\nexport type Schema = {\n  employees: typeof employees\n  departments: typeof departments\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"type-safe-cube-definitions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Type-Safe Cube Definitions</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// cubes.ts - Define cubes with full type safety\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport type { Cube, QueryContext, BaseQueryDefinition } from &#39;drizzle-cube/server&#39;\nimport { employees, departments, type Schema } from &#39;./schema&#39;\n\n// Fully typed cube definition\nexport const employeesCube: Cube&lt;Schema&gt; = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  description: &#39;Employee data and metrics&#39;,\n  \n  // Type-safe SQL function\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: employees, // ✅ Type-checked against schema\n    joins: [{\n      table: departments, // ✅ Type-checked against schema\n      on: eq(employees.departmentId, departments.id), // ✅ Column types verified\n      type: &#39;left&#39;\n    }],\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  \n  // Type-safe dimensions\n  dimensions: {\n    id: {\n      name: &#39;id&#39;,\n      title: &#39;Employee ID&#39;,\n      type: &#39;number&#39;,\n      sql: employees.id, // ✅ Type-checked against schema\n      primaryKey: true\n    },\n    name: {\n      name: &#39;name&#39;, \n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name // ✅ Column exists and type matches\n    },\n    departmentName: {\n      name: &#39;departmentName&#39;,\n      title: &#39;Department&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name // ✅ Available through join\n    }\n  },\n  \n  // Type-safe measures\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id // ✅ Type-checked\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary // ✅ Numeric column verified\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// cubes.ts - Define cubes with full type safety\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport type { Cube, QueryContext, BaseQueryDefinition } from &#39;drizzle-cube/server&#39;\nimport { employees, departments, type Schema } from &#39;./schema&#39;\n\n// Fully typed cube definition\nexport const employeesCube: Cube&lt;Schema&gt; = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  description: &#39;Employee data and metrics&#39;,\n  \n  // Type-safe SQL function\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: employees, // ✅ Type-checked against schema\n    joins: [{\n      table: departments, // ✅ Type-checked against schema\n      on: eq(employees.departmentId, departments.id), // ✅ Column types verified\n      type: &#39;left&#39;\n    }],\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  \n  // Type-safe dimensions\n  dimensions: {\n    id: {\n      name: &#39;id&#39;,\n      title: &#39;Employee ID&#39;,\n      type: &#39;number&#39;,\n      sql: employees.id, // ✅ Type-checked against schema\n      primaryKey: true\n    },\n    name: {\n      name: &#39;name&#39;, \n      title: &#39;Employee Name&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name // ✅ Column exists and type matches\n    },\n    departmentName: {\n      name: &#39;departmentName&#39;,\n      title: &#39;Department&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name // ✅ Available through join\n    }\n  },\n  \n  // Type-safe measures\n  measures: {\n    count: {\n      name: &#39;count&#39;,\n      title: &#39;Total Employees&#39;,\n      type: &#39;count&#39;,\n      sql: employees.id // ✅ Type-checked\n    },\n    avgSalary: {\n      name: &#39;avgSalary&#39;,\n      title: &#39;Average Salary&#39;,\n      type: &#39;avg&#39;,\n      sql: employees.salary // ✅ Numeric column verified\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-type-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Type Patterns</h2><h3 id=\"generic-cube-factory\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Generic Cube Factory</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create reusable cube factories with proper typing:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Generic cube factory function\nfunction createAnalyticsCube&lt;\n  TSchema extends Record&lt;string, any&gt;,\n  TTable extends TSchema[keyof TSchema]\n&gt;(\n  name: string,\n  table: TTable,\n  schema: TSchema,\n  config: Partial&lt;CubeConfig&lt;TSchema&gt;&gt;\n): Cube&lt;TSchema&gt; {\n  return defineCube(name, {\n    sql: (ctx: QueryContext&lt;TSchema&gt;) =&gt; ({\n      from: table,\n      where: eq(table.organisationId, ctx.securityContext.organisationId)\n    }),\n    ...config\n  })\n}\n\n// Usage with full type safety\nconst usersCube = createAnalyticsCube(\n  &#39;Users&#39;, \n  users,     // ✅ Type-checked table\n  schema,    // ✅ Schema matches\n  {\n    dimensions: {\n      name: {\n        name: &#39;name&#39;,\n        type: &#39;string&#39;,\n        sql: users.name // ✅ Column exists on table\n      }\n    }\n  }\n)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Generic cube factory function\nfunction createAnalyticsCube&lt;\n  TSchema extends Record&lt;string, any&gt;,\n  TTable extends TSchema[keyof TSchema]\n&gt;(\n  name: string,\n  table: TTable,\n  schema: TSchema,\n  config: Partial&lt;CubeConfig&lt;TSchema&gt;&gt;\n): Cube&lt;TSchema&gt; {\n  return defineCube(name, {\n    sql: (ctx: QueryContext&lt;TSchema&gt;) =&gt; ({\n      from: table,\n      where: eq(table.organisationId, ctx.securityContext.organisationId)\n    }),\n    ...config\n  })\n}\n\n// Usage with full type safety\nconst usersCube = createAnalyticsCube(\n  &#39;Users&#39;, \n  users,     // ✅ Type-checked table\n  schema,    // ✅ Schema matches\n  {\n    dimensions: {\n      name: {\n        name: &#39;name&#39;,\n        type: &#39;string&#39;,\n        sql: users.name // ✅ Column exists on table\n      }\n    }\n  }\n)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"conditional-types-for-security-context\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Conditional Types for Security Context</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Conditional security context types based on user role\ntype BaseSecurityContext = {\n  organisationId: string\n  userId: string\n  userRole: &#39;admin&#39; | &#39;manager&#39; | &#39;employee&#39;\n}\n\ntype AdminContext = BaseSecurityContext &amp; {\n  userRole: &#39;admin&#39;\n  // Admins have access to all data\n}\n\ntype ManagerContext = BaseSecurityContext &amp; {\n  userRole: &#39;manager&#39;\n  departmentId: string // Managers need department context\n}\n\ntype EmployeeContext = BaseSecurityContext &amp; {\n  userRole: &#39;employee&#39;\n  // Employees only see their own data\n}\n\ntype SecurityContext = AdminContext | ManagerContext | EmployeeContext\n\n// Type-safe security context extraction\nexport function createSecurityContext(\n  user: { id: string; organisationId: string; role: string; departmentId?: string }\n): SecurityContext {\n  const baseContext = {\n    organisationId: user.organisationId,\n    userId: user.id,\n    userRole: user.role as SecurityContext[&#39;userRole&#39;]\n  }\n\n  switch (user.role) {\n    case &#39;admin&#39;:\n      return { ...baseContext, userRole: &#39;admin&#39; }\n    case &#39;manager&#39;:\n      if (!user.departmentId) {\n        throw new Error(&#39;Manager role requires departmentId&#39;)\n      }\n      return { ...baseContext, userRole: &#39;manager&#39;, departmentId: user.departmentId }\n    case &#39;employee&#39;:\n      return { ...baseContext, userRole: &#39;employee&#39; }\n    default:\n      throw new Error(`Invalid user role: ${user.role}`)\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Conditional security context types based on user role\ntype BaseSecurityContext = {\n  organisationId: string\n  userId: string\n  userRole: &#39;admin&#39; | &#39;manager&#39; | &#39;employee&#39;\n}\n\ntype AdminContext = BaseSecurityContext &amp; {\n  userRole: &#39;admin&#39;\n  // Admins have access to all data\n}\n\ntype ManagerContext = BaseSecurityContext &amp; {\n  userRole: &#39;manager&#39;\n  departmentId: string // Managers need department context\n}\n\ntype EmployeeContext = BaseSecurityContext &amp; {\n  userRole: &#39;employee&#39;\n  // Employees only see their own data\n}\n\ntype SecurityContext = AdminContext | ManagerContext | EmployeeContext\n\n// Type-safe security context extraction\nexport function createSecurityContext(\n  user: { id: string; organisationId: string; role: string; departmentId?: string }\n): SecurityContext {\n  const baseContext = {\n    organisationId: user.organisationId,\n    userId: user.id,\n    userRole: user.role as SecurityContext[&#39;userRole&#39;]\n  }\n\n  switch (user.role) {\n    case &#39;admin&#39;:\n      return { ...baseContext, userRole: &#39;admin&#39; }\n    case &#39;manager&#39;:\n      if (!user.departmentId) {\n        throw new Error(&#39;Manager role requires departmentId&#39;)\n      }\n      return { ...baseContext, userRole: &#39;manager&#39;, departmentId: user.departmentId }\n    case &#39;employee&#39;:\n      return { ...baseContext, userRole: &#39;employee&#39; }\n    default:\n      throw new Error(`Invalid user role: ${user.role}`)\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"query-result-type-inference\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Result Type Inference</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Type-safe query result inference\ntype QueryResultType&lt;T extends CubeQuery&gt; = {\n  [K in NonNullable&lt;T[&#39;measures&#39;]&gt;[number]]: number\n} &amp; {\n  [K in NonNullable&lt;T[&#39;dimensions&#39;]&gt;[number]]: string | number | boolean\n}\n\n// Usage example\nconst query = {\n  measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;, &#39;Employees.isActive&#39;]\n} as const\n\ntype ResultType = QueryResultType&lt;typeof query&gt;\n// Inferred type:\n// {\n//   &#39;Employees.count&#39;: number\n//   &#39;Employees.avgSalary&#39;: number\n//   &#39;Employees.departmentName&#39;: string\n//   &#39;Employees.isActive&#39;: boolean\n// }\n\n// Type-safe result processing\nfunction processResults(data: ResultType[]) {\n  return data.map(row =&gt; ({\n    department: row[&#39;Employees.departmentName&#39;], // ✅ String type\n    employeeCount: row[&#39;Employees.count&#39;],       // ✅ Number type\n    avgSalary: row[&#39;Employees.avgSalary&#39;],       // ✅ Number type\n    isActive: row[&#39;Employees.isActive&#39;]          // ✅ Boolean type\n  }))\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Type-safe query result inference\ntype QueryResultType&lt;T extends CubeQuery&gt; = {\n  [K in NonNullable&lt;T[&#39;measures&#39;]&gt;[number]]: number\n} &amp; {\n  [K in NonNullable&lt;T[&#39;dimensions&#39;]&gt;[number]]: string | number | boolean\n}\n\n// Usage example\nconst query = {\n  measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;, &#39;Employees.isActive&#39;]\n} as const\n\ntype ResultType = QueryResultType&lt;typeof query&gt;\n// Inferred type:\n// {\n//   &#39;Employees.count&#39;: number\n//   &#39;Employees.avgSalary&#39;: number\n//   &#39;Employees.departmentName&#39;: string\n//   &#39;Employees.isActive&#39;: boolean\n// }\n\n// Type-safe result processing\nfunction processResults(data: ResultType[]) {\n  return data.map(row =&gt; ({\n    department: row[&#39;Employees.departmentName&#39;], // ✅ String type\n    employeeCount: row[&#39;Employees.count&#39;],       // ✅ Number type\n    avgSalary: row[&#39;Employees.avgSalary&#39;],       // ✅ Number type\n    isActive: row[&#39;Employees.isActive&#39;]          // ✅ Boolean type\n  }))\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"client-side-typescript\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Client-Side TypeScript</h2><h3 id=\"type-safe-hook-usage\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Type-Safe Hook Usage</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Type-safe query hooks\nfunction useEmployeeMetrics(departmentId?: string) {\n  const query = useMemo(() =&gt; ({\n    measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;] as const,\n    dimensions: [&#39;Employees.departmentName&#39;] as const,\n    filters: departmentId ? [{\n      member: &#39;Employees.departmentName&#39; as const,\n      operator: &#39;equals&#39; as const,\n      values: [departmentId]\n    }] : []\n  }), [departmentId])\n\n  return useCubeQuery(query)\n}\n\n// Type-safe component with inferred result types\nfunction EmployeeDashboard({ departmentId }: { departmentId?: string }) {\n  const { resultSet, isLoading, error } = useEmployeeMetrics(departmentId)\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;\n  if (error) return &lt;div&gt;Error: {error.message}&lt;/div&gt;\n  if (!resultSet) return &lt;div&gt;No data&lt;/div&gt;\n\n  // ✅ TypeScript knows the exact shape of rawData()\n  const data = resultSet.rawData() // Type inferred from query\n  \n  return (\n    &lt;div&gt;\n      {data.map((row, index) =&gt; (\n        &lt;div key={index}&gt;\n          {/* ✅ All properties are type-checked */}\n          Department: {row[&#39;Employees.departmentName&#39;]}\n          Count: {row[&#39;Employees.count&#39;]}\n          Avg Salary: ${row[&#39;Employees.avgSalary&#39;].toLocaleString()}\n        &lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Type-safe query hooks\nfunction useEmployeeMetrics(departmentId?: string) {\n  const query = useMemo(() =&gt; ({\n    measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;] as const,\n    dimensions: [&#39;Employees.departmentName&#39;] as const,\n    filters: departmentId ? [{\n      member: &#39;Employees.departmentName&#39; as const,\n      operator: &#39;equals&#39; as const,\n      values: [departmentId]\n    }] : []\n  }), [departmentId])\n\n  return useCubeQuery(query)\n}\n\n// Type-safe component with inferred result types\nfunction EmployeeDashboard({ departmentId }: { departmentId?: string }) {\n  const { resultSet, isLoading, error } = useEmployeeMetrics(departmentId)\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;\n  if (error) return &lt;div&gt;Error: {error.message}&lt;/div&gt;\n  if (!resultSet) return &lt;div&gt;No data&lt;/div&gt;\n\n  // ✅ TypeScript knows the exact shape of rawData()\n  const data = resultSet.rawData() // Type inferred from query\n  \n  return (\n    &lt;div&gt;\n      {data.map((row, index) =&gt; (\n        &lt;div key={index}&gt;\n          {/* ✅ All properties are type-checked */}\n          Department: {row[&#39;Employees.departmentName&#39;]}\n          Count: {row[&#39;Employees.count&#39;]}\n          Avg Salary: ${row[&#39;Employees.avgSalary&#39;].toLocaleString()}\n        &lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"chart-component-type-safety\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Chart Component Type Safety</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Type-safe chart configuration\ninterface TypedChartConfig&lt;T extends CubeQuery&gt; {\n  xAxis: NonNullable&lt;T[&#39;dimensions&#39;]&gt;[number][]\n  yAxis: NonNullable&lt;T[&#39;measures&#39;]&gt;[number][]\n  series?: NonNullable&lt;T[&#39;dimensions&#39;]&gt;[number][]\n}\n\ninterface TypedChartProps&lt;T extends CubeQuery&gt; {\n  resultSet: CubeResultSet\n  chartConfig: TypedChartConfig&lt;T&gt;\n  displayConfig?: DisplayConfig\n}\n\n// Generic chart component with type safety\nfunction TypedBarChart&lt;T extends CubeQuery&gt;({\n  resultSet,\n  chartConfig,\n  displayConfig\n}: TypedChartProps&lt;T&gt;) {\n  // ✅ chartConfig properties are type-checked against query\n  // ✅ resultSet data structure is known\n  return (\n    &lt;RechartsBarChart\n      resultSet={resultSet}\n      chartConfig={chartConfig}\n      displayConfig={displayConfig}\n    /&gt;\n  )\n}\n\n// Usage with full type inference\nconst chartQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  timeDimensions: []\n} as const\n\nfunction EmployeeChart() {\n  const { resultSet } = useCubeQuery(chartQuery)\n  \n  return (\n    &lt;TypedBarChart\n      resultSet={resultSet!}\n      chartConfig={{\n        xAxis: [&#39;Employees.departmentName&#39;], // ✅ Type-checked\n        yAxis: [&#39;Employees.count&#39;],          // ✅ Type-checked\n        // series: [&#39;Employees.invalidField&#39;] // ❌ Would cause TypeScript error\n      }}\n    /&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Type-safe chart configuration\ninterface TypedChartConfig&lt;T extends CubeQuery&gt; {\n  xAxis: NonNullable&lt;T[&#39;dimensions&#39;]&gt;[number][]\n  yAxis: NonNullable&lt;T[&#39;measures&#39;]&gt;[number][]\n  series?: NonNullable&lt;T[&#39;dimensions&#39;]&gt;[number][]\n}\n\ninterface TypedChartProps&lt;T extends CubeQuery&gt; {\n  resultSet: CubeResultSet\n  chartConfig: TypedChartConfig&lt;T&gt;\n  displayConfig?: DisplayConfig\n}\n\n// Generic chart component with type safety\nfunction TypedBarChart&lt;T extends CubeQuery&gt;({\n  resultSet,\n  chartConfig,\n  displayConfig\n}: TypedChartProps&lt;T&gt;) {\n  // ✅ chartConfig properties are type-checked against query\n  // ✅ resultSet data structure is known\n  return (\n    &lt;RechartsBarChart\n      resultSet={resultSet}\n      chartConfig={chartConfig}\n      displayConfig={displayConfig}\n    /&gt;\n  )\n}\n\n// Usage with full type inference\nconst chartQuery = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  timeDimensions: []\n} as const\n\nfunction EmployeeChart() {\n  const { resultSet } = useCubeQuery(chartQuery)\n  \n  return (\n    &lt;TypedBarChart\n      resultSet={resultSet!}\n      chartConfig={{\n        xAxis: [&#39;Employees.departmentName&#39;], // ✅ Type-checked\n        yAxis: [&#39;Employees.count&#39;],          // ✅ Type-checked\n        // series: [&#39;Employees.invalidField&#39;] // ❌ Would cause TypeScript error\n      }}\n    /&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Patterns</h2><h3 id=\"type-safe-cube-registry\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Type-Safe Cube Registry</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Strongly typed cube registry\nclass TypedCubeRegistry&lt;TSchema extends Record&lt;string, any&gt;&gt; {\n  private cubes = new Map&lt;string, Cube&lt;TSchema&gt;&gt;()\n\n  registerCube&lt;TCube extends Cube&lt;TSchema&gt;&gt;(cube: TCube): void {\n    this.cubes.set(cube.name, cube)\n  }\n\n  getCube&lt;K extends string&gt;(name: K): Cube&lt;TSchema&gt; | undefined {\n    return this.cubes.get(name)\n  }\n\n  getAllCubes(): Cube&lt;TSchema&gt;[] {\n    return Array.from(this.cubes.values())\n  }\n\n  // Type-safe cube field extraction\n  getCubeFields(cubeName: string): {\n    dimensions: string[]\n    measures: string[]\n  } {\n    const cube = this.getCube(cubeName)\n    if (!cube) throw new Error(`Cube ${cubeName} not found`)\n\n    return {\n      dimensions: Object.keys(cube.dimensions),\n      measures: Object.keys(cube.measures)\n    }\n  }\n}\n\n// Usage\nconst registry = new TypedCubeRegistry&lt;Schema&gt;()\nregistry.registerCube(employeesCube)\nregistry.registerCube(departmentsCube)\n\n// ✅ Type-safe access\nconst empCube = registry.getCube(&#39;Employees&#39;)\nconst fields = registry.getCubeFields(&#39;Employees&#39;)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Strongly typed cube registry\nclass TypedCubeRegistry&lt;TSchema extends Record&lt;string, any&gt;&gt; {\n  private cubes = new Map&lt;string, Cube&lt;TSchema&gt;&gt;()\n\n  registerCube&lt;TCube extends Cube&lt;TSchema&gt;&gt;(cube: TCube): void {\n    this.cubes.set(cube.name, cube)\n  }\n\n  getCube&lt;K extends string&gt;(name: K): Cube&lt;TSchema&gt; | undefined {\n    return this.cubes.get(name)\n  }\n\n  getAllCubes(): Cube&lt;TSchema&gt;[] {\n    return Array.from(this.cubes.values())\n  }\n\n  // Type-safe cube field extraction\n  getCubeFields(cubeName: string): {\n    dimensions: string[]\n    measures: string[]\n  } {\n    const cube = this.getCube(cubeName)\n    if (!cube) throw new Error(`Cube ${cubeName} not found`)\n\n    return {\n      dimensions: Object.keys(cube.dimensions),\n      measures: Object.keys(cube.measures)\n    }\n  }\n}\n\n// Usage\nconst registry = new TypedCubeRegistry&lt;Schema&gt;()\nregistry.registerCube(employeesCube)\nregistry.registerCube(departmentsCube)\n\n// ✅ Type-safe access\nconst empCube = registry.getCube(&#39;Employees&#39;)\nconst fields = registry.getCubeFields(&#39;Employees&#39;)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"discriminated-unions-for-query-types\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Discriminated Unions for Query Types</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Different query types with discriminated unions\ntype MetricQuery = {\n  type: &#39;metric&#39;\n  measures: string[]\n  dimensions?: never\n  timeDimensions?: never\n}\n\ntype DimensionalQuery = {\n  type: &#39;dimensional&#39;\n  measures: string[]\n  dimensions: string[]\n  timeDimensions?: never\n}\n\ntype TimeSeriesQuery = {\n  type: &#39;timeSeries&#39;\n  measures: string[]\n  dimensions?: string[]\n  timeDimensions: TimeDimension[]\n}\n\ntype TypedCubeQuery = MetricQuery | DimensionalQuery | TimeSeriesQuery\n\n// Type-safe query processor\nfunction processQuery(query: TypedCubeQuery): ProcessedQuery {\n  switch (query.type) {\n    case &#39;metric&#39;:\n      // ✅ TypeScript knows dimensions is undefined\n      return { ...query, groupBy: [] }\n      \n    case &#39;dimensional&#39;:\n      // ✅ TypeScript knows dimensions exists\n      return { ...query, groupBy: query.dimensions }\n      \n    case &#39;timeSeries&#39;:\n      // ✅ TypeScript knows timeDimensions exists\n      return { \n        ...query, \n        groupBy: [...(query.dimensions || []), ...query.timeDimensions.map(td =&gt; td.dimension)]\n      }\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Different query types with discriminated unions\ntype MetricQuery = {\n  type: &#39;metric&#39;\n  measures: string[]\n  dimensions?: never\n  timeDimensions?: never\n}\n\ntype DimensionalQuery = {\n  type: &#39;dimensional&#39;\n  measures: string[]\n  dimensions: string[]\n  timeDimensions?: never\n}\n\ntype TimeSeriesQuery = {\n  type: &#39;timeSeries&#39;\n  measures: string[]\n  dimensions?: string[]\n  timeDimensions: TimeDimension[]\n}\n\ntype TypedCubeQuery = MetricQuery | DimensionalQuery | TimeSeriesQuery\n\n// Type-safe query processor\nfunction processQuery(query: TypedCubeQuery): ProcessedQuery {\n  switch (query.type) {\n    case &#39;metric&#39;:\n      // ✅ TypeScript knows dimensions is undefined\n      return { ...query, groupBy: [] }\n      \n    case &#39;dimensional&#39;:\n      // ✅ TypeScript knows dimensions exists\n      return { ...query, groupBy: query.dimensions }\n      \n    case &#39;timeSeries&#39;:\n      // ✅ TypeScript knows timeDimensions exists\n      return { \n        ...query, \n        groupBy: [...(query.dimensions || []), ...query.timeDimensions.map(td =&gt; td.dimension)]\n      }\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"type-safe-error-handling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Type-Safe Error Handling</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Typed error classes\nabstract class DrizzleCubeError extends Error {\n  abstract readonly code: string\n  abstract readonly statusCode: number\n}\n\nclass SecurityContextError extends DrizzleCubeError {\n  readonly code = &#39;SECURITY_CONTEXT_ERROR&#39;\n  readonly statusCode = 401\n  \n  constructor(message: string, public readonly context?: Partial&lt;SecurityContext&gt;) {\n    super(message)\n  }\n}\n\nclass QueryValidationError extends DrizzleCubeError {\n  readonly code = &#39;QUERY_VALIDATION_ERROR&#39;\n  readonly statusCode = 400\n  \n  constructor(message: string, public readonly query?: CubeQuery) {\n    super(message)\n  }\n}\n\nclass DatabaseExecutionError extends DrizzleCubeError {\n  readonly code = &#39;DATABASE_EXECUTION_ERROR&#39;\n  readonly statusCode = 500\n  \n  constructor(message: string, public readonly sqlError?: Error) {\n    super(message)\n  }\n}\n\n// Type-safe error handling\nfunction handleDrizzleCubeError(error: DrizzleCubeError): ErrorResponse {\n  switch (error.code) {\n    case &#39;SECURITY_CONTEXT_ERROR&#39;:\n      return {\n        error: &#39;Authentication required&#39;,\n        code: error.code,\n        statusCode: error.statusCode\n      }\n      \n    case &#39;QUERY_VALIDATION_ERROR&#39;:\n      return {\n        error: error.message,\n        code: error.code,\n        statusCode: error.statusCode,\n        query: error.query // ✅ Type-safe access\n      }\n      \n    case &#39;DATABASE_EXECUTION_ERROR&#39;:\n      return {\n        error: &#39;Database error occurred&#39;,\n        code: error.code,\n        statusCode: error.statusCode\n        // Don&#39;t expose internal database errors\n      }\n      \n    default:\n      // ✅ TypeScript ensures exhaustive checking\n      const _exhaustive: never = error\n      throw new Error(`Unhandled error type: ${(_exhaustive as any).code}`)\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Typed error classes\nabstract class DrizzleCubeError extends Error {\n  abstract readonly code: string\n  abstract readonly statusCode: number\n}\n\nclass SecurityContextError extends DrizzleCubeError {\n  readonly code = &#39;SECURITY_CONTEXT_ERROR&#39;\n  readonly statusCode = 401\n  \n  constructor(message: string, public readonly context?: Partial&lt;SecurityContext&gt;) {\n    super(message)\n  }\n}\n\nclass QueryValidationError extends DrizzleCubeError {\n  readonly code = &#39;QUERY_VALIDATION_ERROR&#39;\n  readonly statusCode = 400\n  \n  constructor(message: string, public readonly query?: CubeQuery) {\n    super(message)\n  }\n}\n\nclass DatabaseExecutionError extends DrizzleCubeError {\n  readonly code = &#39;DATABASE_EXECUTION_ERROR&#39;\n  readonly statusCode = 500\n  \n  constructor(message: string, public readonly sqlError?: Error) {\n    super(message)\n  }\n}\n\n// Type-safe error handling\nfunction handleDrizzleCubeError(error: DrizzleCubeError): ErrorResponse {\n  switch (error.code) {\n    case &#39;SECURITY_CONTEXT_ERROR&#39;:\n      return {\n        error: &#39;Authentication required&#39;,\n        code: error.code,\n        statusCode: error.statusCode\n      }\n      \n    case &#39;QUERY_VALIDATION_ERROR&#39;:\n      return {\n        error: error.message,\n        code: error.code,\n        statusCode: error.statusCode,\n        query: error.query // ✅ Type-safe access\n      }\n      \n    case &#39;DATABASE_EXECUTION_ERROR&#39;:\n      return {\n        error: &#39;Database error occurred&#39;,\n        code: error.code,\n        statusCode: error.statusCode\n        // Don&#39;t expose internal database errors\n      }\n      \n    default:\n      // ✅ TypeScript ensures exhaustive checking\n      const _exhaustive: never = error\n      throw new Error(`Unhandled error type: ${(_exhaustive as any).code}`)\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"testing-typescript\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing TypeScript</h2><h3 id=\"type-safe-test-utilities\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Type-Safe Test Utilities</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Type-safe test data factory\nfunction createTestData&lt;T extends Record&lt;string, any&gt;&gt;(\n  schema: T,\n  overrides: Partial&lt;InferSelectModel&lt;T[keyof T]&gt;&gt; = {}\n): InferInsertModel&lt;T[keyof T]&gt; {\n  // Generate test data with proper types\n  return {\n    id: 1,\n    name: &#39;Test Employee&#39;,\n    email: &#39;test@example.com&#39;,\n    departmentId: 1,\n    salary: 50000,\n    active: true,\n    createdAt: new Date(),\n    organisationId: &#39;test-org&#39;,\n    ...overrides\n  } as InferInsertModel&lt;T[keyof T]&gt;\n}\n\n// Type-safe mock security context\nfunction createMockSecurityContext(\n  overrides: Partial&lt;SecurityContext&gt; = {}\n): SecurityContext {\n  return {\n    organisationId: &#39;test-org&#39;,\n    userId: &#39;test-user&#39;,\n    userRole: &#39;admin&#39;,\n    ...overrides\n  } as SecurityContext\n}\n\n// Type-safe test queries\nconst testQueries = {\n  basicCount: {\n    measures: [&#39;Employees.count&#39;],\n    dimensions: []\n  },\n  departmentBreakdown: {\n    measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;]\n  }\n} as const\n\n// Test with full type safety\ndescribe(&#39;TypeScript Integration&#39;, () =&gt; {\n  it(&#39;should handle queries with proper types&#39;, async () =&gt; {\n    const query = testQueries.departmentBreakdown\n    const context = createMockSecurityContext()\n    \n    const result = await semanticLayer.load(query, context)\n    const data = result.rawData()\n    \n    // ✅ TypeScript knows exact structure\n    expect(data[0][&#39;Employees.count&#39;]).toBeTypeOf(&#39;number&#39;)\n    expect(data[0][&#39;Employees.departmentName&#39;]).toBeTypeOf(&#39;string&#39;)\n    expect(data[0][&#39;Employees.avgSalary&#39;]).toBeTypeOf(&#39;number&#39;)\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Type-safe test data factory\nfunction createTestData&lt;T extends Record&lt;string, any&gt;&gt;(\n  schema: T,\n  overrides: Partial&lt;InferSelectModel&lt;T[keyof T]&gt;&gt; = {}\n): InferInsertModel&lt;T[keyof T]&gt; {\n  // Generate test data with proper types\n  return {\n    id: 1,\n    name: &#39;Test Employee&#39;,\n    email: &#39;test@example.com&#39;,\n    departmentId: 1,\n    salary: 50000,\n    active: true,\n    createdAt: new Date(),\n    organisationId: &#39;test-org&#39;,\n    ...overrides\n  } as InferInsertModel&lt;T[keyof T]&gt;\n}\n\n// Type-safe mock security context\nfunction createMockSecurityContext(\n  overrides: Partial&lt;SecurityContext&gt; = {}\n): SecurityContext {\n  return {\n    organisationId: &#39;test-org&#39;,\n    userId: &#39;test-user&#39;,\n    userRole: &#39;admin&#39;,\n    ...overrides\n  } as SecurityContext\n}\n\n// Type-safe test queries\nconst testQueries = {\n  basicCount: {\n    measures: [&#39;Employees.count&#39;],\n    dimensions: []\n  },\n  departmentBreakdown: {\n    measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;]\n  }\n} as const\n\n// Test with full type safety\ndescribe(&#39;TypeScript Integration&#39;, () =&gt; {\n  it(&#39;should handle queries with proper types&#39;, async () =&gt; {\n    const query = testQueries.departmentBreakdown\n    const context = createMockSecurityContext()\n    \n    const result = await semanticLayer.load(query, context)\n    const data = result.rawData()\n    \n    // ✅ TypeScript knows exact structure\n    expect(data[0][&#39;Employees.count&#39;]).toBeTypeOf(&#39;number&#39;)\n    expect(data[0][&#39;Employees.departmentName&#39;]).toBeTypeOf(&#39;string&#39;)\n    expect(data[0][&#39;Employees.avgSalary&#39;]).toBeTypeOf(&#39;number&#39;)\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><h3 id=\"1-schema-first-development\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">1. Schema-First Development</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Always start with your Drizzle schema and let types flow from there:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// ✅ Good: Schema drives types\nconst schema = { users, orders, products }\ntype Schema = typeof schema\n\nconst usersCube: Cube&lt;Schema&gt; = defineCube(&#39;Users&#39;, {\n  sql: (ctx) =&gt; ({ from: schema.users, where: /* ... */ })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// ✅ Good: Schema drives types\nconst schema = { users, orders, products }\ntype Schema = typeof schema\n\nconst usersCube: Cube&lt;Schema&gt; = defineCube(&#39;Users&#39;, {\n  sql: (ctx) =&gt; ({ from: schema.users, where: /* ... */ })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"2-strict-type-checking\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">2. Strict Type Checking</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Enable strict TypeScript settings:</p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">// tsconfig.json\n{\n  &quot;compilerOptions&quot;: {\n    &quot;strict&quot;: true,\n    &quot;noImplicitAny&quot;: true,\n    &quot;strictNullChecks&quot;: true,\n    &quot;strictFunctionTypes&quot;: true,\n    &quot;noImplicitReturns&quot;: true,\n    &quot;noImplicitThis&quot;: true\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// tsconfig.json\n{\n  &quot;compilerOptions&quot;: {\n    &quot;strict&quot;: true,\n    &quot;noImplicitAny&quot;: true,\n    &quot;strictNullChecks&quot;: true,\n    &quot;strictFunctionTypes&quot;: true,\n    &quot;noImplicitReturns&quot;: true,\n    &quot;noImplicitThis&quot;: true\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"3-generic-constraint-usage\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">3. Generic Constraint Usage</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Use proper generic constraints for type safety:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// ✅ Good: Constrained generics\nfunction createCube&lt;TSchema extends Record&lt;string, any&gt;&gt;(\n  name: string,\n  config: CubeConfig&lt;TSchema&gt;\n): Cube&lt;TSchema&gt; {\n  return defineCube(name, config)\n}\n\n// ❌ Avoid: Unconstrained any\nfunction createCube(name: string, config: any): any {\n  return defineCube(name, config)\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// ✅ Good: Constrained generics\nfunction createCube&lt;TSchema extends Record&lt;string, any&gt;&gt;(\n  name: string,\n  config: CubeConfig&lt;TSchema&gt;\n): Cube&lt;TSchema&gt; {\n  return defineCube(name, config)\n}\n\n// ❌ Avoid: Unconstrained any\nfunction createCube(name: string, config: any): any {\n  return defineCube(name, config)\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"4-type-guards\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">4. Type Guards</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Use type guards for runtime type safety:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function isValidQuery(query: unknown): query is CubeQuery {\n  return (\n    typeof query === &#39;object&#39; &amp;&amp;\n    query !== null &amp;&amp;\n    (&#39;measures&#39; in query || &#39;dimensions&#39; in query)\n  )\n}\n\nfunction isCubeError(error: unknown): error is DrizzleCubeError {\n  return error instanceof DrizzleCubeError\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function isValidQuery(query: unknown): query is CubeQuery {\n  return (\n    typeof query === &#39;object&#39; &amp;&amp;\n    query !== null &amp;&amp;\n    (&#39;measures&#39; in query || &#39;dimensions&#39; in query)\n  )\n}\n\nfunction isCubeError(error: unknown): error is DrizzleCubeError {\n  return error instanceof DrizzleCubeError\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Review <a href=\"#\" data-help-link=\"advanced/performance\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Performance</a> considerations for TypeScript</li><li class=\"leading-relaxed\">Explore <a href=\"#\" data-help-link=\"advanced/troubleshooting\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Troubleshooting</a> type-related issues</li><li class=\"leading-relaxed\">Check out TypeScript examples in the repository</li><li class=\"leading-relaxed\">Set up proper IDE integration for the best development experience</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Enhanced type inference for complex queries</li><li class=\"leading-relaxed\">Automatic type generation from cube definitions</li><li class=\"leading-relaxed\">IDE plugins for Drizzle Cube development</li><li class=\"leading-relaxed\">Type-safe schema migration tools</li><li class=\"leading-relaxed\">Runtime type validation utilities</li><li class=\"leading-relaxed\">Advanced generic patterns for cube composition</li></ul>","path":"advanced/typescript.md"},
  'client': {"slug":"client","title":"React Client","content":"<h1 id=\"react-client\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">React Client</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">The Drizzle Cube React client provides pre-built components and hooks for creating analytics dashboards and data visualizations with minimal code.</p><h2 id=\"installation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Installation</h2><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install drizzle-cube react react-dom recharts react-grid-layout</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install drizzle-cube react react-dom recharts react-grid-layout\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"dependencies-requirements\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dependencies &amp; Requirements</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Required Dependencies:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">react</code> (^18.2.0) - React framework</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">react-dom</code> (^18.2.0) - React DOM rendering</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">recharts</code> (^2.8.0) - Chart visualization library</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">react-grid-layout</code> (^1.4.0) - Dashboard grid layout</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Optional Dependencies:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">@heroicons/react</code> (^2.2.0) - Icons used in components</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">@tanstack/react-query</code> (^5.0.0) - Data fetching and caching</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">react-router-dom</code> (^6.8.0) - Routing for multi-page dashboards</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Tailwind CSS v3 Required:</strong>\nComponents are styled with Tailwind CSS v3 classes. You must have Tailwind CSS v3 configured in your project:</p><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install -D tailwindcss postcss</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install -D tailwindcss postcss\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">Configure your <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">tailwind.config.js</code> to include the drizzle-cube components:</p><div class=\"relative group\">\n    <pre class=\"language-javascript rounded-lg overflow-x-auto mb-4\"><code class=\"language-javascript\">/** @type {import(&#39;tailwindcss&#39;).Config} */\nexport default {\n  content: [\n    &#39;./src/**/*.{js,ts,jsx,tsx}&#39;,\n    &#39;./node_modules/drizzle-cube/dist/**/*.js&#39;, // Include drizzle-cube components\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"/** @type {import(&#39;tailwindcss&#39;).Config} */\nexport default {\n  content: [\n    &#39;./src/**/*.{js,ts,jsx,tsx}&#39;,\n    &#39;./node_modules/drizzle-cube/dist/**/*.js&#39;, // Include drizzle-cube components\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"usage-options\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Usage Options</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Option 1: Import Components (Recommended)</strong></p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { AnalyticsDashboard, CubeProvider } from &#39;drizzle-cube/client&#39;;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { AnalyticsDashboard, CubeProvider } from &#39;drizzle-cube/client&#39;;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Option 2: Copy-Paste for Customization</strong>\nFor more control over styling and behavior, you can copy component code from the complete example at <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">/examples/hono/client</code> in the repository or view the live version at <a href=\"https://try.drizzle-cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">try.drizzle-cube.dev</a>.</p><h2 id=\"quick-start\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Quick Start</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import React from &#39;react&#39;;\nimport { CubeProvider, AnalyticsDashboard } from &#39;drizzle-cube/client&#39;;\n\nfunction App() {\n  const cubeApi = {\n    url: &#39;/api/cube&#39;,\n    headers: {\n      &#39;Authorization&#39;: &#39;your-token&#39;, // Token is used as-is, no &#39;Bearer&#39; prefix needed\n      &#39;X-Organisation-ID&#39;: &#39;1&#39;\n    }\n  };\n\n  return (\n    &lt;CubeProvider cubeApi={cubeApi}&gt;\n      &lt;AnalyticsDashboard\n        initialLayout={[\n          {\n            id: &#39;revenue-chart&#39;,\n            title: &#39;Monthly Revenue&#39;,\n            chartType: &#39;line&#39;,\n            query: {\n              measures: [&#39;Sales.totalRevenue&#39;],\n              timeDimensions: [{\n                dimension: &#39;Sales.orderDate&#39;,\n                granularity: &#39;month&#39;\n              }]\n            }\n          }\n        ]}\n      /&gt;\n    &lt;/CubeProvider&gt;\n  );\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import React from &#39;react&#39;;\nimport { CubeProvider, AnalyticsDashboard } from &#39;drizzle-cube/client&#39;;\n\nfunction App() {\n  const cubeApi = {\n    url: &#39;/api/cube&#39;,\n    headers: {\n      &#39;Authorization&#39;: &#39;your-token&#39;, // Token is used as-is, no &#39;Bearer&#39; prefix needed\n      &#39;X-Organisation-ID&#39;: &#39;1&#39;\n    }\n  };\n\n  return (\n    &lt;CubeProvider cubeApi={cubeApi}&gt;\n      &lt;AnalyticsDashboard\n        initialLayout={[\n          {\n            id: &#39;revenue-chart&#39;,\n            title: &#39;Monthly Revenue&#39;,\n            chartType: &#39;line&#39;,\n            query: {\n              measures: [&#39;Sales.totalRevenue&#39;],\n              timeDimensions: [{\n                dimension: &#39;Sales.orderDate&#39;,\n                granularity: &#39;month&#39;\n              }]\n            }\n          }\n        ]}\n      /&gt;\n    &lt;/CubeProvider&gt;\n  );\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"core-components\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Core Components</h2><h3 id=\"cubeprovider\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">CubeProvider</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The foundation component that provides cube API context:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { CubeProvider } from &#39;drizzle-cube/client&#39;;\n\nfunction App() {\n  const cubeApi = {\n    url: &#39;/api/cube&#39;,\n    headers: {\n      &#39;Authorization&#39;: &#39;your-jwt-token&#39;, // Token is used as-is, no &#39;Bearer&#39; prefix needed\n      &#39;X-Organisation-ID&#39;: &#39;123&#39;\n    }\n  };\n\n  return (\n    &lt;CubeProvider cubeApi={cubeApi}&gt;\n      {/* Your dashboard components */}\n    &lt;/CubeProvider&gt;\n  );\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { CubeProvider } from &#39;drizzle-cube/client&#39;;\n\nfunction App() {\n  const cubeApi = {\n    url: &#39;/api/cube&#39;,\n    headers: {\n      &#39;Authorization&#39;: &#39;your-jwt-token&#39;, // Token is used as-is, no &#39;Bearer&#39; prefix needed\n      &#39;X-Organisation-ID&#39;: &#39;123&#39;\n    }\n  };\n\n  return (\n    &lt;CubeProvider cubeApi={cubeApi}&gt;\n      {/* Your dashboard components */}\n    &lt;/CubeProvider&gt;\n  );\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"analyticsdashboard\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">AnalyticsDashboard</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">A complete dashboard with drag-and-drop layout:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { AnalyticsDashboard } from &#39;drizzle-cube/client&#39;;\n\n&lt;AnalyticsDashboard\n  initialLayout={[\n    {\n      id: &#39;sales-overview&#39;,\n      title: &#39;Sales Overview&#39;, \n      chartType: &#39;bar&#39;,\n      query: {\n        measures: [&#39;Sales.totalRevenue&#39;, &#39;Sales.orderCount&#39;],\n        dimensions: [&#39;Sales.productCategory&#39;]\n      },\n      layout: { x: 0, y: 0, w: 6, h: 4 }\n    },\n    {\n      id: &#39;sales-trend&#39;,\n      title: &#39;Sales Trend&#39;,\n      chartType: &#39;line&#39;, \n      query: {\n        measures: [&#39;Sales.totalRevenue&#39;],\n        timeDimensions: [{\n          dimension: &#39;Sales.orderDate&#39;,\n          granularity: &#39;day&#39;\n        }]\n      },\n      layout: { x: 6, y: 0, w: 6, h: 4 }\n    }\n  ]}\n  \n  onLayoutChange={(layout) =&gt; {\n    // Save layout to user preferences\n    localStorage.setItem(&#39;dashboard-layout&#39;, JSON.stringify(layout));\n  }}\n  \n  showEditControls={true}\n  allowResize={true}\n  allowDrag={true}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { AnalyticsDashboard } from &#39;drizzle-cube/client&#39;;\n\n&lt;AnalyticsDashboard\n  initialLayout={[\n    {\n      id: &#39;sales-overview&#39;,\n      title: &#39;Sales Overview&#39;, \n      chartType: &#39;bar&#39;,\n      query: {\n        measures: [&#39;Sales.totalRevenue&#39;, &#39;Sales.orderCount&#39;],\n        dimensions: [&#39;Sales.productCategory&#39;]\n      },\n      layout: { x: 0, y: 0, w: 6, h: 4 }\n    },\n    {\n      id: &#39;sales-trend&#39;,\n      title: &#39;Sales Trend&#39;,\n      chartType: &#39;line&#39;, \n      query: {\n        measures: [&#39;Sales.totalRevenue&#39;],\n        timeDimensions: [{\n          dimension: &#39;Sales.orderDate&#39;,\n          granularity: &#39;day&#39;\n        }]\n      },\n      layout: { x: 6, y: 0, w: 6, h: 4 }\n    }\n  ]}\n  \n  onLayoutChange={(layout) =&gt; {\n    // Save layout to user preferences\n    localStorage.setItem(&#39;dashboard-layout&#39;, JSON.stringify(layout));\n  }}\n  \n  showEditControls={true}\n  allowResize={true}\n  allowDrag={true}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"analyticspage\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">AnalyticsPage</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">A complete page with sidebar filters and charts:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { AnalyticsPage } from &#39;drizzle-cube/client&#39;;\n\n&lt;AnalyticsPage\n  title=&quot;Sales Analytics&quot;\n  description=&quot;Comprehensive sales performance metrics&quot;\n  \n  filters={[\n    {\n      member: &#39;Sales.productCategory&#39;,\n      title: &#39;Product Category&#39;,\n      type: &#39;select&#39;\n    },\n    {\n      member: &#39;Sales.orderDate&#39;,\n      title: &#39;Date Range&#39;, \n      type: &#39;dateRange&#39;\n    }\n  ]}\n  \n  charts={[\n    {\n      id: &#39;revenue-by-category&#39;,\n      title: &#39;Revenue by Category&#39;,\n      chartType: &#39;pie&#39;,\n      query: {\n        measures: [&#39;Sales.totalRevenue&#39;],\n        dimensions: [&#39;Sales.productCategory&#39;]\n      }\n    }\n  ]}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { AnalyticsPage } from &#39;drizzle-cube/client&#39;;\n\n&lt;AnalyticsPage\n  title=&quot;Sales Analytics&quot;\n  description=&quot;Comprehensive sales performance metrics&quot;\n  \n  filters={[\n    {\n      member: &#39;Sales.productCategory&#39;,\n      title: &#39;Product Category&#39;,\n      type: &#39;select&#39;\n    },\n    {\n      member: &#39;Sales.orderDate&#39;,\n      title: &#39;Date Range&#39;, \n      type: &#39;dateRange&#39;\n    }\n  ]}\n  \n  charts={[\n    {\n      id: &#39;revenue-by-category&#39;,\n      title: &#39;Revenue by Category&#39;,\n      chartType: &#39;pie&#39;,\n      query: {\n        measures: [&#39;Sales.totalRevenue&#39;],\n        dimensions: [&#39;Sales.productCategory&#39;]\n      }\n    }\n  ]}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"analyticsportlet\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">AnalyticsPortlet</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Individual chart components:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { AnalyticsPortlet } from &#39;drizzle-cube/client&#39;;\n\n&lt;AnalyticsPortlet\n  title=&quot;Monthly Sales Trend&quot;\n  chartType=&quot;line&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;],\n    timeDimensions: [{\n      dimension: &#39;Sales.orderDate&#39;,\n      granularity: &#39;month&#39;\n    }]\n  }}\n  \n  showControls={true}\n  allowExport={true}\n  refreshInterval={30000} // Refresh every 30 seconds\n  \n  onDataLoad={(data) =&gt; {\n    console.log(&#39;Chart data loaded:&#39;, data);\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { AnalyticsPortlet } from &#39;drizzle-cube/client&#39;;\n\n&lt;AnalyticsPortlet\n  title=&quot;Monthly Sales Trend&quot;\n  chartType=&quot;line&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;],\n    timeDimensions: [{\n      dimension: &#39;Sales.orderDate&#39;,\n      granularity: &#39;month&#39;\n    }]\n  }}\n  \n  showControls={true}\n  allowExport={true}\n  refreshInterval={30000} // Refresh every 30 seconds\n  \n  onDataLoad={(data) =&gt; {\n    console.log(&#39;Chart data loaded:&#39;, data);\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"querybuilder\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">QueryBuilder</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Interactive query builder with API configuration:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { QueryBuilder } from &#39;drizzle-cube/client&#39;;\n\n&lt;QueryBuilder\n  initialQuery={{\n    measures: [&#39;Sales.totalRevenue&#39;],\n    dimensions: [&#39;Sales.productCategory&#39;]\n  }}\n  \n  // API configuration (optional - uses context by default)\n  apiConfig={{\n    apiUrl: &#39;/api/cube&#39;,\n    authToken: &#39;your-token&#39;\n  }}\n  \n  // Show API setup panel for configuration\n  showSetupPanel={true}\n  \n  onQueryChange={(query) =&gt; {\n    console.log(&#39;Query updated:&#39;, query);\n  }}\n  \n  onExecute={(query, data) =&gt; {\n    console.log(&#39;Query executed:&#39;, { query, data });\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { QueryBuilder } from &#39;drizzle-cube/client&#39;;\n\n&lt;QueryBuilder\n  initialQuery={{\n    measures: [&#39;Sales.totalRevenue&#39;],\n    dimensions: [&#39;Sales.productCategory&#39;]\n  }}\n  \n  // API configuration (optional - uses context by default)\n  apiConfig={{\n    apiUrl: &#39;/api/cube&#39;,\n    authToken: &#39;your-token&#39;\n  }}\n  \n  // Show API setup panel for configuration\n  showSetupPanel={true}\n  \n  onQueryChange={(query) =&gt; {\n    console.log(&#39;Query updated:&#39;, query);\n  }}\n  \n  onExecute={(query, data) =&gt; {\n    console.log(&#39;Query executed:&#39;, { query, data });\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">QueryBuilder Features:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Interactive Cube Explorer</strong>: Browse available cubes, measures, and dimensions</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Drag &amp; Drop Query Building</strong>: Visual query construction interface  </li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">API Configuration Panel</strong>: Configure endpoint URL and authentication</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Real-time Query Execution</strong>: Execute queries and view results instantly</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">SQL Preview</strong>: View generated SQL for debugging</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dry Run Mode</strong>: Validate queries without execution</li></ul><h2 id=\"chart-types\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Chart Types</h2><h3 id=\"line-charts\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Line Charts</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Perfect for time series data:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">&lt;AnalyticsPortlet\n  chartType=&quot;line&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;],\n    timeDimensions: [{ \n      dimension: &#39;Sales.orderDate&#39;, \n      granularity: &#39;day&#39; \n    }]\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"&lt;AnalyticsPortlet\n  chartType=&quot;line&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;],\n    timeDimensions: [{ \n      dimension: &#39;Sales.orderDate&#39;, \n      granularity: &#39;day&#39; \n    }]\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"bar-charts\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Bar Charts</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Great for comparing categories:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">&lt;AnalyticsPortlet\n  chartType=&quot;bar&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;, &#39;Sales.orderCount&#39;],\n    dimensions: [&#39;Sales.productCategory&#39;]\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"&lt;AnalyticsPortlet\n  chartType=&quot;bar&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;, &#39;Sales.orderCount&#39;],\n    dimensions: [&#39;Sales.productCategory&#39;]\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"pie-charts\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Pie Charts</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Show proportions:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">&lt;AnalyticsPortlet\n  chartType=&quot;pie&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;],\n    dimensions: [&#39;Sales.region&#39;]\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"&lt;AnalyticsPortlet\n  chartType=&quot;pie&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;],\n    dimensions: [&#39;Sales.region&#39;]\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"data-tables\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Data Tables</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Detailed data views:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">&lt;AnalyticsPortlet\n  chartType=&quot;table&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;, &#39;Sales.orderCount&#39;],\n    dimensions: [&#39;Sales.customerName&#39;, &#39;Sales.productCategory&#39;]\n  }}\n  \n  pageSize={20}\n  sortable={true}\n  searchable={true}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"&lt;AnalyticsPortlet\n  chartType=&quot;table&quot;\n  query={{\n    measures: [&#39;Sales.totalRevenue&#39;, &#39;Sales.orderCount&#39;],\n    dimensions: [&#39;Sales.customerName&#39;, &#39;Sales.productCategory&#39;]\n  }}\n  \n  pageSize={20}\n  sortable={true}\n  searchable={true}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"hooks\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Hooks</h2><h3 id=\"usecubequery\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">useCubeQuery</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Execute queries and get real-time data:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { useCubeQuery } from &#39;drizzle-cube/client&#39;;\n\nfunction SalesMetric() {\n  const { data, isLoading, error, resultSet } = useCubeQuery({\n    measures: [&#39;Sales.totalRevenue&#39;],\n    dimensions: [&#39;Sales.productCategory&#39;],\n    filters: [{\n      member: &#39;Sales.orderDate&#39;,\n      operator: &#39;inDateRange&#39;,\n      values: [&#39;2024-01-01&#39;, &#39;2024-12-31&#39;]\n    }]\n  });\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;;\n  if (error) return &lt;div&gt;Error: {error.message}&lt;/div&gt;;\n\n  // The client automatically handles both old and new response formats\n  // data contains the raw data array from results[0].data or legacy data field\n  // resultSet provides access to the full Cube.js response structure\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Total Revenue: ${data[0]?.[&#39;Sales.totalRevenue&#39;] || 0}&lt;/h2&gt;\n      {/* Access annotation metadata */}\n      &lt;p&gt;Query executed at: {resultSet?.annotation?.lastRefreshTime}&lt;/p&gt;\n      {/* Render your data */}\n    &lt;/div&gt;\n  );\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { useCubeQuery } from &#39;drizzle-cube/client&#39;;\n\nfunction SalesMetric() {\n  const { data, isLoading, error, resultSet } = useCubeQuery({\n    measures: [&#39;Sales.totalRevenue&#39;],\n    dimensions: [&#39;Sales.productCategory&#39;],\n    filters: [{\n      member: &#39;Sales.orderDate&#39;,\n      operator: &#39;inDateRange&#39;,\n      values: [&#39;2024-01-01&#39;, &#39;2024-12-31&#39;]\n    }]\n  });\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;;\n  if (error) return &lt;div&gt;Error: {error.message}&lt;/div&gt;;\n\n  // The client automatically handles both old and new response formats\n  // data contains the raw data array from results[0].data or legacy data field\n  // resultSet provides access to the full Cube.js response structure\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Total Revenue: ${data[0]?.[&#39;Sales.totalRevenue&#39;] || 0}&lt;/h2&gt;\n      {/* Access annotation metadata */}\n      &lt;p&gt;Query executed at: {resultSet?.annotation?.lastRefreshTime}&lt;/p&gt;\n      {/* Render your data */}\n    &lt;/div&gt;\n  );\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"usecubemeta\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">useCubeMeta</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Access cube metadata:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { useCubeMeta } from &#39;drizzle-cube/client&#39;;\n\nfunction MetricSelector() {\n  const { cubes, isLoading } = useCubeMeta();\n\n  if (isLoading) return &lt;div&gt;Loading cubes...&lt;/div&gt;;\n\n  return (\n    &lt;select&gt;\n      {cubes.map(cube =&gt; \n        cube.measures.map(measure =&gt; (\n          &lt;option key={`${cube.name}.${measure.name}`} \n                  value={`${cube.name}.${measure.name}`}&gt;\n            {measure.title || measure.name}\n          &lt;/option&gt;\n        ))\n      )}\n    &lt;/select&gt;\n  );\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { useCubeMeta } from &#39;drizzle-cube/client&#39;;\n\nfunction MetricSelector() {\n  const { cubes, isLoading } = useCubeMeta();\n\n  if (isLoading) return &lt;div&gt;Loading cubes...&lt;/div&gt;;\n\n  return (\n    &lt;select&gt;\n      {cubes.map(cube =&gt; \n        cube.measures.map(measure =&gt; (\n          &lt;option key={`${cube.name}.${measure.name}`} \n                  value={`${cube.name}.${measure.name}`}&gt;\n            {measure.title || measure.name}\n          &lt;/option&gt;\n        ))\n      )}\n    &lt;/select&gt;\n  );\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"customization\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Customization</h2><h3 id=\"custom-chart-components\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Chart Components</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create your own visualizations:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { useCubeQuery } from &#39;drizzle-cube/client&#39;;\nimport { ResponsiveContainer, ComposedChart, Bar, Line, XAxis, YAxis } from &#39;recharts&#39;;\n\nfunction CustomChart({ query }) {\n  const { data, isLoading } = useCubeQuery(query);\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;;\n\n  return (\n    &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;\n      &lt;ComposedChart data={data}&gt;\n        &lt;XAxis dataKey=&quot;Sales.orderDate&quot; /&gt;\n        &lt;YAxis /&gt;\n        &lt;Bar dataKey=&quot;Sales.orderCount&quot; fill=&quot;#8884d8&quot; /&gt;\n        &lt;Line dataKey=&quot;Sales.totalRevenue&quot; stroke=&quot;#82ca9d&quot; /&gt;\n      &lt;/ComposedChart&gt;\n    &lt;/ResponsiveContainer&gt;\n  );\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { useCubeQuery } from &#39;drizzle-cube/client&#39;;\nimport { ResponsiveContainer, ComposedChart, Bar, Line, XAxis, YAxis } from &#39;recharts&#39;;\n\nfunction CustomChart({ query }) {\n  const { data, isLoading } = useCubeQuery(query);\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;;\n\n  return (\n    &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;\n      &lt;ComposedChart data={data}&gt;\n        &lt;XAxis dataKey=&quot;Sales.orderDate&quot; /&gt;\n        &lt;YAxis /&gt;\n        &lt;Bar dataKey=&quot;Sales.orderCount&quot; fill=&quot;#8884d8&quot; /&gt;\n        &lt;Line dataKey=&quot;Sales.totalRevenue&quot; stroke=&quot;#82ca9d&quot; /&gt;\n      &lt;/ComposedChart&gt;\n    &lt;/ResponsiveContainer&gt;\n  );\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"theme-customization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Theme Customization</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Customize the appearance:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { CubeProvider } from &#39;drizzle-cube/client&#39;;\n\nconst theme = {\n  colors: {\n    primary: &#39;#3b82f6&#39;,\n    secondary: &#39;#64748b&#39;, \n    success: &#39;#10b981&#39;,\n    warning: &#39;#f59e0b&#39;,\n    error: &#39;#ef4444&#39;\n  },\n  fonts: {\n    body: &#39;Inter, sans-serif&#39;,\n    mono: &#39;Fira Code, monospace&#39;\n  }\n};\n\n&lt;CubeProvider cubeApi={cubeApi} theme={theme}&gt;\n  {/* Your components */}\n&lt;/CubeProvider&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { CubeProvider } from &#39;drizzle-cube/client&#39;;\n\nconst theme = {\n  colors: {\n    primary: &#39;#3b82f6&#39;,\n    secondary: &#39;#64748b&#39;, \n    success: &#39;#10b981&#39;,\n    warning: &#39;#f59e0b&#39;,\n    error: &#39;#ef4444&#39;\n  },\n  fonts: {\n    body: &#39;Inter, sans-serif&#39;,\n    mono: &#39;Fira Code, monospace&#39;\n  }\n};\n\n&lt;CubeProvider cubeApi={cubeApi} theme={theme}&gt;\n  {/* Your components */}\n&lt;/CubeProvider&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"real-time-updates\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Real-time Updates</h2><h3 id=\"websocket-support\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">WebSocket Support</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Enable real-time data updates:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const cubeApi = {\n  url: &#39;/api/cube&#39;,\n  websocketUrl: &#39;ws://localhost:3000/ws&#39;,\n  headers: {\n    &#39;Authorization&#39;: &#39;token&#39; // Token is used as-is, no &#39;Bearer&#39; prefix needed\n  }\n};\n\n&lt;CubeProvider cubeApi={cubeApi}&gt;\n  &lt;AnalyticsPortlet\n    query={query}\n    realtime={true}\n    refreshInterval={5000}\n  /&gt;\n&lt;/CubeProvider&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const cubeApi = {\n  url: &#39;/api/cube&#39;,\n  websocketUrl: &#39;ws://localhost:3000/ws&#39;,\n  headers: {\n    &#39;Authorization&#39;: &#39;token&#39; // Token is used as-is, no &#39;Bearer&#39; prefix needed\n  }\n};\n\n&lt;CubeProvider cubeApi={cubeApi}&gt;\n  &lt;AnalyticsPortlet\n    query={query}\n    realtime={true}\n    refreshInterval={5000}\n  /&gt;\n&lt;/CubeProvider&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"manual-refresh\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Manual Refresh</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Trigger updates programmatically:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { useCubeQuery } from &#39;drizzle-cube/client&#39;;\n\nfunction RefreshableChart() {\n  const { data, isLoading, refetch } = useCubeQuery(query);\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; refetch()}&gt;\n        Refresh Data\n      &lt;/button&gt;\n      {/* Chart content */}\n    &lt;/div&gt;\n  );\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { useCubeQuery } from &#39;drizzle-cube/client&#39;;\n\nfunction RefreshableChart() {\n  const { data, isLoading, refetch } = useCubeQuery(query);\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; refetch()}&gt;\n        Refresh Data\n      &lt;/button&gt;\n      {/* Chart content */}\n    &lt;/div&gt;\n  );\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"error-handling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Handling</h2><h3 id=\"error-boundaries\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Error Boundaries</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Handle errors gracefully:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { ChartErrorBoundary } from &#39;drizzle-cube/client&#39;;\n\n&lt;ChartErrorBoundary\n  fallback={({ error, resetError }) =&gt; (\n    &lt;div className=&quot;error-state&quot;&gt;\n      &lt;h3&gt;Something went wrong&lt;/h3&gt;\n      &lt;p&gt;{error.message}&lt;/p&gt;\n      &lt;button onClick={resetError}&gt;Try again&lt;/button&gt;\n    &lt;/div&gt;\n  )}\n&gt;\n  &lt;AnalyticsPortlet query={query} /&gt;\n&lt;/ChartErrorBoundary&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { ChartErrorBoundary } from &#39;drizzle-cube/client&#39;;\n\n&lt;ChartErrorBoundary\n  fallback={({ error, resetError }) =&gt; (\n    &lt;div className=&quot;error-state&quot;&gt;\n      &lt;h3&gt;Something went wrong&lt;/h3&gt;\n      &lt;p&gt;{error.message}&lt;/p&gt;\n      &lt;button onClick={resetError}&gt;Try again&lt;/button&gt;\n    &lt;/div&gt;\n  )}\n&gt;\n  &lt;AnalyticsPortlet query={query} /&gt;\n&lt;/ChartErrorBoundary&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"query-validation\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Validation</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Validate queries before execution:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { validateQuery } from &#39;drizzle-cube/client&#39;;\n\nfunction QueryBuilder({ query, onChange }) {\n  const validation = validateQuery(query);\n  \n  if (!validation.isValid) {\n    return (\n      &lt;div className=&quot;validation-errors&quot;&gt;\n        {validation.errors.map(error =&gt; (\n          &lt;div key={error.field}&gt;{error.message}&lt;/div&gt;\n        ))}\n      &lt;/div&gt;\n    );\n  }\n\n  return &lt;AnalyticsPortlet query={query} /&gt;;\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { validateQuery } from &#39;drizzle-cube/client&#39;;\n\nfunction QueryBuilder({ query, onChange }) {\n  const validation = validateQuery(query);\n  \n  if (!validation.isValid) {\n    return (\n      &lt;div className=&quot;validation-errors&quot;&gt;\n        {validation.errors.map(error =&gt; (\n          &lt;div key={error.field}&gt;{error.message}&lt;/div&gt;\n        ))}\n      &lt;/div&gt;\n    );\n  }\n\n  return &lt;AnalyticsPortlet query={query} /&gt;;\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance-tips\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Tips</h2><h3 id=\"query-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Optimization</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Use appropriate granularities for time dimensions</li><li class=\"leading-relaxed\">Limit result sets with filters</li><li class=\"leading-relaxed\">Cache frequently used queries</li></ul><h3 id=\"component-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Component Optimization</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Memoize expensive calculations</li><li class=\"leading-relaxed\">Use React.memo for pure components</li><li class=\"leading-relaxed\">Implement virtualization for large datasets</li></ul><h3 id=\"bundle-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Bundle Optimization</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Tree shake unused chart types</li><li class=\"leading-relaxed\">Code split dashboard components</li><li class=\"leading-relaxed\">Lazy load visualization libraries</li></ul><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/charts\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Charts</strong></a> - Detailed chart documentation</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/dashboards\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Dashboards</strong></a> - Dashboard customization  </li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/hooks\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Hooks</strong></a> - Advanced hook usage</li></ul>","path":"client/index.md"},
  'client/charts': {"slug":"client/charts","title":"Charts","content":"<h1 id=\"charts\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Charts</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube provides a comprehensive set of chart components built on Recharts with Tailwind CSS styling. These components are designed to work seamlessly with Cube.js-compatible data and provide interactive, responsive visualizations for your analytics dashboards.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The chart components are React-based visualization tools that automatically handle data transformation, formatting, and responsive design. They support various chart types, interactive features like legends and tooltips, and flexible configuration options.</p><h2 id=\"available-chart-types\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Available Chart Types</h2><h3 id=\"bar-chart\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Bar Chart</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The most versatile chart for categorical data comparison and time series visualization.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { RechartsBarChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsBarChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Employees.createdAt&#39;],\n    yAxis: [&#39;Employees.count&#39;],\n    series: [&#39;Employees.departmentName&#39;]  // Creates separate series per department\n  }}\n  displayConfig={{\n    showLegend: true,\n    stackedBarChart: false,\n    showGrid: true,\n    showTooltip: true\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { RechartsBarChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsBarChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Employees.createdAt&#39;],\n    yAxis: [&#39;Employees.count&#39;],\n    series: [&#39;Employees.departmentName&#39;]  // Creates separate series per department\n  }}\n  displayConfig={{\n    showLegend: true,\n    stackedBarChart: false,\n    showGrid: true,\n    showTooltip: true\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Key Features:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Time dimension support with automatic formatting</li><li class=\"leading-relaxed\">Multiple series from dimension fields</li><li class=\"leading-relaxed\">Stacking support for grouped data</li><li class=\"leading-relaxed\">Interactive legend with hover effects</li><li class=\"leading-relaxed\">Automatic positive/negative value coloring</li><li class=\"leading-relaxed\">Responsive design with proper margins</li></ul><h3 id=\"line-chart\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Line Chart</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Perfect for time series data and trend analysis.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { RechartsLineChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsLineChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Productivity.date&#39;],\n    yAxis: [&#39;Productivity.avgLinesOfCode&#39;, &#39;Productivity.avgHappinessIndex&#39;],\n    series: [&#39;Productivity.employeeName&#39;]\n  }}\n  displayConfig={{\n    showLegend: true,\n    showGrid: true,\n    smoothLines: true\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { RechartsLineChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsLineChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Productivity.date&#39;],\n    yAxis: [&#39;Productivity.avgLinesOfCode&#39;, &#39;Productivity.avgHappinessIndex&#39;],\n    series: [&#39;Productivity.employeeName&#39;]\n  }}\n  displayConfig={{\n    showLegend: true,\n    showGrid: true,\n    smoothLines: true\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"area-chart\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Area Chart</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Great for showing cumulative data and filled regions.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { RechartsAreaChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsAreaChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Orders.createdAt&#39;],\n    yAxis: [&#39;Orders.totalRevenue&#39;],\n    series: [&#39;Orders.region&#39;]\n  }}\n  displayConfig={{\n    showLegend: true,\n    stackedArea: true,\n    fillOpacity: 0.6\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { RechartsAreaChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsAreaChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Orders.createdAt&#39;],\n    yAxis: [&#39;Orders.totalRevenue&#39;],\n    series: [&#39;Orders.region&#39;]\n  }}\n  displayConfig={{\n    showLegend: true,\n    stackedArea: true,\n    fillOpacity: 0.6\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"pie-chart\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Pie Chart</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Ideal for showing proportional data and composition.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { RechartsPieChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsPieChart\n  resultSet={resultSet}\n  chartConfig={{\n    dimension: &#39;Employees.departmentName&#39;,\n    measure: &#39;Employees.count&#39;\n  }}\n  displayConfig={{\n    showLegend: true,\n    showLabels: true,\n    innerRadius: 0  // Use &gt; 0 for donut chart\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { RechartsPieChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsPieChart\n  resultSet={resultSet}\n  chartConfig={{\n    dimension: &#39;Employees.departmentName&#39;,\n    measure: &#39;Employees.count&#39;\n  }}\n  displayConfig={{\n    showLegend: true,\n    showLabels: true,\n    innerRadius: 0  // Use &gt; 0 for donut chart\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"scatter-chart\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Scatter Chart</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Perfect for correlation analysis and plotting relationships.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { RechartsScatterChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsScatterChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Employees.salary&#39;],\n    yAxis: [&#39;Productivity.avgLinesOfCode&#39;],\n    series: [&#39;Employees.departmentName&#39;]\n  }}\n  displayConfig={{\n    showLegend: true,\n    showGrid: true,\n    pointSize: 6\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { RechartsScatterChart } from &#39;drizzle-cube/client&#39;\n\n&lt;RechartsScatterChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Employees.salary&#39;],\n    yAxis: [&#39;Productivity.avgLinesOfCode&#39;],\n    series: [&#39;Employees.departmentName&#39;]\n  }}\n  displayConfig={{\n    showLegend: true,\n    showGrid: true,\n    pointSize: 6\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"additional-chart-types\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Additional Chart Types</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Radar Chart - for multi-dimensional comparisons\nimport { RechartsRadarChart } from &#39;drizzle-cube/client&#39;\n\n// Radial Bar Chart - for circular bar visualization  \nimport { RechartsRadialBarChart } from &#39;drizzle-cube/client&#39;\n\n// Tree Map Chart - for hierarchical data\nimport { RechartsTreeMapChart } from &#39;drizzle-cube/client&#39;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Radar Chart - for multi-dimensional comparisons\nimport { RechartsRadarChart } from &#39;drizzle-cube/client&#39;\n\n// Radial Bar Chart - for circular bar visualization  \nimport { RechartsRadialBarChart } from &#39;drizzle-cube/client&#39;\n\n// Tree Map Chart - for hierarchical data\nimport { RechartsTreeMapChart } from &#39;drizzle-cube/client&#39;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"data-table\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Data Table</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">While not a chart, the DataTable component provides tabular data display:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { DataTable } from &#39;drizzle-cube/client&#39;\n\n&lt;DataTable\n  resultSet={resultSet}\n  config={{\n    showPagination: true,\n    pageSize: 20,\n    sortable: true\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { DataTable } from &#39;drizzle-cube/client&#39;\n\n&lt;DataTable\n  resultSet={resultSet}\n  config={{\n    showPagination: true,\n    pageSize: 20,\n    sortable: true\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"chart-configuration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Chart Configuration</h2><h3 id=\"chart-config-structure\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Chart Config Structure</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface ChartConfig {\n  // Axis configuration\n  xAxis?: string[]           // X-axis dimensions/measures\n  yAxis?: string[]           // Y-axis measures\n  series?: string[]          // Series-creating dimensions\n  \n  // Legacy format support\n  x?: string                 // Single X-axis field\n  y?: string[]              // Y-axis measures\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface ChartConfig {\n  // Axis configuration\n  xAxis?: string[]           // X-axis dimensions/measures\n  yAxis?: string[]           // Y-axis measures\n  series?: string[]          // Series-creating dimensions\n  \n  // Legacy format support\n  x?: string                 // Single X-axis field\n  y?: string[]              // Y-axis measures\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"display-config-options\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Display Config Options</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface DisplayConfig {\n  // Legend\n  showLegend?: boolean       // Show/hide legend\n  legendPosition?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39;\n  \n  // Grid and axes\n  showGrid?: boolean         // Show grid lines\n  showXAxis?: boolean        // Show X-axis\n  showYAxis?: boolean        // Show Y-axis\n  \n  // Tooltips and interactions\n  showTooltip?: boolean      // Show hover tooltips\n  \n  // Chart-specific options\n  stackedBarChart?: boolean  // Stack bars (Bar Chart)\n  stackedArea?: boolean      // Stack areas (Area Chart)\n  smoothLines?: boolean      // Smooth line curves (Line Chart)\n  fillOpacity?: number       // Fill opacity (0-1)\n  \n  // Styling\n  colors?: string[]          // Custom color palette\n  margin?: {                 // Custom margins\n    top?: number\n    right?: number\n    bottom?: number\n    left?: number\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface DisplayConfig {\n  // Legend\n  showLegend?: boolean       // Show/hide legend\n  legendPosition?: &#39;top&#39; | &#39;bottom&#39; | &#39;left&#39; | &#39;right&#39;\n  \n  // Grid and axes\n  showGrid?: boolean         // Show grid lines\n  showXAxis?: boolean        // Show X-axis\n  showYAxis?: boolean        // Show Y-axis\n  \n  // Tooltips and interactions\n  showTooltip?: boolean      // Show hover tooltips\n  \n  // Chart-specific options\n  stackedBarChart?: boolean  // Stack bars (Bar Chart)\n  stackedArea?: boolean      // Stack areas (Area Chart)\n  smoothLines?: boolean      // Smooth line curves (Line Chart)\n  fillOpacity?: number       // Fill opacity (0-1)\n  \n  // Styling\n  colors?: string[]          // Custom color palette\n  margin?: {                 // Custom margins\n    top?: number\n    right?: number\n    bottom?: number\n    left?: number\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"data-transformation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Data Transformation</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Charts automatically transform Cube.js result sets into chart-ready format:</p><h3 id=\"basic-data-flow\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Data Flow</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Cube.js query result\nconst resultSet = {\n  rawData: () =&gt; [\n    { \n      &#39;Employees.departmentName&#39;: &#39;Engineering&#39;,\n      &#39;Employees.createdAt&#39;: &#39;2023-01-01 00:00:00+00&#39;,\n      &#39;Employees.count&#39;: 15 \n    },\n    // ... more data\n  ]\n}\n\n// Automatic transformation for charts\n// X-axis: Formatted time dimensions (2023-01)\n// Y-axis: Measure values (15)  \n// Series: Department names (Engineering)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Cube.js query result\nconst resultSet = {\n  rawData: () =&gt; [\n    { \n      &#39;Employees.departmentName&#39;: &#39;Engineering&#39;,\n      &#39;Employees.createdAt&#39;: &#39;2023-01-01 00:00:00+00&#39;,\n      &#39;Employees.count&#39;: 15 \n    },\n    // ... more data\n  ]\n}\n\n// Automatic transformation for charts\n// X-axis: Formatted time dimensions (2023-01)\n// Y-axis: Measure values (15)  \n// Series: Department names (Engineering)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"time-dimension-handling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Time Dimension Handling</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Time dimensions are automatically formatted based on query granularity:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Query with monthly granularity\ntimeDimensions: [{\n  dimension: &#39;Employees.createdAt&#39;,\n  granularity: &#39;month&#39;,\n  dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n}]\n\n// Chart displays: 2023-01, 2023-02, 2023-03...</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Query with monthly granularity\ntimeDimensions: [{\n  dimension: &#39;Employees.createdAt&#39;,\n  granularity: &#39;month&#39;,\n  dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n}]\n\n// Chart displays: 2023-01, 2023-02, 2023-03...\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Supported Granularities:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">year</code> → 2023</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">quarter</code> → 2023-Q1  </li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">month</code> → 2023-01</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">week</code> → 2023-W01</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">day</code> → 2023-01-15</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">hour</code> → 2023-01-15 14:00</li></ul><h3 id=\"series-data-handling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Series Data Handling</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Use the <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">series</code> field to create multiple data series:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Query result with series dimension\nconst data = [\n  { dept: &#39;Engineering&#39;, month: &#39;2023-01&#39;, count: 15 },\n  { dept: &#39;Marketing&#39;, month: &#39;2023-01&#39;, count: 8 },\n  { dept: &#39;Engineering&#39;, month: &#39;2023-02&#39;, count: 18 },\n  { dept: &#39;Marketing&#39;, month: &#39;2023-02&#39;, count: 10 }\n]\n\n// Chart Config\nchartConfig: {\n  xAxis: [&#39;month&#39;],\n  yAxis: [&#39;count&#39;], \n  series: [&#39;dept&#39;]\n}\n\n// Results in separate lines/bars for Engineering and Marketing</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Query result with series dimension\nconst data = [\n  { dept: &#39;Engineering&#39;, month: &#39;2023-01&#39;, count: 15 },\n  { dept: &#39;Marketing&#39;, month: &#39;2023-01&#39;, count: 8 },\n  { dept: &#39;Engineering&#39;, month: &#39;2023-02&#39;, count: 18 },\n  { dept: &#39;Marketing&#39;, month: &#39;2023-02&#39;, count: 10 }\n]\n\n// Chart Config\nchartConfig: {\n  xAxis: [&#39;month&#39;],\n  yAxis: [&#39;count&#39;], \n  series: [&#39;dept&#39;]\n}\n\n// Results in separate lines/bars for Engineering and Marketing\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-features\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Features</h2><h3 id=\"interactive-legends\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Interactive Legends</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Charts support interactive legends with hover effects:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">&lt;RechartsBarChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Employees.createdAt&#39;],\n    yAxis: [&#39;Employees.count&#39;],\n    series: [&#39;Employees.departmentName&#39;]\n  }}\n  displayConfig={{\n    showLegend: true,\n    // Hovering legend items fades other series\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"&lt;RechartsBarChart\n  resultSet={resultSet}\n  chartConfig={{\n    xAxis: [&#39;Employees.createdAt&#39;],\n    yAxis: [&#39;Employees.count&#39;],\n    series: [&#39;Employees.departmentName&#39;]\n  }}\n  displayConfig={{\n    showLegend: true,\n    // Hovering legend items fades other series\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"custom-styling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Styling</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Override default styles with custom configurations:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">&lt;RechartsBarChart\n  resultSet={resultSet}\n  chartConfig={{ /* ... */ }}\n  displayConfig={{\n    colors: [&#39;#3B82F6&#39;, &#39;#EF4444&#39;, &#39;#10B981&#39;], // Custom color palette\n    margin: { top: 20, right: 30, bottom: 60, left: 40 },\n    showGrid: true\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"&lt;RechartsBarChart\n  resultSet={resultSet}\n  chartConfig={{ /* ... */ }}\n  displayConfig={{\n    colors: [&#39;#3B82F6&#39;, &#39;#EF4444&#39;, &#39;#10B981&#39;], // Custom color palette\n    margin: { top: 20, right: 30, bottom: 60, left: 40 },\n    showGrid: true\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"responsive-design\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Responsive Design</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Charts are automatically responsive and adapt to container size:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Chart will resize automatically within container\n&lt;div className=&quot;w-full h-96&quot;&gt;\n  &lt;RechartsBarChart\n    resultSet={resultSet}\n    chartConfig={{ /* ... */ }}\n  /&gt;\n&lt;/div&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Chart will resize automatically within container\n&lt;div className=&quot;w-full h-96&quot;&gt;\n  &lt;RechartsBarChart\n    resultSet={resultSet}\n    chartConfig={{ /* ... */ }}\n  /&gt;\n&lt;/div&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"error-handling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Handling</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Charts include built-in error boundaries and handling:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Automatic error states for:\n// - Missing data\n// - Invalid configuration\n// - Data transformation errors\n// - Chart rendering failures\n\n&lt;RechartsBarChart\n  resultSet={null}  // Shows &quot;No data available&quot; state\n  chartConfig={{ /* ... */ }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Automatic error states for:\n// - Missing data\n// - Invalid configuration\n// - Data transformation errors\n// - Chart rendering failures\n\n&lt;RechartsBarChart\n  resultSet={null}  // Shows &quot;No data available&quot; state\n  chartConfig={{ /* ... */ }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Time Dimensions</strong>: Always use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">timeDimensions</code> in queries for proper time formatting</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Series Configuration</strong>: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">series</code> field for multi-dimensional data</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Performance</strong>: Limit data points for large datasets (use filters/pagination)</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Responsive Design</strong>: Ensure proper container sizing</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Color Accessibility</strong>: Use accessible color palettes</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Loading States</strong>: Handle loading states in parent components</li></ol><h2 id=\"usage-with-usecubequery-hook\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Usage with useCubeQuery Hook</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Combine charts with the <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">useCubeQuery</code> hook for complete analytics components:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { useCubeQuery } from &#39;drizzle-cube/client&#39;\nimport { RechartsBarChart } from &#39;drizzle-cube/client&#39;\n\nfunction EmployeeAnalytics() {\n  const { resultSet, isLoading, error } = useCubeQuery({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;],\n    timeDimensions: [{\n      dimension: &#39;Employees.createdAt&#39;,\n      granularity: &#39;month&#39;,\n      dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n    }]\n  })\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;\n  if (error) return &lt;div&gt;Error: {error.message}&lt;/div&gt;\n\n  return (\n    &lt;RechartsBarChart\n      resultSet={resultSet}\n      chartConfig={{\n        xAxis: [&#39;Employees.createdAt&#39;],\n        yAxis: [&#39;Employees.count&#39;],\n        series: [&#39;Employees.departmentName&#39;]\n      }}\n      displayConfig={{\n        showLegend: true,\n        showGrid: true,\n        stackedBarChart: false\n      }}\n    /&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { useCubeQuery } from &#39;drizzle-cube/client&#39;\nimport { RechartsBarChart } from &#39;drizzle-cube/client&#39;\n\nfunction EmployeeAnalytics() {\n  const { resultSet, isLoading, error } = useCubeQuery({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;],\n    timeDimensions: [{\n      dimension: &#39;Employees.createdAt&#39;,\n      granularity: &#39;month&#39;,\n      dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n    }]\n  })\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;\n  if (error) return &lt;div&gt;Error: {error.message}&lt;/div&gt;\n\n  return (\n    &lt;RechartsBarChart\n      resultSet={resultSet}\n      chartConfig={{\n        xAxis: [&#39;Employees.createdAt&#39;],\n        yAxis: [&#39;Employees.count&#39;],\n        series: [&#39;Employees.departmentName&#39;]\n      }}\n      displayConfig={{\n        showLegend: true,\n        showGrid: true,\n        stackedBarChart: false\n      }}\n    /&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"styling-and-theming\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Styling and Theming</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Charts use Tailwind CSS for styling and support custom theming:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Custom chart container styling\n&lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;\n  &lt;h3 className=&quot;text-lg font-semibold mb-4&quot;&gt;Employee Growth&lt;/h3&gt;\n  &lt;RechartsBarChart\n    resultSet={resultSet}\n    chartConfig={{ /* ... */ }}\n    displayConfig={{\n      colors: [&#39;#3B82F6&#39;, &#39;#EF4444&#39;, &#39;#10B981&#39;]\n    }}\n  /&gt;\n&lt;/div&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Custom chart container styling\n&lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;\n  &lt;h3 className=&quot;text-lg font-semibold mb-4&quot;&gt;Employee Growth&lt;/h3&gt;\n  &lt;RechartsBarChart\n    resultSet={resultSet}\n    chartConfig={{ /* ... */ }}\n    displayConfig={{\n      colors: [&#39;#3B82F6&#39;, &#39;#EF4444&#39;, &#39;#10B981&#39;]\n    }}\n  /&gt;\n&lt;/div&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance-optimization\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Optimization</h2><h3 id=\"data-limiting\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Data Limiting</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Limit data points for better performance\nconst query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.createdAt&#39;],\n  limit: 100  // Limit to 100 data points\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Limit data points for better performance\nconst query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.createdAt&#39;],\n  limit: 100  // Limit to 100 data points\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"lazy-loading\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Lazy Loading</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Lazy load chart components\nimport { lazy, Suspense } from &#39;react&#39;\n\nconst RechartsBarChart = lazy(() =&gt; import(&#39;drizzle-cube/client&#39;).then(m =&gt; ({ \n  default: m.RechartsBarChart \n})))\n\nfunction Dashboard() {\n  return (\n    &lt;Suspense fallback={&lt;div&gt;Loading chart...&lt;/div&gt;}&gt;\n      &lt;RechartsBarChart /* ... */ /&gt;\n    &lt;/Suspense&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Lazy load chart components\nimport { lazy, Suspense } from &#39;react&#39;\n\nconst RechartsBarChart = lazy(() =&gt; import(&#39;drizzle-cube/client&#39;).then(m =&gt; ({ \n  default: m.RechartsBarChart \n})))\n\nfunction Dashboard() {\n  return (\n    &lt;Suspense fallback={&lt;div&gt;Loading chart...&lt;/div&gt;}&gt;\n      &lt;RechartsBarChart /* ... */ /&gt;\n    &lt;/Suspense&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"testing-charts\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Charts</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { render, screen } from &#39;@testing-library/react&#39;\nimport { RechartsBarChart } from &#39;drizzle-cube/client&#39;\n\nconst mockResultSet = {\n  rawData: () =&gt; [\n    { &#39;Employees.departmentName&#39;: &#39;Engineering&#39;, &#39;Employees.count&#39;: 15 }\n  ]\n}\n\ntest(&#39;renders bar chart with data&#39;, () =&gt; {\n  render(\n    &lt;RechartsBarChart\n      resultSet={mockResultSet}\n      chartConfig={{\n        xAxis: [&#39;Employees.departmentName&#39;],\n        yAxis: [&#39;Employees.count&#39;]\n      }}\n    /&gt;\n  )\n  \n  expect(screen.getByRole(&#39;img&#39;)).toBeInTheDocument() // SVG chart\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { render, screen } from &#39;@testing-library/react&#39;\nimport { RechartsBarChart } from &#39;drizzle-cube/client&#39;\n\nconst mockResultSet = {\n  rawData: () =&gt; [\n    { &#39;Employees.departmentName&#39;: &#39;Engineering&#39;, &#39;Employees.count&#39;: 15 }\n  ]\n}\n\ntest(&#39;renders bar chart with data&#39;, () =&gt; {\n  render(\n    &lt;RechartsBarChart\n      resultSet={mockResultSet}\n      chartConfig={{\n        xAxis: [&#39;Employees.departmentName&#39;],\n        yAxis: [&#39;Employees.count&#39;]\n      }}\n    /&gt;\n  )\n  \n  expect(screen.getByRole(&#39;img&#39;)).toBeInTheDocument() // SVG chart\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"troubleshooting\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Troubleshooting</h2><h3 id=\"common-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Common Issues</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Chart not rendering:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Verify resultSet contains data</li><li class=\"leading-relaxed\">Check chartConfig matches your query fields</li><li class=\"leading-relaxed\">Ensure proper container sizing</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Time dimensions not formatting:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">timeDimensions</code> in query (not just <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">dimensions</code>)</li><li class=\"leading-relaxed\">Specify proper <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">granularity</code></li><li class=\"leading-relaxed\">Check timestamp format in raw data</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Series not appearing:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Verify <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">series</code> field matches dimension name</li><li class=\"leading-relaxed\">Check if data contains the series dimension</li><li class=\"leading-relaxed\">Ensure <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">showLegend: true</code> for multi-series visibility</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Performance issues:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Limit data points with query filters</li><li class=\"leading-relaxed\">Use pagination for large datasets  </li><li class=\"leading-relaxed\">Consider data aggregation at query level</li></ul><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"client/dashboards\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Dashboards</a> for layout and grid systems</li><li class=\"leading-relaxed\">Explore <a href=\"#\" data-help-link=\"client/hooks\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Hooks</a> for data fetching patterns</li><li class=\"leading-relaxed\">Review <a href=\"#\" data-help-link=\"client\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >React Client</a> overview</li><li class=\"leading-relaxed\">Check out dashboard examples in the repository</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Additional chart types (Gantt, Funnel, Sankey)</li><li class=\"leading-relaxed\">Advanced chart annotations and markers</li><li class=\"leading-relaxed\">Export functionality (PNG, PDF, CSV)</li><li class=\"leading-relaxed\">Real-time chart updates and streaming data</li><li class=\"leading-relaxed\">Custom chart theme builder</li><li class=\"leading-relaxed\">Chart drilling and navigation capabilities</li></ul>","path":"client/charts.md"},
  'client/dashboards': {"slug":"client/dashboards","title":"Dashboards","content":"<h1 id=\"dashboards\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Dashboards</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube provides flexible dashboard components for creating interactive analytics interfaces. Built with React and <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">react-grid-layout</code>, the dashboard system supports drag-and-drop layouts, responsive design, and configurable analytics portlets.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The dashboard system consists of three main components: <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">DashboardGrid</code> for layout management, <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">AnalyticsPortlet</code> for individual visualizations, and various configuration interfaces for customization. All components are designed to work seamlessly with Cube.js-compatible data and the <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">useCubeQuery</code> hook.</p><h2 id=\"core-components\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Core Components</h2><h3 id=\"dashboardgrid\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">DashboardGrid</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The main dashboard container that manages layout, editing, and portlet interactions.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { DashboardGrid } from &#39;drizzle-cube/client&#39;\n\nfunction MyDashboard() {\n  const [config, setConfig] = useState&lt;DashboardConfig&gt;({\n    id: &#39;main-dashboard&#39;,\n    name: &#39;Analytics Dashboard&#39;,\n    portlets: [\n      {\n        id: &#39;employees-chart&#39;,\n        name: &#39;Employee Count&#39;,\n        x: 0, y: 0, w: 6, h: 4,\n        chartConfig: {\n          xAxis: [&#39;Employees.createdAt&#39;],\n          yAxis: [&#39;Employees.count&#39;]\n        },\n        query: {\n          measures: [&#39;Employees.count&#39;],\n          timeDimensions: [{\n            dimension: &#39;Employees.createdAt&#39;,\n            granularity: &#39;month&#39;\n          }]\n        },\n        chartType: &#39;bar&#39;\n      }\n    ]\n  })\n\n  return (\n    &lt;DashboardGrid\n      config={config}\n      editable={true}\n      onConfigChange={setConfig}\n      onSave={saveDashboardConfig}\n      apiUrl=&quot;/cubejs-api/v1&quot;\n    /&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { DashboardGrid } from &#39;drizzle-cube/client&#39;\n\nfunction MyDashboard() {\n  const [config, setConfig] = useState&lt;DashboardConfig&gt;({\n    id: &#39;main-dashboard&#39;,\n    name: &#39;Analytics Dashboard&#39;,\n    portlets: [\n      {\n        id: &#39;employees-chart&#39;,\n        name: &#39;Employee Count&#39;,\n        x: 0, y: 0, w: 6, h: 4,\n        chartConfig: {\n          xAxis: [&#39;Employees.createdAt&#39;],\n          yAxis: [&#39;Employees.count&#39;]\n        },\n        query: {\n          measures: [&#39;Employees.count&#39;],\n          timeDimensions: [{\n            dimension: &#39;Employees.createdAt&#39;,\n            granularity: &#39;month&#39;\n          }]\n        },\n        chartType: &#39;bar&#39;\n      }\n    ]\n  })\n\n  return (\n    &lt;DashboardGrid\n      config={config}\n      editable={true}\n      onConfigChange={setConfig}\n      onSave={saveDashboardConfig}\n      apiUrl=&quot;/cubejs-api/v1&quot;\n    /&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"analyticsportlet\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">AnalyticsPortlet</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Individual visualization components within the dashboard.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { AnalyticsPortlet } from &#39;drizzle-cube/client&#39;\n\n&lt;AnalyticsPortlet\n  config={{\n    id: &#39;revenue-chart&#39;,\n    name: &#39;Monthly Revenue&#39;,\n    query: {\n      measures: [&#39;Orders.totalRevenue&#39;],\n      timeDimensions: [{\n        dimension: &#39;Orders.createdAt&#39;,\n        granularity: &#39;month&#39;,\n        dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n      }]\n    },\n    chartConfig: {\n      xAxis: [&#39;Orders.createdAt&#39;],\n      yAxis: [&#39;Orders.totalRevenue&#39;]\n    },\n    chartType: &#39;line&#39;\n  }}\n  apiUrl=&quot;/cubejs-api/v1&quot;\n  onEdit={() =&gt; setEditingPortlet(config)}\n  onRefresh={() =&gt; refreshPortlet(config.id)}\n  onDelete={() =&gt; deletePortlet(config.id)}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { AnalyticsPortlet } from &#39;drizzle-cube/client&#39;\n\n&lt;AnalyticsPortlet\n  config={{\n    id: &#39;revenue-chart&#39;,\n    name: &#39;Monthly Revenue&#39;,\n    query: {\n      measures: [&#39;Orders.totalRevenue&#39;],\n      timeDimensions: [{\n        dimension: &#39;Orders.createdAt&#39;,\n        granularity: &#39;month&#39;,\n        dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n      }]\n    },\n    chartConfig: {\n      xAxis: [&#39;Orders.createdAt&#39;],\n      yAxis: [&#39;Orders.totalRevenue&#39;]\n    },\n    chartType: &#39;line&#39;\n  }}\n  apiUrl=&quot;/cubejs-api/v1&quot;\n  onEdit={() =&gt; setEditingPortlet(config)}\n  onRefresh={() =&gt; refreshPortlet(config.id)}\n  onDelete={() =&gt; deletePortlet(config.id)}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"configuration-structure\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Configuration Structure</h2><h3 id=\"dashboard-configuration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dashboard Configuration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface DashboardConfig {\n  id: string\n  name: string\n  description?: string\n  portlets: PortletConfig[]\n  layout?: {\n    breakpoints?: { [key: string]: number }\n    cols?: { [key: string]: number }\n    margin?: [number, number]\n    containerPadding?: [number, number]\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface DashboardConfig {\n  id: string\n  name: string\n  description?: string\n  portlets: PortletConfig[]\n  layout?: {\n    breakpoints?: { [key: string]: number }\n    cols?: { [key: string]: number }\n    margin?: [number, number]\n    containerPadding?: [number, number]\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"portlet-configuration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Portlet Configuration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface PortletConfig {\n  id: string\n  name: string\n  description?: string\n  \n  // Layout (react-grid-layout format)\n  x: number                    // X position in grid\n  y: number                    // Y position in grid\n  w: number                    // Width in grid units\n  h: number                    // Height in grid units\n  minW?: number               // Minimum width\n  minH?: number               // Minimum height\n  \n  // Query configuration\n  query: CubeQuery            // Cube.js query object\n  chartConfig: ChartConfig    // Chart configuration\n  displayConfig?: DisplayConfig // Chart display options\n  \n  // Chart type\n  chartType: &#39;bar&#39; | &#39;line&#39; | &#39;area&#39; | &#39;pie&#39; | &#39;scatter&#39; | &#39;table&#39;\n  \n  // Behavior\n  autoRefresh?: number        // Auto-refresh interval (seconds)\n  cachingEnabled?: boolean    // Enable result caching\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface PortletConfig {\n  id: string\n  name: string\n  description?: string\n  \n  // Layout (react-grid-layout format)\n  x: number                    // X position in grid\n  y: number                    // Y position in grid\n  w: number                    // Width in grid units\n  h: number                    // Height in grid units\n  minW?: number               // Minimum width\n  minH?: number               // Minimum height\n  \n  // Query configuration\n  query: CubeQuery            // Cube.js query object\n  chartConfig: ChartConfig    // Chart configuration\n  displayConfig?: DisplayConfig // Chart display options\n  \n  // Chart type\n  chartType: &#39;bar&#39; | &#39;line&#39; | &#39;area&#39; | &#39;pie&#39; | &#39;scatter&#39; | &#39;table&#39;\n  \n  // Behavior\n  autoRefresh?: number        // Auto-refresh interval (seconds)\n  cachingEnabled?: boolean    // Enable result caching\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"dashboard-features\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Dashboard Features</h2><h3 id=\"drag-and-drop-layout\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Drag-and-Drop Layout</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Enable interactive layout editing:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">&lt;DashboardGrid\n  config={config}\n  editable={true}              // Enable editing mode\n  onConfigChange={(newConfig) =&gt; {\n    setConfig(newConfig)\n    // Optionally auto-save changes\n    saveDashboardConfig(newConfig)\n  }}\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"&lt;DashboardGrid\n  config={config}\n  editable={true}              // Enable editing mode\n  onConfigChange={(newConfig) =&gt; {\n    setConfig(newConfig)\n    // Optionally auto-save changes\n    saveDashboardConfig(newConfig)\n  }}\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Features:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Drag portlets to reposition</li><li class=\"leading-relaxed\">Resize portlets by dragging corners</li><li class=\"leading-relaxed\">Responsive breakpoints for different screen sizes</li><li class=\"leading-relaxed\">Snap-to-grid alignment</li></ul><h3 id=\"responsive-design\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Responsive Design</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Dashboards automatically adapt to different screen sizes:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Default responsive configuration\nlayout: {\n  breakpoints: { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 },\n  cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\n  margin: [16, 16],\n  containerPadding: [16, 16]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Default responsive configuration\nlayout: {\n  breakpoints: { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 },\n  cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\n  margin: [16, 16],\n  containerPadding: [16, 16]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"real-time-updates\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Real-time Updates</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Portlets support automatic refresh and real-time updates:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Portlet with auto-refresh every 30 seconds\n{\n  id: &#39;live-metrics&#39;,\n  name: &#39;Live Metrics&#39;,\n  query: { /* ... */ },\n  chartConfig: { /* ... */ },\n  chartType: &#39;line&#39;,\n  autoRefresh: 30  // Refresh every 30 seconds\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Portlet with auto-refresh every 30 seconds\n{\n  id: &#39;live-metrics&#39;,\n  name: &#39;Live Metrics&#39;,\n  query: { /* ... */ },\n  chartConfig: { /* ... */ },\n  chartType: &#39;line&#39;,\n  autoRefresh: 30  // Refresh every 30 seconds\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"portlet-types\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Portlet Types</h2><h3 id=\"chart-portlets\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Chart Portlets</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Display various chart types with full interactivity:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Bar Chart Portlet\n{\n  chartType: &#39;bar&#39;,\n  chartConfig: {\n    xAxis: [&#39;Employees.departmentName&#39;],\n    yAxis: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;]\n  },\n  displayConfig: {\n    showLegend: true,\n    stackedBarChart: false\n  }\n}\n\n// Time Series Line Chart\n{\n  chartType: &#39;line&#39;, \n  chartConfig: {\n    xAxis: [&#39;Orders.createdAt&#39;],\n    yAxis: [&#39;Orders.totalRevenue&#39;]\n  },\n  query: {\n    measures: [&#39;Orders.totalRevenue&#39;],\n    timeDimensions: [{\n      dimension: &#39;Orders.createdAt&#39;,\n      granularity: &#39;day&#39;\n    }]\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Bar Chart Portlet\n{\n  chartType: &#39;bar&#39;,\n  chartConfig: {\n    xAxis: [&#39;Employees.departmentName&#39;],\n    yAxis: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;]\n  },\n  displayConfig: {\n    showLegend: true,\n    stackedBarChart: false\n  }\n}\n\n// Time Series Line Chart\n{\n  chartType: &#39;line&#39;, \n  chartConfig: {\n    xAxis: [&#39;Orders.createdAt&#39;],\n    yAxis: [&#39;Orders.totalRevenue&#39;]\n  },\n  query: {\n    measures: [&#39;Orders.totalRevenue&#39;],\n    timeDimensions: [{\n      dimension: &#39;Orders.createdAt&#39;,\n      granularity: &#39;day&#39;\n    }]\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"table-portlets\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Table Portlets</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Display data in tabular format:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">{\n  chartType: &#39;table&#39;,\n  query: {\n    measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;],\n    order: [[&#39;Employees.count&#39;, &#39;desc&#39;]]\n  },\n  displayConfig: {\n    showPagination: true,\n    pageSize: 10,\n    sortable: true\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  chartType: &#39;table&#39;,\n  query: {\n    measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;],\n    order: [[&#39;Employees.count&#39;, &#39;desc&#39;]]\n  },\n  displayConfig: {\n    showPagination: true,\n    pageSize: 10,\n    sortable: true\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"kpimetric-portlets\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">KPI/Metric Portlets</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Display single metrics or key performance indicators:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">{\n  chartType: &#39;kpi&#39;,\n  query: {\n    measures: [&#39;Orders.totalRevenue&#39;]\n  },\n  displayConfig: {\n    format: &#39;currency&#39;,\n    showChange: true,\n    compareToLastPeriod: true\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  chartType: &#39;kpi&#39;,\n  query: {\n    measures: [&#39;Orders.totalRevenue&#39;]\n  },\n  displayConfig: {\n    format: &#39;currency&#39;,\n    showChange: true,\n    compareToLastPeriod: true\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"interactive-features\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Interactive Features</h2><h3 id=\"portlet-editing-modal\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Portlet Editing Modal</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Built-in modal for configuring portlets:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { PortletEditModal } from &#39;drizzle-cube/client&#39;\n\nfunction DashboardEditor() {\n  const [editingPortlet, setEditingPortlet] = useState&lt;PortletConfig | null&gt;(null)\n\n  return (\n    &lt;&gt;\n      &lt;DashboardGrid\n        config={config}\n        editable={true}\n        onPortletEdit={setEditingPortlet}\n      /&gt;\n      \n      {editingPortlet &amp;&amp; (\n        &lt;PortletEditModal\n          portlet={editingPortlet}\n          isOpen={!!editingPortlet}\n          onClose={() =&gt; setEditingPortlet(null)}\n          onSave={(updatedPortlet) =&gt; {\n            updatePortletConfig(updatedPortlet)\n            setEditingPortlet(null)\n          }}\n          availableCubes={cubeNames}\n          apiUrl=&quot;/cubejs-api/v1&quot;\n        /&gt;\n      )}\n    &lt;/&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { PortletEditModal } from &#39;drizzle-cube/client&#39;\n\nfunction DashboardEditor() {\n  const [editingPortlet, setEditingPortlet] = useState&lt;PortletConfig | null&gt;(null)\n\n  return (\n    &lt;&gt;\n      &lt;DashboardGrid\n        config={config}\n        editable={true}\n        onPortletEdit={setEditingPortlet}\n      /&gt;\n      \n      {editingPortlet &amp;&amp; (\n        &lt;PortletEditModal\n          portlet={editingPortlet}\n          isOpen={!!editingPortlet}\n          onClose={() =&gt; setEditingPortlet(null)}\n          onSave={(updatedPortlet) =&gt; {\n            updatePortletConfig(updatedPortlet)\n            setEditingPortlet(null)\n          }}\n          availableCubes={cubeNames}\n          apiUrl=&quot;/cubejs-api/v1&quot;\n        /&gt;\n      )}\n    &lt;/&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"portlet-actions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Portlet Actions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Standard portlet actions for management:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Portlet header actions\nconst portletActions = [\n  {\n    icon: &#39;refresh&#39;,\n    label: &#39;Refresh&#39;,\n    onClick: () =&gt; refreshPortlet(portletId)\n  },\n  {\n    icon: &#39;edit&#39;,\n    label: &#39;Edit&#39;,\n    onClick: () =&gt; setEditingPortlet(portlet)\n  },\n  {\n    icon: &#39;delete&#39;, \n    label: &#39;Delete&#39;,\n    onClick: () =&gt; deletePortlet(portletId)\n  }\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Portlet header actions\nconst portletActions = [\n  {\n    icon: &#39;refresh&#39;,\n    label: &#39;Refresh&#39;,\n    onClick: () =&gt; refreshPortlet(portletId)\n  },\n  {\n    icon: &#39;edit&#39;,\n    label: &#39;Edit&#39;,\n    onClick: () =&gt; setEditingPortlet(portlet)\n  },\n  {\n    icon: &#39;delete&#39;, \n    label: &#39;Delete&#39;,\n    onClick: () =&gt; deletePortlet(portletId)\n  }\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-configuration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Configuration</h2><h3 id=\"custom-breakpoints\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Breakpoints</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Define custom responsive breakpoints:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const customLayout = {\n  breakpoints: { \n    xl: 1400,    // Extra large screens\n    lg: 1200,    // Large screens\n    md: 996,     // Medium screens\n    sm: 768,     // Small screens (tablets)\n    xs: 480      // Extra small screens (phones)\n  },\n  cols: { \n    xl: 16,      // 16 columns on XL screens\n    lg: 12,      // 12 columns on large screens\n    md: 8,       // 8 columns on medium screens\n    sm: 4,       // 4 columns on small screens\n    xs: 2        // 2 columns on mobile\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const customLayout = {\n  breakpoints: { \n    xl: 1400,    // Extra large screens\n    lg: 1200,    // Large screens\n    md: 996,     // Medium screens\n    sm: 768,     // Small screens (tablets)\n    xs: 480      // Extra small screens (phones)\n  },\n  cols: { \n    xl: 16,      // 16 columns on XL screens\n    lg: 12,      // 12 columns on large screens\n    md: 8,       // 8 columns on medium screens\n    sm: 4,       // 4 columns on small screens\n    xs: 2        // 2 columns on mobile\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"dashboard-themes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dashboard Themes</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Apply custom styling and themes:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">&lt;div className=&quot;dashboard-theme-dark&quot;&gt;\n  &lt;DashboardGrid\n    config={config}\n    editable={false}\n  /&gt;\n&lt;/div&gt;\n\n&lt;style&gt;\n.dashboard-theme-dark .portlet {\n  @apply bg-gray-800 text-white border-gray-700;\n}\n\n.dashboard-theme-dark .portlet-header {\n  @apply bg-gray-700 border-gray-600;\n}\n&lt;/style&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"&lt;div className=&quot;dashboard-theme-dark&quot;&gt;\n  &lt;DashboardGrid\n    config={config}\n    editable={false}\n  /&gt;\n&lt;/div&gt;\n\n&lt;style&gt;\n.dashboard-theme-dark .portlet {\n  @apply bg-gray-800 text-white border-gray-700;\n}\n\n.dashboard-theme-dark .portlet-header {\n  @apply bg-gray-700 border-gray-600;\n}\n&lt;/style&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"dashboard-persistence\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dashboard Persistence</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Save and load dashboard configurations:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Save dashboard configuration\nconst saveDashboardConfig = async (config: DashboardConfig) =&gt; {\n  await fetch(&#39;/api/dashboards&#39;, {\n    method: &#39;POST&#39;,\n    headers: { &#39;Content-Type&#39;: &#39;application/json&#39; },\n    body: JSON.stringify(config)\n  })\n}\n\n// Load dashboard configuration\nconst loadDashboardConfig = async (dashboardId: string) =&gt; {\n  const response = await fetch(`/api/dashboards/${dashboardId}`)\n  return response.json() as DashboardConfig\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Save dashboard configuration\nconst saveDashboardConfig = async (config: DashboardConfig) =&gt; {\n  await fetch(&#39;/api/dashboards&#39;, {\n    method: &#39;POST&#39;,\n    headers: { &#39;Content-Type&#39;: &#39;application/json&#39; },\n    body: JSON.stringify(config)\n  })\n}\n\n// Load dashboard configuration\nconst loadDashboardConfig = async (dashboardId: string) =&gt; {\n  const response = await fetch(`/api/dashboards/${dashboardId}`)\n  return response.json() as DashboardConfig\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance-optimization\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Optimization</h2><h3 id=\"lazy-loading\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Lazy Loading</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Load portlets on demand for better performance:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { lazy, Suspense } from &#39;react&#39;\n\nconst LazyAnalyticsPortlet = lazy(() =&gt; import(&#39;drizzle-cube/client&#39;).then(m =&gt; ({ \n  default: m.AnalyticsPortlet \n})))\n\nfunction OptimizedDashboard({ config }: { config: DashboardConfig }) {\n  return (\n    &lt;DashboardGrid config={config}&gt;\n      {config.portlets.map(portlet =&gt; (\n        &lt;Suspense key={portlet.id} fallback={&lt;PortletSkeleton /&gt;}&gt;\n          &lt;LazyAnalyticsPortlet config={portlet} /&gt;\n        &lt;/Suspense&gt;\n      ))}\n    &lt;/DashboardGrid&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { lazy, Suspense } from &#39;react&#39;\n\nconst LazyAnalyticsPortlet = lazy(() =&gt; import(&#39;drizzle-cube/client&#39;).then(m =&gt; ({ \n  default: m.AnalyticsPortlet \n})))\n\nfunction OptimizedDashboard({ config }: { config: DashboardConfig }) {\n  return (\n    &lt;DashboardGrid config={config}&gt;\n      {config.portlets.map(portlet =&gt; (\n        &lt;Suspense key={portlet.id} fallback={&lt;PortletSkeleton /&gt;}&gt;\n          &lt;LazyAnalyticsPortlet config={portlet} /&gt;\n        &lt;/Suspense&gt;\n      ))}\n    &lt;/DashboardGrid&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"query-caching\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Caching</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Enable caching for improved performance:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Portlet with caching enabled\n{\n  id: &#39;cached-chart&#39;,\n  query: { /* ... */ },\n  cachingEnabled: true,  // Enable result set caching\n  cacheTimeout: 300     // Cache for 5 minutes\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Portlet with caching enabled\n{\n  id: &#39;cached-chart&#39;,\n  query: { /* ... */ },\n  cachingEnabled: true,  // Enable result set caching\n  cacheTimeout: 300     // Cache for 5 minutes\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"virtual-scrolling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Virtual Scrolling</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">For dashboards with many portlets:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Enable virtualization for large dashboards\n&lt;DashboardGrid\n  config={config}\n  virtualScrolling={true}\n  visiblePortletBuffer={5}  // Render 5 portlets outside viewport\n/&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Enable virtualization for large dashboards\n&lt;DashboardGrid\n  config={config}\n  virtualScrolling={true}\n  visiblePortletBuffer={5}  // Render 5 portlets outside viewport\n/&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"testing-dashboards\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Dashboards</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { render, screen, fireEvent } from &#39;@testing-library/react&#39;\nimport { DashboardGrid } from &#39;drizzle-cube/client&#39;\n\nconst mockConfig: DashboardConfig = {\n  id: &#39;test-dashboard&#39;,\n  name: &#39;Test Dashboard&#39;,\n  portlets: [{\n    id: &#39;test-portlet&#39;,\n    name: &#39;Test Chart&#39;,\n    x: 0, y: 0, w: 6, h: 4,\n    query: { measures: [&#39;Test.count&#39;] },\n    chartType: &#39;bar&#39;,\n    chartConfig: { yAxis: [&#39;Test.count&#39;] }\n  }]\n}\n\ntest(&#39;renders dashboard with portlets&#39;, () =&gt; {\n  render(&lt;DashboardGrid config={mockConfig} /&gt;)\n  \n  expect(screen.getByText(&#39;Test Chart&#39;)).toBeInTheDocument()\n})\n\ntest(&#39;handles portlet editing&#39;, () =&gt; {\n  const onConfigChange = jest.fn()\n  \n  render(\n    &lt;DashboardGrid \n      config={mockConfig}\n      editable={true}\n      onConfigChange={onConfigChange}\n    /&gt;\n  )\n  \n  // Test editing interactions\n  const editButton = screen.getByRole(&#39;button&#39;, { name: /edit/i })\n  fireEvent.click(editButton)\n  \n  // Verify edit modal opens\n  expect(screen.getByRole(&#39;dialog&#39;)).toBeInTheDocument()\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { render, screen, fireEvent } from &#39;@testing-library/react&#39;\nimport { DashboardGrid } from &#39;drizzle-cube/client&#39;\n\nconst mockConfig: DashboardConfig = {\n  id: &#39;test-dashboard&#39;,\n  name: &#39;Test Dashboard&#39;,\n  portlets: [{\n    id: &#39;test-portlet&#39;,\n    name: &#39;Test Chart&#39;,\n    x: 0, y: 0, w: 6, h: 4,\n    query: { measures: [&#39;Test.count&#39;] },\n    chartType: &#39;bar&#39;,\n    chartConfig: { yAxis: [&#39;Test.count&#39;] }\n  }]\n}\n\ntest(&#39;renders dashboard with portlets&#39;, () =&gt; {\n  render(&lt;DashboardGrid config={mockConfig} /&gt;)\n  \n  expect(screen.getByText(&#39;Test Chart&#39;)).toBeInTheDocument()\n})\n\ntest(&#39;handles portlet editing&#39;, () =&gt; {\n  const onConfigChange = jest.fn()\n  \n  render(\n    &lt;DashboardGrid \n      config={mockConfig}\n      editable={true}\n      onConfigChange={onConfigChange}\n    /&gt;\n  )\n  \n  // Test editing interactions\n  const editButton = screen.getByRole(&#39;button&#39;, { name: /edit/i })\n  fireEvent.click(editButton)\n  \n  // Verify edit modal opens\n  expect(screen.getByRole(&#39;dialog&#39;)).toBeInTheDocument()\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Responsive Design</strong>: Always test dashboards on different screen sizes</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Performance</strong>: Limit the number of portlets per dashboard (&lt; 20)</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">User Experience</strong>: Provide loading states and error handling</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Data Freshness</strong>: Set appropriate auto-refresh intervals</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security</strong>: Ensure all queries respect security context</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Accessibility</strong>: Use proper ARIA labels and keyboard navigation</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Persistence</strong>: Save dashboard state frequently to prevent data loss</li></ol><h2 id=\"dashboard-examples\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Dashboard Examples</h2><h3 id=\"executive-dashboard\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Executive Dashboard</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const executiveDashboard: DashboardConfig = {\n  id: &#39;executive-dashboard&#39;,\n  name: &#39;Executive Overview&#39;,\n  portlets: [\n    // Revenue KPI\n    {\n      id: &#39;total-revenue&#39;,\n      name: &#39;Total Revenue&#39;,\n      x: 0, y: 0, w: 3, h: 2,\n      chartType: &#39;kpi&#39;,\n      query: { measures: [&#39;Orders.totalRevenue&#39;] }\n    },\n    // Growth Chart\n    {\n      id: &#39;revenue-growth&#39;,\n      name: &#39;Revenue Growth&#39;,\n      x: 3, y: 0, w: 9, h: 4,\n      chartType: &#39;line&#39;,\n      query: {\n        measures: [&#39;Orders.totalRevenue&#39;],\n        timeDimensions: [{\n          dimension: &#39;Orders.createdAt&#39;,\n          granularity: &#39;month&#39;,\n          dateRange: [&#39;2023-01-01&#39;, &#39;2024-12-31&#39;]\n        }]\n      }\n    }\n  ]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const executiveDashboard: DashboardConfig = {\n  id: &#39;executive-dashboard&#39;,\n  name: &#39;Executive Overview&#39;,\n  portlets: [\n    // Revenue KPI\n    {\n      id: &#39;total-revenue&#39;,\n      name: &#39;Total Revenue&#39;,\n      x: 0, y: 0, w: 3, h: 2,\n      chartType: &#39;kpi&#39;,\n      query: { measures: [&#39;Orders.totalRevenue&#39;] }\n    },\n    // Growth Chart\n    {\n      id: &#39;revenue-growth&#39;,\n      name: &#39;Revenue Growth&#39;,\n      x: 3, y: 0, w: 9, h: 4,\n      chartType: &#39;line&#39;,\n      query: {\n        measures: [&#39;Orders.totalRevenue&#39;],\n        timeDimensions: [{\n          dimension: &#39;Orders.createdAt&#39;,\n          granularity: &#39;month&#39;,\n          dateRange: [&#39;2023-01-01&#39;, &#39;2024-12-31&#39;]\n        }]\n      }\n    }\n  ]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"operations-dashboard\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Operations Dashboard</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const operationsDashboard: DashboardConfig = {\n  id: &#39;operations-dashboard&#39;, \n  name: &#39;Operations Metrics&#39;,\n  portlets: [\n    // Employee Productivity\n    {\n      id: &#39;productivity-trend&#39;,\n      name: &#39;Productivity Trend&#39;,\n      x: 0, y: 0, w: 8, h: 4,\n      chartType: &#39;area&#39;,\n      query: {\n        measures: [&#39;Productivity.avgLinesOfCode&#39;],\n        dimensions: [&#39;Productivity.departmentName&#39;],\n        timeDimensions: [{\n          dimension: &#39;Productivity.date&#39;,\n          granularity: &#39;week&#39;\n        }]\n      }\n    },\n    // Department Comparison\n    {\n      id: &#39;dept-comparison&#39;,\n      name: &#39;Department Comparison&#39;,\n      x: 8, y: 0, w: 4, h: 4,\n      chartType: &#39;bar&#39;,\n      query: {\n        measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n        dimensions: [&#39;Employees.departmentName&#39;]\n      }\n    }\n  ]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const operationsDashboard: DashboardConfig = {\n  id: &#39;operations-dashboard&#39;, \n  name: &#39;Operations Metrics&#39;,\n  portlets: [\n    // Employee Productivity\n    {\n      id: &#39;productivity-trend&#39;,\n      name: &#39;Productivity Trend&#39;,\n      x: 0, y: 0, w: 8, h: 4,\n      chartType: &#39;area&#39;,\n      query: {\n        measures: [&#39;Productivity.avgLinesOfCode&#39;],\n        dimensions: [&#39;Productivity.departmentName&#39;],\n        timeDimensions: [{\n          dimension: &#39;Productivity.date&#39;,\n          granularity: &#39;week&#39;\n        }]\n      }\n    },\n    // Department Comparison\n    {\n      id: &#39;dept-comparison&#39;,\n      name: &#39;Department Comparison&#39;,\n      x: 8, y: 0, w: 4, h: 4,\n      chartType: &#39;bar&#39;,\n      query: {\n        measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n        dimensions: [&#39;Employees.departmentName&#39;]\n      }\n    }\n  ]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"client/hooks\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Hooks</a> for data fetching patterns</li><li class=\"leading-relaxed\">Explore <a href=\"#\" data-help-link=\"client/charts\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Charts</a> for visualization options</li><li class=\"leading-relaxed\">Review <a href=\"#\" data-help-link=\"client\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >React Client</a> overview</li><li class=\"leading-relaxed\">Check dashboard examples in the repository</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Dashboard templates and marketplace</li><li class=\"leading-relaxed\">Advanced dashboard sharing and collaboration</li><li class=\"leading-relaxed\">Dashboard embedding and white-labeling</li><li class=\"leading-relaxed\">Real-time dashboard notifications and alerts</li><li class=\"leading-relaxed\">Dashboard performance analytics</li><li class=\"leading-relaxed\">Advanced dashboard filtering and drill-down capabilities</li></ul>","path":"client/dashboards.md"},
  'client/hooks': {"slug":"client/hooks","title":"Hooks","content":"<h1 id=\"hooks\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Hooks</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube provides React hooks for seamless data fetching and state management. The hooks are designed to be Cube.js-compatible while leveraging Drizzle ORM&#39;s type safety and security features.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The hook system consists of <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">useCubeQuery</code> for data fetching and <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">useCubeContext</code> for accessing the Cube API client. These hooks provide automatic loading states, error handling, and query optimization.</p><h2 id=\"usecubequery-hook\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">useCubeQuery Hook</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The primary hook for executing analytics queries and managing result state.</p><h3 id=\"basic-usage\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Usage</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { useCubeQuery } from &#39;drizzle-cube/client&#39;\n\nfunction EmployeeMetrics() {\n  const { resultSet, isLoading, error } = useCubeQuery({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;]\n  })\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;\n  if (error) return &lt;div&gt;Error: {error.message}&lt;/div&gt;\n  if (!resultSet) return &lt;div&gt;No data&lt;/div&gt;\n\n  return (\n    &lt;div&gt;\n      {resultSet.rawData().map((row, index) =&gt; (\n        &lt;div key={index}&gt;\n          {row[&#39;Employees.departmentName&#39;]}: {row[&#39;Employees.count&#39;]}\n        &lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { useCubeQuery } from &#39;drizzle-cube/client&#39;\n\nfunction EmployeeMetrics() {\n  const { resultSet, isLoading, error } = useCubeQuery({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;]\n  })\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;\n  if (error) return &lt;div&gt;Error: {error.message}&lt;/div&gt;\n  if (!resultSet) return &lt;div&gt;No data&lt;/div&gt;\n\n  return (\n    &lt;div&gt;\n      {resultSet.rawData().map((row, index) =&gt; (\n        &lt;div key={index}&gt;\n          {row[&#39;Employees.departmentName&#39;]}: {row[&#39;Employees.count&#39;]}\n        &lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"hook-signature\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Hook Signature</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function useCubeQuery(\n  query: CubeQuery | null,\n  options?: CubeQueryOptions\n): UseCubeQueryResult\n\ninterface UseCubeQueryResult {\n  resultSet: CubeResultSet | null\n  isLoading: boolean\n  error: Error | null\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function useCubeQuery(\n  query: CubeQuery | null,\n  options?: CubeQueryOptions\n): UseCubeQueryResult\n\ninterface UseCubeQueryResult {\n  resultSet: CubeResultSet | null\n  isLoading: boolean\n  error: Error | null\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"query-structure\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Structure</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface CubeQuery {\n  measures?: string[]           // Metrics to calculate\n  dimensions?: string[]         // Grouping fields\n  timeDimensions?: TimeDimension[]  // Time-based grouping\n  filters?: Filter[]           // Query filters\n  order?: [string, &#39;asc&#39; | &#39;desc&#39;][]  // Sorting\n  limit?: number              // Result limit\n  offset?: number             // Result offset\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface CubeQuery {\n  measures?: string[]           // Metrics to calculate\n  dimensions?: string[]         // Grouping fields\n  timeDimensions?: TimeDimension[]  // Time-based grouping\n  filters?: Filter[]           // Query filters\n  order?: [string, &#39;asc&#39; | &#39;desc&#39;][]  // Sorting\n  limit?: number              // Result limit\n  offset?: number             // Result offset\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-usage\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Usage</h2><h3 id=\"time-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Time Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Query time-series data with automatic formatting:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function RevenueChart() {\n  const { resultSet, isLoading, error } = useCubeQuery({\n    measures: [&#39;Orders.totalRevenue&#39;],\n    timeDimensions: [{\n      dimension: &#39;Orders.createdAt&#39;,\n      granularity: &#39;month&#39;,\n      dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n    }]\n  })\n\n  // resultSet.rawData() returns formatted time data\n  // e.g., { &#39;Orders.createdAt&#39;: &#39;2023-01&#39;, &#39;Orders.totalRevenue&#39;: 50000 }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function RevenueChart() {\n  const { resultSet, isLoading, error } = useCubeQuery({\n    measures: [&#39;Orders.totalRevenue&#39;],\n    timeDimensions: [{\n      dimension: &#39;Orders.createdAt&#39;,\n      granularity: &#39;month&#39;,\n      dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n    }]\n  })\n\n  // resultSet.rawData() returns formatted time data\n  // e.g., { &#39;Orders.createdAt&#39;: &#39;2023-01&#39;, &#39;Orders.totalRevenue&#39;: 50000 }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Time Dimension Options:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">granularity</code>: &#39;year&#39; | &#39;quarter&#39; | &#39;month&#39; | &#39;week&#39; | &#39;day&#39; | &#39;hour&#39;</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">dateRange</code>: [startDate, endDate] or relative dates</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">offset</code>: Time offset for comparative analysis</li></ul><h3 id=\"filtering-data\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Filtering Data</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Apply filters to narrow down results:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function ActiveEmployees() {\n  const { resultSet } = useCubeQuery({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;],\n    filters: [\n      {\n        member: &#39;Employees.isActive&#39;,\n        operator: &#39;equals&#39;,\n        values: [true]\n      },\n      {\n        member: &#39;Employees.createdAt&#39;, \n        operator: &#39;inDateRange&#39;,\n        values: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n      }\n    ]\n  })\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function ActiveEmployees() {\n  const { resultSet } = useCubeQuery({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;],\n    filters: [\n      {\n        member: &#39;Employees.isActive&#39;,\n        operator: &#39;equals&#39;,\n        values: [true]\n      },\n      {\n        member: &#39;Employees.createdAt&#39;, \n        operator: &#39;inDateRange&#39;,\n        values: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n      }\n    ]\n  })\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Filter Operators:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">equals</code> / <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">notEquals</code></li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">contains</code> / <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">notContains</code></li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">gt</code> / <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">gte</code> / <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">lt</code> / <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">lte</code> (greater/less than)</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">inDateRange</code> / <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">notInDateRange</code></li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">set</code> / <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">notSet</code> (null checks)</li></ul><h3 id=\"multi-cube-queries\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Multi-Cube Queries</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Query data from multiple cubes using joins:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function CrossCubeAnalysis() {\n  const { resultSet } = useCubeQuery({\n    measures: [\n      &#39;Employees.count&#39;,           // From Employees cube\n      &#39;Departments.totalBudget&#39;,   // From Departments cube\n      &#39;Productivity.avgLinesOfCode&#39; // From Productivity cube\n    ],\n    dimensions: [\n      &#39;Departments.name&#39;,          // Group by department\n      &#39;Employees.isActive&#39;         // Split by active status\n    ]\n  })\n\n  // Automatically resolves join paths between cubes\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function CrossCubeAnalysis() {\n  const { resultSet } = useCubeQuery({\n    measures: [\n      &#39;Employees.count&#39;,           // From Employees cube\n      &#39;Departments.totalBudget&#39;,   // From Departments cube\n      &#39;Productivity.avgLinesOfCode&#39; // From Productivity cube\n    ],\n    dimensions: [\n      &#39;Departments.name&#39;,          // Group by department\n      &#39;Employees.isActive&#39;         // Split by active status\n    ]\n  })\n\n  // Automatically resolves join paths between cubes\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"sorting-and-limiting\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Sorting and Limiting</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Control result ordering and pagination:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function TopPerformers() {\n  const { resultSet } = useCubeQuery({\n    measures: [&#39;Productivity.avgLinesOfCode&#39;],\n    dimensions: [&#39;Employees.name&#39;],\n    order: [\n      [&#39;Productivity.avgLinesOfCode&#39;, &#39;desc&#39;]\n    ],\n    limit: 10  // Top 10 performers\n  })\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function TopPerformers() {\n  const { resultSet } = useCubeQuery({\n    measures: [&#39;Productivity.avgLinesOfCode&#39;],\n    dimensions: [&#39;Employees.name&#39;],\n    order: [\n      [&#39;Productivity.avgLinesOfCode&#39;, &#39;desc&#39;]\n    ],\n    limit: 10  // Top 10 performers\n  })\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"hook-options\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Hook Options</h2><h3 id=\"query-options\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Options</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface CubeQueryOptions {\n  skip?: boolean                    // Skip query execution\n  resetResultSetOnChange?: boolean  // Reset data when query changes\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface CubeQueryOptions {\n  skip?: boolean                    // Skip query execution\n  resetResultSetOnChange?: boolean  // Reset data when query changes\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"skip-query-execution\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Skip Query Execution</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Conditionally skip queries:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function ConditionalQuery({ showData }: { showData: boolean }) {\n  const { resultSet, isLoading } = useCubeQuery(\n    {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    },\n    { skip: !showData }  // Only execute when showData is true\n  )\n\n  // Hook won&#39;t execute query until showData becomes true\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function ConditionalQuery({ showData }: { showData: boolean }) {\n  const { resultSet, isLoading } = useCubeQuery(\n    {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    },\n    { skip: !showData }  // Only execute when showData is true\n  )\n\n  // Hook won&#39;t execute query until showData becomes true\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"reset-result-set\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Reset Result Set</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Control when to clear previous results:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function DynamicQuery({ queryConfig }: { queryConfig: CubeQuery }) {\n  const { resultSet } = useCubeQuery(\n    queryConfig,\n    { resetResultSetOnChange: true }  // Clear data when query changes\n  )\n\n  // Shows loading state when query changes instead of stale data\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function DynamicQuery({ queryConfig }: { queryConfig: CubeQuery }) {\n  const { resultSet } = useCubeQuery(\n    queryConfig,\n    { resetResultSetOnChange: true }  // Clear data when query changes\n  )\n\n  // Shows loading state when query changes instead of stale data\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"cubeprovider-setup\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">CubeProvider Setup</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Hooks require the <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">CubeProvider</code> context for API access:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { CubeProvider } from &#39;drizzle-cube/client&#39;\n\nfunction App() {\n  return (\n    &lt;CubeProvider \n      config={{\n        apiUrl: &#39;/cubejs-api/v1&#39;,\n        headers: {\n          &#39;Authorization&#39;: `Bearer ${getToken()}`\n        }\n      }}\n    &gt;\n      &lt;Dashboard /&gt;\n    &lt;/CubeProvider&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { CubeProvider } from &#39;drizzle-cube/client&#39;\n\nfunction App() {\n  return (\n    &lt;CubeProvider \n      config={{\n        apiUrl: &#39;/cubejs-api/v1&#39;,\n        headers: {\n          &#39;Authorization&#39;: `Bearer ${getToken()}`\n        }\n      }}\n    &gt;\n      &lt;Dashboard /&gt;\n    &lt;/CubeProvider&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"cubeprovider-configuration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">CubeProvider Configuration</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface CubeProviderConfig {\n  apiUrl: string                    // API endpoint URL\n  headers?: Record&lt;string, string&gt;  // Default headers\n  credentials?: &#39;include&#39; | &#39;same-origin&#39; | &#39;omit&#39;  // Fetch credentials\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface CubeProviderConfig {\n  apiUrl: string                    // API endpoint URL\n  headers?: Record&lt;string, string&gt;  // Default headers\n  credentials?: &#39;include&#39; | &#39;same-origin&#39; | &#39;omit&#39;  // Fetch credentials\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"custom-hooks\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Custom Hooks</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Build reusable analytics hooks for common patterns:</p><h3 id=\"department-metrics-hook\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Department Metrics Hook</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { useCubeQuery } from &#39;drizzle-cube/client&#39;\n\nfunction useDepartmentMetrics(departmentName?: string) {\n  return useCubeQuery(\n    departmentName ? {\n      measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n      dimensions: [&#39;Employees.departmentName&#39;],\n      filters: [{\n        member: &#39;Employees.departmentName&#39;,\n        operator: &#39;equals&#39;,\n        values: [departmentName]\n      }]\n    } : null  // Skip if no department selected\n  )\n}\n\n// Usage\nfunction DepartmentCard({ department }: { department: string }) {\n  const { resultSet, isLoading } = useDepartmentMetrics(department)\n  \n  if (isLoading) return &lt;div&gt;Loading {department}...&lt;/div&gt;\n  \n  const data = resultSet?.rawData()[0]\n  return (\n    &lt;div&gt;\n      &lt;h3&gt;{department}&lt;/h3&gt;\n      &lt;p&gt;Employees: {data?.[&#39;Employees.count&#39;]}&lt;/p&gt;\n      &lt;p&gt;Avg Salary: ${data?.[&#39;Employees.avgSalary&#39;]}&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { useCubeQuery } from &#39;drizzle-cube/client&#39;\n\nfunction useDepartmentMetrics(departmentName?: string) {\n  return useCubeQuery(\n    departmentName ? {\n      measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n      dimensions: [&#39;Employees.departmentName&#39;],\n      filters: [{\n        member: &#39;Employees.departmentName&#39;,\n        operator: &#39;equals&#39;,\n        values: [departmentName]\n      }]\n    } : null  // Skip if no department selected\n  )\n}\n\n// Usage\nfunction DepartmentCard({ department }: { department: string }) {\n  const { resultSet, isLoading } = useDepartmentMetrics(department)\n  \n  if (isLoading) return &lt;div&gt;Loading {department}...&lt;/div&gt;\n  \n  const data = resultSet?.rawData()[0]\n  return (\n    &lt;div&gt;\n      &lt;h3&gt;{department}&lt;/h3&gt;\n      &lt;p&gt;Employees: {data?.[&#39;Employees.count&#39;]}&lt;/p&gt;\n      &lt;p&gt;Avg Salary: ${data?.[&#39;Employees.avgSalary&#39;]}&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"time-range-hook\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Time Range Hook</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function useTimeRangeQuery(\n  baseQuery: Omit&lt;CubeQuery, &#39;timeDimensions&#39;&gt;,\n  timeDimension: string,\n  range: [string, string],\n  granularity: string = &#39;month&#39;\n) {\n  return useCubeQuery({\n    ...baseQuery,\n    timeDimensions: [{\n      dimension: timeDimension,\n      granularity,\n      dateRange: range\n    }]\n  })\n}\n\n// Usage\nfunction RevenueOverTime() {\n  const { resultSet } = useTimeRangeQuery(\n    { measures: [&#39;Orders.totalRevenue&#39;] },\n    &#39;Orders.createdAt&#39;,\n    [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;],\n    &#39;month&#39;\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function useTimeRangeQuery(\n  baseQuery: Omit&lt;CubeQuery, &#39;timeDimensions&#39;&gt;,\n  timeDimension: string,\n  range: [string, string],\n  granularity: string = &#39;month&#39;\n) {\n  return useCubeQuery({\n    ...baseQuery,\n    timeDimensions: [{\n      dimension: timeDimension,\n      granularity,\n      dateRange: range\n    }]\n  })\n}\n\n// Usage\nfunction RevenueOverTime() {\n  const { resultSet } = useTimeRangeQuery(\n    { measures: [&#39;Orders.totalRevenue&#39;] },\n    &#39;Orders.createdAt&#39;,\n    [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;],\n    &#39;month&#39;\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"comparative-analysis-hook-coming-soon\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Comparative Analysis Hook <em class=\"italic text-gray-700\">(Coming Soon)</em></h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Time-based comparison features are planned for future releases. Currently, you can implement comparative analysis by making separate queries with different date ranges.</p><h2 id=\"error-handling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Handling</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Handle different types of errors gracefully:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function RobustQuery() {\n  const { resultSet, isLoading, error } = useCubeQuery({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;]\n  })\n\n  if (error) {\n    // Handle different error types\n    if (error.message.includes(&#39;Access denied&#39;)) {\n      return &lt;div&gt;You don&#39;t have permission to view this data&lt;/div&gt;\n    }\n    \n    if (error.message.includes(&#39;Network&#39;)) {\n      return &lt;div&gt;Network error. Please try again.&lt;/div&gt;\n    }\n    \n    return &lt;div&gt;An unexpected error occurred: {error.message}&lt;/div&gt;\n  }\n\n  if (isLoading) {\n    return &lt;div className=&quot;animate-pulse&quot;&gt;Loading analytics...&lt;/div&gt;\n  }\n\n  if (!resultSet || resultSet.rawData().length === 0) {\n    return &lt;div&gt;No data available for the selected criteria&lt;/div&gt;\n  }\n\n  return &lt;div&gt;Data loaded successfully!&lt;/div&gt;\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function RobustQuery() {\n  const { resultSet, isLoading, error } = useCubeQuery({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;]\n  })\n\n  if (error) {\n    // Handle different error types\n    if (error.message.includes(&#39;Access denied&#39;)) {\n      return &lt;div&gt;You don&#39;t have permission to view this data&lt;/div&gt;\n    }\n    \n    if (error.message.includes(&#39;Network&#39;)) {\n      return &lt;div&gt;Network error. Please try again.&lt;/div&gt;\n    }\n    \n    return &lt;div&gt;An unexpected error occurred: {error.message}&lt;/div&gt;\n  }\n\n  if (isLoading) {\n    return &lt;div className=&quot;animate-pulse&quot;&gt;Loading analytics...&lt;/div&gt;\n  }\n\n  if (!resultSet || resultSet.rawData().length === 0) {\n    return &lt;div&gt;No data available for the selected criteria&lt;/div&gt;\n  }\n\n  return &lt;div&gt;Data loaded successfully!&lt;/div&gt;\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance-optimization\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Optimization</h2><h3 id=\"query-memoization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Memoization</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Prevent unnecessary re-renders with query memoization:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { useMemo } from &#39;react&#39;\n\nfunction OptimizedQuery({ filters }: { filters: Filter[] }) {\n  const query = useMemo(() =&gt; ({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;],\n    filters\n  }), [filters])  // Only re-create query when filters change\n\n  const { resultSet, isLoading } = useCubeQuery(query)\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { useMemo } from &#39;react&#39;\n\nfunction OptimizedQuery({ filters }: { filters: Filter[] }) {\n  const query = useMemo(() =&gt; ({\n    measures: [&#39;Employees.count&#39;],\n    dimensions: [&#39;Employees.departmentName&#39;],\n    filters\n  }), [filters])  // Only re-create query when filters change\n\n  const { resultSet, isLoading } = useCubeQuery(query)\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"conditional-queries\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Conditional Queries</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Skip expensive queries when not needed:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">function ConditionalDashboard({ activeTab }: { activeTab: string }) {\n  const employeeQuery = useCubeQuery(\n    { measures: [&#39;Employees.count&#39;] },\n    { skip: activeTab !== &#39;employees&#39; }  // Only query when tab is active\n  )\n\n  const revenueQuery = useCubeQuery(\n    { measures: [&#39;Orders.totalRevenue&#39;] },\n    { skip: activeTab !== &#39;revenue&#39; }\n  )\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"function ConditionalDashboard({ activeTab }: { activeTab: string }) {\n  const employeeQuery = useCubeQuery(\n    { measures: [&#39;Employees.count&#39;] },\n    { skip: activeTab !== &#39;employees&#39; }  // Only query when tab is active\n  )\n\n  const revenueQuery = useCubeQuery(\n    { measures: [&#39;Orders.totalRevenue&#39;] },\n    { skip: activeTab !== &#39;revenue&#39; }\n  )\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"result-set-caching\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Result Set Caching</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Leverage browser caching for repeated queries:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// The underlying CubeClient automatically caches results\n// Cache keys are based on query content and security context\nconst { resultSet } = useCubeQuery({\n  measures: [&#39;Employees.count&#39;]  // Cached if queried before\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// The underlying CubeClient automatically caches results\n// Cache keys are based on query content and security context\nconst { resultSet } = useCubeQuery({\n  measures: [&#39;Employees.count&#39;]  // Cached if queried before\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"testing-hooks\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Hooks</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Test analytics components with mock data:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { renderHook, waitFor } from &#39;@testing-library/react&#39;\nimport { CubeProvider } from &#39;drizzle-cube/client&#39;\nimport { useCubeQuery } from &#39;drizzle-cube/client&#39;\n\n// Mock CubeProvider for testing\nconst TestCubeProvider = ({ children }: { children: React.ReactNode }) =&gt; (\n  &lt;CubeProvider config={{ apiUrl: &#39;http://localhost:4000/cubejs-api/v1&#39; }}&gt;\n    {children}\n  &lt;/CubeProvider&gt;\n)\n\ntest(&#39;useCubeQuery returns data&#39;, async () =&gt; {\n  const { result } = renderHook(\n    () =&gt; useCubeQuery({\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    }),\n    { wrapper: TestCubeProvider }\n  )\n\n  expect(result.current.isLoading).toBe(true)\n\n  await waitFor(() =&gt; {\n    expect(result.current.isLoading).toBe(false)\n  })\n\n  expect(result.current.resultSet).toBeTruthy()\n  expect(result.current.error).toBeNull()\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { renderHook, waitFor } from &#39;@testing-library/react&#39;\nimport { CubeProvider } from &#39;drizzle-cube/client&#39;\nimport { useCubeQuery } from &#39;drizzle-cube/client&#39;\n\n// Mock CubeProvider for testing\nconst TestCubeProvider = ({ children }: { children: React.ReactNode }) =&gt; (\n  &lt;CubeProvider config={{ apiUrl: &#39;http://localhost:4000/cubejs-api/v1&#39; }}&gt;\n    {children}\n  &lt;/CubeProvider&gt;\n)\n\ntest(&#39;useCubeQuery returns data&#39;, async () =&gt; {\n  const { result } = renderHook(\n    () =&gt; useCubeQuery({\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    }),\n    { wrapper: TestCubeProvider }\n  )\n\n  expect(result.current.isLoading).toBe(true)\n\n  await waitFor(() =&gt; {\n    expect(result.current.isLoading).toBe(false)\n  })\n\n  expect(result.current.resultSet).toBeTruthy()\n  expect(result.current.error).toBeNull()\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Query Memoization</strong>: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">useMemo</code> for complex query objects</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Error Handling</strong>: Always handle loading states and errors</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Conditional Queries</strong>: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">skip</code> option to avoid unnecessary requests</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Custom Hooks</strong>: Create reusable hooks for common query patterns</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type Safety</strong>: Leverage TypeScript for query and result type safety</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Performance</strong>: Limit large result sets with filters and pagination</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security</strong>: Never bypass security context in queries</li></ol><h2 id=\"common-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Patterns</h2><h3 id=\"basic-data-fetching\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Data Fetching</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const { resultSet, isLoading, error } = useCubeQuery({\n  measures: [&#39;Table.count&#39;],\n  dimensions: [&#39;Table.category&#39;]\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const { resultSet, isLoading, error } = useCubeQuery({\n  measures: [&#39;Table.count&#39;],\n  dimensions: [&#39;Table.category&#39;]\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"time-series-analysis\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Time Series Analysis</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const { resultSet } = useCubeQuery({\n  measures: [&#39;Orders.totalRevenue&#39;],\n  timeDimensions: [{\n    dimension: &#39;Orders.createdAt&#39;,\n    granularity: &#39;month&#39;,\n    dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n  }]\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const { resultSet } = useCubeQuery({\n  measures: [&#39;Orders.totalRevenue&#39;],\n  timeDimensions: [{\n    dimension: &#39;Orders.createdAt&#39;,\n    granularity: &#39;month&#39;,\n    dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n  }]\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"filtered-query\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Filtered Query</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const { resultSet } = useCubeQuery({\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.department&#39;],\n  filters: [{\n    member: &#39;Employees.isActive&#39;,\n    operator: &#39;equals&#39;,\n    values: [true]\n  }]\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const { resultSet } = useCubeQuery({\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.department&#39;],\n  filters: [{\n    member: &#39;Employees.isActive&#39;,\n    operator: &#39;equals&#39;,\n    values: [true]\n  }]\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"conditional-execution\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Conditional Execution</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const { resultSet } = useCubeQuery(\n  selectedDepartment ? {\n    measures: [&#39;Employees.count&#39;],\n    filters: [{\n      member: &#39;Employees.departmentName&#39;,\n      operator: &#39;equals&#39;,\n      values: [selectedDepartment]\n    }]\n  } : null\n)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const { resultSet } = useCubeQuery(\n  selectedDepartment ? {\n    measures: [&#39;Employees.count&#39;],\n    filters: [{\n      member: &#39;Employees.departmentName&#39;,\n      operator: &#39;equals&#39;,\n      values: [selectedDepartment]\n    }]\n  } : null\n)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"client/charts\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Charts</a> for data visualization</li><li class=\"leading-relaxed\">Explore <a href=\"#\" data-help-link=\"client/dashboards\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Dashboards</a> for layout management</li><li class=\"leading-relaxed\">Review <a href=\"#\" data-help-link=\"client\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >React Client</a> overview</li><li class=\"leading-relaxed\">Check out hook examples in the repository</li></ul><h2 id=\"future-features-planned-for-upcoming-releases\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Future Features <em class=\"italic text-gray-700\">(Planned for Upcoming Releases)</em></h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The following hooks and features are planned for future versions of Drizzle Cube:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Query builder hook</strong> with visual interface</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Real-time data hooks</strong> with WebSocket support</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Advanced caching strategies</strong> and invalidation</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Query performance monitoring</strong> and optimization hooks</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Offline-capable hooks</strong> with local storage</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Hook composition utilities</strong> for complex analytics patterns</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">These features are not currently available but are on our development roadmap.</p>","path":"client/hooks.md"},
  'getting-started': {"slug":"getting-started","title":"Getting Started with Drizzle Cube","content":"<h1 id=\"getting-started-with-drizzle-cube\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Getting Started with Drizzle Cube</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube is a <strong class=\"font-semibold text-slate-700\">Drizzle ORM-first semantic layer</strong> with <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> compatibility. It provides type-safe analytics and dashboards with SQL injection protection by leveraging Drizzle ORM as its core SQL building engine.</p><h2 id=\"what-is-drizzle-cube\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">What is Drizzle Cube?</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube bridges the gap between your database and your analytics applications by providing:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type-safe semantic layer</strong> - Define cubes, dimensions, and measures with full TypeScript support</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">SQL injection protection</strong> - All queries use Drizzle&#39;s parameterized query system</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\"><a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> compatibility</strong> - Drop-in replacement for existing <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> implementations</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Multi-database support</strong> - Supports PostgreSQL (including Neon) and MySQL, with SQLite coming soon</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">React components</strong> - Pre-built dashboard and chart components</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Framework agnostic</strong> - Use with any web framework via adapters</li></ul><h2 id=\"core-concepts\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Core Concepts</h2><h3 id=\"semantic-layer\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Semantic Layer</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The <strong class=\"font-semibold text-slate-700\">semantic layer</strong> is a business-friendly abstraction over your database that sits between your raw data and your analytics applications. Instead of writing raw SQL queries throughout your application, you define <strong class=\"font-semibold text-slate-700\">cubes</strong> that encapsulate your business logic and provide:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Consistent metrics</strong> - Define calculations once, use everywhere</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security by default</strong> - Multi-tenant isolation and access control</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Business terminology</strong> - Use familiar names instead of database columns</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type safety</strong> - Full TypeScript support prevents runtime errors</li></ul><h3 id=\"cubes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Cubes</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Cubes</strong> are the building blocks of your semantic layer. Each cube represents a business entity (like Sales, Users, Products) with:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dimensions</strong> - Attributes you can filter and group by (like product category, customer name)</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Measures</strong> - Numeric values you want to analyze (like total revenue, order count)</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security context</strong> - Automatic multi-tenant isolation</li></ul><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.sales)\n      .where(eq(schema.sales.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    productName: { sql: schema.sales.productName, type: &#39;string&#39; },\n    orderDate: { sql: schema.sales.orderDate, type: &#39;time&#39; }\n  },\n  \n  measures: {\n    totalSales: { sql: schema.sales.amount, type: &#39;sum&#39; },\n    orderCount: { sql: schema.sales.id, type: &#39;count&#39; }\n  }\n});</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.sales)\n      .where(eq(schema.sales.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    productName: { sql: schema.sales.productName, type: &#39;string&#39; },\n    orderDate: { sql: schema.sales.orderDate, type: &#39;time&#39; }\n  },\n  \n  measures: {\n    totalSales: { sql: schema.sales.amount, type: &#39;sum&#39; },\n    orderCount: { sql: schema.sales.id, type: &#39;count&#39; }\n  }\n});\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"query-structure\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Structure</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">When you query cubes, you specify what you want to analyze:</p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;measures&quot;: [&quot;Sales.totalSales&quot;, &quot;Sales.orderCount&quot;],\n  &quot;dimensions&quot;: [&quot;Sales.productName&quot;], \n  &quot;timeDimensions&quot;: [{\n    &quot;dimension&quot;: &quot;Sales.orderDate&quot;,\n    &quot;granularity&quot;: &quot;month&quot;\n  }],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Sales.productName&quot;,\n    &quot;operator&quot;: &quot;equals&quot;, \n    &quot;values&quot;: [&quot;Electronics&quot;]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;measures&quot;: [&quot;Sales.totalSales&quot;, &quot;Sales.orderCount&quot;],\n  &quot;dimensions&quot;: [&quot;Sales.productName&quot;], \n  &quot;timeDimensions&quot;: [{\n    &quot;dimension&quot;: &quot;Sales.orderDate&quot;,\n    &quot;granularity&quot;: &quot;month&quot;\n  }],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Sales.productName&quot;,\n    &quot;operator&quot;: &quot;equals&quot;, \n    &quot;values&quot;: [&quot;Electronics&quot;]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"architecture\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Architecture</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube follows a <strong class=\"font-semibold text-slate-700\">Drizzle-first architecture</strong>:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Database Schema</strong> - Define your database structure using Drizzle ORM</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Semantic Layer</strong> - Create cubes that reference your schema</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Query Execution</strong> - Drizzle generates type-safe, parameterized SQL</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Framework Integration</strong> - Use adapters to integrate with your web framework</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Client Components</strong> - Render data using React components</li></ol><h2 id=\"security-model\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Security Model</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Security is built into every layer:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">SQL Injection Protection</strong> - Drizzle&#39;s parameterized queries prevent SQL injection</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Multi-tenant Security</strong> - Every cube should filter by security context</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type Safety</strong> - TypeScript prevents runtime errors and data inconsistencies</li></ul><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Ready to get started? Here&#39;s what to do next:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/installation\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Installation</strong></a> - Install Drizzle Cube in your project</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/quick-start\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Quick Start</strong></a> - Build your first semantic layer</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/scaling\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Scaling Your SaaS</strong></a> - Learn how Drizzle Cube grows with your business</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Semantic Layer</strong></a> - Deep dive into cubes, dimensions, and measures</li></ol><h2 id=\"example-applications\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Example Applications</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Check out these example implementations:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Basic Example</strong> - Simple analytics dashboard</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\"><a href=\"https://github.com/cliftonc/drizzle-cube/tree/main/examples/hono\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Hono Example</a></strong> - Full-featured application with Cloudflare Workers</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Multi-tenant Example</strong> - Enterprise-ready multi-tenant setup</li></ul><h2 id=\"community-and-support\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Community and Support</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">GitHub Repository</strong> - <a href=\"https://github.com/cliftonc/drizzle-cube\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">github.com/cliftonc/drizzle-cube</a></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Issues and Bug Reports</strong> - <a href=\"https://github.com/cliftonc/drizzle-cube/issues\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Issues</a></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Discussions</strong> - <a href=\"https://github.com/cliftonc/drizzle-cube/discussions\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Discussions</a></li></ul>","path":"getting-started/index.md"},
  'getting-started/installation': {"slug":"getting-started/installation","title":"Installation","content":"<h1 id=\"installation\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Installation</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Get Drizzle Cube up and running in your project in just a few steps.</p><h2 id=\"requirements\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Requirements</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Before installing Drizzle Cube, make sure you have:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Node.js</strong> 18 or higher</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">TypeScript</strong> 5.0 or higher  </li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Drizzle ORM</strong> 0.44.4 or higher</li><li class=\"leading-relaxed\">A PostgreSQL or MySQL database (SQLite support coming soon)</li></ul><h2 id=\"package-installation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Package Installation</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Install Drizzle Cube using your preferred package manager:</p><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\"># npm\nnpm install drizzle-cube drizzle-orm\n\n# yarn\nyarn add drizzle-cube drizzle-orm\n\n# pnpm\npnpm add drizzle-cube drizzle-orm</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"# npm\nnpm install drizzle-cube drizzle-orm\n\n# yarn\nyarn add drizzle-cube drizzle-orm\n\n# pnpm\npnpm add drizzle-cube drizzle-orm\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"database-setup\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Database Setup</h2><h3 id=\"postgresql\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">PostgreSQL</h3><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install postgres\n# or for Neon serverless\nnpm install @neondatabase/serverless</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install postgres\n# or for Neon serverless\nnpm install @neondatabase/serverless\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"mysql\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">MySQL</h3><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install mysql2</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install mysql2\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"sqlite\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">SQLite</h3><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install better-sqlite3</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install better-sqlite3\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"framework-adapters\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Framework Adapters</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Choose the adapter for your web framework:</p><h3 id=\"expressjs\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Express.js</h3><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install express cors</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install express cors\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">📖 <a href=\"#\" data-help-link=\"adapters/express\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Express Adapter Documentation</strong></a> - Full setup guide with middleware integration</p><h3 id=\"fastify\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Fastify</h3><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install fastify @fastify/cors</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install fastify @fastify/cors\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">📖 <a href=\"#\" data-help-link=\"adapters/fastify\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Fastify Adapter Documentation</strong></a> - High-performance plugin integration</p><h3 id=\"hono-recommended\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Hono (Recommended)</h3><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install hono</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install hono\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">📖 <a href=\"#\" data-help-link=\"adapters/hono\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Hono Adapter Documentation</strong></a> - Modern edge-runtime compatible adapter</p><h3 id=\"nextjs\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Next.js</h3><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install next</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install next\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">📖 <a href=\"#\" data-help-link=\"adapters/nextjs\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Next.js Adapter Documentation</strong></a> - App Router integration with server components</p><h3 id=\"custom-framework\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Framework</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">You can create custom adapters for other frameworks. </p><p class=\"mb-4 text-gray-600 leading-relaxed\">📖 <a href=\"#\" data-help-link=\"adapters/custom\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Custom Adapters Guide</strong></a> - Build your own adapter for any framework</p><h2 id=\"react-components-optional\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">React Components (Optional)</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">For dashboard and chart components:</p><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npm install react react-dom recharts react-grid-layout</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npm install react react-dom recharts react-grid-layout\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"typescript-configuration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">TypeScript Configuration</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Update your <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">tsconfig.json</code> to include proper module resolution:</p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;ES2022&quot;,\n    &quot;lib&quot;: [&quot;ES2023&quot;, &quot;DOM&quot;, &quot;DOM.Iterable&quot;],\n    &quot;module&quot;: &quot;ESNext&quot;,\n    &quot;moduleResolution&quot;: &quot;bundler&quot;,\n    &quot;allowImportingTsExtensions&quot;: true,\n    &quot;resolveJsonModule&quot;: true,\n    &quot;isolatedModules&quot;: true,\n    &quot;jsx&quot;: &quot;react-jsx&quot;,\n    &quot;strict&quot;: true,\n    &quot;baseUrl&quot;: &quot;.&quot;,\n    &quot;paths&quot;: {\n      &quot;@/*&quot;: [&quot;./src/*&quot;]\n    }\n  },\n  &quot;include&quot;: [&quot;src/**/*.ts&quot;, &quot;src/**/*.tsx&quot;]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;ES2022&quot;,\n    &quot;lib&quot;: [&quot;ES2023&quot;, &quot;DOM&quot;, &quot;DOM.Iterable&quot;],\n    &quot;module&quot;: &quot;ESNext&quot;,\n    &quot;moduleResolution&quot;: &quot;bundler&quot;,\n    &quot;allowImportingTsExtensions&quot;: true,\n    &quot;resolveJsonModule&quot;: true,\n    &quot;isolatedModules&quot;: true,\n    &quot;jsx&quot;: &quot;react-jsx&quot;,\n    &quot;strict&quot;: true,\n    &quot;baseUrl&quot;: &quot;.&quot;,\n    &quot;paths&quot;: {\n      &quot;@/*&quot;: [&quot;./src/*&quot;]\n    }\n  },\n  &quot;include&quot;: [&quot;src/**/*.ts&quot;, &quot;src/**/*.tsx&quot;]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"project-structure\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Project Structure</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Here&#39;s the recommended project structure:</p><div class=\"relative group\">\n    <pre class=\"language-text rounded-lg overflow-x-auto mb-4\"><code class=\"language-text\">your-project/\n├── src/\n│   ├── schema.ts              # Drizzle schema definition\n│   ├── cubes.ts               # Semantic layer cubes\n│   ├── server.ts              # Server setup with adapter\n│   └── client/                # React components (optional)\n│       ├── components/\n│       └── pages/\n├── drizzle.config.ts          # Drizzle configuration\n├── package.json\n└── tsconfig.json</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"your-project/\n├── src/\n│   ├── schema.ts              # Drizzle schema definition\n│   ├── cubes.ts               # Semantic layer cubes\n│   ├── server.ts              # Server setup with adapter\n│   └── client/                # React components (optional)\n│       ├── components/\n│       └── pages/\n├── drizzle.config.ts          # Drizzle configuration\n├── package.json\n└── tsconfig.json\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"environment-variables\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Environment Variables</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Create a <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">.env</code> file with your database connection details:</p><div class=\"relative group\">\n    <pre class=\"language-env rounded-lg overflow-x-auto mb-4\"><code class=\"language-env\"># PostgreSQL\nDATABASE_URL=&quot;postgresql://user:password@localhost:5432/mydb&quot;\n\n# Neon PostgreSQL  \nDATABASE_URL=&quot;postgresql://user:password@ep-example-123456.us-east-1.aws.neon.tech/dbname&quot;\n\n# MySQL (now supported)\nDATABASE_URL=&quot;mysql://user:password@localhost:3306/mydb&quot;\n\n# SQLite (coming soon)  \n# DATABASE_URL=&quot;file:./dev.db&quot;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"# PostgreSQL\nDATABASE_URL=&quot;postgresql://user:password@localhost:5432/mydb&quot;\n\n# Neon PostgreSQL  \nDATABASE_URL=&quot;postgresql://user:password@ep-example-123456.us-east-1.aws.neon.tech/dbname&quot;\n\n# MySQL (now supported)\nDATABASE_URL=&quot;mysql://user:password@localhost:3306/mydb&quot;\n\n# SQLite (coming soon)  \n# DATABASE_URL=&quot;file:./dev.db&quot;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"verification\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Verification</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Create a simple test file to verify your installation:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// test.ts\nimport { createDatabaseExecutor } from &#39;drizzle-cube/server&#39;;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;;\nimport postgres from &#39;postgres&#39;;\n\nconst client = postgres(process.env.DATABASE_URL!);\nconst db = drizzle(client);\n\nconst executor = createDatabaseExecutor(db, {}, &#39;postgres&#39;);\nconsole.log(&#39;✅ Drizzle Cube installed successfully!&#39;);</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// test.ts\nimport { createDatabaseExecutor } from &#39;drizzle-cube/server&#39;;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;;\nimport postgres from &#39;postgres&#39;;\n\nconst client = postgres(process.env.DATABASE_URL!);\nconst db = drizzle(client);\n\nconst executor = createDatabaseExecutor(db, {}, &#39;postgres&#39;);\nconsole.log(&#39;✅ Drizzle Cube installed successfully!&#39;);\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">Run the test:</p><div class=\"relative group\">\n    <pre class=\"language-bash rounded-lg overflow-x-auto mb-4\"><code class=\"language-bash\">npx tsx test.ts</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"npx tsx test.ts\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Now that Drizzle Cube is installed, you can:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/quick-start\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Set up your first cube</strong></a> - Build your first semantic layer</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Learn core concepts</strong></a> - Understand cubes, dimensions, and measures</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Choose your adapter</strong>:<ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"adapters/express\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Express.js</strong></a> - Most popular Node.js framework</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"adapters/fastify\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Fastify</strong></a> - High-performance alternative</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"adapters/hono\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Hono</strong></a> - Modern edge-compatible framework</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"adapters/nextjs\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Next.js</strong></a> - React full-stack framework</li></ul></li></ol><h2 id=\"troubleshooting\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Troubleshooting</h2><h3 id=\"common-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Common Issues</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Module not found errors</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Ensure you&#39;re using TypeScript 5.0+ and have proper module resolution configured</li><li class=\"leading-relaxed\">Check that all peer dependencies are installed</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Database connection issues</strong>  </p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Verify your DATABASE_URL is correct</li><li class=\"leading-relaxed\">Make sure your database server is running</li><li class=\"leading-relaxed\">Check firewall and network settings</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">TypeScript compilation errors</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Update to the latest version of TypeScript</li><li class=\"leading-relaxed\">Ensure your tsconfig.json includes the proper compiler options</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">Need more help? Check our <a href=\"#\" data-help-link=\"advanced/troubleshooting\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Troubleshooting Guide</a> or <a href=\"https://github.com/cliftonc/drizzle-cube/issues\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">report an issue</a>.</p>","path":"getting-started/installation.md"},
  'getting-started/quick-start': {"slug":"getting-started/quick-start","title":"Quick Start","content":"<h1 id=\"quick-start\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Quick Start</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Build your first semantic layer with Drizzle Cube in under 10 minutes.</p><h2 id=\"step-1-database-schema\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 1: Database Schema</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">First, define your database schema using Drizzle ORM:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// src/schema.ts\nimport { pgTable, serial, text, timestamp, decimal, integer } from &#39;drizzle-orm/pg-core&#39;;\n\nexport const organisations = pgTable(&#39;organisations&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  name: text(&#39;name&#39;).notNull(),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow(),\n});\n\nexport const products = pgTable(&#39;products&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  organisationId: integer(&#39;organisation_id&#39;).references(() =&gt; organisations.id),\n  name: text(&#39;name&#39;).notNull(),\n  category: text(&#39;category&#39;).notNull(),\n  price: decimal(&#39;price&#39;, { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow(),\n});\n\nexport const sales = pgTable(&#39;sales&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  organisationId: integer(&#39;organisation_id&#39;).references(() =&gt; organisations.id),\n  productId: integer(&#39;product_id&#39;).references(() =&gt; products.id),\n  quantity: integer(&#39;quantity&#39;).notNull(),\n  amount: decimal(&#39;amount&#39;, { precision: 10, scale: 2 }).notNull(),\n  orderDate: timestamp(&#39;order_date&#39;).defaultNow(),\n  customerName: text(&#39;customer_name&#39;),\n});</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// src/schema.ts\nimport { pgTable, serial, text, timestamp, decimal, integer } from &#39;drizzle-orm/pg-core&#39;;\n\nexport const organisations = pgTable(&#39;organisations&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  name: text(&#39;name&#39;).notNull(),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow(),\n});\n\nexport const products = pgTable(&#39;products&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  organisationId: integer(&#39;organisation_id&#39;).references(() =&gt; organisations.id),\n  name: text(&#39;name&#39;).notNull(),\n  category: text(&#39;category&#39;).notNull(),\n  price: decimal(&#39;price&#39;, { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow(),\n});\n\nexport const sales = pgTable(&#39;sales&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  organisationId: integer(&#39;organisation_id&#39;).references(() =&gt; organisations.id),\n  productId: integer(&#39;product_id&#39;).references(() =&gt; products.id),\n  quantity: integer(&#39;quantity&#39;).notNull(),\n  amount: decimal(&#39;amount&#39;, { precision: 10, scale: 2 }).notNull(),\n  orderDate: timestamp(&#39;order_date&#39;).defaultNow(),\n  customerName: text(&#39;customer_name&#39;),\n});\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"step-2-define-cubes\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 2: Define Cubes</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Create your semantic layer by defining cubes:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// src/cubes.ts\nimport { defineCube } from &#39;drizzle-cube/server&#39;;\nimport { eq } from &#39;drizzle-orm&#39;;\nimport * as schema from &#39;./schema&#39;;\n\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.sales)\n      .innerJoin(schema.products, eq(schema.sales.productId, schema.products.id))\n      .where(eq(schema.sales.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    customerName: { \n      sql: schema.sales.customerName, \n      type: &#39;string&#39; \n    },\n    productName: { \n      sql: schema.products.name, \n      type: &#39;string&#39; \n    },\n    productCategory: { \n      sql: schema.products.category, \n      type: &#39;string&#39; \n    },\n    orderDate: { \n      sql: schema.sales.orderDate, \n      type: &#39;time&#39; \n    },\n  },\n  \n  measures: {\n    totalSales: { \n      sql: schema.sales.amount, \n      type: &#39;sum&#39;,\n      title: &#39;Total Sales&#39;\n    },\n    orderCount: { \n      sql: schema.sales.id, \n      type: &#39;count&#39;,\n      title: &#39;Number of Orders&#39;\n    },\n    averageOrderValue: { \n      sql: schema.sales.amount, \n      type: &#39;avg&#39;,\n      title: &#39;Average Order Value&#39;\n    },\n    totalQuantity: { \n      sql: schema.sales.quantity, \n      type: &#39;sum&#39;,\n      title: &#39;Total Quantity Sold&#39;\n    },\n  }\n});\n\nexport const productsCube = defineCube(schema, {\n  name: &#39;Products&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.products)\n      .where(eq(schema.products.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    name: { \n      sql: schema.products.name, \n      type: &#39;string&#39; \n    },\n    category: { \n      sql: schema.products.category, \n      type: &#39;string&#39; \n    },\n    createdAt: { \n      sql: schema.products.createdAt, \n      type: &#39;time&#39; \n    },\n  },\n  \n  measures: {\n    count: { \n      sql: schema.products.id, \n      type: &#39;count&#39;,\n      title: &#39;Product Count&#39;\n    },\n    averagePrice: { \n      sql: schema.products.price, \n      type: &#39;avg&#39;,\n      title: &#39;Average Price&#39;\n    },\n  }\n});</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// src/cubes.ts\nimport { defineCube } from &#39;drizzle-cube/server&#39;;\nimport { eq } from &#39;drizzle-orm&#39;;\nimport * as schema from &#39;./schema&#39;;\n\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.sales)\n      .innerJoin(schema.products, eq(schema.sales.productId, schema.products.id))\n      .where(eq(schema.sales.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    customerName: { \n      sql: schema.sales.customerName, \n      type: &#39;string&#39; \n    },\n    productName: { \n      sql: schema.products.name, \n      type: &#39;string&#39; \n    },\n    productCategory: { \n      sql: schema.products.category, \n      type: &#39;string&#39; \n    },\n    orderDate: { \n      sql: schema.sales.orderDate, \n      type: &#39;time&#39; \n    },\n  },\n  \n  measures: {\n    totalSales: { \n      sql: schema.sales.amount, \n      type: &#39;sum&#39;,\n      title: &#39;Total Sales&#39;\n    },\n    orderCount: { \n      sql: schema.sales.id, \n      type: &#39;count&#39;,\n      title: &#39;Number of Orders&#39;\n    },\n    averageOrderValue: { \n      sql: schema.sales.amount, \n      type: &#39;avg&#39;,\n      title: &#39;Average Order Value&#39;\n    },\n    totalQuantity: { \n      sql: schema.sales.quantity, \n      type: &#39;sum&#39;,\n      title: &#39;Total Quantity Sold&#39;\n    },\n  }\n});\n\nexport const productsCube = defineCube(schema, {\n  name: &#39;Products&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.products)\n      .where(eq(schema.products.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    name: { \n      sql: schema.products.name, \n      type: &#39;string&#39; \n    },\n    category: { \n      sql: schema.products.category, \n      type: &#39;string&#39; \n    },\n    createdAt: { \n      sql: schema.products.createdAt, \n      type: &#39;time&#39; \n    },\n  },\n  \n  measures: {\n    count: { \n      sql: schema.products.id, \n      type: &#39;count&#39;,\n      title: &#39;Product Count&#39;\n    },\n    averagePrice: { \n      sql: schema.products.price, \n      type: &#39;avg&#39;,\n      title: &#39;Average Price&#39;\n    },\n  }\n});\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"step-3-server-setup\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 3: Server Setup</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Set up your server with the Hono adapter:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// src/server.ts\nimport { Hono } from &#39;hono&#39;;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;;\nimport postgres from &#39;postgres&#39;;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;;\nimport { SemanticLayerCompiler, createDatabaseExecutor } from &#39;drizzle-cube/server&#39;;\nimport * as schema from &#39;./schema&#39;;\nimport { salesCube, productsCube } from &#39;./cubes&#39;;\n\n// Database connection\nconst client = postgres(process.env.DATABASE_URL!);\nconst db = drizzle(client, { schema });\n\n// Create semantic layer\nconst databaseExecutor = createDatabaseExecutor(db, schema, &#39;postgres&#39;);\nconst semanticLayer = new SemanticLayerCompiler({ \n  databaseExecutor \n});\n\n// Register cubes\nsemanticLayer.registerCube(salesCube);\nsemanticLayer.registerCube(productsCube);\n\n// Create Hono app\nconst app = new Hono();\n\n// Add authentication middleware (example)\napp.use(&#39;/api/cube/*&#39;, async (c, next) =&gt; {\n  // In a real app, validate JWT token, session, etc.\n  const orgId = c.req.header(&#39;X-Organisation-ID&#39;);\n  if (!orgId) {\n    return c.json({ error: &#39;Organisation ID required&#39; }, 401);\n  }\n  c.set(&#39;organisationId&#39;, parseInt(orgId));\n  await next();\n});\n\n// Mount Cube API\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; ({\n    organisationId: c.get(&#39;organisationId&#39;)\n  })\n});\n\napp.route(&#39;/api/cube&#39;, cubeApp);\n\nexport default app;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// src/server.ts\nimport { Hono } from &#39;hono&#39;;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;;\nimport postgres from &#39;postgres&#39;;\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;;\nimport { SemanticLayerCompiler, createDatabaseExecutor } from &#39;drizzle-cube/server&#39;;\nimport * as schema from &#39;./schema&#39;;\nimport { salesCube, productsCube } from &#39;./cubes&#39;;\n\n// Database connection\nconst client = postgres(process.env.DATABASE_URL!);\nconst db = drizzle(client, { schema });\n\n// Create semantic layer\nconst databaseExecutor = createDatabaseExecutor(db, schema, &#39;postgres&#39;);\nconst semanticLayer = new SemanticLayerCompiler({ \n  databaseExecutor \n});\n\n// Register cubes\nsemanticLayer.registerCube(salesCube);\nsemanticLayer.registerCube(productsCube);\n\n// Create Hono app\nconst app = new Hono();\n\n// Add authentication middleware (example)\napp.use(&#39;/api/cube/*&#39;, async (c, next) =&gt; {\n  // In a real app, validate JWT token, session, etc.\n  const orgId = c.req.header(&#39;X-Organisation-ID&#39;);\n  if (!orgId) {\n    return c.json({ error: &#39;Organisation ID required&#39; }, 401);\n  }\n  c.set(&#39;organisationId&#39;, parseInt(orgId));\n  await next();\n});\n\n// Mount Cube API\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; ({\n    organisationId: c.get(&#39;organisationId&#39;)\n  })\n});\n\napp.route(&#39;/api/cube&#39;, cubeApp);\n\nexport default app;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"step-4-query-your-data\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 4: Query Your Data</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Now you can query your semantic layer:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Query example\nconst query = {\n  measures: [&#39;Sales.totalSales&#39;, &#39;Sales.orderCount&#39;],\n  dimensions: [&#39;Sales.productCategory&#39;],\n  timeDimensions: [{\n    dimension: &#39;Sales.orderDate&#39;,\n    granularity: &#39;month&#39;\n  }],\n  filters: [{\n    member: &#39;Sales.orderDate&#39;,\n    operator: &#39;inDateRange&#39;,\n    values: [&#39;2024-01-01&#39;, &#39;2024-12-31&#39;]\n  }]\n};\n\n// Make request to your API\nconst queryParam = encodeURIComponent(JSON.stringify(query));\nconst response = await fetch(`/api/cube/load?query=${queryParam}`, {\n  method: &#39;GET&#39;,\n  headers: {\n    &#39;X-Organisation-ID&#39;: &#39;1&#39;\n  }\n});\n\nconst data = await response.json();\nconsole.log(data);\n\n// The response now follows the official Cube.js format:\n// {\n//   &quot;queryType&quot;: &quot;regularQuery&quot;,\n//   &quot;results&quot;: [{\n//     &quot;query&quot;: { ... },\n//     &quot;data&quot;: [ ... ],\n//     &quot;annotation&quot;: { ... },\n//     &quot;requestId&quot;: &quot;...&quot;,\n//     &quot;lastRefreshTime&quot;: &quot;...&quot;\n//   }],\n//   &quot;pivotQuery&quot;: { ... },\n//   &quot;slowQuery&quot;: false\n// }</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Query example\nconst query = {\n  measures: [&#39;Sales.totalSales&#39;, &#39;Sales.orderCount&#39;],\n  dimensions: [&#39;Sales.productCategory&#39;],\n  timeDimensions: [{\n    dimension: &#39;Sales.orderDate&#39;,\n    granularity: &#39;month&#39;\n  }],\n  filters: [{\n    member: &#39;Sales.orderDate&#39;,\n    operator: &#39;inDateRange&#39;,\n    values: [&#39;2024-01-01&#39;, &#39;2024-12-31&#39;]\n  }]\n};\n\n// Make request to your API\nconst queryParam = encodeURIComponent(JSON.stringify(query));\nconst response = await fetch(`/api/cube/load?query=${queryParam}`, {\n  method: &#39;GET&#39;,\n  headers: {\n    &#39;X-Organisation-ID&#39;: &#39;1&#39;\n  }\n});\n\nconst data = await response.json();\nconsole.log(data);\n\n// The response now follows the official Cube.js format:\n// {\n//   &quot;queryType&quot;: &quot;regularQuery&quot;,\n//   &quot;results&quot;: [{\n//     &quot;query&quot;: { ... },\n//     &quot;data&quot;: [ ... ],\n//     &quot;annotation&quot;: { ... },\n//     &quot;requestId&quot;: &quot;...&quot;,\n//     &quot;lastRefreshTime&quot;: &quot;...&quot;\n//   }],\n//   &quot;pivotQuery&quot;: { ... },\n//   &quot;slowQuery&quot;: false\n// }\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"step-5-react-dashboard-optional\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 5: React Dashboard (Optional)</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Add a React dashboard with persistent configurations stored in your database:</p><h3 id=\"add-dashboard-schema\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Add Dashboard Schema</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">First, add a dashboard table to your schema:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// src/schema.ts (add to existing schema)\nexport const dashboards = pgTable(&#39;dashboards&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  organisationId: integer(&#39;organisation_id&#39;).references(() =&gt; organisations.id),\n  name: text(&#39;name&#39;).notNull(),\n  description: text(&#39;description&#39;),\n  layout: text(&#39;layout&#39;), // JSON string of dashboard configuration\n  isDefault: boolean(&#39;is_default&#39;).default(false),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow(),\n  updatedAt: timestamp(&#39;updated_at&#39;).defaultNow(),\n});</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// src/schema.ts (add to existing schema)\nexport const dashboards = pgTable(&#39;dashboards&#39;, {\n  id: serial(&#39;id&#39;).primaryKey(),\n  organisationId: integer(&#39;organisation_id&#39;).references(() =&gt; organisations.id),\n  name: text(&#39;name&#39;).notNull(),\n  description: text(&#39;description&#39;),\n  layout: text(&#39;layout&#39;), // JSON string of dashboard configuration\n  isDefault: boolean(&#39;is_default&#39;).default(false),\n  createdAt: timestamp(&#39;created_at&#39;).defaultNow(),\n  updatedAt: timestamp(&#39;updated_at&#39;).defaultNow(),\n});\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"create-dashboard-component-with-persistence\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Create Dashboard Component with Persistence</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// src/Dashboard.tsx\nimport React, { useState, useEffect } from &#39;react&#39;;\nimport { CubeProvider } from &#39;drizzle-cube/client&#39;;\nimport { AnalyticsDashboard } from &#39;drizzle-cube/client&#39;;\n\ninterface DashboardLayout {\n  id: string;\n  title: string;\n  chartType: string;\n  query: any;\n  w?: number;\n  h?: number;\n  x?: number;\n  y?: number;\n}\n\nconst Dashboard: React.FC = () =&gt; {\n  const [dashboardLayout, setDashboardLayout] = useState&lt;DashboardLayout[]&gt;([]);\n  const [loading, setLoading] = useState(true);\n  const [dashboardId, setDashboardId] = useState&lt;number | null&gt;(null);\n\n  const cubeApi = {\n    url: &#39;/api/cube&#39;,\n    headers: {\n      &#39;X-Organisation-ID&#39;: &#39;1&#39;\n    }\n  };\n\n  // Load dashboard from database\n  useEffect(() =&gt; {\n    const loadDashboard = async () =&gt; {\n      try {\n        const response = await fetch(&#39;/api/dashboards/default&#39;, {\n          headers: {\n            &#39;X-Organisation-ID&#39;: &#39;1&#39;\n          }\n        });\n        \n        if (response.ok) {\n          const dashboard = await response.json();\n          setDashboardId(dashboard.id);\n          setDashboardLayout(JSON.parse(dashboard.layout || &#39;[]&#39;));\n        } else {\n          // Use default layout if no saved dashboard exists\n          setDashboardLayout([\n            {\n              id: &#39;sales-by-category&#39;,\n              title: &#39;Sales by Category&#39;,\n              chartType: &#39;bar&#39;,\n              query: {\n                measures: [&#39;Sales.totalSales&#39;],\n                dimensions: [&#39;Sales.productCategory&#39;]\n              },\n              w: 6, h: 6, x: 0, y: 0\n            },\n            {\n              id: &#39;sales-over-time&#39;,\n              title: &#39;Sales Over Time&#39;,\n              chartType: &#39;line&#39;,\n              query: {\n                measures: [&#39;Sales.totalSales&#39;],\n                timeDimensions: [{\n                  dimension: &#39;Sales.orderDate&#39;,\n                  granularity: &#39;month&#39;\n                }]\n              },\n              w: 6, h: 6, x: 6, y: 0\n            }\n          ]);\n        }\n      } catch (error) {\n        console.error(&#39;Failed to load dashboard:&#39;, error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadDashboard();\n  }, []);\n\n  // Save dashboard changes to database\n  const handleLayoutChange = async (newLayout: DashboardLayout[]) =&gt; {\n    setDashboardLayout(newLayout);\n    \n    try {\n      const method = dashboardId ? &#39;PUT&#39; : &#39;POST&#39;;\n      const url = dashboardId \n        ? `/api/dashboards/${dashboardId}` \n        : &#39;/api/dashboards&#39;;\n        \n      const response = await fetch(url, {\n        method,\n        headers: {\n          &#39;Content-Type&#39;: &#39;application/json&#39;,\n          &#39;X-Organisation-ID&#39;: &#39;1&#39;\n        },\n        body: JSON.stringify({\n          name: &#39;Default Dashboard&#39;,\n          description: &#39;Auto-saved dashboard configuration&#39;,\n          layout: JSON.stringify(newLayout),\n          isDefault: true\n        })\n      });\n\n      if (response.ok &amp;&amp; !dashboardId) {\n        const savedDashboard = await response.json();\n        setDashboardId(savedDashboard.id);\n      }\n    } catch (error) {\n      console.error(&#39;Failed to save dashboard:&#39;, error);\n    }\n  };\n\n  if (loading) {\n    return &lt;div className=&quot;p-6&quot;&gt;Loading dashboard...&lt;/div&gt;;\n  }\n\n  return (\n    &lt;CubeProvider cubeApi={cubeApi}&gt;\n      &lt;div className=&quot;p-6&quot;&gt;\n        &lt;h1 className=&quot;text-3xl font-bold mb-6&quot;&gt;Sales Dashboard&lt;/h1&gt;\n        \n        &lt;AnalyticsDashboard\n          initialLayout={dashboardLayout}\n          onLayoutChange={handleLayoutChange}\n          enableEditing={true}\n        /&gt;\n      &lt;/div&gt;\n    &lt;/CubeProvider&gt;\n  );\n};\n\nexport default Dashboard;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// src/Dashboard.tsx\nimport React, { useState, useEffect } from &#39;react&#39;;\nimport { CubeProvider } from &#39;drizzle-cube/client&#39;;\nimport { AnalyticsDashboard } from &#39;drizzle-cube/client&#39;;\n\ninterface DashboardLayout {\n  id: string;\n  title: string;\n  chartType: string;\n  query: any;\n  w?: number;\n  h?: number;\n  x?: number;\n  y?: number;\n}\n\nconst Dashboard: React.FC = () =&gt; {\n  const [dashboardLayout, setDashboardLayout] = useState&lt;DashboardLayout[]&gt;([]);\n  const [loading, setLoading] = useState(true);\n  const [dashboardId, setDashboardId] = useState&lt;number | null&gt;(null);\n\n  const cubeApi = {\n    url: &#39;/api/cube&#39;,\n    headers: {\n      &#39;X-Organisation-ID&#39;: &#39;1&#39;\n    }\n  };\n\n  // Load dashboard from database\n  useEffect(() =&gt; {\n    const loadDashboard = async () =&gt; {\n      try {\n        const response = await fetch(&#39;/api/dashboards/default&#39;, {\n          headers: {\n            &#39;X-Organisation-ID&#39;: &#39;1&#39;\n          }\n        });\n        \n        if (response.ok) {\n          const dashboard = await response.json();\n          setDashboardId(dashboard.id);\n          setDashboardLayout(JSON.parse(dashboard.layout || &#39;[]&#39;));\n        } else {\n          // Use default layout if no saved dashboard exists\n          setDashboardLayout([\n            {\n              id: &#39;sales-by-category&#39;,\n              title: &#39;Sales by Category&#39;,\n              chartType: &#39;bar&#39;,\n              query: {\n                measures: [&#39;Sales.totalSales&#39;],\n                dimensions: [&#39;Sales.productCategory&#39;]\n              },\n              w: 6, h: 6, x: 0, y: 0\n            },\n            {\n              id: &#39;sales-over-time&#39;,\n              title: &#39;Sales Over Time&#39;,\n              chartType: &#39;line&#39;,\n              query: {\n                measures: [&#39;Sales.totalSales&#39;],\n                timeDimensions: [{\n                  dimension: &#39;Sales.orderDate&#39;,\n                  granularity: &#39;month&#39;\n                }]\n              },\n              w: 6, h: 6, x: 6, y: 0\n            }\n          ]);\n        }\n      } catch (error) {\n        console.error(&#39;Failed to load dashboard:&#39;, error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadDashboard();\n  }, []);\n\n  // Save dashboard changes to database\n  const handleLayoutChange = async (newLayout: DashboardLayout[]) =&gt; {\n    setDashboardLayout(newLayout);\n    \n    try {\n      const method = dashboardId ? &#39;PUT&#39; : &#39;POST&#39;;\n      const url = dashboardId \n        ? `/api/dashboards/${dashboardId}` \n        : &#39;/api/dashboards&#39;;\n        \n      const response = await fetch(url, {\n        method,\n        headers: {\n          &#39;Content-Type&#39;: &#39;application/json&#39;,\n          &#39;X-Organisation-ID&#39;: &#39;1&#39;\n        },\n        body: JSON.stringify({\n          name: &#39;Default Dashboard&#39;,\n          description: &#39;Auto-saved dashboard configuration&#39;,\n          layout: JSON.stringify(newLayout),\n          isDefault: true\n        })\n      });\n\n      if (response.ok &amp;&amp; !dashboardId) {\n        const savedDashboard = await response.json();\n        setDashboardId(savedDashboard.id);\n      }\n    } catch (error) {\n      console.error(&#39;Failed to save dashboard:&#39;, error);\n    }\n  };\n\n  if (loading) {\n    return &lt;div className=&quot;p-6&quot;&gt;Loading dashboard...&lt;/div&gt;;\n  }\n\n  return (\n    &lt;CubeProvider cubeApi={cubeApi}&gt;\n      &lt;div className=&quot;p-6&quot;&gt;\n        &lt;h1 className=&quot;text-3xl font-bold mb-6&quot;&gt;Sales Dashboard&lt;/h1&gt;\n        \n        &lt;AnalyticsDashboard\n          initialLayout={dashboardLayout}\n          onLayoutChange={handleLayoutChange}\n          enableEditing={true}\n        /&gt;\n      &lt;/div&gt;\n    &lt;/CubeProvider&gt;\n  );\n};\n\nexport default Dashboard;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"add-dashboard-api-endpoints\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Add Dashboard API Endpoints</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create API endpoints to handle dashboard persistence:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// src/dashboardRoutes.ts\nimport { Hono } from &#39;hono&#39;;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;;\nimport { eq, and } from &#39;drizzle-orm&#39;;\nimport { dashboards } from &#39;./schema&#39;;\n\nconst app = new Hono();\n\n// Get default dashboard for organization\napp.get(&#39;/api/dashboards/default&#39;, async (c) =&gt; {\n  const orgId = c.req.header(&#39;X-Organisation-ID&#39;);\n  if (!orgId) return c.json({ error: &#39;Organisation ID required&#39; }, 400);\n\n  const dashboard = await db.select()\n    .from(dashboards)\n    .where(and(\n      eq(dashboards.organisationId, parseInt(orgId)),\n      eq(dashboards.isDefault, true)\n    ))\n    .limit(1);\n\n  if (dashboard.length === 0) {\n    return c.json({ error: &#39;No default dashboard found&#39; }, 404);\n  }\n\n  return c.json(dashboard[0]);\n});\n\n// Save/update dashboard\napp.post(&#39;/api/dashboards&#39;, async (c) =&gt; {\n  const orgId = c.req.header(&#39;X-Organisation-ID&#39;);\n  if (!orgId) return c.json({ error: &#39;Organisation ID required&#39; }, 400);\n\n  const body = await c.req.json();\n  \n  const [newDashboard] = await db.insert(dashboards)\n    .values({\n      organisationId: parseInt(orgId),\n      name: body.name,\n      description: body.description,\n      layout: body.layout,\n      isDefault: body.isDefault || false\n    })\n    .returning();\n\n  return c.json(newDashboard);\n});\n\napp.put(&#39;/api/dashboards/:id&#39;, async (c) =&gt; {\n  const id = parseInt(c.req.param(&#39;id&#39;));\n  const orgId = c.req.header(&#39;X-Organisation-ID&#39;);\n  if (!orgId) return c.json({ error: &#39;Organisation ID required&#39; }, 400);\n\n  const body = await c.req.json();\n  \n  const [updatedDashboard] = await db.update(dashboards)\n    .set({\n      layout: body.layout,\n      updatedAt: new Date()\n    })\n    .where(and(\n      eq(dashboards.id, id),\n      eq(dashboards.organisationId, parseInt(orgId))\n    ))\n    .returning();\n\n  return c.json(updatedDashboard);\n});\n\nexport default app;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// src/dashboardRoutes.ts\nimport { Hono } from &#39;hono&#39;;\nimport { drizzle } from &#39;drizzle-orm/postgres-js&#39;;\nimport { eq, and } from &#39;drizzle-orm&#39;;\nimport { dashboards } from &#39;./schema&#39;;\n\nconst app = new Hono();\n\n// Get default dashboard for organization\napp.get(&#39;/api/dashboards/default&#39;, async (c) =&gt; {\n  const orgId = c.req.header(&#39;X-Organisation-ID&#39;);\n  if (!orgId) return c.json({ error: &#39;Organisation ID required&#39; }, 400);\n\n  const dashboard = await db.select()\n    .from(dashboards)\n    .where(and(\n      eq(dashboards.organisationId, parseInt(orgId)),\n      eq(dashboards.isDefault, true)\n    ))\n    .limit(1);\n\n  if (dashboard.length === 0) {\n    return c.json({ error: &#39;No default dashboard found&#39; }, 404);\n  }\n\n  return c.json(dashboard[0]);\n});\n\n// Save/update dashboard\napp.post(&#39;/api/dashboards&#39;, async (c) =&gt; {\n  const orgId = c.req.header(&#39;X-Organisation-ID&#39;);\n  if (!orgId) return c.json({ error: &#39;Organisation ID required&#39; }, 400);\n\n  const body = await c.req.json();\n  \n  const [newDashboard] = await db.insert(dashboards)\n    .values({\n      organisationId: parseInt(orgId),\n      name: body.name,\n      description: body.description,\n      layout: body.layout,\n      isDefault: body.isDefault || false\n    })\n    .returning();\n\n  return c.json(newDashboard);\n});\n\napp.put(&#39;/api/dashboards/:id&#39;, async (c) =&gt; {\n  const id = parseInt(c.req.param(&#39;id&#39;));\n  const orgId = c.req.header(&#39;X-Organisation-ID&#39;);\n  if (!orgId) return c.json({ error: &#39;Organisation ID required&#39; }, 400);\n\n  const body = await c.req.json();\n  \n  const [updatedDashboard] = await db.update(dashboards)\n    .set({\n      layout: body.layout,\n      updatedAt: new Date()\n    })\n    .where(and(\n      eq(dashboards.id, id),\n      eq(dashboards.organisationId, parseInt(orgId))\n    ))\n    .returning();\n\n  return c.json(updatedDashboard);\n});\n\nexport default app;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"key-benefits-of-database-persistence\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Key Benefits of Database Persistence</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">🔒 Multi-tenant security</strong> - Each organization has their own dashboards</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">💾 Automatic saving</strong> - Layout changes are saved immediately</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">👥 Shared dashboards</strong> - Multiple users can see the same configuration  </li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">🔄 State restoration</strong> - Dashboard layout persists across browser sessions</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">📊 Multiple dashboards</strong> - Support for different dashboard types (sales, marketing, etc.)</li></ul><h2 id=\"whats-next\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">What&#39;s Next?</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Congratulations! You&#39;ve created your first semantic layer with Drizzle Cube. Here&#39;s what you can explore next:</p><h3 id=\"learn-more\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Learn More</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Semantic Layer</strong></a> - Deep dive into cubes, dimensions, and measures</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Security</strong></a> - Multi-tenant security patterns</li></ul><h3 id=\"explore-components\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Explore Components</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">React Client</strong></a> - Dashboard and chart components</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/charts\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Charts</strong></a> - Available visualization types</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/hooks\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Hooks</strong></a> - React hooks for data fetching</li></ul><h3 id=\"advanced-features\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Advanced Features</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/joins\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Joins</strong></a> - Multi-cube queries</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"advanced/performance\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Performance</strong></a> - Optimization techniques</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"adapters/custom\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Custom Adapters</strong></a> - Framework integration</li></ul><h2 id=\"example-projects\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Example Projects</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Check out complete example implementations:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\"><a href=\"https://github.com/cliftonc/drizzle-cube/tree/main/examples/basic\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Basic Example</a></strong> - Simple analytics setup</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\"><a href=\"https://github.com/cliftonc/drizzle-cube/tree/main/examples/hono\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Hono Example</a></strong> - Full-featured application</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">Need help? <a href=\"https://github.com/cliftonc/drizzle-cube/discussions\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Join our community</a> or <a href=\"https://github.com/cliftonc/drizzle-cube/issues\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">report issues</a>!</p>","path":"getting-started/quick-start.md"},
  'getting-started/scaling': {"slug":"getting-started/scaling","title":"Scaling Your SaaS with Drizzle Cube","content":"<h1 id=\"scaling-your-saas-with-drizzle-cube\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Scaling Your SaaS with Drizzle Cube</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">One of Drizzle Cube&#39;s greatest strengths is its ability to grow with your SaaS business. The semantic layer provides a stable abstraction that allows you to evolve your data architecture without breaking your reports, dashboards, and analytics.</p><h2 id=\"the-scaling-journey\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">The Scaling Journey</h2><h3 id=\"-small-saas-direct-database-queries\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">🌱 Small SaaS: Direct Database Queries</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Perfect for:</strong> Startups, MVPs, small teams (&lt; 10k users, &lt; 1GB data)</p><p class=\"mb-4 text-gray-600 leading-relaxed\">When you&#39;re starting out, simplicity is key. Drizzle Cube connects directly to your operational database:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Simple setup - queries run directly on your main database\nconst db = drizzle(postgres(DATABASE_URL), { schema })\nconst executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)\n\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.orders)\n      .where(eq(schema.orders.organisationId, securityContext.organisationId)),\n      \n  dimensions: {\n    customerName: { sql: schema.orders.customerName, type: &#39;string&#39; },\n    orderDate: { sql: schema.orders.createdAt, type: &#39;time&#39; }\n  },\n  \n  measures: {\n    totalRevenue: { sql: schema.orders.amount, type: &#39;sum&#39; },\n    orderCount: { sql: schema.orders.id, type: &#39;count&#39; }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Simple setup - queries run directly on your main database\nconst db = drizzle(postgres(DATABASE_URL), { schema })\nconst executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)\n\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.orders)\n      .where(eq(schema.orders.organisationId, securityContext.organisationId)),\n      \n  dimensions: {\n    customerName: { sql: schema.orders.customerName, type: &#39;string&#39; },\n    orderDate: { sql: schema.orders.createdAt, type: &#39;time&#39; }\n  },\n  \n  measures: {\n    totalRevenue: { sql: schema.orders.amount, type: &#39;sum&#39; },\n    orderCount: { sql: schema.orders.id, type: &#39;count&#39; }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Benefits:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">✅ Zero additional infrastructure</li><li class=\"leading-relaxed\">✅ Real-time data (no sync delays)</li><li class=\"leading-relaxed\">✅ Simple deployment and maintenance</li><li class=\"leading-relaxed\">✅ Perfect for rapid iteration</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">When to scale:</strong> Query performance degrades, reports impact app performance, or you hit ~1GB of data.</p><h3 id=\"-growing-saas-optimized-data-layer\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">🚀 Growing SaaS: Optimized Data Layer</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Perfect for:</strong> Scale-ups, established products (10k-1M users, 1-100GB data)</p><p class=\"mb-4 text-gray-600 leading-relaxed\">As you grow, you need better performance without complexity. Add materialized views or read replicas:</p><h4 id=\"option-a-materialized-views\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Option A: Materialized Views</h4><div class=\"relative group\">\n    <pre class=\"language-sql rounded-lg overflow-x-auto mb-4\"><code class=\"language-sql\">-- Create materialized views for heavy aggregations\nCREATE MATERIALIZED VIEW daily_sales_summary AS\nSELECT \n    organisation_id,\n    date_trunc(&#39;day&#39;, created_at) as order_date,\n    count(*) as order_count,\n    sum(amount) as total_revenue,\n    avg(amount) as avg_order_value\nFROM orders \nGROUP BY organisation_id, date_trunc(&#39;day&#39;, created_at);\n\n-- Refresh periodically (via cron job)\nREFRESH MATERIALIZED VIEW daily_sales_summary;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"-- Create materialized views for heavy aggregations\nCREATE MATERIALIZED VIEW daily_sales_summary AS\nSELECT \n    organisation_id,\n    date_trunc(&#39;day&#39;, created_at) as order_date,\n    count(*) as order_count,\n    sum(amount) as total_revenue,\n    avg(amount) as avg_order_value\nFROM orders \nGROUP BY organisation_id, date_trunc(&#39;day&#39;, created_at);\n\n-- Refresh periodically (via cron job)\nREFRESH MATERIALIZED VIEW daily_sales_summary;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">Update your cube to use the optimized view:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  // Same interface, different underlying source\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.dailySalesSummary)  // Now using materialized view\n      .where(eq(schema.dailySalesSummary.organisationId, securityContext.organisationId)),\n      \n  dimensions: {\n    orderDate: { sql: schema.dailySalesSummary.orderDate, type: &#39;time&#39; }\n  },\n  \n  measures: {\n    // Pre-aggregated - much faster queries\n    totalRevenue: { sql: schema.dailySalesSummary.totalRevenue, type: &#39;sum&#39; },\n    orderCount: { sql: schema.dailySalesSummary.orderCount, type: &#39;sum&#39; }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  // Same interface, different underlying source\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.dailySalesSummary)  // Now using materialized view\n      .where(eq(schema.dailySalesSummary.organisationId, securityContext.organisationId)),\n      \n  dimensions: {\n    orderDate: { sql: schema.dailySalesSummary.orderDate, type: &#39;time&#39; }\n  },\n  \n  measures: {\n    // Pre-aggregated - much faster queries\n    totalRevenue: { sql: schema.dailySalesSummary.totalRevenue, type: &#39;sum&#39; },\n    orderCount: { sql: schema.dailySalesSummary.orderCount, type: &#39;sum&#39; }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"option-b-read-replica\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Option B: Read Replica</h4><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Set up dedicated analytics database connection\nconst analyticsDb = drizzle(postgres(ANALYTICS_DATABASE_URL), { schema })\nconst executor = createDatabaseExecutor(analyticsDb, schema, &#39;postgres&#39;)\n\n// Same cubes, different database - zero code changes to dashboards!\nconst semanticLayer = new SemanticLayerCompiler({ \n  databaseExecutor: executor \n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Set up dedicated analytics database connection\nconst analyticsDb = drizzle(postgres(ANALYTICS_DATABASE_URL), { schema })\nconst executor = createDatabaseExecutor(analyticsDb, schema, &#39;postgres&#39;)\n\n// Same cubes, different database - zero code changes to dashboards!\nconst semanticLayer = new SemanticLayerCompiler({ \n  databaseExecutor: executor \n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Benefits:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">✅ 10-100x query performance improvement  </li><li class=\"leading-relaxed\">✅ Zero impact on production application</li><li class=\"leading-relaxed\">✅ All existing reports continue working unchanged</li><li class=\"leading-relaxed\">✅ Gradual migration (can optimize cube by cube)</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">When to scale:</strong> Query complexity increases, need sub-second dashboard loads, or approaching 100GB.</p><h3 id=\"-enterprise-saas-data-lake-warehouse\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">🏢 Enterprise SaaS: Data Lake + Warehouse</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Perfect for:</strong> Large enterprises (1M+ users, 100GB+ data, complex analytics)</p><p class=\"mb-4 text-gray-600 leading-relaxed\">For massive scale, integrate with modern data stack while keeping your semantic layer:</p><h4 id=\"option-a-data-lake-integration\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Option A: Data Lake Integration</h4><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Connect to your data warehouse (Snowflake, BigQuery, Redshift)\nimport { drizzle } from &#39;drizzle-orm/snowflake-sdk&#39;\n\nconst warehouseDb = drizzle(snowflakeConnection, { schema })\nconst executor = createDatabaseExecutor(warehouseDb, schema, &#39;snowflake&#39;)\n\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.ordersFact)  // Now querying data warehouse fact table\n      .innerJoin(schema.customerDim, eq(schema.ordersFact.customerId, schema.customerDim.id))\n      .where(eq(schema.ordersFact.organisationId, securityContext.organisationId)),\n      \n  // Same dimensions and measures - dashboards still work!\n  dimensions: {\n    customerSegment: { sql: schema.customerDim.segment, type: &#39;string&#39; },\n    orderDate: { sql: schema.ordersFact.orderDate, type: &#39;time&#39; }\n  },\n  \n  measures: {\n    totalRevenue: { sql: schema.ordersFact.revenue, type: &#39;sum&#39; },\n    orderCount: { sql: schema.ordersFact.id, type: &#39;count&#39; }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Connect to your data warehouse (Snowflake, BigQuery, Redshift)\nimport { drizzle } from &#39;drizzle-orm/snowflake-sdk&#39;\n\nconst warehouseDb = drizzle(snowflakeConnection, { schema })\nconst executor = createDatabaseExecutor(warehouseDb, schema, &#39;snowflake&#39;)\n\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; \n    db.select()\n      .from(schema.ordersFact)  // Now querying data warehouse fact table\n      .innerJoin(schema.customerDim, eq(schema.ordersFact.customerId, schema.customerDim.id))\n      .where(eq(schema.ordersFact.organisationId, securityContext.organisationId)),\n      \n  // Same dimensions and measures - dashboards still work!\n  dimensions: {\n    customerSegment: { sql: schema.customerDim.segment, type: &#39;string&#39; },\n    orderDate: { sql: schema.ordersFact.orderDate, type: &#39;time&#39; }\n  },\n  \n  measures: {\n    totalRevenue: { sql: schema.ordersFact.revenue, type: &#39;sum&#39; },\n    orderCount: { sql: schema.ordersFact.id, type: &#39;count&#39; }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h4 id=\"option-b-hybrid-cubedev-integration\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Option B: Hybrid Cube.dev Integration</h4><p class=\"mb-4 text-gray-600 leading-relaxed\">For ultimate scale, integrate with Cube.dev while maintaining your Drizzle Cube interface:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Use Cube.dev for heavy lifting, Drizzle Cube for application integration\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  \n  // Delegate to pre-aggregated Cube.dev API for complex queries\n  sql: async ({ query, securityContext }) =&gt; {\n    if (isComplexQuery(query)) {\n      return await cubeDevClient.load({\n        ...query,\n        filters: [...query.filters, {\n          member: &#39;Sales.organisationId&#39;,\n          operator: &#39;equals&#39;,\n          values: [securityContext.organisationId]\n        }]\n      })\n    }\n    \n    // Simple queries still go direct to database\n    return db.select()\n      .from(schema.orders)\n      .where(eq(schema.orders.organisationId, securityContext.organisationId))\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Use Cube.dev for heavy lifting, Drizzle Cube for application integration\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  \n  // Delegate to pre-aggregated Cube.dev API for complex queries\n  sql: async ({ query, securityContext }) =&gt; {\n    if (isComplexQuery(query)) {\n      return await cubeDevClient.load({\n        ...query,\n        filters: [...query.filters, {\n          member: &#39;Sales.organisationId&#39;,\n          operator: &#39;equals&#39;,\n          values: [securityContext.organisationId]\n        }]\n      })\n    }\n    \n    // Simple queries still go direct to database\n    return db.select()\n      .from(schema.orders)\n      .where(eq(schema.orders.organisationId, securityContext.organisationId))\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Benefits:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">✅ Handles billions of rows with sub-second response</li><li class=\"leading-relaxed\">✅ Advanced features: ML predictions, real-time streaming</li><li class=\"leading-relaxed\">✅ Your application code remains unchanged</li><li class=\"leading-relaxed\">✅ Seamless user experience during migration</li></ul><h2 id=\"migration-strategies\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Migration Strategies</h2><h3 id=\"-zero-downtime-migration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">🔄 Zero-Downtime Migration</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The key to successful scaling is maintaining your semantic layer interface:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Before: Direct database\nconst salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db }) =&gt; db.select().from(schema.orders),\n  // ... dimensions and measures\n})\n\n// After: Data warehouse - SAME interface!\nconst salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;, \n  sql: ({ db }) =&gt; db.select().from(schema.orders_fact), // Different source\n  // ... SAME dimensions and measures\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Before: Direct database\nconst salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db }) =&gt; db.select().from(schema.orders),\n  // ... dimensions and measures\n})\n\n// After: Data warehouse - SAME interface!\nconst salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;, \n  sql: ({ db }) =&gt; db.select().from(schema.orders_fact), // Different source\n  // ... SAME dimensions and measures\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"-gradual-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">📊 Gradual Optimization</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Optimize cubes one at a time based on usage patterns:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// 1. Identify slow cubes\nconst performanceMetrics = {\n  &#39;Sales&#39;: { avgQueryTime: 2.3, usage: &#39;high&#39; },     // Optimize first\n  &#39;Users&#39;: { avgQueryTime: 0.1, usage: &#39;medium&#39; },   // Optimize later  \n  &#39;Support&#39;: { avgQueryTime: 0.5, usage: &#39;low&#39; }     // Keep as-is\n}\n\n// 2. Create optimized version of high-impact cube\nexport const optimizedSalesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db }) =&gt; db.select().from(schema.sales_summary), // Materialized view\n  // Same interface ensures compatibility\n})\n\n// 3. A/B test performance\nif (securityContext.features?.optimizedSales) {\n  semanticLayer.registerCube(optimizedSalesCube)\n} else {\n  semanticLayer.registerCube(originalSalesCube)\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// 1. Identify slow cubes\nconst performanceMetrics = {\n  &#39;Sales&#39;: { avgQueryTime: 2.3, usage: &#39;high&#39; },     // Optimize first\n  &#39;Users&#39;: { avgQueryTime: 0.1, usage: &#39;medium&#39; },   // Optimize later  \n  &#39;Support&#39;: { avgQueryTime: 0.5, usage: &#39;low&#39; }     // Keep as-is\n}\n\n// 2. Create optimized version of high-impact cube\nexport const optimizedSalesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db }) =&gt; db.select().from(schema.sales_summary), // Materialized view\n  // Same interface ensures compatibility\n})\n\n// 3. A/B test performance\nif (securityContext.features?.optimizedSales) {\n  semanticLayer.registerCube(optimizedSalesCube)\n} else {\n  semanticLayer.registerCube(originalSalesCube)\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"architecture-evolution-examples\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Architecture Evolution Examples</h2><h3 id=\"e-commerce-platform-journey\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">E-commerce Platform Journey</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Stage 1: Startup (Direct PostgreSQL)\nconst ordersDb = postgres(&#39;postgresql://localhost/ecommerce&#39;)\n\n// Stage 2: Growth (Read Replica + Materialized Views)  \nconst analyticsDb = postgres(&#39;postgresql://analytics-replica/ecommerce&#39;)\n\n// Stage 3: Scale (Snowflake Data Warehouse)\nconst warehouseDb = snowflake({\n  account: &#39;company.snowflakecomputing.com&#39;,\n  warehouse: &#39;ANALYTICS_WH&#39;,\n  database: &#39;ECOMMERCE_DW&#39;\n})\n\n// Same cubes work across all stages!</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Stage 1: Startup (Direct PostgreSQL)\nconst ordersDb = postgres(&#39;postgresql://localhost/ecommerce&#39;)\n\n// Stage 2: Growth (Read Replica + Materialized Views)  \nconst analyticsDb = postgres(&#39;postgresql://analytics-replica/ecommerce&#39;)\n\n// Stage 3: Scale (Snowflake Data Warehouse)\nconst warehouseDb = snowflake({\n  account: &#39;company.snowflakecomputing.com&#39;,\n  warehouse: &#39;ANALYTICS_WH&#39;,\n  database: &#39;ECOMMERCE_DW&#39;\n})\n\n// Same cubes work across all stages!\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"saas-platform-migration-timeline\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">SaaS Platform Migration Timeline</h3><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Month</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Stage</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Data Volume</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Action</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">0-12</td><td class=\"px-4 py-3 text-sm text-gray-600\">Direct DB</td><td class=\"px-4 py-3 text-sm text-gray-600\">< 1GB</td><td class=\"px-4 py-3 text-sm text-gray-600\">Launch with simple setup</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">12-24</td><td class=\"px-4 py-3 text-sm text-gray-600\">Read Replica</td><td class=\"px-4 py-3 text-sm text-gray-600\">1-10GB</td><td class=\"px-4 py-3 text-sm text-gray-600\">Add analytics replica</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">24-36</td><td class=\"px-4 py-3 text-sm text-gray-600\">Materialized Views</td><td class=\"px-4 py-3 text-sm text-gray-600\">10-50GB</td><td class=\"px-4 py-3 text-sm text-gray-600\">Create summary tables</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">36+</td><td class=\"px-4 py-3 text-sm text-gray-600\">Data Warehouse</td><td class=\"px-4 py-3 text-sm text-gray-600\">50GB+</td><td class=\"px-4 py-3 text-sm text-gray-600\">Migrate to Snowflake/BigQuery</td></tr></tbody>\n    </table>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Throughout entire journey:</strong> Zero changes to dashboard code!</p><h2 id=\"best-practices-for-scaling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices for Scaling</h2><h3 id=\"-design-for-growth\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">🎯 Design for Growth</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Good: Flexible cube definition\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; {\n    // Can easily swap data sources\n    const baseQuery = db.select().from(getCurrentSalesTable())\n    return baseQuery.where(eq(schema.orders.organisationId, securityContext.organisationId))\n  }\n})\n\nfunction getCurrentSalesTable() {\n  // Environment-based source selection\n  switch (process.env.DATA_TIER) {\n    case &#39;warehouse&#39;: return schema.sales_fact\n    case &#39;replica&#39;: return schema.sales_replica  \n    default: return schema.sales\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Good: Flexible cube definition\nexport const salesCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: ({ db, securityContext }) =&gt; {\n    // Can easily swap data sources\n    const baseQuery = db.select().from(getCurrentSalesTable())\n    return baseQuery.where(eq(schema.orders.organisationId, securityContext.organisationId))\n  }\n})\n\nfunction getCurrentSalesTable() {\n  // Environment-based source selection\n  switch (process.env.DATA_TIER) {\n    case &#39;warehouse&#39;: return schema.sales_fact\n    case &#39;replica&#39;: return schema.sales_replica  \n    default: return schema.sales\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"-monitor-and-optimize\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">📈 Monitor and Optimize</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Track cube performance for optimization decisions\nexport const instrumentedCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: async ({ db, securityContext, query }) =&gt; {\n    const start = performance.now()\n    \n    try {\n      const result = await db.select().from(schema.orders)\n        .where(eq(schema.orders.organisationId, securityContext.organisationId))\n        \n      const duration = performance.now() - start\n      \n      // Log performance metrics\n      await logCubePerformance({\n        cube: &#39;Sales&#39;,\n        duration,\n        rowCount: result.length,\n        query: JSON.stringify(query)\n      })\n      \n      return result\n    } catch (error) {\n      await logCubeError(&#39;Sales&#39;, error, query)\n      throw error\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Track cube performance for optimization decisions\nexport const instrumentedCube = defineCube(schema, {\n  name: &#39;Sales&#39;,\n  sql: async ({ db, securityContext, query }) =&gt; {\n    const start = performance.now()\n    \n    try {\n      const result = await db.select().from(schema.orders)\n        .where(eq(schema.orders.organisationId, securityContext.organisationId))\n        \n      const duration = performance.now() - start\n      \n      // Log performance metrics\n      await logCubePerformance({\n        cube: &#39;Sales&#39;,\n        duration,\n        rowCount: result.length,\n        query: JSON.stringify(query)\n      })\n      \n      return result\n    } catch (error) {\n      await logCubeError(&#39;Sales&#39;, error, query)\n      throw error\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"the-power-of-abstraction\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">The Power of Abstraction</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The semantic layer is your <strong class=\"font-semibold text-slate-700\">stable contract</strong> that enables:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Frontend Stability</strong>: Dashboards work unchanged across data architecture evolution</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Team Productivity</strong>: Analysts focus on insights, not infrastructure changes  </li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Business Continuity</strong>: Reports keep working during migrations</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Gradual Migration</strong>: Upgrade piece by piece without big-bang deployments</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Cost Optimization</strong>: Right-size your data infrastructure as you grow</li></ul><h2 id=\"common-scaling-questions\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Scaling Questions</h2><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Q: When should I start thinking about scaling?</strong>\nA: When dashboard queries take &gt;2 seconds or impact your application performance.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Q: Can I mix different data sources in one semantic layer?</strong><br>A: Yes! Different cubes can use different databases - Drizzle Cube handles the abstraction.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Q: Will my React dashboards break during migration?</strong>\nA: No! As long as cube names and field names stay consistent, dashboards continue working.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Q: How do I test the new data source before switching?</strong>\nA: Use feature flags or environment variables to A/B test cube implementations.</p><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Ready to scale your analytics?</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Small SaaS</strong>: Start with <a href=\"#\" data-help-link=\"getting-started/quick-start\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Quick Start</a> guide</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Growing SaaS</strong>: Learn about <a href=\"#\" data-help-link=\"advanced/performance\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Performance</a> optimization</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Enterprise</strong>: Explore <a href=\"#\" data-help-link=\"advanced/typescript\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Advanced TypeScript</a> patterns</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">Remember: <strong class=\"font-semibold text-slate-700\">Start simple, scale smart</strong>. Drizzle Cube grows with you! 🚀</p>","path":"getting-started/scaling.md"},
  'semantic-layer': {"slug":"semantic-layer","title":"Semantic Layer","content":"<h1 id=\"semantic-layer\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Semantic Layer</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">The semantic layer is the heart of Drizzle Cube. It transforms your raw database tables into business-friendly concepts that anyone can understand and query safely.</p><h2 id=\"what-is-a-semantic-layer\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">What is a Semantic Layer?</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">A semantic layer is a <strong class=\"font-semibold text-slate-700\">business representation</strong> of your data that:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Abstracts complexity</strong> - Hide database schema details behind business terms</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Ensures consistency</strong> - Single source of truth for metrics and definitions  </li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Enables self-service</strong> - Non-technical users can explore data confidently</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Provides structure</strong> - Organize data into logical business entities</li></ul><h2 id=\"architecture-overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Architecture Overview</h2><div style=\"display: flex; justify-content: center; align-items: center; gap: 20px; margin: 20px 0; font-family: monospace;\">\n  <div style=\"border: 2px solid #374151; border-radius: 8px; padding: 16px; background: #f9fafb; min-width: 140px;\">\n    <div style=\"font-weight: bold; text-align: center; margin-bottom: 8px;\">Applications</div>\n    <div style=\"font-size: 14px; color: #6b7280;\">\n      • Dashboards<br>\n      • Reports<br>\n      • APIs\n    </div>\n  </div>\n  \n  <div style=\"color: #6b7280; font-size: 24px;\">→</div>\n  \n  <div style=\"border: 2px solid #059669; border-radius: 8px; padding: 16px; background: #f0fdf4; min-width: 140px;\">\n    <div style=\"font-weight: bold; text-align: center; margin-bottom: 8px; color: #059669;\">Semantic Layer</div>\n    <div style=\"font-size: 14px; color: #6b7280;\">\n      • Cubes<br>\n      • Dimensions<br>\n      • Measures\n    </div>\n  </div>\n  \n  <div style=\"color: #6b7280; font-size: 24px;\">→</div>\n  \n  <div style=\"border: 2px solid #374151; border-radius: 8px; padding: 16px; background: #f9fafb; min-width: 140px;\">\n    <div style=\"font-weight: bold; text-align: center; margin-bottom: 8px;\">Database</div>\n    <div style=\"font-size: 14px; color: #6b7280;\">\n      • Tables<br>\n      • Views<br>\n      • Indexes\n    </div>\n  </div>\n</div>\n\n<h2 id=\"core-concepts\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Core Concepts</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The semantic layer is built on three fundamental concepts:</p><h3 id=\"1-cubes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">1. Cubes</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Cubes</strong> are business entities that represent the main subjects you want to analyze - like Sales, Customers, or Products. Each cube defines how to query a specific dataset.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { defineCube } from &#39;drizzle-cube/server&#39;;\nimport { eq } from &#39;drizzle-orm&#39;;\nimport * as schema from &#39;./schema&#39;;\n\nexport const salesCube = defineCube(&#39;Sales&#39;, {\n  title: &#39;Sales Transactions&#39;,\n  sql: (ctx) =&gt; ({\n    from: schema.sales,\n    leftJoin: [\n      { table: schema.products, on: eq(schema.sales.productId, schema.products.id) },\n      { table: schema.customers, on: eq(schema.sales.customerId, schema.customers.id) }\n    ]\n  }),\n  \n  dimensions: {\n    // What you can filter and group by\n  },\n  \n  measures: {\n    // What you want to calculate and analyze\n  }\n});</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { defineCube } from &#39;drizzle-cube/server&#39;;\nimport { eq } from &#39;drizzle-orm&#39;;\nimport * as schema from &#39;./schema&#39;;\n\nexport const salesCube = defineCube(&#39;Sales&#39;, {\n  title: &#39;Sales Transactions&#39;,\n  sql: (ctx) =&gt; ({\n    from: schema.sales,\n    leftJoin: [\n      { table: schema.products, on: eq(schema.sales.productId, schema.products.id) },\n      { table: schema.customers, on: eq(schema.sales.customerId, schema.customers.id) }\n    ]\n  }),\n  \n  dimensions: {\n    // What you can filter and group by\n  },\n  \n  measures: {\n    // What you want to calculate and analyze\n  }\n});\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"2-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">2. Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dimensions</strong> are the descriptive attributes of your data - the &quot;what&quot;, &quot;when&quot;, &quot;where&quot;, and &quot;who&quot; that you use to slice and filter your analysis.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  customerName: {\n    name: &#39;customerName&#39;,\n    title: &#39;Customer Name&#39;,\n    type: &#39;string&#39;,\n    sql: schema.customers.name\n  },\n  productCategory: {\n    name: &#39;productCategory&#39;, \n    title: &#39;Product Category&#39;,\n    type: &#39;string&#39;,\n    sql: schema.products.category\n  },\n  orderDate: {\n    name: &#39;orderDate&#39;,\n    title: &#39;Order Date&#39;,\n    type: &#39;time&#39;,\n    sql: schema.sales.orderDate\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  customerName: {\n    name: &#39;customerName&#39;,\n    title: &#39;Customer Name&#39;,\n    type: &#39;string&#39;,\n    sql: schema.customers.name\n  },\n  productCategory: {\n    name: &#39;productCategory&#39;, \n    title: &#39;Product Category&#39;,\n    type: &#39;string&#39;,\n    sql: schema.products.category\n  },\n  orderDate: {\n    name: &#39;orderDate&#39;,\n    title: &#39;Order Date&#39;,\n    type: &#39;time&#39;,\n    sql: schema.sales.orderDate\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"3-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">3. Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Measures</strong> are the numeric calculations you want to perform - counts, sums, averages, and other aggregations that provide business insights.</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  totalSales: {\n    name: &#39;totalSales&#39;,\n    title: &#39;Total Sales&#39;,\n    type: &#39;sum&#39;,\n    sql: schema.sales.amount\n  },\n  orderCount: {\n    name: &#39;orderCount&#39;, \n    title: &#39;Number of Orders&#39;,\n    type: &#39;count&#39;,\n    sql: schema.sales.id\n  },\n  averageOrderValue: {\n    name: &#39;averageOrderValue&#39;,\n    title: &#39;Average Order Value&#39;, \n    type: &#39;avg&#39;,\n    sql: schema.sales.amount\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  totalSales: {\n    name: &#39;totalSales&#39;,\n    title: &#39;Total Sales&#39;,\n    type: &#39;sum&#39;,\n    sql: schema.sales.amount\n  },\n  orderCount: {\n    name: &#39;orderCount&#39;, \n    title: &#39;Number of Orders&#39;,\n    type: &#39;count&#39;,\n    sql: schema.sales.id\n  },\n  averageOrderValue: {\n    name: &#39;averageOrderValue&#39;,\n    title: &#39;Average Order Value&#39;, \n    type: &#39;avg&#39;,\n    sql: schema.sales.amount\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"complete-example\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Complete Example</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Here&#39;s a complete cube definition that brings together all three concepts:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { defineCube } from &#39;drizzle-cube/server&#39;;\nimport { eq } from &#39;drizzle-orm&#39;;\nimport * as schema from &#39;./schema&#39;;\n\nexport const salesCube = defineCube(&#39;Sales&#39;, {\n  title: &#39;Sales Transactions&#39;,\n  description: &#39;All sales data with customer and product information&#39;,\n  \n  sql: (ctx) =&gt; ({\n    from: schema.sales,\n    leftJoin: [\n      { table: schema.products, on: eq(schema.sales.productId, schema.products.id) },\n      { table: schema.customers, on: eq(schema.sales.customerId, schema.customers.id) }\n    ]\n  }),\n  \n  dimensions: {\n    customerName: {\n      name: &#39;customerName&#39;,\n      title: &#39;Customer Name&#39;,\n      type: &#39;string&#39;,\n      sql: schema.customers.name\n    },\n    productName: {\n      name: &#39;productName&#39;,\n      title: &#39;Product Name&#39;, \n      type: &#39;string&#39;,\n      sql: schema.products.name\n    },\n    productCategory: {\n      name: &#39;productCategory&#39;,\n      title: &#39;Product Category&#39;,\n      type: &#39;string&#39;, \n      sql: schema.products.category\n    },\n    orderDate: {\n      name: &#39;orderDate&#39;,\n      title: &#39;Order Date&#39;,\n      type: &#39;time&#39;,\n      sql: schema.sales.orderDate\n    }\n  },\n  \n  measures: {\n    totalSales: {\n      name: &#39;totalSales&#39;,\n      title: &#39;Total Sales&#39;,\n      type: &#39;sum&#39;,\n      sql: schema.sales.amount\n    },\n    orderCount: {\n      name: &#39;orderCount&#39;,\n      title: &#39;Number of Orders&#39;,\n      type: &#39;count&#39;, \n      sql: schema.sales.id\n    },\n    averageOrderValue: {\n      name: &#39;averageOrderValue&#39;,\n      title: &#39;Average Order Value&#39;,\n      type: &#39;avg&#39;,\n      sql: schema.sales.amount\n    },\n    totalQuantity: {\n      name: &#39;totalQuantity&#39;,\n      title: &#39;Total Quantity Sold&#39;,\n      type: &#39;sum&#39;,\n      sql: schema.sales.quantity\n    }\n  }\n});</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { defineCube } from &#39;drizzle-cube/server&#39;;\nimport { eq } from &#39;drizzle-orm&#39;;\nimport * as schema from &#39;./schema&#39;;\n\nexport const salesCube = defineCube(&#39;Sales&#39;, {\n  title: &#39;Sales Transactions&#39;,\n  description: &#39;All sales data with customer and product information&#39;,\n  \n  sql: (ctx) =&gt; ({\n    from: schema.sales,\n    leftJoin: [\n      { table: schema.products, on: eq(schema.sales.productId, schema.products.id) },\n      { table: schema.customers, on: eq(schema.sales.customerId, schema.customers.id) }\n    ]\n  }),\n  \n  dimensions: {\n    customerName: {\n      name: &#39;customerName&#39;,\n      title: &#39;Customer Name&#39;,\n      type: &#39;string&#39;,\n      sql: schema.customers.name\n    },\n    productName: {\n      name: &#39;productName&#39;,\n      title: &#39;Product Name&#39;, \n      type: &#39;string&#39;,\n      sql: schema.products.name\n    },\n    productCategory: {\n      name: &#39;productCategory&#39;,\n      title: &#39;Product Category&#39;,\n      type: &#39;string&#39;, \n      sql: schema.products.category\n    },\n    orderDate: {\n      name: &#39;orderDate&#39;,\n      title: &#39;Order Date&#39;,\n      type: &#39;time&#39;,\n      sql: schema.sales.orderDate\n    }\n  },\n  \n  measures: {\n    totalSales: {\n      name: &#39;totalSales&#39;,\n      title: &#39;Total Sales&#39;,\n      type: &#39;sum&#39;,\n      sql: schema.sales.amount\n    },\n    orderCount: {\n      name: &#39;orderCount&#39;,\n      title: &#39;Number of Orders&#39;,\n      type: &#39;count&#39;, \n      sql: schema.sales.id\n    },\n    averageOrderValue: {\n      name: &#39;averageOrderValue&#39;,\n      title: &#39;Average Order Value&#39;,\n      type: &#39;avg&#39;,\n      sql: schema.sales.amount\n    },\n    totalQuantity: {\n      name: &#39;totalQuantity&#39;,\n      title: &#39;Total Quantity Sold&#39;,\n      type: &#39;sum&#39;,\n      sql: schema.sales.quantity\n    }\n  }\n});\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"how-queries-work\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">How Queries Work</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Once you&#39;ve defined your cube, you can query it using a simple JSON structure:</p><div class=\"relative group\">\n    <pre class=\"language-json rounded-lg overflow-x-auto mb-4\"><code class=\"language-json\">{\n  &quot;measures&quot;: [&quot;Sales.totalSales&quot;, &quot;Sales.orderCount&quot;],\n  &quot;dimensions&quot;: [&quot;Sales.productCategory&quot;, &quot;Sales.customerName&quot;],\n  &quot;timeDimensions&quot;: [{\n    &quot;dimension&quot;: &quot;Sales.orderDate&quot;,\n    &quot;granularity&quot;: &quot;month&quot;\n  }],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Sales.productCategory&quot;, \n    &quot;operator&quot;: &quot;equals&quot;,\n    &quot;values&quot;: [&quot;Electronics&quot;]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"{\n  &quot;measures&quot;: [&quot;Sales.totalSales&quot;, &quot;Sales.orderCount&quot;],\n  &quot;dimensions&quot;: [&quot;Sales.productCategory&quot;, &quot;Sales.customerName&quot;],\n  &quot;timeDimensions&quot;: [{\n    &quot;dimension&quot;: &quot;Sales.orderDate&quot;,\n    &quot;granularity&quot;: &quot;month&quot;\n  }],\n  &quot;filters&quot;: [{\n    &quot;member&quot;: &quot;Sales.productCategory&quot;, \n    &quot;operator&quot;: &quot;equals&quot;,\n    &quot;values&quot;: [&quot;Electronics&quot;]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">This query will:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Sum up total sales</strong> and <strong class=\"font-semibold text-slate-700\">count orders</strong> (measures)</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Group by</strong> product category and customer name (dimensions)  </li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Group by month</strong> using the order date (time dimension)</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Filter to</strong> only Electronics products (filter)</li></ol><h2 id=\"common-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Patterns</h2><h3 id=\"basic-aggregations\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Aggregations</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  // Count records\n  recordCount: { type: &#39;count&#39;, sql: schema.table.id },\n  \n  // Sum amounts\n  totalRevenue: { type: &#39;sum&#39;, sql: schema.table.amount },\n  \n  // Calculate averages  \n  avgOrderValue: { type: &#39;avg&#39;, sql: schema.table.orderValue },\n  \n  // Find min/max values\n  minPrice: { type: &#39;min&#39;, sql: schema.table.price },\n  maxPrice: { type: &#39;max&#39;, sql: schema.table.price }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  // Count records\n  recordCount: { type: &#39;count&#39;, sql: schema.table.id },\n  \n  // Sum amounts\n  totalRevenue: { type: &#39;sum&#39;, sql: schema.table.amount },\n  \n  // Calculate averages  \n  avgOrderValue: { type: &#39;avg&#39;, sql: schema.table.orderValue },\n  \n  // Find min/max values\n  minPrice: { type: &#39;min&#39;, sql: schema.table.price },\n  maxPrice: { type: &#39;max&#39;, sql: schema.table.price }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"time-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Time Dimensions</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  createdDate: {\n    type: &#39;time&#39;,\n    sql: schema.table.createdAt\n  },\n  updatedDate: {\n    type: &#39;time&#39;, \n    sql: schema.table.updatedAt\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  createdDate: {\n    type: &#39;time&#39;,\n    sql: schema.table.createdAt\n  },\n  updatedDate: {\n    type: &#39;time&#39;, \n    sql: schema.table.updatedAt\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"categorical-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Categorical Dimensions</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  status: {\n    type: &#39;string&#39;,\n    sql: schema.table.status\n  },\n  category: {\n    type: &#39;string&#39;,\n    sql: schema.table.category  \n  },\n  isActive: {\n    type: &#39;boolean&#39;,\n    sql: schema.table.isActive\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  status: {\n    type: &#39;string&#39;,\n    sql: schema.table.status\n  },\n  category: {\n    type: &#39;string&#39;,\n    sql: schema.table.category  \n  },\n  isActive: {\n    type: &#39;boolean&#39;,\n    sql: schema.table.isActive\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/cubes\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Cubes</strong></a> - Deep dive into cube definitions</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/dimensions\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Dimensions</strong></a> - Advanced dimension patterns</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/measures\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Measures</strong></a> - Custom calculations and aggregations</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/joins\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Joins</strong></a> - Multi-cube query patterns</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Security</strong></a> - Advanced security patterns</li></ul>","path":"semantic-layer/index.md"},
  'semantic-layer/cubes': {"slug":"semantic-layer/cubes","title":"Cubes","content":"<h1 id=\"cubes\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Cubes</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Cubes are the core building blocks of Drizzle Cube&#39;s semantic layer. A cube defines a logical data model that combines SQL queries with dimensions and measures, providing a type-safe interface for analytics queries.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Cubes in Drizzle Cube are <strong class=\"font-semibold text-slate-700\">Drizzle ORM-first</strong>, meaning they leverage Drizzle&#39;s query builder for type safety and SQL injection prevention. Each cube represents a dataset that can be queried through dimensions (categorical data) and measures (metrics and aggregations).</p><h2 id=\"basic-cube-structure\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Basic Cube Structure</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport type { QueryContext, BaseQueryDefinition, Cube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube: Cube&lt;Schema&gt; = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  description: &#39;Employee data and metrics&#39;,\n  \n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  \n  dimensions: {\n    // Categorical data fields\n  },\n  \n  measures: {\n    // Metrics and aggregations\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { eq } from &#39;drizzle-orm&#39;\nimport { defineCube } from &#39;drizzle-cube/server&#39;\nimport type { QueryContext, BaseQueryDefinition, Cube } from &#39;drizzle-cube/server&#39;\nimport { employees, departments } from &#39;./schema&#39;\n\nexport const employeesCube: Cube&lt;Schema&gt; = defineCube(&#39;Employees&#39;, {\n  title: &#39;Employee Analytics&#39;,\n  description: &#39;Employee data and metrics&#39;,\n  \n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }),\n  \n  dimensions: {\n    // Categorical data fields\n  },\n  \n  measures: {\n    // Metrics and aggregations\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"core-concepts\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Core Concepts</h2><h3 id=\"cube-definition-function\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Cube Definition Function</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">defineCube()</code> function creates a type-safe cube definition with the following signature:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">defineCube(name: string, config: CubeConfig): Cube</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"defineCube(name: string, config: CubeConfig): Cube\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">name</strong>: Unique identifier for the cube</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">config</strong>: Configuration object containing SQL, dimensions, measures, and joins</li></ul><h3 id=\"sql-function\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">SQL Function</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">sql</code> property defines the base query for the cube using Drizzle&#39;s query builder:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  joins: [\n    {\n      table: departments,\n      on: and(\n        eq(employees.departmentId, departments.id),\n        eq(departments.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  joins: [\n    {\n      table: departments,\n      on: and(\n        eq(employees.departmentId, departments.id),\n        eq(departments.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Key Features:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type Safety</strong>: Uses Drizzle schema types</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security Context</strong>: Automatic tenant filtering</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Join Support</strong>: Define table relationships</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">SQL Injection Prevention</strong>: Parameterized queries only</li></ul><h2 id=\"complete-example\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Complete Example</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Here&#39;s a comprehensive cube example with all major features:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export const productivityCube: Cube&lt;Schema&gt; = defineCube(&#39;Productivity&#39;, {\n  title: &#39;Productivity Analytics&#39;,\n  description: &#39;Daily productivity metrics including code output and deployments&#39;,\n  \n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: productivity,\n    joins: [\n      {\n        table: employees,\n        on: and(\n          eq(productivity.employeeId, employees.id),\n          eq(employees.organisationId, ctx.securityContext.organisationId)\n        ),\n        type: &#39;left&#39;\n      }\n    ],\n    where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n  }),\n\n  // Cross-cube joins for multi-cube queries\n  joins: {\n    &#39;Employees&#39;: {\n      targetCube: &#39;Employees&#39;,\n      condition: () =&gt; eq(productivity.employeeId, employees.id),\n      type: &#39;left&#39;,\n      relationship: &#39;belongsTo&#39;\n    }\n  },\n  \n  dimensions: {\n    date: {\n      name: &#39;date&#39;,\n      title: &#39;Date&#39;,\n      type: &#39;time&#39;,\n      sql: productivity.date\n    },\n    happinessLevel: {\n      name: &#39;happinessLevel&#39;,\n      title: &#39;Happiness Level&#39;,\n      type: &#39;string&#39;,\n      sql: sql`\n        CASE \n          WHEN ${productivity.happinessIndex} &gt;= 8 THEN &#39;High&#39;\n          WHEN ${productivity.happinessIndex} &gt;= 6 THEN &#39;Medium&#39;\n          ELSE &#39;Low&#39;\n        END\n      `\n    }\n  },\n  \n  measures: {\n    recordCount: {\n      name: &#39;recordCount&#39;,\n      title: &#39;Total Records&#39;,\n      type: &#39;count&#39;,\n      sql: productivity.id\n    },\n    avgHappinessIndex: {\n      name: &#39;avgHappinessIndex&#39;,\n      title: &#39;Average Happiness&#39;,\n      type: &#39;avg&#39;,\n      sql: productivity.happinessIndex\n    },\n    productivityScore: {\n      name: &#39;productivityScore&#39;,\n      title: &#39;Productivity Score&#39;,\n      type: &#39;avg&#39;,\n      sql: sql`(${productivity.linesOfCode} + ${productivity.pullRequests} * 50 + ${productivity.liveDeployments} * 100)`,\n      description: &#39;Composite score based on code output, reviews, and deployments&#39;\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export const productivityCube: Cube&lt;Schema&gt; = defineCube(&#39;Productivity&#39;, {\n  title: &#39;Productivity Analytics&#39;,\n  description: &#39;Daily productivity metrics including code output and deployments&#39;,\n  \n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: productivity,\n    joins: [\n      {\n        table: employees,\n        on: and(\n          eq(productivity.employeeId, employees.id),\n          eq(employees.organisationId, ctx.securityContext.organisationId)\n        ),\n        type: &#39;left&#39;\n      }\n    ],\n    where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n  }),\n\n  // Cross-cube joins for multi-cube queries\n  joins: {\n    &#39;Employees&#39;: {\n      targetCube: &#39;Employees&#39;,\n      condition: () =&gt; eq(productivity.employeeId, employees.id),\n      type: &#39;left&#39;,\n      relationship: &#39;belongsTo&#39;\n    }\n  },\n  \n  dimensions: {\n    date: {\n      name: &#39;date&#39;,\n      title: &#39;Date&#39;,\n      type: &#39;time&#39;,\n      sql: productivity.date\n    },\n    happinessLevel: {\n      name: &#39;happinessLevel&#39;,\n      title: &#39;Happiness Level&#39;,\n      type: &#39;string&#39;,\n      sql: sql`\n        CASE \n          WHEN ${productivity.happinessIndex} &gt;= 8 THEN &#39;High&#39;\n          WHEN ${productivity.happinessIndex} &gt;= 6 THEN &#39;Medium&#39;\n          ELSE &#39;Low&#39;\n        END\n      `\n    }\n  },\n  \n  measures: {\n    recordCount: {\n      name: &#39;recordCount&#39;,\n      title: &#39;Total Records&#39;,\n      type: &#39;count&#39;,\n      sql: productivity.id\n    },\n    avgHappinessIndex: {\n      name: &#39;avgHappinessIndex&#39;,\n      title: &#39;Average Happiness&#39;,\n      type: &#39;avg&#39;,\n      sql: productivity.happinessIndex\n    },\n    productivityScore: {\n      name: &#39;productivityScore&#39;,\n      title: &#39;Productivity Score&#39;,\n      type: &#39;avg&#39;,\n      sql: sql`(${productivity.linesOfCode} + ${productivity.pullRequests} * 50 + ${productivity.liveDeployments} * 100)`,\n      description: &#39;Composite score based on code output, reviews, and deployments&#39;\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"security-context-integration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Security Context Integration</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Every cube <strong class=\"font-semibold text-slate-700\">must</strong> include security context filtering to ensure multi-tenant security:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  // REQUIRED: Filter by organisation/tenant\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  // REQUIRED: Filter by organisation/tenant\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security Best Practices:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Always filter by tenant/organisation ID</li><li class=\"leading-relaxed\">Apply security context to all joined tables</li><li class=\"leading-relaxed\">Use parameterized queries (automatic with Drizzle)</li><li class=\"leading-relaxed\">Never construct SQL strings manually</li></ul><h2 id=\"advanced-features\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Features</h2><h3 id=\"complex-sql-with-ctes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Complex SQL with CTEs</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  with: {\n    activeEmployees: ctx.db\n      .select()\n      .from(employees)\n      .where(and(\n        eq(employees.active, true),\n        eq(employees.organisationId, ctx.securityContext.organisationId)\n      ))\n  },\n  from: sql`activeEmployees`,\n  where: sql`true` // Additional filtering can be applied\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  with: {\n    activeEmployees: ctx.db\n      .select()\n      .from(employees)\n      .where(and(\n        eq(employees.active, true),\n        eq(employees.organisationId, ctx.securityContext.organisationId)\n      ))\n  },\n  from: sql`activeEmployees`,\n  where: sql`true` // Additional filtering can be applied\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"dynamic-filtering-with-context\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dynamic Filtering with Context</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n  const baseWhere = eq(employees.organisationId, ctx.securityContext.organisationId)\n  \n  // Add conditional filters based on security context\n  const additionalFilters = []\n  if (ctx.securityContext.departmentId) {\n    additionalFilters.push(eq(employees.departmentId, ctx.securityContext.departmentId))\n  }\n  \n  return {\n    from: employees,\n    where: additionalFilters.length &gt; 0 \n      ? and(baseWhere, ...additionalFilters)\n      : baseWhere\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n  const baseWhere = eq(employees.organisationId, ctx.securityContext.organisationId)\n  \n  // Add conditional filters based on security context\n  const additionalFilters = []\n  if (ctx.securityContext.departmentId) {\n    additionalFilters.push(eq(employees.departmentId, ctx.securityContext.departmentId))\n  }\n  \n  return {\n    from: employees,\n    where: additionalFilters.length &gt; 0 \n      ? and(baseWhere, ...additionalFilters)\n      : baseWhere\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"cube-registration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Cube Registration</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Register cubes with the semantic layer compiler:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { SemanticLayerCompiler, createDatabaseExecutor } from &#39;drizzle-cube/server&#39;\n\nconst executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)\nconst semanticLayer = new SemanticLayerCompiler({ \n  databaseExecutor: executor \n})\n\n// Register individual cubes\nsemanticLayer.registerCube(employeesCube)\nsemanticLayer.registerCube(productivityCube)\n\n// Or register multiple cubes\nconst allCubes = [employeesCube, productivityCube, departmentsCube]\nallCubes.forEach(cube =&gt; semanticLayer.registerCube(cube))</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { SemanticLayerCompiler, createDatabaseExecutor } from &#39;drizzle-cube/server&#39;\n\nconst executor = createDatabaseExecutor(db, schema, &#39;postgres&#39;)\nconst semanticLayer = new SemanticLayerCompiler({ \n  databaseExecutor: executor \n})\n\n// Register individual cubes\nsemanticLayer.registerCube(employeesCube)\nsemanticLayer.registerCube(productivityCube)\n\n// Or register multiple cubes\nconst allCubes = [employeesCube, productivityCube, departmentsCube]\nallCubes.forEach(cube =&gt; semanticLayer.registerCube(cube))\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Always Use Security Context</strong>: Every cube must filter by tenant/organisation</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Leverage Type Safety</strong>: Use Drizzle schema types throughout</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Descriptive Names</strong>: Use clear, business-friendly names and titles</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Document Complex Logic</strong>: Add descriptions to calculated measures</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Test Thoroughly</strong>: Verify security isolation and query correctness</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Follow Naming Conventions</strong>: Use camelCase for internal names, Title Case for display</li></ol><h2 id=\"testing-cubes\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Cubes</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { describe, it, expect } from &#39;vitest&#39;\nimport { testEmployeesCube } from &#39;./test-cubes&#39;\n\ndescribe(&#39;Employees Cube&#39;, () =&gt; {\n  it(&#39;should filter by organisation&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    expect(result.rawData()).toHaveLength(expectedCount)\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { describe, it, expect } from &#39;vitest&#39;\nimport { testEmployeesCube } from &#39;./test-cubes&#39;\n\ndescribe(&#39;Employees Cube&#39;, () =&gt; {\n  it(&#39;should filter by organisation&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    expect(result.rawData()).toHaveLength(expectedCount)\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"common-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Patterns</h2><h3 id=\"single-table-cube\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Single Table Cube</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx) =&gt; ({\n  from: employees,\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx) =&gt; ({\n  from: employees,\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"multi-table-cube-with-joins\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Multi-Table Cube with Joins</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx) =&gt; ({\n  from: productivity,\n  joins: [\n    {\n      table: employees,\n      on: eq(productivity.employeeId, employees.id),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx) =&gt; ({\n  from: productivity,\n  joins: [\n    {\n      table: employees,\n      on: eq(productivity.employeeId, employees.id),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"filtered-cube-active-records-only\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Filtered Cube (Active Records Only)</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx) =&gt; ({\n  from: employees,\n  where: and(\n    eq(employees.organisationId, ctx.securityContext.organisationId),\n    eq(employees.active, true)\n  )\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx) =&gt; ({\n  from: employees,\n  where: and(\n    eq(employees.organisationId, ctx.securityContext.organisationId),\n    eq(employees.active, true)\n  )\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"semantic-layer/dimensions\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Dimensions</a> to understand categorical data</li><li class=\"leading-relaxed\">Explore <a href=\"#\" data-help-link=\"semantic-layer/measures\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Measures</a> for metrics and aggregations  </li><li class=\"leading-relaxed\">Understand <a href=\"#\" data-help-link=\"semantic-layer/joins\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Joins</a> for multi-cube relationships</li><li class=\"leading-relaxed\">Review <a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Security</a> for multi-tenant patterns</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Visual cube designer interface</li><li class=\"leading-relaxed\">Cube validation and linting tools</li><li class=\"leading-relaxed\">Automatic cube generation from schema</li><li class=\"leading-relaxed\">Cube performance analytics and optimization hints</li></ul>","path":"semantic-layer/cubes.md"},
  'semantic-layer/dimensions': {"slug":"semantic-layer/dimensions","title":"Dimensions","content":"<h1 id=\"dimensions\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Dimensions</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Dimensions are categorical data fields in your cubes that represent the &quot;what&quot;, &quot;where&quot;, &quot;when&quot;, and &quot;who&quot; of your data. They provide the context for slicing and dicing your measures and are essential for grouping, filtering, and organizing analytics queries.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">In Drizzle Cube, dimensions are type-safe fields that reference columns from your Drizzle schema. They support various data types and can include computed values using SQL expressions. All dimensions benefit from Drizzle&#39;s type safety and SQL injection prevention.</p><h2 id=\"basic-dimension-structure\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Basic Dimension Structure</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  name: {\n    name: &#39;name&#39;,           // Internal identifier\n    title: &#39;Employee Name&#39;, // Display name\n    type: &#39;string&#39;,         // Data type\n    sql: employees.name     // Drizzle column reference\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  name: {\n    name: &#39;name&#39;,           // Internal identifier\n    title: &#39;Employee Name&#39;, // Display name\n    type: &#39;string&#39;,         // Data type\n    sql: employees.name     // Drizzle column reference\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"dimension-types\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Dimension Types</h2><h3 id=\"string-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">String Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Used for text and categorical data:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  name: {\n    name: &#39;name&#39;,\n    title: &#39;Employee Name&#39;,\n    type: &#39;string&#39;,\n    sql: employees.name\n  },\n  email: {\n    name: &#39;email&#39;,\n    title: &#39;Email Address&#39;,\n    type: &#39;string&#39;,\n    sql: employees.email\n  },\n  departmentName: {\n    name: &#39;departmentName&#39;,\n    title: &#39;Department&#39;,\n    type: &#39;string&#39;,\n    sql: departments.name // From joined table\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  name: {\n    name: &#39;name&#39;,\n    title: &#39;Employee Name&#39;,\n    type: &#39;string&#39;,\n    sql: employees.name\n  },\n  email: {\n    name: &#39;email&#39;,\n    title: &#39;Email Address&#39;,\n    type: &#39;string&#39;,\n    sql: employees.email\n  },\n  departmentName: {\n    name: &#39;departmentName&#39;,\n    title: &#39;Department&#39;,\n    type: &#39;string&#39;,\n    sql: departments.name // From joined table\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"number-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Number Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">For numeric categorical data:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  id: {\n    name: &#39;id&#39;,\n    title: &#39;Employee ID&#39;,\n    type: &#39;number&#39;,\n    sql: employees.id,\n    primaryKey: true  // Mark as primary key\n  },\n  departmentId: {\n    name: &#39;departmentId&#39;,\n    title: &#39;Department ID&#39;,\n    type: &#39;number&#39;,\n    sql: employees.departmentId\n  },\n  happinessIndex: {\n    name: &#39;happinessIndex&#39;,\n    title: &#39;Happiness Score&#39;,\n    type: &#39;number&#39;,\n    sql: productivity.happinessIndex\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  id: {\n    name: &#39;id&#39;,\n    title: &#39;Employee ID&#39;,\n    type: &#39;number&#39;,\n    sql: employees.id,\n    primaryKey: true  // Mark as primary key\n  },\n  departmentId: {\n    name: &#39;departmentId&#39;,\n    title: &#39;Department ID&#39;,\n    type: &#39;number&#39;,\n    sql: employees.departmentId\n  },\n  happinessIndex: {\n    name: &#39;happinessIndex&#39;,\n    title: &#39;Happiness Score&#39;,\n    type: &#39;number&#39;,\n    sql: productivity.happinessIndex\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"boolean-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Boolean Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">For true/false categorical data:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  isActive: {\n    name: &#39;isActive&#39;,\n    title: &#39;Active Status&#39;,\n    type: &#39;boolean&#39;,\n    sql: employees.active\n  },\n  isDayOff: {\n    name: &#39;isDayOff&#39;,\n    title: &#39;Day Off&#39;,\n    type: &#39;boolean&#39;,\n    sql: productivity.daysOff\n  },\n  isWorkDay: {\n    name: &#39;isWorkDay&#39;,\n    title: &#39;Work Day&#39;,\n    type: &#39;boolean&#39;,\n    sql: sql`NOT ${productivity.daysOff}` // Computed boolean\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  isActive: {\n    name: &#39;isActive&#39;,\n    title: &#39;Active Status&#39;,\n    type: &#39;boolean&#39;,\n    sql: employees.active\n  },\n  isDayOff: {\n    name: &#39;isDayOff&#39;,\n    title: &#39;Day Off&#39;,\n    type: &#39;boolean&#39;,\n    sql: productivity.daysOff\n  },\n  isWorkDay: {\n    name: &#39;isWorkDay&#39;,\n    title: &#39;Work Day&#39;,\n    type: &#39;boolean&#39;,\n    sql: sql`NOT ${productivity.daysOff}` // Computed boolean\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"time-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Time Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">For date and time data - the foundation for time-series analytics:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  createdAt: {\n    name: &#39;createdAt&#39;,\n    title: &#39;Hire Date&#39;,\n    type: &#39;time&#39;,\n    sql: employees.createdAt\n  },\n  date: {\n    name: &#39;date&#39;,\n    title: &#39;Date&#39;,\n    type: &#39;time&#39;,\n    sql: productivity.date\n  },\n  updatedAt: {\n    name: &#39;updatedAt&#39;,\n    title: &#39;Last Updated&#39;,\n    type: &#39;time&#39;,\n    sql: employees.updatedAt\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  createdAt: {\n    name: &#39;createdAt&#39;,\n    title: &#39;Hire Date&#39;,\n    type: &#39;time&#39;,\n    sql: employees.createdAt\n  },\n  date: {\n    name: &#39;date&#39;,\n    title: &#39;Date&#39;,\n    type: &#39;time&#39;,\n    sql: productivity.date\n  },\n  updatedAt: {\n    name: &#39;updatedAt&#39;,\n    title: &#39;Last Updated&#39;,\n    type: &#39;time&#39;,\n    sql: employees.updatedAt\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Time Dimension Usage:</strong>\nTime dimensions are used in <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">timeDimensions</code> queries with granularity:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [],\n  timeDimensions: [{\n    dimension: &#39;Employees.createdAt&#39;,\n    granularity: &#39;month&#39;, // year, quarter, month, week, day, hour\n    dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [],\n  timeDimensions: [{\n    dimension: &#39;Employees.createdAt&#39;,\n    granularity: &#39;month&#39;, // year, quarter, month, week, day, hour\n    dateRange: [&#39;2023-01-01&#39;, &#39;2023-12-31&#39;]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"computed-dimensions\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Computed Dimensions</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Create dimensions with custom SQL expressions:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  happinessLevel: {\n    name: &#39;happinessLevel&#39;,\n    title: &#39;Happiness Level&#39;,\n    type: &#39;string&#39;,\n    sql: sql`\n      CASE \n        WHEN ${productivity.happinessIndex} &lt;= 3 THEN &#39;Low&#39;\n        WHEN ${productivity.happinessIndex} &lt;= 6 THEN &#39;Medium&#39;\n        WHEN ${productivity.happinessIndex} &lt;= 8 THEN &#39;High&#39;\n        ELSE &#39;Very High&#39;\n      END\n    `\n  },\n  ageGroup: {\n    name: &#39;ageGroup&#39;,\n    title: &#39;Age Group&#39;,\n    type: &#39;string&#39;,\n    sql: sql`\n      CASE \n        WHEN EXTRACT(YEAR FROM AGE(${employees.birthDate})) &lt; 30 THEN &#39;Under 30&#39;\n        WHEN EXTRACT(YEAR FROM AGE(${employees.birthDate})) &lt; 50 THEN &#39;30-49&#39;\n        ELSE &#39;50+&#39;\n      END\n    `\n  },\n  salaryBand: {\n    name: &#39;salaryBand&#39;,\n    title: &#39;Salary Band&#39;,\n    type: &#39;string&#39;,\n    sql: sql`\n      CASE \n        WHEN ${employees.salary} &lt; 50000 THEN &#39;Entry Level&#39;\n        WHEN ${employees.salary} &lt; 100000 THEN &#39;Mid Level&#39;\n        ELSE &#39;Senior Level&#39;\n      END\n    `\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  happinessLevel: {\n    name: &#39;happinessLevel&#39;,\n    title: &#39;Happiness Level&#39;,\n    type: &#39;string&#39;,\n    sql: sql`\n      CASE \n        WHEN ${productivity.happinessIndex} &lt;= 3 THEN &#39;Low&#39;\n        WHEN ${productivity.happinessIndex} &lt;= 6 THEN &#39;Medium&#39;\n        WHEN ${productivity.happinessIndex} &lt;= 8 THEN &#39;High&#39;\n        ELSE &#39;Very High&#39;\n      END\n    `\n  },\n  ageGroup: {\n    name: &#39;ageGroup&#39;,\n    title: &#39;Age Group&#39;,\n    type: &#39;string&#39;,\n    sql: sql`\n      CASE \n        WHEN EXTRACT(YEAR FROM AGE(${employees.birthDate})) &lt; 30 THEN &#39;Under 30&#39;\n        WHEN EXTRACT(YEAR FROM AGE(${employees.birthDate})) &lt; 50 THEN &#39;30-49&#39;\n        ELSE &#39;50+&#39;\n      END\n    `\n  },\n  salaryBand: {\n    name: &#39;salaryBand&#39;,\n    title: &#39;Salary Band&#39;,\n    type: &#39;string&#39;,\n    sql: sql`\n      CASE \n        WHEN ${employees.salary} &lt; 50000 THEN &#39;Entry Level&#39;\n        WHEN ${employees.salary} &lt; 100000 THEN &#39;Mid Level&#39;\n        ELSE &#39;Senior Level&#39;\n      END\n    `\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"primary-key-dimensions\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Primary Key Dimensions</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Mark dimensions as primary keys for unique identification:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  id: {\n    name: &#39;id&#39;,\n    title: &#39;Employee ID&#39;,\n    type: &#39;number&#39;,\n    sql: employees.id,\n    primaryKey: true  // Enables drill-down and unique identification\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  id: {\n    name: &#39;id&#39;,\n    title: &#39;Employee ID&#39;,\n    type: &#39;number&#39;,\n    sql: employees.id,\n    primaryKey: true  // Enables drill-down and unique identification\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Primary Key Benefits:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Enables drill-down functionality</li><li class=\"leading-relaxed\">Improves query performance</li><li class=\"leading-relaxed\">Provides unique record identification</li><li class=\"leading-relaxed\">Required for some visualization types</li></ul><h2 id=\"cross-table-dimensions\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Cross-Table Dimensions</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Access dimensions from joined tables:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// In cube SQL definition\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: productivity,\n  joins: [\n    {\n      table: employees,\n      on: eq(productivity.employeeId, employees.id),\n      type: &#39;left&#39;\n    },\n    {\n      table: departments,\n      on: eq(employees.departmentId, departments.id),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n}),\n\n// Dimensions can reference any joined table\ndimensions: {\n  employeeName: {\n    name: &#39;employeeName&#39;,\n    title: &#39;Employee Name&#39;,\n    type: &#39;string&#39;,\n    sql: employees.name // From joined employees table\n  },\n  departmentName: {\n    name: &#39;departmentName&#39;,\n    title: &#39;Department&#39;,\n    type: &#39;string&#39;,\n    sql: departments.name // From joined departments table\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// In cube SQL definition\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: productivity,\n  joins: [\n    {\n      table: employees,\n      on: eq(productivity.employeeId, employees.id),\n      type: &#39;left&#39;\n    },\n    {\n      table: departments,\n      on: eq(employees.departmentId, departments.id),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n}),\n\n// Dimensions can reference any joined table\ndimensions: {\n  employeeName: {\n    name: &#39;employeeName&#39;,\n    title: &#39;Employee Name&#39;,\n    type: &#39;string&#39;,\n    sql: employees.name // From joined employees table\n  },\n  departmentName: {\n    name: &#39;departmentName&#39;,\n    title: &#39;Department&#39;,\n    type: &#39;string&#39;,\n    sql: departments.name // From joined departments table\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"date-and-time-granularity\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Date and Time Granularity</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Time dimensions support various granularity levels:</p><div class=\"overflow-x-auto mb-6\">\n    <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n      <thead class=\"bg-gray-50\"><tr><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Granularity</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Description</th><th class=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Format Example</th></tr></thead>\n      <tbody><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`year`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Annual grouping</td><td class=\"px-4 py-3 text-sm text-gray-600\">2023</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`quarter`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Quarterly grouping</td><td class=\"px-4 py-3 text-sm text-gray-600\">2023-Q1</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`month`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Monthly grouping</td><td class=\"px-4 py-3 text-sm text-gray-600\">2023-01</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`week`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Weekly grouping</td><td class=\"px-4 py-3 text-sm text-gray-600\">2023-W01</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`day`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Daily grouping</td><td class=\"px-4 py-3 text-sm text-gray-600\">2023-01-15</td></tr><tr class=\"border-b border-gray-200\"><td class=\"px-4 py-3 text-sm text-gray-600\">`hour`</td><td class=\"px-4 py-3 text-sm text-gray-600\">Hourly grouping</td><td class=\"px-4 py-3 text-sm text-gray-600\">2023-01-15 14:00</td></tr></tbody>\n    </table>\n  </div><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Query with time dimensions\nconst timeSeriesQuery = {\n  measures: [&#39;Productivity.totalLinesOfCode&#39;],\n  dimensions: [&#39;Productivity.departmentName&#39;],\n  timeDimensions: [{\n    dimension: &#39;Productivity.date&#39;,\n    granularity: &#39;week&#39;,\n    dateRange: [&#39;2023-01-01&#39;, &#39;2023-03-31&#39;]\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Query with time dimensions\nconst timeSeriesQuery = {\n  measures: [&#39;Productivity.totalLinesOfCode&#39;],\n  dimensions: [&#39;Productivity.departmentName&#39;],\n  timeDimensions: [{\n    dimension: &#39;Productivity.date&#39;,\n    granularity: &#39;week&#39;,\n    dateRange: [&#39;2023-01-01&#39;, &#39;2023-03-31&#39;]\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"dimension-formatting-and-display\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Dimension Formatting and Display</h2><h3 id=\"custom-formatting\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Formatting</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The server does NOT format any responses, it is returned as is from the database, with the exceptio of time-dimensions.  This is included only to allow the client to format it as per its requirements (e.g. internationalisation, timezones etc).</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  salary: {\n    name: &#39;salary&#39;,\n    title: &#39;Salary&#39;,\n    type: &#39;number&#39;,\n    sql: employees.salary,\n    format: &#39;currency&#39;, // Hint for client formatting\n    description: &#39;Annual salary in USD&#39;\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  salary: {\n    name: &#39;salary&#39;,\n    title: &#39;Salary&#39;,\n    type: &#39;number&#39;,\n    sql: employees.salary,\n    format: &#39;currency&#39;, // Hint for client formatting\n    description: &#39;Annual salary in USD&#39;\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"usage-in-queries\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Usage in Queries</h2><h3 id=\"grouping-by-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Grouping by Dimensions</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const query = {\n  measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;, &#39;Employees.isActive&#39;]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const query = {\n  measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;, &#39;Employees.isActive&#39;]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"filtering-by-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Filtering by Dimensions</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.name&#39;],\n  filters: [\n    {\n      member: &#39;Employees.departmentName&#39;,\n      operator: &#39;equals&#39;,\n      values: [&#39;Engineering&#39;, &#39;Marketing&#39;]\n    },\n    {\n      member: &#39;Employees.isActive&#39;,\n      operator: &#39;equals&#39;,\n      values: [true]\n    }\n  ]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.name&#39;],\n  filters: [\n    {\n      member: &#39;Employees.departmentName&#39;,\n      operator: &#39;equals&#39;,\n      values: [&#39;Engineering&#39;, &#39;Marketing&#39;]\n    },\n    {\n      member: &#39;Employees.isActive&#39;,\n      operator: &#39;equals&#39;,\n      values: [true]\n    }\n  ]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"sorting-by-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Sorting by Dimensions</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  order: [\n    [&#39;Employees.departmentName&#39;, &#39;asc&#39;],\n    [&#39;Employees.count&#39;, &#39;desc&#39;]\n  ]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  order: [\n    [&#39;Employees.departmentName&#39;, &#39;asc&#39;],\n    [&#39;Employees.count&#39;, &#39;desc&#39;]\n  ]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Use Descriptive Names</strong>: Choose clear, business-friendly titles</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Leverage Type Safety</strong>: Always reference Drizzle schema columns</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Primary Keys</strong>: Mark unique identifiers as primary keys</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Computed Logic</strong>: Use SQL expressions for business logic</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Time Dimensions</strong>: Always include relevant time fields</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Cross-Table Access</strong>: Leverage joins for related data</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Formatting Hints</strong>: Add format hints for client display</li></ol><h2 id=\"security-considerations\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Security Considerations</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Dimensions inherit security from the cube&#39;s base SQL:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Security is applied at the cube level\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n}),\n\n// Dimensions automatically respect cube security\ndimensions: {\n  name: {\n    name: &#39;name&#39;,\n    title: &#39;Employee Name&#39;,\n    type: &#39;string&#39;,\n    sql: employees.name // Automatically filtered by organisation\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Security is applied at the cube level\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n}),\n\n// Dimensions automatically respect cube security\ndimensions: {\n  name: {\n    name: &#39;name&#39;,\n    title: &#39;Employee Name&#39;,\n    type: &#39;string&#39;,\n    sql: employees.name // Automatically filtered by organisation\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"testing-dimensions\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Dimensions</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { describe, it, expect } from &#39;vitest&#39;\n\ndescribe(&#39;Employee Dimensions&#39;, () =&gt; {\n  it(&#39;should group by department correctly&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: [&#39;Employees.departmentName&#39;]\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()\n    expect(data).toHaveLength(3) // 3 departments\n    expect(data[0][&#39;Employees.departmentName&#39;]).toBeDefined()\n  })\n  \n  it(&#39;should handle computed dimensions&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: [&#39;Employees.happinessLevel&#39;]\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()\n    const levels = data.map(row =&gt; row[&#39;Employees.happinessLevel&#39;])\n    expect(levels).toContain(&#39;High&#39;)\n    expect(levels).toContain(&#39;Medium&#39;)\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { describe, it, expect } from &#39;vitest&#39;\n\ndescribe(&#39;Employee Dimensions&#39;, () =&gt; {\n  it(&#39;should group by department correctly&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: [&#39;Employees.departmentName&#39;]\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()\n    expect(data).toHaveLength(3) // 3 departments\n    expect(data[0][&#39;Employees.departmentName&#39;]).toBeDefined()\n  })\n  \n  it(&#39;should handle computed dimensions&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: [&#39;Employees.happinessLevel&#39;]\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()\n    const levels = data.map(row =&gt; row[&#39;Employees.happinessLevel&#39;])\n    expect(levels).toContain(&#39;High&#39;)\n    expect(levels).toContain(&#39;Medium&#39;)\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"common-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Patterns</h2><h3 id=\"standard-string-dimension\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Standard String Dimension</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">name: {\n  name: &#39;name&#39;,\n  title: &#39;Name&#39;,\n  type: &#39;string&#39;,\n  sql: table.name\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"name: {\n  name: &#39;name&#39;,\n  title: &#39;Name&#39;,\n  type: &#39;string&#39;,\n  sql: table.name\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"date-dimension\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Date Dimension</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">createdAt: {\n  name: &#39;createdAt&#39;,\n  title: &#39;Created Date&#39;,\n  type: &#39;time&#39;,\n  sql: table.createdAt\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"createdAt: {\n  name: &#39;createdAt&#39;,\n  title: &#39;Created Date&#39;,\n  type: &#39;time&#39;,\n  sql: table.createdAt\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"computed-category\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Computed Category</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">category: {\n  name: &#39;category&#39;,\n  title: &#39;Category&#39;,\n  type: &#39;string&#39;,\n  sql: sql`CASE WHEN ${table.value} &gt; 100 THEN &#39;High&#39; ELSE &#39;Low&#39; END`\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"category: {\n  name: &#39;category&#39;,\n  title: &#39;Category&#39;,\n  type: &#39;string&#39;,\n  sql: sql`CASE WHEN ${table.value} &gt; 100 THEN &#39;High&#39; ELSE &#39;Low&#39; END`\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"semantic-layer/measures\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Measures</a> for metrics and aggregations</li><li class=\"leading-relaxed\">Explore <a href=\"#\" data-help-link=\"semantic-layer/joins\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Joins</a> for multi-cube relationships  </li><li class=\"leading-relaxed\">Review <a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Security</a> patterns</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Dimension validation and constraints</li><li class=\"leading-relaxed\">Automatic dimension suggestions from schema</li><li class=\"leading-relaxed\">Dimension relationship mapping and visualization</li><li class=\"leading-relaxed\">Custom dimension transformations and formatters</li></ul>","path":"semantic-layer/dimensions.md"},
  'semantic-layer/joins': {"slug":"semantic-layer/joins","title":"Joins","content":"<h1 id=\"joins\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Joins</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Joins in Drizzle Cube enable you to combine data from multiple tables and cubes, creating rich, interconnected analytics. There are two types of joins: <strong class=\"font-semibold text-slate-700\">table-level joins</strong> within individual cubes and <strong class=\"font-semibold text-slate-700\">cube-level joins</strong> for multi-cube queries.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube&#39;s join system leverages Drizzle ORM&#39;s type-safe join capabilities to provide secure, performant data relationships. All joins maintain security context and prevent SQL injection through parameterized queries.</p><h2 id=\"table-level-joins\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Table-Level Joins</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Table-level joins occur within a single cube&#39;s SQL definition, allowing you to join multiple database tables into one logical dataset.</p><h3 id=\"basic-table-join-structure\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Table Join Structure</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  joins: [\n    {\n      table: departments,\n      on: and(\n        eq(employees.departmentId, departments.id),\n        eq(departments.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  joins: [\n    {\n      table: departments,\n      on: and(\n        eq(employees.departmentId, departments.id),\n        eq(departments.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"join-types\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Join Types</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Left Join</strong> - Most common, includes all records from the main table:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: [\n  {\n    table: departments,\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;left&#39;\n  }\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: [\n  {\n    table: departments,\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;left&#39;\n  }\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Inner Join</strong> - Only records that exist in both tables:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: [\n  {\n    table: departments,\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;inner&#39;\n  }\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: [\n  {\n    table: departments,\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;inner&#39;\n  }\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Right Join</strong> - Includes all records from the joined table:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: [\n  {\n    table: departments,\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;right&#39;\n  }\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: [\n  {\n    table: departments,\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;right&#39;\n  }\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"multi-table-joins\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Multi-Table Joins</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Join multiple tables in a single cube:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export const productivityCube: Cube&lt;Schema&gt; = defineCube(&#39;Productivity&#39;, {\n  title: &#39;Productivity Analytics&#39;,\n  description: &#39;Employee productivity with department and project data&#39;,\n  \n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: productivity,\n    joins: [\n      // Join to employees table\n      {\n        table: employees,\n        on: and(\n          eq(productivity.employeeId, employees.id),\n          eq(employees.organisationId, ctx.securityContext.organisationId)\n        ),\n        type: &#39;left&#39;\n      },\n      // Join to departments through employees\n      {\n        table: departments,\n        on: and(\n          eq(employees.departmentId, departments.id),\n          eq(departments.organisationId, ctx.securityContext.organisationId)\n        ),\n        type: &#39;left&#39;\n      },\n      // Join to projects table\n      {\n        table: projects,\n        on: and(\n          eq(productivity.projectId, projects.id),\n          eq(projects.organisationId, ctx.securityContext.organisationId)\n        ),\n        type: &#39;left&#39;\n      }\n    ],\n    where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n  }),\n  \n  dimensions: {\n    employeeName: {\n      name: &#39;employeeName&#39;,\n      title: &#39;Employee&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    departmentName: {\n      name: &#39;departmentName&#39;,\n      title: &#39;Department&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    },\n    projectName: {\n      name: &#39;projectName&#39;,\n      title: &#39;Project&#39;,\n      type: &#39;string&#39;,\n      sql: projects.name\n    }\n  }\n  // ... measures\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export const productivityCube: Cube&lt;Schema&gt; = defineCube(&#39;Productivity&#39;, {\n  title: &#39;Productivity Analytics&#39;,\n  description: &#39;Employee productivity with department and project data&#39;,\n  \n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: productivity,\n    joins: [\n      // Join to employees table\n      {\n        table: employees,\n        on: and(\n          eq(productivity.employeeId, employees.id),\n          eq(employees.organisationId, ctx.securityContext.organisationId)\n        ),\n        type: &#39;left&#39;\n      },\n      // Join to departments through employees\n      {\n        table: departments,\n        on: and(\n          eq(employees.departmentId, departments.id),\n          eq(departments.organisationId, ctx.securityContext.organisationId)\n        ),\n        type: &#39;left&#39;\n      },\n      // Join to projects table\n      {\n        table: projects,\n        on: and(\n          eq(productivity.projectId, projects.id),\n          eq(projects.organisationId, ctx.securityContext.organisationId)\n        ),\n        type: &#39;left&#39;\n      }\n    ],\n    where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n  }),\n  \n  dimensions: {\n    employeeName: {\n      name: &#39;employeeName&#39;,\n      title: &#39;Employee&#39;,\n      type: &#39;string&#39;,\n      sql: employees.name\n    },\n    departmentName: {\n      name: &#39;departmentName&#39;,\n      title: &#39;Department&#39;,\n      type: &#39;string&#39;,\n      sql: departments.name\n    },\n    projectName: {\n      name: &#39;projectName&#39;,\n      title: &#39;Project&#39;,\n      type: &#39;string&#39;,\n      sql: projects.name\n    }\n  }\n  // ... measures\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"security-in-table-joins\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Security in Table Joins</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Critical</strong>: Always include security context filtering in join conditions:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: [\n  {\n    table: departments,\n    on: and(\n      eq(employees.departmentId, departments.id),\n      // REQUIRED: Security filtering on joined table\n      eq(departments.organisationId, ctx.securityContext.organisationId)\n    ),\n    type: &#39;left&#39;\n  }\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: [\n  {\n    table: departments,\n    on: and(\n      eq(employees.departmentId, departments.id),\n      // REQUIRED: Security filtering on joined table\n      eq(departments.organisationId, ctx.securityContext.organisationId)\n    ),\n    type: &#39;left&#39;\n  }\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"cube-level-joins\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Cube-Level Joins</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Cube-level joins define relationships between different cubes, enabling multi-cube queries and cross-cube analysis.</p><h3 id=\"basic-cube-join-structure\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Cube Join Structure</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// In the Employees cube\njoins: {\n  &#39;Departments&#39;: {\n    targetCube: &#39;Departments&#39;,\n    condition: () =&gt; eq(employees.departmentId, departments.id),\n    type: &#39;left&#39;,\n    relationship: &#39;belongsTo&#39;\n  }\n}\n\n// In the Productivity cube  \njoins: {\n  &#39;Employees&#39;: {\n    targetCube: &#39;Employees&#39;,\n    condition: () =&gt; eq(productivity.employeeId, employees.id),\n    type: &#39;left&#39;,\n    relationship: &#39;belongsTo&#39;\n  },\n  &#39;Departments&#39;: {\n    targetCube: &#39;Departments&#39;,\n    condition: () =&gt; and(\n      eq(productivity.employeeId, employees.id),\n      eq(employees.departmentId, departments.id)\n    ),\n    type: &#39;left&#39;,\n    relationship: &#39;belongsTo&#39;\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// In the Employees cube\njoins: {\n  &#39;Departments&#39;: {\n    targetCube: &#39;Departments&#39;,\n    condition: () =&gt; eq(employees.departmentId, departments.id),\n    type: &#39;left&#39;,\n    relationship: &#39;belongsTo&#39;\n  }\n}\n\n// In the Productivity cube  \njoins: {\n  &#39;Employees&#39;: {\n    targetCube: &#39;Employees&#39;,\n    condition: () =&gt; eq(productivity.employeeId, employees.id),\n    type: &#39;left&#39;,\n    relationship: &#39;belongsTo&#39;\n  },\n  &#39;Departments&#39;: {\n    targetCube: &#39;Departments&#39;,\n    condition: () =&gt; and(\n      eq(productivity.employeeId, employees.id),\n      eq(employees.departmentId, departments.id)\n    ),\n    type: &#39;left&#39;,\n    relationship: &#39;belongsTo&#39;\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"relationship-types\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Relationship Types</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">belongsTo</strong> - Many-to-one relationship:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Employee belongs to Department\n&#39;Departments&#39;: {\n  targetCube: &#39;Departments&#39;,\n  condition: () =&gt; eq(employees.departmentId, departments.id),\n  relationship: &#39;belongsTo&#39;\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Employee belongs to Department\n&#39;Departments&#39;: {\n  targetCube: &#39;Departments&#39;,\n  condition: () =&gt; eq(employees.departmentId, departments.id),\n  relationship: &#39;belongsTo&#39;\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">hasMany</strong> - One-to-many relationship:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Department has many Employees\n&#39;Employees&#39;: {\n  targetCube: &#39;Employees&#39;,\n  condition: () =&gt; eq(departments.id, employees.departmentId),\n  relationship: &#39;hasMany&#39;\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Department has many Employees\n&#39;Employees&#39;: {\n  targetCube: &#39;Employees&#39;,\n  condition: () =&gt; eq(departments.id, employees.departmentId),\n  relationship: &#39;hasMany&#39;\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">hasOne</strong> - One-to-one relationship:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Employee has one Profile\n&#39;UserProfiles&#39;: {\n  targetCube: &#39;UserProfiles&#39;, \n  condition: () =&gt; eq(employees.id, userProfiles.employeeId),\n  relationship: &#39;hasOne&#39;\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Employee has one Profile\n&#39;UserProfiles&#39;: {\n  targetCube: &#39;UserProfiles&#39;, \n  condition: () =&gt; eq(employees.id, userProfiles.employeeId),\n  relationship: &#39;hasOne&#39;\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"multi-cube-query-example\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Multi-Cube Query Example</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Query data from multiple cubes using cube joins:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const multiCubeQuery = {\n  measures: [\n    &#39;Employees.count&#39;,           // From Employees cube\n    &#39;Departments.totalBudget&#39;,   // From Departments cube\n    &#39;Productivity.avgLinesOfCode&#39; // From Productivity cube\n  ],\n  dimensions: [\n    &#39;Departments.name&#39;,          // Group by department\n    &#39;Employees.isActive&#39;         // Split by active status\n  ],\n  timeDimensions: [{\n    dimension: &#39;Productivity.date&#39;,\n    granularity: &#39;month&#39;\n  }]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const multiCubeQuery = {\n  measures: [\n    &#39;Employees.count&#39;,           // From Employees cube\n    &#39;Departments.totalBudget&#39;,   // From Departments cube\n    &#39;Productivity.avgLinesOfCode&#39; // From Productivity cube\n  ],\n  dimensions: [\n    &#39;Departments.name&#39;,          // Group by department\n    &#39;Employees.isActive&#39;         // Split by active status\n  ],\n  timeDimensions: [{\n    dimension: &#39;Productivity.date&#39;,\n    granularity: &#39;month&#39;\n  }]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-join-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Join Patterns</h2><h3 id=\"conditional-joins\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Conditional Joins</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Apply conditional logic in join conditions:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: orders,\n  joins: [\n    {\n      table: customers,\n      on: and(\n        eq(orders.customerId, customers.id),\n        // Conditional join based on security context\n        ctx.securityContext.userRole === &#39;admin&#39; \n          ? sql`true` \n          : eq(customers.salesRepId, ctx.securityContext.userId),\n        eq(customers.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(orders.organisationId, ctx.securityContext.organisationId)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: orders,\n  joins: [\n    {\n      table: customers,\n      on: and(\n        eq(orders.customerId, customers.id),\n        // Conditional join based on security context\n        ctx.securityContext.userRole === &#39;admin&#39; \n          ? sql`true` \n          : eq(customers.salesRepId, ctx.securityContext.userId),\n        eq(customers.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(orders.organisationId, ctx.securityContext.organisationId)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"self-joins\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Self-Joins</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Join a table to itself for hierarchical data:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  joins: [\n    {\n      table: alias(employees, &#39;manager&#39;),\n      on: and(\n        eq(employees.managerId, sql`manager.id`),\n        eq(sql`manager.organisationId`, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n}),\n\ndimensions: {\n  name: {\n    name: &#39;name&#39;,\n    title: &#39;Employee Name&#39;,\n    type: &#39;string&#39;,\n    sql: employees.name\n  },\n  managerName: {\n    name: &#39;managerName&#39;,\n    title: &#39;Manager Name&#39;,\n    type: &#39;string&#39;,\n    sql: sql`manager.name`\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: employees,\n  joins: [\n    {\n      table: alias(employees, &#39;manager&#39;),\n      on: and(\n        eq(employees.managerId, sql`manager.id`),\n        eq(sql`manager.organisationId`, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(employees.organisationId, ctx.securityContext.organisationId)\n}),\n\ndimensions: {\n  name: {\n    name: &#39;name&#39;,\n    title: &#39;Employee Name&#39;,\n    type: &#39;string&#39;,\n    sql: employees.name\n  },\n  managerName: {\n    name: &#39;managerName&#39;,\n    title: &#39;Manager Name&#39;,\n    type: &#39;string&#39;,\n    sql: sql`manager.name`\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"complex-join-conditions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Complex Join Conditions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Use complex conditions for specialized joins:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: [\n  {\n    table: productivityTargets,\n    on: and(\n      eq(employees.id, productivityTargets.employeeId),\n      eq(employees.departmentId, productivityTargets.departmentId),\n      // Join on date range\n      sql`${productivity.date} BETWEEN ${productivityTargets.startDate} AND ${productivityTargets.endDate}`,\n      eq(productivityTargets.organisationId, ctx.securityContext.organisationId)\n    ),\n    type: &#39;left&#39;\n  }\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: [\n  {\n    table: productivityTargets,\n    on: and(\n      eq(employees.id, productivityTargets.employeeId),\n      eq(employees.departmentId, productivityTargets.departmentId),\n      // Join on date range\n      sql`${productivity.date} BETWEEN ${productivityTargets.startDate} AND ${productivityTargets.endDate}`,\n      eq(productivityTargets.organisationId, ctx.securityContext.organisationId)\n    ),\n    type: &#39;left&#39;\n  }\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"join-resolution-and-path-finding\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Join Resolution and Path Finding</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube automatically resolves join paths between cubes using the <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">JoinPathResolver</code>:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Automatic path finding from Productivity → Employees → Departments\nconst query = {\n  measures: [&#39;Productivity.totalLinesOfCode&#39;],\n  dimensions: [&#39;Departments.name&#39;] // Automatically resolves join path\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Automatic path finding from Productivity → Employees → Departments\nconst query = {\n  measures: [&#39;Productivity.totalLinesOfCode&#39;],\n  dimensions: [&#39;Departments.name&#39;] // Automatically resolves join path\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"manual-join-path-control\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Manual Join Path Control</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Control join resolution explicitly:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Force specific join path\njoins: {\n  &#39;Departments&#39;: {\n    targetCube: &#39;Departments&#39;,\n    condition: () =&gt; and(\n      // Explicit multi-step join path\n      eq(productivity.employeeId, employees.id),\n      eq(employees.departmentId, departments.id)\n    ),\n    type: &#39;left&#39;,\n    relationship: &#39;belongsTo&#39;,\n    // Optional: specify intermediate cubes\n    path: [&#39;Employees&#39;]\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Force specific join path\njoins: {\n  &#39;Departments&#39;: {\n    targetCube: &#39;Departments&#39;,\n    condition: () =&gt; and(\n      // Explicit multi-step join path\n      eq(productivity.employeeId, employees.id),\n      eq(employees.departmentId, departments.id)\n    ),\n    type: &#39;left&#39;,\n    relationship: &#39;belongsTo&#39;,\n    // Optional: specify intermediate cubes\n    path: [&#39;Employees&#39;]\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"performance-optimization\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Optimization</h2><h3 id=\"join-order-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Join Order Optimization</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Structure joins for optimal performance:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Good: Start with most selective table\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: activeEmployees, // Pre-filtered view\n  joins: [\n    {\n      table: departments,\n      on: eq(activeEmployees.departmentId, departments.id),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(activeEmployees.organisationId, ctx.securityContext.organisationId)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Good: Start with most selective table\nsql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: activeEmployees, // Pre-filtered view\n  joins: [\n    {\n      table: departments,\n      on: eq(activeEmployees.departmentId, departments.id),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(activeEmployees.organisationId, ctx.securityContext.organisationId)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"index-friendly-joins\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Index-Friendly Joins</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Ensure join conditions use indexed columns:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: [\n  {\n    table: departments,\n    // Good: uses indexed foreign key\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;left&#39;\n  }\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: [\n  {\n    table: departments,\n    // Good: uses indexed foreign key\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;left&#39;\n  }\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"testing-joins\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Joins</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">describe(&#39;Cube Joins&#39;, () =&gt; {\n  it(&#39;should join employees with departments&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: [&#39;Employees.departmentName&#39;]\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()\n    expect(data.every(row =&gt; row[&#39;Employees.departmentName&#39;])).toBeTruthy()\n  })\n  \n  it(&#39;should handle multi-cube queries&#39;, async () =&gt; {\n    const query = {\n      measures: [\n        &#39;Employees.count&#39;,\n        &#39;Productivity.avgLinesOfCode&#39;\n      ],\n      dimensions: [&#39;Departments.name&#39;]\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()\n    expect(data).toHaveLength(3) // 3 departments\n    data.forEach(row =&gt; {\n      expect(row[&#39;Employees.count&#39;]).toBeGreaterThan(0)\n      expect(row[&#39;Productivity.avgLinesOfCode&#39;]).toBeGreaterThan(0)\n    })\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"describe(&#39;Cube Joins&#39;, () =&gt; {\n  it(&#39;should join employees with departments&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: [&#39;Employees.departmentName&#39;]\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()\n    expect(data.every(row =&gt; row[&#39;Employees.departmentName&#39;])).toBeTruthy()\n  })\n  \n  it(&#39;should handle multi-cube queries&#39;, async () =&gt; {\n    const query = {\n      measures: [\n        &#39;Employees.count&#39;,\n        &#39;Productivity.avgLinesOfCode&#39;\n      ],\n      dimensions: [&#39;Departments.name&#39;]\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()\n    expect(data).toHaveLength(3) // 3 departments\n    data.forEach(row =&gt; {\n      expect(row[&#39;Employees.count&#39;]).toBeGreaterThan(0)\n      expect(row[&#39;Productivity.avgLinesOfCode&#39;]).toBeGreaterThan(0)\n    })\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security First</strong>: Always include security context in join conditions</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Performance</strong>: Use indexed columns for join conditions</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type Safety</strong>: Leverage Drizzle&#39;s type system for join validation</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Clarity</strong>: Use descriptive relationship names</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Testing</strong>: Verify join correctness and security isolation</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Documentation</strong>: Document complex join logic</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Optimization</strong>: Structure joins for query performance</li></ol><h2 id=\"common-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Patterns</h2><h3 id=\"basic-foreign-key-join\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Foreign Key Join</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: [\n  {\n    table: departments,\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;left&#39;\n  }\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: [\n  {\n    table: departments,\n    on: eq(employees.departmentId, departments.id),\n    type: &#39;left&#39;\n  }\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"secure-multi-table-join\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Secure Multi-Table Join</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: [\n  {\n    table: departments,\n    on: and(\n      eq(employees.departmentId, departments.id),\n      eq(departments.organisationId, ctx.securityContext.organisationId)\n    ),\n    type: &#39;left&#39;\n  }\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: [\n  {\n    table: departments,\n    on: and(\n      eq(employees.departmentId, departments.id),\n      eq(departments.organisationId, ctx.securityContext.organisationId)\n    ),\n    type: &#39;left&#39;\n  }\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"cube-level-relationship\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Cube-Level Relationship</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: {\n  &#39;Departments&#39;: {\n    targetCube: &#39;Departments&#39;,\n    condition: () =&gt; eq(employees.departmentId, departments.id),\n    relationship: &#39;belongsTo&#39;\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: {\n  &#39;Departments&#39;: {\n    targetCube: &#39;Departments&#39;,\n    condition: () =&gt; eq(employees.departmentId, departments.id),\n    relationship: &#39;belongsTo&#39;\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"troubleshooting\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Troubleshooting</h2><h3 id=\"join-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Join Issues</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Problem</strong>: Duplicate records in results\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Check for many-to-many relationships and use appropriate aggregation</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Problem</strong>: Missing data after join\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Verify join type (left vs inner) and foreign key integrity</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Problem</strong>: Security context not applied\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Ensure all joined tables include security filtering</p><h3 id=\"performance-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Performance Issues</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Problem</strong>: Slow join queries\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Add database indexes on join columns and optimize join order</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Problem</strong>: Cartesian products\n<strong class=\"font-semibold text-slate-700\">Solution</strong>: Verify join conditions are specific enough</p><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Security</a> patterns for multi-tenant systems</li><li class=\"leading-relaxed\">Explore <a href=\"#\" data-help-link=\"semantic-layer/cubes\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Cubes</a> for complete cube definitions</li><li class=\"leading-relaxed\">Understand <a href=\"#\" data-help-link=\"semantic-layer/dimensions\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Dimensions</a> and <a href=\"#\" data-help-link=\"semantic-layer/measures\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Measures</a></li><li class=\"leading-relaxed\">Review database indexing strategies for optimal join performance</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Visual join relationship designer</li><li class=\"leading-relaxed\">Automatic join path optimization suggestions</li><li class=\"leading-relaxed\">Join performance analysis tools</li><li class=\"leading-relaxed\">Advanced relationship types (polymorphic, conditional)</li><li class=\"leading-relaxed\">Join validation and testing framework</li></ul>","path":"semantic-layer/joins.md"},
  'semantic-layer/measures': {"slug":"semantic-layer/measures","title":"Measures","content":"<h1 id=\"measures\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Measures</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Measures are the quantitative metrics in your cubes that represent the &quot;how much&quot;, &quot;how many&quot;, and &quot;how often&quot; of your data. They define aggregations, calculations, and key performance indicators (KPIs) that drive business insights and decision-making.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">In Drizzle Cube, measures are type-safe aggregation functions that operate on your data. They leverage Drizzle&#39;s SQL builder for secure, optimized queries and support all major aggregation types plus complex calculated measures using SQL expressions.</p><h2 id=\"basic-measure-structure\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Basic Measure Structure</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  count: {\n    name: &#39;count&#39;,           // Internal identifier\n    title: &#39;Total Records&#39;,  // Display name\n    type: &#39;count&#39;,          // Aggregation type\n    sql: table.id           // Drizzle column reference\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  count: {\n    name: &#39;count&#39;,           // Internal identifier\n    title: &#39;Total Records&#39;,  // Display name\n    type: &#39;count&#39;,          // Aggregation type\n    sql: table.id           // Drizzle column reference\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"measure-types\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Measure Types</h2><h3 id=\"count-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Count Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Count measures are the most common and count occurrences of records:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  // Basic count - counts all records\n  count: {\n    name: &#39;count&#39;,\n    title: &#39;Total Employees&#39;,\n    type: &#39;count&#39;,\n    sql: employees.id\n  },\n  \n  // Conditional count with filters\n  activeCount: {\n    name: &#39;activeCount&#39;,\n    title: &#39;Active Employees&#39;,\n    type: &#39;count&#39;,\n    sql: employees.id,\n    filters: [\n      () =&gt; eq(employees.active, true)\n    ]\n  },\n  \n  // Working days count\n  workingDaysCount: {\n    name: &#39;workingDaysCount&#39;,\n    title: &#39;Working Days&#39;,\n    type: &#39;count&#39;,\n    sql: productivity.id,\n    filters: [\n      () =&gt; eq(productivity.daysOff, false)\n    ]\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  // Basic count - counts all records\n  count: {\n    name: &#39;count&#39;,\n    title: &#39;Total Employees&#39;,\n    type: &#39;count&#39;,\n    sql: employees.id\n  },\n  \n  // Conditional count with filters\n  activeCount: {\n    name: &#39;activeCount&#39;,\n    title: &#39;Active Employees&#39;,\n    type: &#39;count&#39;,\n    sql: employees.id,\n    filters: [\n      () =&gt; eq(employees.active, true)\n    ]\n  },\n  \n  // Working days count\n  workingDaysCount: {\n    name: &#39;workingDaysCount&#39;,\n    title: &#39;Working Days&#39;,\n    type: &#39;count&#39;,\n    sql: productivity.id,\n    filters: [\n      () =&gt; eq(productivity.daysOff, false)\n    ]\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"sum-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Sum Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Sum measures aggregate numeric values:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  totalSalary: {\n    name: &#39;totalSalary&#39;,\n    title: &#39;Total Salary&#39;,\n    type: &#39;sum&#39;,\n    sql: employees.salary\n  },\n  \n  totalLinesOfCode: {\n    name: &#39;totalLinesOfCode&#39;,\n    title: &#39;Total Lines of Code&#39;,\n    type: &#39;sum&#39;,\n    sql: productivity.linesOfCode\n  },\n  \n  totalBudget: {\n    name: &#39;totalBudget&#39;,\n    title: &#39;Total Budget&#39;,\n    type: &#39;sum&#39;,\n    sql: departments.budget\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  totalSalary: {\n    name: &#39;totalSalary&#39;,\n    title: &#39;Total Salary&#39;,\n    type: &#39;sum&#39;,\n    sql: employees.salary\n  },\n  \n  totalLinesOfCode: {\n    name: &#39;totalLinesOfCode&#39;,\n    title: &#39;Total Lines of Code&#39;,\n    type: &#39;sum&#39;,\n    sql: productivity.linesOfCode\n  },\n  \n  totalBudget: {\n    name: &#39;totalBudget&#39;,\n    title: &#39;Total Budget&#39;,\n    type: &#39;sum&#39;,\n    sql: departments.budget\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"average-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Average Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Average measures calculate mean values:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  avgSalary: {\n    name: &#39;avgSalary&#39;,\n    title: &#39;Average Salary&#39;,\n    type: &#39;avg&#39;,\n    sql: employees.salary,\n    format: &#39;currency&#39; // Formatting hint\n  },\n  \n  avgLinesOfCode: {\n    name: &#39;avgLinesOfCode&#39;,\n    title: &#39;Average Lines of Code&#39;,\n    type: &#39;avg&#39;,\n    sql: productivity.linesOfCode\n  },\n  \n  avgHappinessIndex: {\n    name: &#39;avgHappinessIndex&#39;,\n    title: &#39;Average Happiness&#39;,\n    type: &#39;avg&#39;,\n    sql: productivity.happinessIndex\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  avgSalary: {\n    name: &#39;avgSalary&#39;,\n    title: &#39;Average Salary&#39;,\n    type: &#39;avg&#39;,\n    sql: employees.salary,\n    format: &#39;currency&#39; // Formatting hint\n  },\n  \n  avgLinesOfCode: {\n    name: &#39;avgLinesOfCode&#39;,\n    title: &#39;Average Lines of Code&#39;,\n    type: &#39;avg&#39;,\n    sql: productivity.linesOfCode\n  },\n  \n  avgHappinessIndex: {\n    name: &#39;avgHappinessIndex&#39;,\n    title: &#39;Average Happiness&#39;,\n    type: &#39;avg&#39;,\n    sql: productivity.happinessIndex\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"minmax-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Min/Max Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Find minimum and maximum values:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  minSalary: {\n    name: &#39;minSalary&#39;,\n    title: &#39;Minimum Salary&#39;,\n    type: &#39;min&#39;,\n    sql: employees.salary\n  },\n  \n  maxSalary: {\n    name: &#39;maxSalary&#39;,\n    title: &#39;Maximum Salary&#39;,\n    type: &#39;max&#39;,\n    sql: employees.salary\n  },\n  \n  minHappinessIndex: {\n    name: &#39;minHappinessIndex&#39;,\n    title: &#39;Lowest Happiness Score&#39;,\n    type: &#39;min&#39;,\n    sql: productivity.happinessIndex\n  },\n  \n  maxLinesOfCode: {\n    name: &#39;maxLinesOfCode&#39;,\n    title: &#39;Peak Daily Output&#39;,\n    type: &#39;max&#39;,\n    sql: productivity.linesOfCode\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  minSalary: {\n    name: &#39;minSalary&#39;,\n    title: &#39;Minimum Salary&#39;,\n    type: &#39;min&#39;,\n    sql: employees.salary\n  },\n  \n  maxSalary: {\n    name: &#39;maxSalary&#39;,\n    title: &#39;Maximum Salary&#39;,\n    type: &#39;max&#39;,\n    sql: employees.salary\n  },\n  \n  minHappinessIndex: {\n    name: &#39;minHappinessIndex&#39;,\n    title: &#39;Lowest Happiness Score&#39;,\n    type: &#39;min&#39;,\n    sql: productivity.happinessIndex\n  },\n  \n  maxLinesOfCode: {\n    name: &#39;maxLinesOfCode&#39;,\n    title: &#39;Peak Daily Output&#39;,\n    type: &#39;max&#39;,\n    sql: productivity.linesOfCode\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"count-distinct-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Count Distinct Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Count unique values:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  countDistinctEmployees: {\n    name: &#39;countDistinctEmployees&#39;,\n    title: &#39;Unique Employees&#39;,\n    type: &#39;countDistinct&#39;,\n    sql: productivity.employeeId\n  },\n  \n  countDistinctDepartments: {\n    name: &#39;countDistinctDepartments&#39;,\n    title: &#39;Unique Departments&#39;,\n    type: &#39;countDistinct&#39;,\n    sql: employees.departmentId\n  },\n  \n  uniqueProjects: {\n    name: &#39;uniqueProjects&#39;,\n    title: &#39;Active Projects&#39;,\n    type: &#39;countDistinct&#39;,\n    sql: tasks.projectId\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  countDistinctEmployees: {\n    name: &#39;countDistinctEmployees&#39;,\n    title: &#39;Unique Employees&#39;,\n    type: &#39;countDistinct&#39;,\n    sql: productivity.employeeId\n  },\n  \n  countDistinctDepartments: {\n    name: &#39;countDistinctDepartments&#39;,\n    title: &#39;Unique Departments&#39;,\n    type: &#39;countDistinct&#39;,\n    sql: employees.departmentId\n  },\n  \n  uniqueProjects: {\n    name: &#39;uniqueProjects&#39;,\n    title: &#39;Active Projects&#39;,\n    type: &#39;countDistinct&#39;,\n    sql: tasks.projectId\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"advanced-measures\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Measures</h2><h3 id=\"calculated-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Calculated Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create complex calculations using SQL expressions:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  productivityScore: {\n    name: &#39;productivityScore&#39;,\n    title: &#39;Productivity Score&#39;,\n    type: &#39;avg&#39;,\n    sql: sql`(${productivity.linesOfCode} + ${productivity.pullRequests} * 50 + ${productivity.liveDeployments} * 100)`,\n    description: &#39;Composite score based on code output, reviews, and deployments&#39;\n  },\n  \n  salaryPerEmployee: {\n    name: &#39;salaryPerEmployee&#39;,\n    title: &#39;Salary Per Employee&#39;,\n    type: &#39;number&#39;,\n    sql: sql`CAST(SUM(${employees.salary}) AS DECIMAL(10,2)) / COUNT(DISTINCT ${employees.id})`\n  },\n  \n  efficiencyRatio: {\n    name: &#39;efficiencyRatio&#39;,\n    title: &#39;Efficiency Ratio&#39;,\n    type: &#39;avg&#39;,\n    sql: sql`CASE \n      WHEN ${productivity.hoursWorked} &gt; 0 \n      THEN ${productivity.linesOfCode}::DECIMAL / ${productivity.hoursWorked}\n      ELSE 0 \n    END`\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  productivityScore: {\n    name: &#39;productivityScore&#39;,\n    title: &#39;Productivity Score&#39;,\n    type: &#39;avg&#39;,\n    sql: sql`(${productivity.linesOfCode} + ${productivity.pullRequests} * 50 + ${productivity.liveDeployments} * 100)`,\n    description: &#39;Composite score based on code output, reviews, and deployments&#39;\n  },\n  \n  salaryPerEmployee: {\n    name: &#39;salaryPerEmployee&#39;,\n    title: &#39;Salary Per Employee&#39;,\n    type: &#39;number&#39;,\n    sql: sql`CAST(SUM(${employees.salary}) AS DECIMAL(10,2)) / COUNT(DISTINCT ${employees.id})`\n  },\n  \n  efficiencyRatio: {\n    name: &#39;efficiencyRatio&#39;,\n    title: &#39;Efficiency Ratio&#39;,\n    type: &#39;avg&#39;,\n    sql: sql`CASE \n      WHEN ${productivity.hoursWorked} &gt; 0 \n      THEN ${productivity.linesOfCode}::DECIMAL / ${productivity.hoursWorked}\n      ELSE 0 \n    END`\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"percentage-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Percentage Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Calculate percentages and ratios:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  activeEmployeePercentage: {\n    name: &#39;activeEmployeePercentage&#39;,\n    title: &#39;Active Employee %&#39;,\n    type: &#39;number&#39;,\n    sql: sql`\n      (COUNT(CASE WHEN ${employees.active} = true THEN 1 END)::DECIMAL / COUNT(*)::DECIMAL) * 100\n    `,\n    format: &#39;percent&#39;\n  },\n  \n  happinessAboveAverage: {\n    name: &#39;happinessAboveAverage&#39;,\n    title: &#39;Above Average Happiness %&#39;,\n    type: &#39;number&#39;,\n    sql: sql`\n      (COUNT(CASE WHEN ${productivity.happinessIndex} &gt; 5 THEN 1 END)::DECIMAL / COUNT(*)::DECIMAL) * 100\n    `\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  activeEmployeePercentage: {\n    name: &#39;activeEmployeePercentage&#39;,\n    title: &#39;Active Employee %&#39;,\n    type: &#39;number&#39;,\n    sql: sql`\n      (COUNT(CASE WHEN ${employees.active} = true THEN 1 END)::DECIMAL / COUNT(*)::DECIMAL) * 100\n    `,\n    format: &#39;percent&#39;\n  },\n  \n  happinessAboveAverage: {\n    name: &#39;happinessAboveAverage&#39;,\n    title: &#39;Above Average Happiness %&#39;,\n    type: &#39;number&#39;,\n    sql: sql`\n      (COUNT(CASE WHEN ${productivity.happinessIndex} &gt; 5 THEN 1 END)::DECIMAL / COUNT(*)::DECIMAL) * 100\n    `\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"conditional-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Conditional Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Measures with complex filtering logic:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  highProductivityDays: {\n    name: &#39;highProductivityDays&#39;,\n    title: &#39;High Productivity Days&#39;,\n    type: &#39;count&#39;,\n    sql: productivity.id,\n    filters: [\n      () =&gt; sql`${productivity.linesOfCode} &gt; 200`\n    ]\n  },\n  \n  happyWorkDays: {\n    name: &#39;happyWorkDays&#39;,\n    title: &#39;Happy Work Days&#39;,\n    type: &#39;count&#39;,\n    sql: productivity.id,\n    filters: [\n      () =&gt; and(\n        eq(productivity.daysOff, false),\n        sql`${productivity.happinessIndex} &gt;= 7`\n      )\n    ]\n  },\n  \n  seniorEmployees: {\n    name: &#39;seniorEmployees&#39;,\n    title: &#39;Senior Employees&#39;,\n    type: &#39;count&#39;,\n    sql: employees.id,\n    filters: [\n      () =&gt; sql`${employees.salary} &gt;= 100000`\n    ]\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  highProductivityDays: {\n    name: &#39;highProductivityDays&#39;,\n    title: &#39;High Productivity Days&#39;,\n    type: &#39;count&#39;,\n    sql: productivity.id,\n    filters: [\n      () =&gt; sql`${productivity.linesOfCode} &gt; 200`\n    ]\n  },\n  \n  happyWorkDays: {\n    name: &#39;happyWorkDays&#39;,\n    title: &#39;Happy Work Days&#39;,\n    type: &#39;count&#39;,\n    sql: productivity.id,\n    filters: [\n      () =&gt; and(\n        eq(productivity.daysOff, false),\n        sql`${productivity.happinessIndex} &gt;= 7`\n      )\n    ]\n  },\n  \n  seniorEmployees: {\n    name: &#39;seniorEmployees&#39;,\n    title: &#39;Senior Employees&#39;,\n    type: &#39;count&#39;,\n    sql: employees.id,\n    filters: [\n      () =&gt; sql`${employees.salary} &gt;= 100000`\n    ]\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"measure-filters\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Measure Filters</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Apply conditional logic to measures using filters. Measure filters are functions that receive a <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">QueryContext</code> parameter and return Drizzle SQL expressions.</p><h3 id=\"filter-function-signature\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Filter Function Signature</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">filters: Array&lt;(ctx: QueryContext) =&gt; SQL&gt;</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"filters: Array&lt;(ctx: QueryContext) =&gt; SQL&gt;\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><p class=\"mb-4 text-gray-600 leading-relaxed\">The <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">QueryContext</code> parameter provides access to:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">ctx.db</code> - The Drizzle database instance</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">ctx.schema</code> - Your database schema with all table definitions</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">ctx.securityContext</code> - User/tenant-specific data for filtering (e.g., <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">organisationId</code>)</li></ul><h3 id=\"when-to-use-the-context-parameter\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">When to Use the Context Parameter</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Simple filters</strong> that only reference table columns: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">() =&amp;gt;</code> (no parameter needed)</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security-aware filters</strong> that need tenant isolation: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">(ctx) =&amp;gt;</code> to access <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">securityContext</code></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dynamic filters</strong> that need runtime data: Use <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">(ctx) =&amp;gt;</code> to access database or schema information</li></ul><h3 id=\"filter-examples\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Filter Examples</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  // Simple filter - no context parameter needed\n  premiumCustomers: {\n    name: &#39;premiumCustomers&#39;,\n    title: &#39;Premium Customers&#39;,\n    type: &#39;count&#39;,\n    sql: customers.id,\n    filters: [\n      () =&gt; eq(customers.tier, &#39;premium&#39;)\n    ]\n  },\n  \n  // Multiple filter conditions (AND logic) - no context needed\n  activeHighValueCustomers: {\n    name: &#39;activeHighValueCustomers&#39;,\n    title: &#39;Active High-Value Customers&#39;,\n    type: &#39;count&#39;,\n    sql: customers.id,\n    filters: [\n      () =&gt; eq(customers.status, &#39;active&#39;),\n      () =&gt; sql`${customers.totalValue} &gt; 10000`\n    ]\n  },\n  \n  // Security-aware filter using ctx.securityContext\n  qualifiedLeads: {\n    name: &#39;qualifiedLeads&#39;,\n    title: &#39;Qualified Leads&#39;,\n    type: &#39;count&#39;,\n    sql: leads.id,\n    filters: [\n      (ctx) =&gt; and(\n        eq(leads.status, &#39;qualified&#39;),\n        sql`${leads.score} &gt;= 75`,\n        eq(leads.organisationId, ctx.securityContext.organisationId)\n      )\n    ]\n  },\n  \n  // Multi-tenant filtering - essential for security\n  tenantCustomers: {\n    name: &#39;tenantCustomers&#39;,\n    title: &#39;Tenant Customers&#39;,\n    type: &#39;count&#39;,\n    sql: customers.id,\n    filters: [\n      (ctx) =&gt; eq(customers.organisationId, ctx.securityContext.organisationId)\n    ]\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  // Simple filter - no context parameter needed\n  premiumCustomers: {\n    name: &#39;premiumCustomers&#39;,\n    title: &#39;Premium Customers&#39;,\n    type: &#39;count&#39;,\n    sql: customers.id,\n    filters: [\n      () =&gt; eq(customers.tier, &#39;premium&#39;)\n    ]\n  },\n  \n  // Multiple filter conditions (AND logic) - no context needed\n  activeHighValueCustomers: {\n    name: &#39;activeHighValueCustomers&#39;,\n    title: &#39;Active High-Value Customers&#39;,\n    type: &#39;count&#39;,\n    sql: customers.id,\n    filters: [\n      () =&gt; eq(customers.status, &#39;active&#39;),\n      () =&gt; sql`${customers.totalValue} &gt; 10000`\n    ]\n  },\n  \n  // Security-aware filter using ctx.securityContext\n  qualifiedLeads: {\n    name: &#39;qualifiedLeads&#39;,\n    title: &#39;Qualified Leads&#39;,\n    type: &#39;count&#39;,\n    sql: leads.id,\n    filters: [\n      (ctx) =&gt; and(\n        eq(leads.status, &#39;qualified&#39;),\n        sql`${leads.score} &gt;= 75`,\n        eq(leads.organisationId, ctx.securityContext.organisationId)\n      )\n    ]\n  },\n  \n  // Multi-tenant filtering - essential for security\n  tenantCustomers: {\n    name: &#39;tenantCustomers&#39;,\n    title: &#39;Tenant Customers&#39;,\n    type: &#39;count&#39;,\n    sql: customers.id,\n    filters: [\n      (ctx) =&gt; eq(customers.organisationId, ctx.securityContext.organisationId)\n    ]\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"security-context-usage\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Security Context Usage</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">securityContext</code> is automatically passed to your cubes and contains user/tenant-specific information:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Example security context structure\nconst securityContext = {\n  organisationId: &#39;tenant-123&#39;,\n  userId: &#39;user-456&#39;,\n  roles: [&#39;admin&#39;],\n  // ... other user/tenant data\n}\n\n// Using security context in filters\nfilters: [\n  (ctx) =&gt; eq(table.organisationId, ctx.securityContext.organisationId),\n  (ctx) =&gt; eq(table.createdBy, ctx.securityContext.userId)\n]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Example security context structure\nconst securityContext = {\n  organisationId: &#39;tenant-123&#39;,\n  userId: &#39;user-456&#39;,\n  roles: [&#39;admin&#39;],\n  // ... other user/tenant data\n}\n\n// Using security context in filters\nfilters: [\n  (ctx) =&gt; eq(table.organisationId, ctx.securityContext.organisationId),\n  (ctx) =&gt; eq(table.createdBy, ctx.securityContext.userId)\n]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"advanced-filter-patterns\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Advanced Filter Patterns</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  // Conditional filtering based on user role\n  adminOnlyData: {\n    name: &#39;adminOnlyData&#39;,\n    title: &#39;Admin Only Data&#39;,\n    type: &#39;count&#39;,\n    sql: sensitiveTable.id,\n    filters: [\n      (ctx) =&gt; and(\n        eq(sensitiveTable.organisationId, ctx.securityContext.organisationId),\n        sql`${ctx.securityContext.roles}::jsonb ? &#39;admin&#39;` // PostgreSQL JSON check\n      )\n    ]\n  },\n  \n  // Using schema references from context\n  crossTableFilter: {\n    name: &#39;crossTableFilter&#39;,\n    title: &#39;Cross Table Filter&#39;,\n    type: &#39;count&#39;,\n    sql: orders.id,\n    filters: [\n      (ctx) =&gt; and(\n        eq(orders.organisationId, ctx.securityContext.organisationId),\n        // Could reference ctx.schema.users, ctx.schema.products, etc.\n        sql`EXISTS (SELECT 1 FROM users WHERE users.id = ${orders.customerId} AND users.active = true)`\n      )\n    ]\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  // Conditional filtering based on user role\n  adminOnlyData: {\n    name: &#39;adminOnlyData&#39;,\n    title: &#39;Admin Only Data&#39;,\n    type: &#39;count&#39;,\n    sql: sensitiveTable.id,\n    filters: [\n      (ctx) =&gt; and(\n        eq(sensitiveTable.organisationId, ctx.securityContext.organisationId),\n        sql`${ctx.securityContext.roles}::jsonb ? &#39;admin&#39;` // PostgreSQL JSON check\n      )\n    ]\n  },\n  \n  // Using schema references from context\n  crossTableFilter: {\n    name: &#39;crossTableFilter&#39;,\n    title: &#39;Cross Table Filter&#39;,\n    type: &#39;count&#39;,\n    sql: orders.id,\n    filters: [\n      (ctx) =&gt; and(\n        eq(orders.organisationId, ctx.securityContext.organisationId),\n        // Could reference ctx.schema.users, ctx.schema.products, etc.\n        sql`EXISTS (SELECT 1 FROM users WHERE users.id = ${orders.customerId} AND users.active = true)`\n      )\n    ]\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"why-filters-must-be-functions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Why Filters Must Be Functions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Filters must be functions because they:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Need runtime context</strong> - Access to current user, tenant, and database connection</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Generate type-safe SQL</strong> - Return Drizzle SQL expressions with proper typing</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Support security isolation</strong> - Automatically filter by tenant/organization</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Enable dynamic filtering</strong> - Can use runtime data to build conditional logic</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Maintain SQL injection protection</strong> - Use Drizzle&#39;s parameterized queries</li></ol><h2 id=\"time-based-measures\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Time-Based Measures</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Measures that work with time dimensions:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  // Daily averages\n  dailyAvgLinesOfCode: {\n    name: &#39;dailyAvgLinesOfCode&#39;,\n    title: &#39;Daily Average Lines of Code&#39;,\n    type: &#39;avg&#39;,\n    sql: productivity.linesOfCode,\n    description: &#39;Average lines of code per day&#39;\n  },\n  \n  // Growth rates (requires window functions)\n  monthlyGrowthRate: {\n    name: &#39;monthlyGrowthRate&#39;,\n    title: &#39;Monthly Growth Rate&#39;,\n    type: &#39;number&#39;,\n    sql: sql`\n      ((COUNT(*) - LAG(COUNT(*)) OVER (ORDER BY DATE_TRUNC(&#39;month&#39;, ${table.createdAt})))::DECIMAL \n       / LAG(COUNT(*)) OVER (ORDER BY DATE_TRUNC(&#39;month&#39;, ${table.createdAt}))) * 100\n    `\n  },\n  \n  // Running totals\n  runningTotal: {\n    name: &#39;runningTotal&#39;,\n    title: &#39;Running Total&#39;,\n    type: &#39;number&#39;,\n    sql: sql`SUM(${table.amount}) OVER (ORDER BY ${table.date} ROWS UNBOUNDED PRECEDING)`\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  // Daily averages\n  dailyAvgLinesOfCode: {\n    name: &#39;dailyAvgLinesOfCode&#39;,\n    title: &#39;Daily Average Lines of Code&#39;,\n    type: &#39;avg&#39;,\n    sql: productivity.linesOfCode,\n    description: &#39;Average lines of code per day&#39;\n  },\n  \n  // Growth rates (requires window functions)\n  monthlyGrowthRate: {\n    name: &#39;monthlyGrowthRate&#39;,\n    title: &#39;Monthly Growth Rate&#39;,\n    type: &#39;number&#39;,\n    sql: sql`\n      ((COUNT(*) - LAG(COUNT(*)) OVER (ORDER BY DATE_TRUNC(&#39;month&#39;, ${table.createdAt})))::DECIMAL \n       / LAG(COUNT(*)) OVER (ORDER BY DATE_TRUNC(&#39;month&#39;, ${table.createdAt}))) * 100\n    `\n  },\n  \n  // Running totals\n  runningTotal: {\n    name: &#39;runningTotal&#39;,\n    title: &#39;Running Total&#39;,\n    type: &#39;number&#39;,\n    sql: sql`SUM(${table.amount}) OVER (ORDER BY ${table.date} ROWS UNBOUNDED PRECEDING)`\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"formatting-and-display-options\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Formatting and Display Options</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  revenue: {\n    name: &#39;revenue&#39;,\n    title: &#39;Total Revenue&#39;,\n    type: &#39;sum&#39;,\n    sql: orders.amount,\n    format: &#39;currency&#39;,          // Currency formatting\n    description: &#39;Total revenue from all orders&#39;\n  },\n  \n  conversionRate: {\n    name: &#39;conversionRate&#39;,\n    title: &#39;Conversion Rate&#39;,\n    type: &#39;number&#39;,\n    sql: sql`(${conversions.count}::DECIMAL / ${visitors.count}) * 100`,\n    format: &#39;percent&#39;,           // Percentage formatting\n    description: &#39;Visitor to customer conversion rate&#39;\n  },\n  \n  responseTime: {\n    name: &#39;responseTime&#39;,\n    title: &#39;Avg Response Time&#39;,\n    type: &#39;avg&#39;,\n    sql: requests.responseTime,\n    format: &#39;number&#39;,            // Number formatting with decimals\n    description: &#39;Average API response time in milliseconds&#39;\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  revenue: {\n    name: &#39;revenue&#39;,\n    title: &#39;Total Revenue&#39;,\n    type: &#39;sum&#39;,\n    sql: orders.amount,\n    format: &#39;currency&#39;,          // Currency formatting\n    description: &#39;Total revenue from all orders&#39;\n  },\n  \n  conversionRate: {\n    name: &#39;conversionRate&#39;,\n    title: &#39;Conversion Rate&#39;,\n    type: &#39;number&#39;,\n    sql: sql`(${conversions.count}::DECIMAL / ${visitors.count}) * 100`,\n    format: &#39;percent&#39;,           // Percentage formatting\n    description: &#39;Visitor to customer conversion rate&#39;\n  },\n  \n  responseTime: {\n    name: &#39;responseTime&#39;,\n    title: &#39;Avg Response Time&#39;,\n    type: &#39;avg&#39;,\n    sql: requests.responseTime,\n    format: &#39;number&#39;,            // Number formatting with decimals\n    description: &#39;Average API response time in milliseconds&#39;\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"cross-cube-measures\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Cross-Cube Measures</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Reference measures across related cubes:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// In a joined cube\nmeasures: {\n  employeeProductivity: {\n    name: &#39;employeeProductivity&#39;,\n    title: &#39;Employee Productivity Score&#39;,\n    type: &#39;avg&#39;,\n    sql: sql`\n      (${productivity.linesOfCode} * ${employees.experienceLevel}) / \n      NULLIF(${productivity.hoursWorked}, 0)\n    `,\n    description: &#39;Productivity adjusted for experience level&#39;\n  },\n  \n  departmentEfficiency: {\n    name: &#39;departmentEfficiency&#39;,\n    title: &#39;Department Efficiency&#39;,\n    type: &#39;number&#39;,\n    sql: sql`\n      SUM(${productivity.linesOfCode}) / \n      (SUM(${employees.salary}) / 100000.0)\n    `,\n    description: &#39;Lines of code per $100k in salaries&#39;\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// In a joined cube\nmeasures: {\n  employeeProductivity: {\n    name: &#39;employeeProductivity&#39;,\n    title: &#39;Employee Productivity Score&#39;,\n    type: &#39;avg&#39;,\n    sql: sql`\n      (${productivity.linesOfCode} * ${employees.experienceLevel}) / \n      NULLIF(${productivity.hoursWorked}, 0)\n    `,\n    description: &#39;Productivity adjusted for experience level&#39;\n  },\n  \n  departmentEfficiency: {\n    name: &#39;departmentEfficiency&#39;,\n    title: &#39;Department Efficiency&#39;,\n    type: &#39;number&#39;,\n    sql: sql`\n      SUM(${productivity.linesOfCode}) / \n      (SUM(${employees.salary}) / 100000.0)\n    `,\n    description: &#39;Lines of code per $100k in salaries&#39;\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"usage-in-queries\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Usage in Queries</h2><h3 id=\"basic-usage\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Usage</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const query = {\n  measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const query = {\n  measures: [&#39;Employees.count&#39;, &#39;Employees.avgSalary&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"multiple-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Multiple Measures</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const query = {\n  measures: [\n    &#39;Employees.count&#39;,\n    &#39;Employees.avgSalary&#39;,\n    &#39;Employees.minSalary&#39;,\n    &#39;Employees.maxSalary&#39;\n  ],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  order: [[&#39;Employees.avgSalary&#39;, &#39;desc&#39;]]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const query = {\n  measures: [\n    &#39;Employees.count&#39;,\n    &#39;Employees.avgSalary&#39;,\n    &#39;Employees.minSalary&#39;,\n    &#39;Employees.maxSalary&#39;\n  ],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  order: [[&#39;Employees.avgSalary&#39;, &#39;desc&#39;]]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"filtering-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Filtering Measures</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">const query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  filters: [\n    {\n      member: &#39;Employees.avgSalary&#39;,\n      operator: &#39;gt&#39;,\n      values: [75000]\n    }\n  ]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"const query = {\n  measures: [&#39;Employees.count&#39;],\n  dimensions: [&#39;Employees.departmentName&#39;],\n  filters: [\n    {\n      member: &#39;Employees.avgSalary&#39;,\n      operator: &#39;gt&#39;,\n      values: [75000]\n    }\n  ]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Descriptive Names</strong>: Use business-friendly titles and descriptions</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type Safety</strong>: Always reference Drizzle schema columns</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Performance</strong>: Prefer database-native aggregations over complex calculations</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Filters</strong>: Use measure filters for conditional logic</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Format Hints</strong>: Include formatting hints for proper display</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Documentation</strong>: Add descriptions for complex calculated measures</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Security</strong>: Filters automatically inherit cube security context</li></ol><h2 id=\"testing-measures\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Measures</h2><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">import { describe, it, expect } from &#39;vitest&#39;\n\ndescribe(&#39;Employee Measures&#39;, () =&gt; {\n  it(&#39;should calculate employee count correctly&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const count = result.rawData()[0][&#39;Employees.count&#39;]\n    expect(count).toBeGreaterThan(0)\n  })\n  \n  it(&#39;should calculate average salary&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.avgSalary&#39;],\n      dimensions: []\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const avgSalary = result.rawData()[0][&#39;Employees.avgSalary&#39;]\n    expect(avgSalary).toBeGreaterThan(0)\n    expect(avgSalary).toBeLessThan(1000000)\n  })\n  \n  it(&#39;should handle filtered measures&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.activeCount&#39;, &#39;Employees.count&#39;],\n      dimensions: []\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()[0]\n    expect(data[&#39;Employees.activeCount&#39;]).toBeLessThanOrEqual(data[&#39;Employees.count&#39;])\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"import { describe, it, expect } from &#39;vitest&#39;\n\ndescribe(&#39;Employee Measures&#39;, () =&gt; {\n  it(&#39;should calculate employee count correctly&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const count = result.rawData()[0][&#39;Employees.count&#39;]\n    expect(count).toBeGreaterThan(0)\n  })\n  \n  it(&#39;should calculate average salary&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.avgSalary&#39;],\n      dimensions: []\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const avgSalary = result.rawData()[0][&#39;Employees.avgSalary&#39;]\n    expect(avgSalary).toBeGreaterThan(0)\n    expect(avgSalary).toBeLessThan(1000000)\n  })\n  \n  it(&#39;should handle filtered measures&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.activeCount&#39;, &#39;Employees.count&#39;],\n      dimensions: []\n    }\n    \n    const result = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;\n    })\n    \n    const data = result.rawData()[0]\n    expect(data[&#39;Employees.activeCount&#39;]).toBeLessThanOrEqual(data[&#39;Employees.count&#39;])\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"common-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Patterns</h2><h3 id=\"basic-count\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Count</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">count: {\n  name: &#39;count&#39;,\n  title: &#39;Total Count&#39;,\n  type: &#39;count&#39;,\n  sql: table.id\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"count: {\n  name: &#39;count&#39;,\n  title: &#39;Total Count&#39;,\n  type: &#39;count&#39;,\n  sql: table.id\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"sum-with-formatting\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Sum with Formatting</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">totalRevenue: {\n  name: &#39;totalRevenue&#39;,\n  title: &#39;Total Revenue&#39;,\n  type: &#39;sum&#39;,\n  sql: orders.amount,\n  format: &#39;currency&#39;\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"totalRevenue: {\n  name: &#39;totalRevenue&#39;,\n  title: &#39;Total Revenue&#39;,\n  type: &#39;sum&#39;,\n  sql: orders.amount,\n  format: &#39;currency&#39;\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"conditional-count\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Conditional Count</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">activeUsers: {\n  name: &#39;activeUsers&#39;,\n  title: &#39;Active Users&#39;,\n  type: &#39;count&#39;,\n  sql: users.id,\n  filters: [() =&gt; eq(users.status, &#39;active&#39;)]\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"activeUsers: {\n  name: &#39;activeUsers&#39;,\n  title: &#39;Active Users&#39;,\n  type: &#39;count&#39;,\n  sql: users.id,\n  filters: [() =&gt; eq(users.status, &#39;active&#39;)]\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"calculated-measure\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Calculated Measure</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">conversionRate: {\n  name: &#39;conversionRate&#39;,\n  title: &#39;Conversion Rate %&#39;,\n  type: &#39;number&#39;,\n  sql: sql`(COUNT(CASE WHEN ${users.converted} THEN 1 END)::DECIMAL / COUNT(*)) * 100`,\n  format: &#39;percent&#39;\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"conversionRate: {\n  name: &#39;conversionRate&#39;,\n  title: &#39;Conversion Rate %&#39;,\n  type: &#39;number&#39;,\n  sql: sql`(COUNT(CASE WHEN ${users.converted} THEN 1 END)::DECIMAL / COUNT(*)) * 100`,\n  format: &#39;percent&#39;\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"semantic-layer/dimensions\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Dimensions</a> for categorical data</li><li class=\"leading-relaxed\">Explore <a href=\"#\" data-help-link=\"semantic-layer/joins\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Joins</a> for multi-cube relationships</li><li class=\"leading-relaxed\">Understand <a href=\"#\" data-help-link=\"semantic-layer/cubes\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Cubes</a> structure and organization</li><li class=\"leading-relaxed\">Review <a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Security</a> patterns and best practices</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Measure performance optimization hints</li><li class=\"leading-relaxed\">Automatic measure suggestions based on data types</li><li class=\"leading-relaxed\">Advanced statistical measures (median, percentiles, standard deviation)</li><li class=\"leading-relaxed\">Measure validation and testing framework</li><li class=\"leading-relaxed\">Visual measure builder interface</li></ul>","path":"semantic-layer/measures.md"},
  'semantic-layer/security': {"slug":"semantic-layer/security","title":"Security","content":"<h1 id=\"security\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Security</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Security in Drizzle Cube is built on three core principles: <strong class=\"font-semibold text-slate-700\">multi-tenant data isolation</strong>, <strong class=\"font-semibold text-slate-700\">SQL injection prevention</strong>, and <strong class=\"font-semibold text-slate-700\">role-based access control</strong>. The security model leverages Drizzle ORM&#39;s type-safe, parameterized queries to ensure your data remains secure and properly isolated.</p><h2 id=\"overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube&#39;s security-first design ensures that every query is automatically filtered by security context, preventing data leakage between tenants and protecting against SQL injection attacks. All security filtering is applied at the database level for maximum performance and reliability.</p><h2 id=\"security-context\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Security Context</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The security context is the foundation of Drizzle Cube&#39;s security model. It contains user and tenant-specific information that is automatically injected into all cube queries.</p><h3 id=\"basic-security-context-structure\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Security Context Structure</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">interface SecurityContext {\n  organisationId: string    // Tenant/organization identifier (REQUIRED)\n  userId?: string          // Current user ID\n  userRole?: string        // User role/permission level\n  departmentId?: string    // Department-level filtering\n  [key: string]: any       // Additional custom fields\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"interface SecurityContext {\n  organisationId: string    // Tenant/organization identifier (REQUIRED)\n  userId?: string          // Current user ID\n  userRole?: string        // User role/permission level\n  departmentId?: string    // Department-level filtering\n  [key: string]: any       // Additional custom fields\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"extracting-security-context\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Extracting Security Context</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Define how to extract security context from your application&#39;s request context:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Hono adapter example\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    const token = c.req.header(&#39;Authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const user = await validateToken(token)\n    \n    return {\n      organisationId: user.organisationId,  // REQUIRED for multi-tenant security\n      userId: user.id,\n      userRole: user.role,\n      departmentId: user.departmentId\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Hono adapter example\nimport { createCubeApp } from &#39;drizzle-cube/adapters/hono&#39;\n\nconst app = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) =&gt; {\n    const token = c.req.header(&#39;Authorization&#39;)?.replace(&#39;Bearer &#39;, &#39;&#39;)\n    const user = await validateToken(token)\n    \n    return {\n      organisationId: user.organisationId,  // REQUIRED for multi-tenant security\n      userId: user.id,\n      userRole: user.role,\n      departmentId: user.departmentId\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"multi-tenant-security\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Multi-Tenant Security</h2><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">CRITICAL</strong>: Every cube must implement organization-level filtering to ensure data isolation between tenants.</p><h3 id=\"required-organization-filtering\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Required Organization Filtering</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">export const employeesCube: Cube&lt;Schema&gt; = defineCube(&#39;Employees&#39;, {\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: employees,\n    // REQUIRED: Filter by organization for multi-tenant security\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"export const employeesCube: Cube&lt;Schema&gt; = defineCube(&#39;Employees&#39;, {\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n    from: employees,\n    // REQUIRED: Filter by organization for multi-tenant security\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"multi-level-security-filtering\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Multi-Level Security Filtering</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Apply multiple layers of security filtering:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n  const securityFilters = [\n    // Level 1: Organization isolation (REQUIRED)\n    eq(employees.organisationId, ctx.securityContext.organisationId)\n  ]\n  \n  // Level 2: Department-level access\n  if (ctx.securityContext.departmentId) {\n    securityFilters.push(\n      eq(employees.departmentId, ctx.securityContext.departmentId)\n    )\n  }\n  \n  // Level 3: Role-based filtering\n  if (ctx.securityContext.userRole !== &#39;admin&#39;) {\n    securityFilters.push(\n      eq(employees.id, ctx.securityContext.userId)\n    )\n  }\n  \n  return {\n    from: employees,\n    where: and(...securityFilters)\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n  const securityFilters = [\n    // Level 1: Organization isolation (REQUIRED)\n    eq(employees.organisationId, ctx.securityContext.organisationId)\n  ]\n  \n  // Level 2: Department-level access\n  if (ctx.securityContext.departmentId) {\n    securityFilters.push(\n      eq(employees.departmentId, ctx.securityContext.departmentId)\n    )\n  }\n  \n  // Level 3: Role-based filtering\n  if (ctx.securityContext.userRole !== &#39;admin&#39;) {\n    securityFilters.push(\n      eq(employees.id, ctx.securityContext.userId)\n    )\n  }\n  \n  return {\n    from: employees,\n    where: and(...securityFilters)\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"secure-table-joins\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Secure Table Joins</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Apply security context to ALL joined tables:</p><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: productivity,\n  joins: [\n    {\n      table: employees,\n      on: and(\n        eq(productivity.employeeId, employees.id),\n        // CRITICAL: Security filtering on joined table\n        eq(employees.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    },\n    {\n      table: departments,\n      on: and(\n        eq(employees.departmentId, departments.id),\n        // CRITICAL: Security filtering on all joined tables\n        eq(departments.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; ({\n  from: productivity,\n  joins: [\n    {\n      table: employees,\n      on: and(\n        eq(productivity.employeeId, employees.id),\n        // CRITICAL: Security filtering on joined table\n        eq(employees.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    },\n    {\n      table: departments,\n      on: and(\n        eq(employees.departmentId, departments.id),\n        // CRITICAL: Security filtering on all joined tables\n        eq(departments.organisationId, ctx.securityContext.organisationId)\n      ),\n      type: &#39;left&#39;\n    }\n  ],\n  where: eq(productivity.organisationId, ctx.securityContext.organisationId)\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"role-based-access-control\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Role-Based Access Control</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Implement fine-grained access control using security context:</p><h3 id=\"role-based-cube-access\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Role-Based Cube Access</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// Manager-only cube\nexport const salaryAnalyticsCube: Cube&lt;Schema&gt; = defineCube(&#39;SalaryAnalytics&#39;, {\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n    // Check role-based access\n    if (![&#39;admin&#39;, &#39;manager&#39;].includes(ctx.securityContext.userRole)) {\n      throw new Error(&#39;Access denied: Insufficient permissions for salary data&#39;)\n    }\n    \n    return {\n      from: employees,\n      where: and(\n        eq(employees.organisationId, ctx.securityContext.organisationId),\n        // Managers can only see their department\n        ctx.securityContext.userRole === &#39;manager&#39; \n          ? eq(employees.departmentId, ctx.securityContext.departmentId)\n          : sql`true`\n      )\n    }\n  }\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// Manager-only cube\nexport const salaryAnalyticsCube: Cube&lt;Schema&gt; = defineCube(&#39;SalaryAnalytics&#39;, {\n  sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n    // Check role-based access\n    if (![&#39;admin&#39;, &#39;manager&#39;].includes(ctx.securityContext.userRole)) {\n      throw new Error(&#39;Access denied: Insufficient permissions for salary data&#39;)\n    }\n    \n    return {\n      from: employees,\n      where: and(\n        eq(employees.organisationId, ctx.securityContext.organisationId),\n        // Managers can only see their department\n        ctx.securityContext.userRole === &#39;manager&#39; \n          ? eq(employees.departmentId, ctx.securityContext.departmentId)\n          : sql`true`\n      )\n    }\n  }\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"conditional-data-filtering\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Conditional Data Filtering</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n  const baseFilters = [\n    eq(employees.organisationId, ctx.securityContext.organisationId)\n  ]\n  \n  // Role-specific data access\n  switch (ctx.securityContext.userRole) {\n    case &#39;admin&#39;:\n      // Admins see all organization data\n      break\n      \n    case &#39;manager&#39;:\n      // Managers see their department only\n      baseFilters.push(\n        eq(employees.departmentId, ctx.securityContext.departmentId)\n      )\n      break\n      \n    case &#39;employee&#39;:\n      // Employees see only their own data\n      baseFilters.push(\n        eq(employees.id, ctx.securityContext.userId)\n      )\n      break\n      \n    default:\n      throw new Error(&#39;Invalid user role&#39;)\n  }\n  \n  return {\n    from: employees,\n    where: and(...baseFilters)\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n  const baseFilters = [\n    eq(employees.organisationId, ctx.securityContext.organisationId)\n  ]\n  \n  // Role-specific data access\n  switch (ctx.securityContext.userRole) {\n    case &#39;admin&#39;:\n      // Admins see all organization data\n      break\n      \n    case &#39;manager&#39;:\n      // Managers see their department only\n      baseFilters.push(\n        eq(employees.departmentId, ctx.securityContext.departmentId)\n      )\n      break\n      \n    case &#39;employee&#39;:\n      // Employees see only their own data\n      baseFilters.push(\n        eq(employees.id, ctx.securityContext.userId)\n      )\n      break\n      \n    default:\n      throw new Error(&#39;Invalid user role&#39;)\n  }\n  \n  return {\n    from: employees,\n    where: and(...baseFilters)\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"sql-injection-prevention\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">SQL Injection Prevention</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube prevents SQL injection through Drizzle ORM&#39;s parameterized queries and type-safe SQL builder.</p><h3 id=\"safe-practices-do\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Safe Practices (DO)</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// ✅ SAFE: Using Drizzle column references\nsql: employees.name\n\n// ✅ SAFE: Using Drizzle sql template with parameters\nsql: sql`${employees.salary} &gt; ${ctx.securityContext.minSalary}`\n\n// ✅ SAFE: Using Drizzle operators with parameters\nwhere: and(\n  eq(employees.organisationId, ctx.securityContext.organisationId),\n  gt(employees.salary, ctx.securityContext.minSalary)\n)\n\n// ✅ SAFE: Using security context values (pre-validated)\nwhere: eq(employees.departmentId, ctx.securityContext.departmentId)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// ✅ SAFE: Using Drizzle column references\nsql: employees.name\n\n// ✅ SAFE: Using Drizzle sql template with parameters\nsql: sql`${employees.salary} &gt; ${ctx.securityContext.minSalary}`\n\n// ✅ SAFE: Using Drizzle operators with parameters\nwhere: and(\n  eq(employees.organisationId, ctx.securityContext.organisationId),\n  gt(employees.salary, ctx.securityContext.minSalary)\n)\n\n// ✅ SAFE: Using security context values (pre-validated)\nwhere: eq(employees.departmentId, ctx.securityContext.departmentId)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"unsafe-practices-dont\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Unsafe Practices (DON&#39;T)</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// ❌ DANGEROUS: Raw string concatenation\nsql: `SELECT * FROM employees WHERE name = &#39;${userName}&#39;`\n\n// ❌ DANGEROUS: Dynamic SQL construction\nsql: `SELECT * FROM ${tableName} WHERE ${columnName} = ${value}`\n\n// ❌ DANGEROUS: Unvalidated user input\nsql: sql`SELECT * FROM employees WHERE ${sql.raw(userInput)}`</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// ❌ DANGEROUS: Raw string concatenation\nsql: `SELECT * FROM employees WHERE name = &#39;${userName}&#39;`\n\n// ❌ DANGEROUS: Dynamic SQL construction\nsql: `SELECT * FROM ${tableName} WHERE ${columnName} = ${value}`\n\n// ❌ DANGEROUS: Unvalidated user input\nsql: sql`SELECT * FROM employees WHERE ${sql.raw(userInput)}`\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"secure-parameter-handling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Secure Parameter Handling</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// ✅ CORRECT: Parameters automatically escaped\ndimensions: {\n  searchResults: {\n    name: &#39;searchResults&#39;,\n    title: &#39;Search Results&#39;,\n    type: &#39;string&#39;,\n    sql: sql`\n      CASE \n        WHEN ${employees.name} ILIKE ${`%${ctx.query.searchTerm}%`} THEN &#39;Match&#39;\n        ELSE &#39;No Match&#39;\n      END\n    `\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// ✅ CORRECT: Parameters automatically escaped\ndimensions: {\n  searchResults: {\n    name: &#39;searchResults&#39;,\n    title: &#39;Search Results&#39;,\n    type: &#39;string&#39;,\n    sql: sql`\n      CASE \n        WHEN ${employees.name} ILIKE ${`%${ctx.query.searchTerm}%`} THEN &#39;Match&#39;\n        ELSE &#39;No Match&#39;\n      END\n    `\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"data-masking-and-privacy\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Data Masking and Privacy</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Implement data masking for sensitive information:</p><h3 id=\"column-level-security\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Column-Level Security</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">dimensions: {\n  email: {\n    name: &#39;email&#39;,\n    title: &#39;Email&#39;,\n    type: &#39;string&#39;,\n    sql: ctx.securityContext.userRole === &#39;admin&#39; \n      ? employees.email\n      : sql`REGEXP_REPLACE(${employees.email}, &#39;(.{2}).*(@.*)&#39;, &#39;\\\\1***\\\\2&#39;)`\n  },\n  \n  salary: {\n    name: &#39;salary&#39;,\n    title: &#39;Salary&#39;,\n    type: &#39;number&#39;,\n    sql: [&#39;admin&#39;, &#39;hr&#39;].includes(ctx.securityContext.userRole)\n      ? employees.salary\n      : sql`NULL` // Hide salary for non-authorized users\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"dimensions: {\n  email: {\n    name: &#39;email&#39;,\n    title: &#39;Email&#39;,\n    type: &#39;string&#39;,\n    sql: ctx.securityContext.userRole === &#39;admin&#39; \n      ? employees.email\n      : sql`REGEXP_REPLACE(${employees.email}, &#39;(.{2}).*(@.*)&#39;, &#39;\\\\1***\\\\2&#39;)`\n  },\n  \n  salary: {\n    name: &#39;salary&#39;,\n    title: &#39;Salary&#39;,\n    type: &#39;number&#39;,\n    sql: [&#39;admin&#39;, &#39;hr&#39;].includes(ctx.securityContext.userRole)\n      ? employees.salary\n      : sql`NULL` // Hide salary for non-authorized users\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"conditional-measure-access\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Conditional Measure Access</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">measures: {\n  avgSalary: {\n    name: &#39;avgSalary&#39;,\n    title: &#39;Average Salary&#39;,\n    type: &#39;avg&#39;,\n    sql: [&#39;admin&#39;, &#39;hr&#39;].includes(ctx.securityContext.userRole)\n      ? employees.salary\n      : sql`NULL`,\n    description: &#39;Available to HR and Admin roles only&#39;\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"measures: {\n  avgSalary: {\n    name: &#39;avgSalary&#39;,\n    title: &#39;Average Salary&#39;,\n    type: &#39;avg&#39;,\n    sql: [&#39;admin&#39;, &#39;hr&#39;].includes(ctx.securityContext.userRole)\n      ? employees.salary\n      : sql`NULL`,\n    description: &#39;Available to HR and Admin roles only&#39;\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"audit-and-logging\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Audit and Logging</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Track data access for compliance and security monitoring:</p><h3 id=\"query-logging\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Logging</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">// In your adapter or middleware\nconst logQuery = (query: SemanticQuery, context: SecurityContext) =&gt; {\n  console.log(&#39;Analytics Query:&#39;, {\n    timestamp: new Date().toISOString(),\n    userId: context.userId,\n    organisationId: context.organisationId,\n    cubes: query.measures?.map(m =&gt; m.split(&#39;.&#39;)[0]) || [],\n    dimensions: query.dimensions || [],\n    filters: query.filters || []\n  })\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"// In your adapter or middleware\nconst logQuery = (query: SemanticQuery, context: SecurityContext) =&gt; {\n  console.log(&#39;Analytics Query:&#39;, {\n    timestamp: new Date().toISOString(),\n    userId: context.userId,\n    organisationId: context.organisationId,\n    cubes: query.measures?.map(m =&gt; m.split(&#39;.&#39;)[0]) || [],\n    dimensions: query.dimensions || [],\n    filters: query.filters || []\n  })\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"access-control-logging\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Access Control Logging</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n  // Log access attempt\n  if (ctx.securityContext.userRole !== &#39;admin&#39;) {\n    logAccess({\n      action: &#39;CUBE_ACCESS&#39;,\n      cube: &#39;SalaryAnalytics&#39;,\n      userId: ctx.securityContext.userId,\n      result: &#39;DENIED&#39;\n    })\n    throw new Error(&#39;Access denied&#39;)\n  }\n  \n  return {\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx: QueryContext&lt;Schema&gt;): BaseQueryDefinition =&gt; {\n  // Log access attempt\n  if (ctx.securityContext.userRole !== &#39;admin&#39;) {\n    logAccess({\n      action: &#39;CUBE_ACCESS&#39;,\n      cube: &#39;SalaryAnalytics&#39;,\n      userId: ctx.securityContext.userId,\n      result: &#39;DENIED&#39;\n    })\n    throw new Error(&#39;Access denied&#39;)\n  }\n  \n  return {\n    from: employees,\n    where: eq(employees.organisationId, ctx.securityContext.organisationId)\n  }\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"testing-security\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Security</h2><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">CRITICAL</strong>: Always test security isolation to prevent data leakage.</p><h3 id=\"multi-tenant-isolation-tests\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Multi-Tenant Isolation Tests</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">describe(&#39;Security Isolation&#39;, () =&gt; {\n  it(&#39;should isolate data by organisation&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    }\n    \n    // Test org 1\n    const result1 = await semanticLayer.load(query, {\n      organisationId: &#39;org-1&#39;\n    })\n    \n    // Test org 2\n    const result2 = await semanticLayer.load(query, {\n      organisationId: &#39;org-2&#39;  \n    })\n    \n    // Results should be different and non-overlapping\n    expect(result1.rawData()).not.toEqual(result2.rawData())\n  })\n  \n  it(&#39;should enforce role-based access&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.avgSalary&#39;],\n      dimensions: []\n    }\n    \n    // Should succeed for admin\n    const adminResult = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;,\n      userRole: &#39;admin&#39;\n    })\n    expect(adminResult.rawData()[0][&#39;Employees.avgSalary&#39;]).toBeDefined()\n    \n    // Should fail or return null for regular employee\n    const employeeResult = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;,\n      userRole: &#39;employee&#39;\n    })\n    expect(employeeResult.rawData()[0][&#39;Employees.avgSalary&#39;]).toBeNull()\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"describe(&#39;Security Isolation&#39;, () =&gt; {\n  it(&#39;should isolate data by organisation&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.count&#39;],\n      dimensions: []\n    }\n    \n    // Test org 1\n    const result1 = await semanticLayer.load(query, {\n      organisationId: &#39;org-1&#39;\n    })\n    \n    // Test org 2\n    const result2 = await semanticLayer.load(query, {\n      organisationId: &#39;org-2&#39;  \n    })\n    \n    // Results should be different and non-overlapping\n    expect(result1.rawData()).not.toEqual(result2.rawData())\n  })\n  \n  it(&#39;should enforce role-based access&#39;, async () =&gt; {\n    const query = {\n      measures: [&#39;Employees.avgSalary&#39;],\n      dimensions: []\n    }\n    \n    // Should succeed for admin\n    const adminResult = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;,\n      userRole: &#39;admin&#39;\n    })\n    expect(adminResult.rawData()[0][&#39;Employees.avgSalary&#39;]).toBeDefined()\n    \n    // Should fail or return null for regular employee\n    const employeeResult = await semanticLayer.load(query, {\n      organisationId: &#39;test-org&#39;,\n      userRole: &#39;employee&#39;\n    })\n    expect(employeeResult.rawData()[0][&#39;Employees.avgSalary&#39;]).toBeNull()\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"security-context-validation\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Security Context Validation</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">describe(&#39;Security Context&#39;, () =&gt; {\n  it(&#39;should require organisation ID&#39;, async () =&gt; {\n    const query = { measures: [&#39;Employees.count&#39;], dimensions: [] }\n    \n    await expect(\n      semanticLayer.load(query, {})  // Missing organisationId\n    ).rejects.toThrow(&#39;organisationId is required&#39;)\n  })\n  \n  it(&#39;should validate user permissions&#39;, async () =&gt; {\n    await expect(\n      semanticLayer.load(\n        { measures: [&#39;SalaryAnalytics.count&#39;], dimensions: [] },\n        { organisationId: &#39;test-org&#39;, userRole: &#39;employee&#39; }\n      )\n    ).rejects.toThrow(&#39;Access denied&#39;)\n  })\n})</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"describe(&#39;Security Context&#39;, () =&gt; {\n  it(&#39;should require organisation ID&#39;, async () =&gt; {\n    const query = { measures: [&#39;Employees.count&#39;], dimensions: [] }\n    \n    await expect(\n      semanticLayer.load(query, {})  // Missing organisationId\n    ).rejects.toThrow(&#39;organisationId is required&#39;)\n  })\n  \n  it(&#39;should validate user permissions&#39;, async () =&gt; {\n    await expect(\n      semanticLayer.load(\n        { measures: [&#39;SalaryAnalytics.count&#39;], dimensions: [] },\n        { organisationId: &#39;test-org&#39;, userRole: &#39;employee&#39; }\n      )\n    ).rejects.toThrow(&#39;Access denied&#39;)\n  })\n})\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Organization Filtering</strong>: ALWAYS filter by organizationId in every cube</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Join Security</strong>: Apply security context to ALL joined tables</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Parameter Safety</strong>: Use Drizzle&#39;s parameterized queries exclusively</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Role Validation</strong>: Validate user roles before data access</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Audit Logging</strong>: Log all data access for compliance</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Test Security</strong>: Write comprehensive security isolation tests</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Principle of Least Privilege</strong>: Grant minimal necessary access</li></ol><h2 id=\"security-checklist\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Security Checklist</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><input disabled=\"\" type=\"checkbox\"> Every cube filters by <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded-sm text-sm font-mono\">organisationId</code></li><li class=\"leading-relaxed\"><input disabled=\"\" type=\"checkbox\"> All joined tables include security context filtering</li><li class=\"leading-relaxed\"><input disabled=\"\" type=\"checkbox\"> No raw SQL string concatenation</li><li class=\"leading-relaxed\"><input disabled=\"\" type=\"checkbox\"> Role-based access controls implemented</li><li class=\"leading-relaxed\"><input disabled=\"\" type=\"checkbox\"> Sensitive data is masked appropriately</li><li class=\"leading-relaxed\"><input disabled=\"\" type=\"checkbox\"> Security tests cover tenant isolation</li><li class=\"leading-relaxed\"><input disabled=\"\" type=\"checkbox\"> Audit logging is in place</li><li class=\"leading-relaxed\"><input disabled=\"\" type=\"checkbox\"> Security context validation is implemented</li></ul><h2 id=\"common-security-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Common Security Patterns</h2><h3 id=\"basic-tenant-isolation\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Tenant Isolation</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">where: eq(table.organisationId, ctx.securityContext.organisationId)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"where: eq(table.organisationId, ctx.securityContext.organisationId)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"role-based-access\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Role-Based Access</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">sql: (ctx) =&gt; {\n  if (ctx.securityContext.userRole !== &#39;admin&#39;) {\n    throw new Error(&#39;Access denied&#39;)\n  }\n  // ... cube definition\n}</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"sql: (ctx) =&gt; {\n  if (ctx.securityContext.userRole !== &#39;admin&#39;) {\n    throw new Error(&#39;Access denied&#39;)\n  }\n  // ... cube definition\n}\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"department-level-security\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Department-Level Security</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">where: and(\n  eq(table.organisationId, ctx.securityContext.organisationId),\n  eq(table.departmentId, ctx.securityContext.departmentId)\n)</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"where: and(\n  eq(table.organisationId, ctx.securityContext.organisationId),\n  eq(table.departmentId, ctx.securityContext.departmentId)\n)\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h3 id=\"secure-join-pattern\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Secure Join Pattern</h3><div class=\"relative group\">\n    <pre class=\"language-typescript rounded-lg overflow-x-auto mb-4\"><code class=\"language-typescript\">joins: [{\n  table: joinedTable,\n  on: and(\n    eq(mainTable.foreignKey, joinedTable.id),\n    eq(joinedTable.organisationId, ctx.securityContext.organisationId)\n  )\n}]</code></pre>\n    <button class=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 copy-code-btn\" data-code=\"joins: [{\n  table: joinedTable,\n  on: and(\n    eq(mainTable.foreignKey, joinedTable.id),\n    eq(joinedTable.organisationId, ctx.securityContext.organisationId)\n  )\n}]\" title=\"Copy to clipboard\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n        <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n      </svg>\n    </button>\n  </div><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Review <a href=\"#\" data-help-link=\"semantic-layer/cubes\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Cubes</a> for complete security implementation</li><li class=\"leading-relaxed\">Understand <a href=\"#\" data-help-link=\"semantic-layer/joins\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Joins</a> security requirements</li><li class=\"leading-relaxed\">Learn about <a href=\"#\" data-help-link=\"adapters/hono\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Adapters</a> security context extraction</li><li class=\"leading-relaxed\">Implement comprehensive security testing</li></ul><h2 id=\"roadmap-ideas\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Roadmap Ideas</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Advanced RBAC with fine-grained permissions</li><li class=\"leading-relaxed\">Field-level encryption for sensitive data</li><li class=\"leading-relaxed\">Security policy configuration UI</li><li class=\"leading-relaxed\">Automated security testing framework</li><li class=\"leading-relaxed\">Compliance reporting and audit trails</li><li class=\"leading-relaxed\">Integration with external identity providers</li></ul>","path":"semantic-layer/security.md"}
};

// Export for search functionality
export const searchableContent = helpContent.map(item => ({
  slug: item.slug,
  title: item.title,
  content: item.content.replace(/<[^>]*>/g, ' ').replace(/\s+/g, ' ').trim()
}));
