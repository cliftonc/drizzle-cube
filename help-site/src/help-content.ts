// Auto-generated help content - do not edit manually
// Generated on 2025-08-18T16:50:11.018Z

export interface HelpTopic {
  slug: string;
  title: string;
  content: string;
  path: string;
}

export const helpContent: HelpTopic[] = [
  {
    "slug": "adapters/hono",
    "title": "Hono Adapter",
    "content": "<h1 id=\"hono-adapter\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Hono Adapter</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">The Hono adapter provides a complete <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a>-compatible API for the <a href=\"https://hono.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Hono</a> web framework, making it easy to add analytics capabilities to your Hono applications.</p><h2 id=\"installation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Installation</h2><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-bash\">npm install drizzle-cube hono drizzle-orm</code></pre><h2 id=\"quick-start\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Quick Start</h2><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">import { Hono } from 'hono';\nimport { createCubeApp } from 'drizzle-cube/adapters/hono';\nimport { SemanticLayerCompiler, createDatabaseExecutor } from 'drizzle-cube/server';\nimport { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from './schema';\nimport { salesCube } from './cubes';\n\n// Database connection\nconst client = postgres(process.env.DATABASE_URL!);\nconst db = drizzle(client, { schema });\n\n// Create semantic layer\nconst databaseExecutor = createDatabaseExecutor(db, schema, 'postgres');\nconst semanticLayer = new SemanticLayerCompiler({ databaseExecutor });\nsemanticLayer.registerCube(salesCube);\n\n// Create main Hono app\nconst app = new Hono();\n\n// Authentication middleware\napp.use('/api/cube/*', async (c, next) => {\n  const token = c.req.header('Authorization');\n  if (!token) {\n    return c.json({ error: 'Unauthorized' }, 401);\n  }\n  \n  // Validate token and set user context\n  const user = await validateToken(token);\n  c.set('user', user);\n  await next();\n});\n\n// Create and mount Cube API\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) => {\n    const user = c.get('user');\n    return {\n      organisationId: user.organisationId,\n      userId: user.id,\n      roles: user.roles\n    };\n  }\n});\n\napp.route('/api/cube', cubeApp);\n\nexport default app;</code></pre><h2 id=\"configuration-options\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Configuration Options</h2><h3 id=\"basic-configuration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Configuration</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">const cubeApp = createCubeApp({\n  // Required\n  semanticLayer: semanticLayerInstance,\n  drizzle: dbInstance,\n  schema: schemaObject,\n  getSecurityContext: async (c) => ({ /* context */ }),\n  \n  // Optional\n  corsOptions: {\n    origin: ['http://localhost:3000'],\n    credentials: true\n  },\n  \n  enablePlayground: process.env.NODE_ENV === 'development',\n  \n  queryTimeout: 30000, // 30 seconds\n  \n  onError: (error, c) => {\n    console.error('Cube API Error:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});</code></pre><h3 id=\"advanced-configuration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Advanced Configuration</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">const cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  \n  getSecurityContext: async (c) => {\n    const user = c.get('user');\n    const tenant = c.req.header('X-Tenant-ID');\n    \n    return {\n      organisationId: parseInt(tenant!),\n      userId: user.id,\n      roles: user.roles,\n      permissions: user.permissions,\n      // Custom context\n      region: user.region,\n      hasRole: (role: string) => user.roles.includes(role)\n    };\n  },\n  \n  // Custom middleware for all cube routes\n  middleware: [\n    // Rate limiting\n    async (c, next) => {\n      const userId = c.get('user')?.id;\n      if (await isRateLimited(userId)) {\n        return c.json({ error: 'Rate limited' }, 429);\n      }\n      await next();\n    },\n    \n    // Audit logging\n    async (c, next) => {\n      const start = Date.now();\n      await next();\n      const duration = Date.now() - start;\n      \n      await logQuery({\n        userId: c.get('user')?.id,\n        path: c.req.path,\n        duration,\n        status: c.res.status\n      });\n    }\n  ],\n  \n  // Transform queries before execution\n  queryTransform: async (query, context) => {\n    // Add automatic filters based on user\n    if (context.hasRole('sales')) {\n      query.filters = query.filters || [];\n      query.filters.push({\n        member: 'Sales.salesPersonId',\n        operator: 'equals',\n        values: [context.userId.toString()]\n      });\n    }\n    \n    return query;\n  }\n});</code></pre><h2 id=\"api-endpoints\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">API Endpoints</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The Hono adapter provides these <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a>-compatible endpoints:</p><h3 id=\"load-data\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Load Data</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-http\">POST /api/cube/load\nContent-Type: application/json\n\n{\n  \"query\": {\n    \"measures\": [\"Sales.totalRevenue\"],\n    \"dimensions\": [\"Sales.productCategory\"],\n    \"timeDimensions\": [{\n      \"dimension\": \"Sales.orderDate\",\n      \"granularity\": \"month\"\n    }]\n  }\n}</code></pre><h3 id=\"get-metadata\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Get Metadata</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-http\">GET /api/cube/meta</code></pre><p class=\"mb-4 text-gray-600 leading-relaxed\">Returns available cubes, dimensions, and measures.</p><h3 id=\"execute-sql\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Execute SQL</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-http\">POST /api/cube/sql\nContent-Type: application/json\n\n{\n  \"query\": {\n    \"measures\": [\"Sales.totalRevenue\"],\n    \"dimensions\": [\"Sales.productCategory\"]\n  }\n}</code></pre><p class=\"mb-4 text-gray-600 leading-relaxed\">Returns the generated SQL without executing it.</p><h3 id=\"query-validation\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Validation</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-http\">POST /api/cube/validate\nContent-Type: application/json\n\n{\n  \"query\": {\n    \"measures\": [\"Sales.totalRevenue\"],\n    \"dimensions\": [\"InvalidDimension\"]\n  }\n}</code></pre><h2 id=\"security-context\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Security Context</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">getSecurityContext</code> function is crucial for multi-tenant security:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">getSecurityContext: async (c) => {\n  const token = c.req.header('Authorization')?.replace('Bearer ', '');\n  const user = await verifyJWT(token);\n  \n  // Extract tenant from subdomain\n  const host = c.req.header('Host');\n  const subdomain = host?.split('.')[0];\n  const tenant = await getTenantBySubdomain(subdomain);\n  \n  return {\n    organisationId: tenant.id,\n    userId: user.id,\n    roles: user.roles,\n    permissions: user.permissions,\n    \n    // Custom helpers\n    hasRole: (role: string) => user.roles.includes(role),\n    hasPermission: (permission: string) => user.permissions.includes(permission),\n    \n    // Regional filtering\n    region: user.region,\n    allowedRegions: user.allowedRegions\n  };\n}</code></pre><h2 id=\"authentication-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Authentication Patterns</h2><h3 id=\"jwt-authentication\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">JWT Authentication</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">import { jwt } from 'hono/jwt';\n\napp.use('/api/cube/*', jwt({\n  secret: process.env.JWT_SECRET!,\n  cookie: 'auth-token' // Optional: read from cookie\n}));\n\napp.use('/api/cube/*', async (c, next) => {\n  const payload = c.get('jwtPayload');\n  const user = await getUserById(payload.sub);\n  c.set('user', user);\n  await next();\n});</code></pre><h3 id=\"api-key-authentication\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">API Key Authentication</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">app.use('/api/cube/*', async (c, next) => {\n  const apiKey = c.req.header('X-API-Key');\n  if (!apiKey) {\n    return c.json({ error: 'API key required' }, 401);\n  }\n  \n  const client = await validateApiKey(apiKey);\n  if (!client) {\n    return c.json({ error: 'Invalid API key' }, 401);\n  }\n  \n  c.set('client', client);\n  await next();\n});</code></pre><h3 id=\"session-based-authentication\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Session-based Authentication</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">import { getCookie } from 'hono/cookie';\n\napp.use('/api/cube/*', async (c, next) => {\n  const sessionId = getCookie(c, 'session_id');\n  if (!sessionId) {\n    return c.json({ error: 'Not authenticated' }, 401);\n  }\n  \n  const session = await getSession(sessionId);\n  if (!session || session.expired) {\n    return c.json({ error: 'Session expired' }, 401);\n  }\n  \n  c.set('user', session.user);\n  await next();\n});</code></pre><h2 id=\"error-handling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Handling</h2><h3 id=\"custom-error-handler\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Error Handler</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">const cubeApp = createCubeApp({\n  // ... other options\n  \n  onError: (error, c) => {\n    console.error('Cube API Error:', {\n      error: error.message,\n      stack: error.stack,\n      user: c.get('user')?.id,\n      query: c.req.json(),\n      timestamp: new Date().toISOString()\n    });\n    \n    // Don't expose internal errors to clients\n    if (process.env.NODE_ENV === 'production') {\n      return c.json({ \n        error: 'An error occurred processing your request',\n        requestId: generateRequestId()\n      }, 500);\n    }\n    \n    return c.json({ \n      error: error.message,\n      stack: error.stack\n    }, 500);\n  }\n});</code></pre><h3 id=\"query-timeout\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Timeout</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">const cubeApp = createCubeApp({\n  // ... other options\n  queryTimeout: 60000, // 60 seconds\n  \n  onTimeout: (c) => {\n    return c.json({\n      error: 'Query timeout',\n      message: 'The query took too long to execute. Try reducing the date range or adding filters.'\n    }, 408);\n  }\n});</code></pre><h2 id=\"caching\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Caching</h2><h3 id=\"query-result-caching\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Result Caching</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">import { cache } from 'hono/cache';\n\n// Cache GET requests for 5 minutes\napp.get('/api/cube/meta', cache({\n  cacheName: 'cube-meta',\n  cacheControl: 'max-age=300'\n}));\n\n// Custom caching logic\napp.use('/api/cube/load', async (c, next) => {\n  const query = await c.req.json();\n  const cacheKey = generateCacheKey(query, c.get('user'));\n  \n  const cached = await getFromCache(cacheKey);\n  if (cached) {\n    return c.json(cached);\n  }\n  \n  await next();\n  \n  // Cache the response\n  const response = await c.res.json();\n  await setCache(cacheKey, response, 300); // 5 minutes\n});</code></pre><h2 id=\"development-tools\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Development Tools</h2><h3 id=\"cube-playground\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Cube Playground</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Enable the playground in development:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">const cubeApp = createCubeApp({\n  // ... other options\n  enablePlayground: process.env.NODE_ENV === 'development'\n});\n\n// Access at: http://localhost:3000/api/cube/playground</code></pre><h3 id=\"query-logging\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Logging</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">app.use('/api/cube/*', async (c, next) => {\n  if (process.env.NODE_ENV === 'development') {\n    const query = c.req.method === 'POST' ? await c.req.json() : null;\n    console.log('Cube Query:', {\n      method: c.req.method,\n      path: c.req.path,\n      query,\n      user: c.get('user')?.id\n    });\n  }\n  \n  await next();\n});</code></pre><h2 id=\"deployment\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Deployment</h2><h3 id=\"cloudflare-workers\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Cloudflare Workers</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// src/worker.ts\nimport app from './server';\n\nexport default {\n  fetch: app.fetch\n};\n\n// wrangler.toml\n[env.production]\nvars = { NODE_ENV = \"production\" }\n\n[[env.production.bindings]]\nname = \"DATABASE_URL\"\ntype = \"secret\"</code></pre><h3 id=\"nodejs-server\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Node.js Server</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">import { serve } from '@hono/node-server';\nimport app from './server';\n\nconst port = process.env.PORT || 3000;\n\nserve({\n  fetch: app.fetch,\n  port: Number(port)\n});\n\nconsole.log(`Server running on port ${port}`);</code></pre><h3 id=\"vercel\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Vercel</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// api/cube/[...path].ts\nimport { handle } from '@hono/vercel';\nimport app from '../../src/server';\n\nexport default handle(app);</code></pre><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"adapters/custom\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Custom Adapters</strong></a> - Build adapters for other frameworks</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Security</strong></a> - Advanced security patterns  </li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"advanced/performance\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Performance</strong></a> - Optimization techniques</li></ul>",
    "path": "adapters/hono.md"
  },
  {
    "slug": "client",
    "title": "React Client",
    "content": "<h1 id=\"react-client\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">React Client</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">The Drizzle Cube React client provides pre-built components and hooks for creating analytics dashboards and data visualizations with minimal code.</p><h2 id=\"installation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Installation</h2><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-bash\">npm install drizzle-cube react react-dom recharts react-grid-layout</code></pre><h2 id=\"quick-start\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Quick Start</h2><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import React from 'react';\nimport { CubeProvider, AnalyticsDashboard } from 'drizzle-cube/client';\n\nfunction App() {\n  const cubeApi = {\n    url: '/api/cube',\n    headers: {\n      'Authorization': 'Bearer your-token',\n      'X-Organisation-ID': '1'\n    }\n  };\n\n  return (\n    <CubeProvider cubeApi={cubeApi}>\n      <AnalyticsDashboard\n        initialLayout={[\n          {\n            id: 'revenue-chart',\n            title: 'Monthly Revenue',\n            chartType: 'line',\n            query: {\n              measures: ['Sales.totalRevenue'],\n              timeDimensions: [{\n                dimension: 'Sales.orderDate',\n                granularity: 'month'\n              }]\n            }\n          }\n        ]}\n      />\n    </CubeProvider>\n  );\n}</code></pre><h2 id=\"core-components\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Core Components</h2><h3 id=\"cubeprovider\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">CubeProvider</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The foundation component that provides cube API context:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { CubeProvider } from 'drizzle-cube/client';\n\nfunction App() {\n  const cubeApi = {\n    url: '/api/cube',\n    headers: {\n      'Authorization': 'Bearer your-jwt-token',\n      'X-Organisation-ID': '123'\n    }\n  };\n\n  return (\n    <CubeProvider cubeApi={cubeApi}>\n      {/* Your dashboard components */}\n    </CubeProvider>\n  );\n}</code></pre><h3 id=\"analyticsdashboard\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">AnalyticsDashboard</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">A complete dashboard with drag-and-drop layout:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { AnalyticsDashboard } from 'drizzle-cube/client';\n\n<AnalyticsDashboard\n  initialLayout={[\n    {\n      id: 'sales-overview',\n      title: 'Sales Overview', \n      chartType: 'bar',\n      query: {\n        measures: ['Sales.totalRevenue', 'Sales.orderCount'],\n        dimensions: ['Sales.productCategory']\n      },\n      layout: { x: 0, y: 0, w: 6, h: 4 }\n    },\n    {\n      id: 'sales-trend',\n      title: 'Sales Trend',\n      chartType: 'line', \n      query: {\n        measures: ['Sales.totalRevenue'],\n        timeDimensions: [{\n          dimension: 'Sales.orderDate',\n          granularity: 'day'\n        }]\n      },\n      layout: { x: 6, y: 0, w: 6, h: 4 }\n    }\n  ]}\n  \n  onLayoutChange={(layout) => {\n    // Save layout to user preferences\n    localStorage.setItem('dashboard-layout', JSON.stringify(layout));\n  }}\n  \n  showEditControls={true}\n  allowResize={true}\n  allowDrag={true}\n/></code></pre><h3 id=\"analyticspage\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">AnalyticsPage</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">A complete page with sidebar filters and charts:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { AnalyticsPage } from 'drizzle-cube/client';\n\n<AnalyticsPage\n  title=\"Sales Analytics\"\n  description=\"Comprehensive sales performance metrics\"\n  \n  filters={[\n    {\n      member: 'Sales.productCategory',\n      title: 'Product Category',\n      type: 'select'\n    },\n    {\n      member: 'Sales.orderDate',\n      title: 'Date Range', \n      type: 'dateRange'\n    }\n  ]}\n  \n  charts={[\n    {\n      id: 'revenue-by-category',\n      title: 'Revenue by Category',\n      chartType: 'pie',\n      query: {\n        measures: ['Sales.totalRevenue'],\n        dimensions: ['Sales.productCategory']\n      }\n    }\n  ]}\n/></code></pre><h3 id=\"analyticsportlet\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">AnalyticsPortlet</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Individual chart components:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { AnalyticsPortlet } from 'drizzle-cube/client';\n\n<AnalyticsPortlet\n  title=\"Monthly Sales Trend\"\n  chartType=\"line\"\n  query={{\n    measures: ['Sales.totalRevenue'],\n    timeDimensions: [{\n      dimension: 'Sales.orderDate',\n      granularity: 'month'\n    }]\n  }}\n  \n  showControls={true}\n  allowExport={true}\n  refreshInterval={30000} // Refresh every 30 seconds\n  \n  onDataLoad={(data) => {\n    console.log('Chart data loaded:', data);\n  }}\n/></code></pre><h2 id=\"chart-types\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Chart Types</h2><h3 id=\"line-charts\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Line Charts</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Perfect for time series data:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\"><AnalyticsPortlet\n  chartType=\"line\"\n  query={{\n    measures: ['Sales.totalRevenue'],\n    timeDimensions: [{ \n      dimension: 'Sales.orderDate', \n      granularity: 'day' \n    }]\n  }}\n/></code></pre><h3 id=\"bar-charts\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Bar Charts</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Great for comparing categories:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\"><AnalyticsPortlet\n  chartType=\"bar\"\n  query={{\n    measures: ['Sales.totalRevenue', 'Sales.orderCount'],\n    dimensions: ['Sales.productCategory']\n  }}\n/></code></pre><h3 id=\"pie-charts\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Pie Charts</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Show proportions:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\"><AnalyticsPortlet\n  chartType=\"pie\"\n  query={{\n    measures: ['Sales.totalRevenue'],\n    dimensions: ['Sales.region']\n  }}\n/></code></pre><h3 id=\"data-tables\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Data Tables</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Detailed data views:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\"><AnalyticsPortlet\n  chartType=\"table\"\n  query={{\n    measures: ['Sales.totalRevenue', 'Sales.orderCount'],\n    dimensions: ['Sales.customerName', 'Sales.productCategory']\n  }}\n  \n  pageSize={20}\n  sortable={true}\n  searchable={true}\n/></code></pre><h2 id=\"hooks\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Hooks</h2><h3 id=\"usecubequery\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">useCubeQuery</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Execute queries and get real-time data:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { useCubeQuery } from 'drizzle-cube/client';\n\nfunction SalesMetric() {\n  const { data, isLoading, error } = useCubeQuery({\n    measures: ['Sales.totalRevenue'],\n    dimensions: ['Sales.productCategory'],\n    filters: [{\n      member: 'Sales.orderDate',\n      operator: 'inDateRange',\n      values: ['2024-01-01', '2024-12-31']\n    }]\n  });\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n\n  return (\n    <div>\n      <h2>Total Revenue: ${data.totalRevenue}</h2>\n      {/* Render your data */}\n    </div>\n  );\n}</code></pre><h3 id=\"usecubemeta\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">useCubeMeta</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Access cube metadata:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { useCubeMeta } from 'drizzle-cube/client';\n\nfunction MetricSelector() {\n  const { cubes, isLoading } = useCubeMeta();\n\n  if (isLoading) return <div>Loading cubes...</div>;\n\n  return (\n    <select>\n      {cubes.map(cube => \n        cube.measures.map(measure => (\n          <option key={`${cube.name}.${measure.name}`} \n                  value={`${cube.name}.${measure.name}`}>\n            {measure.title || measure.name}\n          </option>\n        ))\n      )}\n    </select>\n  );\n}</code></pre><h2 id=\"customization\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Customization</h2><h3 id=\"custom-chart-components\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Chart Components</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create your own visualizations:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { useCubeQuery } from 'drizzle-cube/client';\nimport { ResponsiveContainer, ComposedChart, Bar, Line, XAxis, YAxis } from 'recharts';\n\nfunction CustomChart({ query }) {\n  const { data, isLoading } = useCubeQuery(query);\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <ComposedChart data={data}>\n        <XAxis dataKey=\"Sales.orderDate\" />\n        <YAxis />\n        <Bar dataKey=\"Sales.orderCount\" fill=\"#8884d8\" />\n        <Line dataKey=\"Sales.totalRevenue\" stroke=\"#82ca9d\" />\n      </ComposedChart>\n    </ResponsiveContainer>\n  );\n}</code></pre><h3 id=\"theme-customization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Theme Customization</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Customize the appearance:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { CubeProvider } from 'drizzle-cube/client';\n\nconst theme = {\n  colors: {\n    primary: '#3b82f6',\n    secondary: '#64748b', \n    success: '#10b981',\n    warning: '#f59e0b',\n    error: '#ef4444'\n  },\n  fonts: {\n    body: 'Inter, sans-serif',\n    mono: 'Fira Code, monospace'\n  }\n};\n\n<CubeProvider cubeApi={cubeApi} theme={theme}>\n  {/* Your components */}\n</CubeProvider></code></pre><h2 id=\"real-time-updates\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Real-time Updates</h2><h3 id=\"websocket-support\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">WebSocket Support</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Enable real-time data updates:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">const cubeApi = {\n  url: '/api/cube',\n  websocketUrl: 'ws://localhost:3000/ws',\n  headers: {\n    'Authorization': 'Bearer token'\n  }\n};\n\n<CubeProvider cubeApi={cubeApi}>\n  <AnalyticsPortlet\n    query={query}\n    realtime={true}\n    refreshInterval={5000}\n  />\n</CubeProvider></code></pre><h3 id=\"manual-refresh\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Manual Refresh</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Trigger updates programmatically:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { useCubeQuery } from 'drizzle-cube/client';\n\nfunction RefreshableChart() {\n  const { data, isLoading, refetch } = useCubeQuery(query);\n\n  return (\n    <div>\n      <button onClick={() => refetch()}>\n        Refresh Data\n      </button>\n      {/* Chart content */}\n    </div>\n  );\n}</code></pre><h2 id=\"error-handling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Handling</h2><h3 id=\"error-boundaries\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Error Boundaries</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Handle errors gracefully:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { ChartErrorBoundary } from 'drizzle-cube/client';\n\n<ChartErrorBoundary\n  fallback={({ error, resetError }) => (\n    <div className=\"error-state\">\n      <h3>Something went wrong</h3>\n      <p>{error.message}</p>\n      <button onClick={resetError}>Try again</button>\n    </div>\n  )}\n>\n  <AnalyticsPortlet query={query} />\n</ChartErrorBoundary></code></pre><h3 id=\"query-validation\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Validation</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Validate queries before execution:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { validateQuery } from 'drizzle-cube/client';\n\nfunction QueryBuilder({ query, onChange }) {\n  const validation = validateQuery(query);\n  \n  if (!validation.isValid) {\n    return (\n      <div className=\"validation-errors\">\n        {validation.errors.map(error => (\n          <div key={error.field}>{error.message}</div>\n        ))}\n      </div>\n    );\n  }\n\n  return <AnalyticsPortlet query={query} />;\n}</code></pre><h2 id=\"performance-tips\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Tips</h2><h3 id=\"query-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Optimization</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Use appropriate granularities for time dimensions</li><li class=\"leading-relaxed\">Limit result sets with filters</li><li class=\"leading-relaxed\">Cache frequently used queries</li></ul><h3 id=\"component-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Component Optimization</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Memoize expensive calculations</li><li class=\"leading-relaxed\">Use React.memo for pure components</li><li class=\"leading-relaxed\">Implement virtualization for large datasets</li></ul><h3 id=\"bundle-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Bundle Optimization</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Tree shake unused chart types</li><li class=\"leading-relaxed\">Code split dashboard components</li><li class=\"leading-relaxed\">Lazy load visualization libraries</li></ul><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/charts\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Charts</strong></a> - Detailed chart documentation</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/dashboards\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Dashboards</strong></a> - Dashboard customization  </li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/hooks\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Hooks</strong></a> - Advanced hook usage</li></ul>",
    "path": "client/index.md"
  },
  {
    "slug": "getting-started",
    "title": "Getting Started with Drizzle Cube",
    "content": "<h1 id=\"getting-started-with-drizzle-cube\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Getting Started with Drizzle Cube</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube is a <strong class=\"font-semibold text-slate-700\">Drizzle ORM-first semantic layer</strong> with <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> compatibility. It provides type-safe analytics and dashboards with SQL injection protection by leveraging Drizzle ORM as its core SQL building engine.</p><h2 id=\"what-is-drizzle-cube\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">What is Drizzle Cube?</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube bridges the gap between your database and your analytics applications by providing:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type-safe semantic layer</strong> - Define cubes, dimensions, and measures with full TypeScript support</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">SQL injection protection</strong> - All queries use Drizzle&#39;s parameterized query system</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\"><a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> compatibility</strong> - Drop-in replacement for existing <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> implementations</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">PostgreSQL support</strong> - Currently supports PostgreSQL (including Neon), with MySQL and SQLite coming soon</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">React components</strong> - Pre-built dashboard and chart components</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Framework agnostic</strong> - Use with any web framework via adapters</li></ul><h2 id=\"core-concepts\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Core Concepts</h2><h3 id=\"semantic-layer\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Semantic Layer</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The semantic layer is where you define your business logic and data models. Instead of writing raw SQL queries throughout your application, you define <strong class=\"font-semibold text-slate-700\">cubes</strong> that encapsulate your data models.</p><h3 id=\"cubes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Cubes</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Cubes are the building blocks of your semantic layer. Each cube represents a table or a set of joined tables with defined dimensions and measures.</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">export const salesCube = defineCube(schema, {\n  name: 'Sales',\n  sql: ({ db, securityContext }) => \n    db.select()\n      .from(schema.sales)\n      .where(eq(schema.sales.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    productName: { \n      sql: schema.sales.productName, \n      type: 'string' \n    },\n    orderDate: { \n      sql: schema.sales.orderDate, \n      type: 'time' \n    }\n  },\n  \n  measures: {\n    totalSales: { \n      sql: schema.sales.amount, \n      type: 'sum' \n    },\n    orderCount: { \n      sql: schema.sales.id, \n      type: 'count' \n    }\n  }\n});</code></pre><h3 id=\"dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Dimensions are attributes of your data that you can filter, group, and segment by. They are typically categorical data like product names, dates, or customer segments.</p><h3 id=\"measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Measures are the quantitative values you want to analyze - things like revenue, count of orders, average order value, etc.</p><h2 id=\"architecture\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Architecture</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube follows a <strong class=\"font-semibold text-slate-700\">Drizzle-first architecture</strong>:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Database Schema</strong> - Define your database structure using Drizzle ORM</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Semantic Layer</strong> - Create cubes that reference your schema</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Query Execution</strong> - Drizzle generates type-safe, parameterized SQL</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Framework Integration</strong> - Use adapters to integrate with your web framework</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Client Components</strong> - Render data using React components</li></ol><h2 id=\"security-model\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Security Model</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Security is built into every layer:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">SQL Injection Protection</strong> - Drizzle&#39;s parameterized queries prevent SQL injection</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Multi-tenant Security</strong> - Every cube should filter by security context</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type Safety</strong> - TypeScript prevents runtime errors and data inconsistencies</li></ul><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Ready to get started? Here&#39;s what to do next:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/installation\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Installation</strong></a> - Install Drizzle Cube in your project</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/quick-start\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Quick Start</strong></a> - Build your first semantic layer</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/concepts\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Core Concepts</strong></a> - Understand cubes, dimensions, and measures in detail</li></ol><h2 id=\"example-applications\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Example Applications</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Check out these example implementations:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Basic Example</strong> - Simple analytics dashboard</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\"><a href=\"https://github.com/cliftonc/drizzle-cube/tree/main/examples/hono\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Hono Example</a></strong> - Full-featured application with Cloudflare Workers</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Multi-tenant Example</strong> - Enterprise-ready multi-tenant setup</li></ul><h2 id=\"community-and-support\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Community and Support</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">GitHub Repository</strong> - <a href=\"https://github.com/cliftonc/drizzle-cube\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">github.com/cliftonc/drizzle-cube</a></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Issues and Bug Reports</strong> - <a href=\"https://github.com/cliftonc/drizzle-cube/issues\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Issues</a></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Discussions</strong> - <a href=\"https://github.com/cliftonc/drizzle-cube/discussions\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Discussions</a></li></ul>",
    "path": "getting-started/index.md"
  },
  {
    "slug": "getting-started/concepts",
    "title": "Core Concepts",
    "content": "<h1 id=\"core-concepts\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Core Concepts</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Understanding the fundamental concepts of Drizzle Cube is essential for building effective semantic layers. This guide covers the key concepts you&#39;ll work with.</p><h2 id=\"semantic-layer-overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Semantic Layer Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">A <strong class=\"font-semibold text-slate-700\">semantic layer</strong> sits between your database and your analytics applications. It provides a business-friendly abstraction over your raw data, allowing you to:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Define business logic once and reuse it everywhere</li><li class=\"leading-relaxed\">Ensure consistent metrics across your organization</li><li class=\"leading-relaxed\">Provide security and access control</li><li class=\"leading-relaxed\">Enable self-service analytics for non-technical users</li></ul><h2 id=\"cubes\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Cubes</h2><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Cubes</strong> are the core building blocks of your semantic layer. Each cube represents a logical business entity (like Sales, Users, Products) and contains:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">SQL definition</strong> - How to retrieve the data</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dimensions</strong> - Attributes you can filter and group by</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Measures</strong> - Numeric values you want to analyze</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Joins</strong> - Relationships to other cubes</li></ul><h3 id=\"basic-cube-structure\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Cube Structure</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">export const salesCube = defineCube(schema, {\n  name: 'Sales',\n  sql: ({ db, securityContext }) => \n    db.select()\n      .from(schema.sales)\n      .where(eq(schema.sales.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    // Categorical data\n  },\n  \n  measures: {\n    // Numeric aggregations\n  }\n});</code></pre><h3 id=\"security-context\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Security Context</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Every cube <strong class=\"font-semibold text-slate-700\">must</strong> include security filtering to ensure multi-tenant isolation:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// ✅ Good - includes security context\nsql: ({ db, securityContext }) => \n  db.select()\n    .from(schema.sales)\n    .where(eq(schema.sales.organisationId, securityContext.organisationId))\n\n// ❌ Bad - no security filtering\nsql: ({ db }) => db.select().from(schema.sales)</code></pre><h2 id=\"dimensions\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Dimensions</h2><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dimensions</strong> are the attributes of your data that you can:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Filter by (WHERE clauses)</li><li class=\"leading-relaxed\">Group by (GROUP BY clauses)  </li><li class=\"leading-relaxed\">Use in charts as categories</li></ul><h3 id=\"dimension-types\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dimension Types</h3><h4 id=\"string-dimensions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">String Dimensions</h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Categorical text data:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">dimensions: {\n  customerName: { \n    sql: schema.sales.customerName, \n    type: 'string' \n  },\n  productCategory: { \n    sql: schema.products.category, \n    type: 'string' \n  }\n}</code></pre><h4 id=\"time-dimensions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Time Dimensions</h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Date and timestamp fields:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">dimensions: {\n  orderDate: { \n    sql: schema.sales.orderDate, \n    type: 'time' \n  },\n  createdAt: { \n    sql: schema.users.createdAt, \n    type: 'time' \n  }\n}</code></pre><p class=\"mb-4 text-gray-600 leading-relaxed\">Time dimensions support automatic granularity:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">year</code> - 2024</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">quarter</code> - 2024-Q1  </li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">month</code> - 2024-01</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">week</code> - 2024-W01</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">day</code> - 2024-01-15</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">hour</code> - 2024-01-15 14:00</li></ul><h4 id=\"number-dimensions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Number Dimensions</h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Numeric values used as categories:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">dimensions: {\n  quantity: { \n    sql: schema.sales.quantity, \n    type: 'number' \n  },\n  userId: { \n    sql: schema.sessions.userId, \n    type: 'number' \n  }\n}</code></pre><h3 id=\"computed-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Computed Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">You can create computed dimensions using SQL expressions:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">dimensions: {\n  fullName: {\n    sql: sql`CONCAT(${schema.users.firstName}, ' ', ${schema.users.lastName})`,\n    type: 'string',\n    title: 'Full Name'\n  },\n  ageGroup: {\n    sql: sql`\n      CASE \n        WHEN age < 18 THEN 'Under 18'\n        WHEN age < 35 THEN '18-34'\n        WHEN age < 55 THEN '35-54'\n        ELSE '55+'\n      END\n    `,\n    type: 'string',\n    title: 'Age Group'\n  }\n}</code></pre><h2 id=\"measures\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Measures</h2><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Measures</strong> are the numeric values you want to analyze. They represent aggregated data and support various aggregation types.</p><h3 id=\"aggregation-types\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Aggregation Types</h3><h4 id=\"count\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Count</h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Count the number of rows:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">measures: {\n  orderCount: { \n    sql: schema.sales.id, \n    type: 'count',\n    title: 'Total Orders'\n  }\n}</code></pre><h4 id=\"sum\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Sum</h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Add up numeric values:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">measures: {\n  totalRevenue: { \n    sql: schema.sales.amount, \n    type: 'sum',\n    title: 'Total Revenue'\n  }\n}</code></pre><h4 id=\"average\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Average</h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Calculate the mean value:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">measures: {\n  averageOrderValue: { \n    sql: schema.sales.amount, \n    type: 'avg',\n    title: 'Average Order Value'\n  }\n}</code></pre><h4 id=\"minmax\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Min/Max</h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Find minimum or maximum values:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">measures: {\n  minOrderAmount: { \n    sql: schema.sales.amount, \n    type: 'min',\n    title: 'Smallest Order'\n  },\n  maxOrderAmount: { \n    sql: schema.sales.amount, \n    type: 'max', \n    title: 'Largest Order'\n  }\n}</code></pre><h3 id=\"custom-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create complex calculations using SQL expressions:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">measures: {\n  profitMargin: {\n    sql: sql`(${schema.sales.amount} - ${schema.sales.cost}) / ${schema.sales.amount} * 100`,\n    type: 'avg',\n    title: 'Profit Margin %',\n    format: 'percent'\n  },\n  \n  conversionRate: {\n    sql: sql`\n      COUNT(CASE WHEN ${schema.events.type} = 'purchase' THEN 1 END) * 100.0 / \n      COUNT(CASE WHEN ${schema.events.type} = 'visit' THEN 1 END)\n    `,\n    type: 'number',\n    title: 'Conversion Rate %'\n  }\n}</code></pre><h2 id=\"data-types-and-formats\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Data Types and Formats</h2><h3 id=\"dimension-data-types\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dimension Data Types</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">string</code> - Text values</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">number</code> - Numeric values  </li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">time</code> - Dates and timestamps</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">boolean</code> - True/false values</li></ul><h3 id=\"measure-formats\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Measure Formats</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Control how measures are displayed:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">measures: {\n  revenue: {\n    sql: schema.sales.amount,\n    type: 'sum',\n    format: 'currency' // $1,234.56\n  },\n  \n  growth: {\n    sql: schema.metrics.growth,\n    type: 'avg',\n    format: 'percent' // 12.3%\n  }\n}</code></pre><h2 id=\"query-structure\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Query Structure</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">When querying cubes, you specify:</p><h3 id=\"measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">What you want to calculate:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-json\">{\n  \"measures\": [\"Sales.totalRevenue\", \"Sales.orderCount\"]\n}</code></pre><h3 id=\"dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">How you want to group/filter the data:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-json\">{\n  \"dimensions\": [\"Sales.productCategory\", \"Sales.customerName\"]\n}</code></pre><h3 id=\"time-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Time Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Time-based grouping with granularity:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-json\">{\n  \"timeDimensions\": [{\n    \"dimension\": \"Sales.orderDate\",\n    \"granularity\": \"month\"\n  }]\n}</code></pre><h3 id=\"filters\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Filters</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Restrict the data returned:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-json\">{\n  \"filters\": [\n    {\n      \"member\": \"Sales.productCategory\",\n      \"operator\": \"equals\",\n      \"values\": [\"Electronics\"]\n    },\n    {\n      \"member\": \"Sales.orderDate\",\n      \"operator\": \"inDateRange\", \n      \"values\": [\"2024-01-01\", \"2024-12-31\"]\n    }\n  ]\n}</code></pre><h2 id=\"security-and-multi-tenancy\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Security and Multi-tenancy</h2><h3 id=\"organisation-based-security\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Organisation-based Security</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Every cube should filter by organisation:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">sql: ({ db, securityContext }) => \n  db.select()\n    .from(schema.sales)\n    .where(eq(schema.sales.organisationId, securityContext.organisationId))</code></pre><h3 id=\"row-level-security\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Row-level Security</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Filter based on user permissions:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">sql: ({ db, securityContext }) => \n  db.select()\n    .from(schema.sales)\n    .where(and(\n      eq(schema.sales.organisationId, securityContext.organisationId),\n      eq(schema.sales.salesPersonId, securityContext.userId) // User can only see their sales\n    ))</code></pre><h3 id=\"column-level-security\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Column-level Security</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Conditionally include sensitive data:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">dimensions: {\n  customerEmail: {\n    sql: securityContext.hasRole('admin') \n      ? schema.customers.email \n      : sql`'[HIDDEN]'`,\n    type: 'string'\n  }\n}</code></pre><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><h3 id=\"naming-conventions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Naming Conventions</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Use descriptive names: <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">totalRevenue</code> not <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">sum_amount</code></li><li class=\"leading-relaxed\">Be consistent: <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">orderCount</code>, <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">customerCount</code>, <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">productCount</code></li><li class=\"leading-relaxed\">Use camelCase for cube members</li></ul><h3 id=\"performance\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Performance</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Add database indexes for commonly filtered dimensions</li><li class=\"leading-relaxed\">Use appropriate data types in your schema</li><li class=\"leading-relaxed\">Consider pre-aggregated tables for large datasets</li></ul><h3 id=\"documentation\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Documentation</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Add <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">title</code> and <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">description</code> to cube members</li><li class=\"leading-relaxed\">Use meaningful cube and measure names</li><li class=\"leading-relaxed\">Document business logic in comments</li></ul><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Now that you understand the core concepts:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Explore the Semantic Layer</strong></a> - Advanced cube features</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/joins\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Learn about Joins</strong></a> - Multi-cube queries  </li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Security Deep Dive</strong></a> - Advanced security patterns</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"advanced/performance\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Performance Optimization</strong></a> - Scale your semantic layer</li></ol>",
    "path": "getting-started/concepts.md"
  },
  {
    "slug": "getting-started/installation",
    "title": "Installation",
    "content": "<h1 id=\"installation\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Installation</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Get Drizzle Cube up and running in your project in just a few steps.</p><h2 id=\"requirements\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Requirements</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Before installing Drizzle Cube, make sure you have:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Node.js</strong> 18 or higher</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">TypeScript</strong> 5.0 or higher  </li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Drizzle ORM</strong> 0.44.4 or higher</li><li class=\"leading-relaxed\">A PostgreSQL database (MySQL and SQLite support coming soon)</li></ul><h2 id=\"package-installation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Package Installation</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Install Drizzle Cube using your preferred package manager:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-bash\"># npm\nnpm install drizzle-cube drizzle-orm\n\n# yarn\nyarn add drizzle-cube drizzle-orm\n\n# pnpm\npnpm add drizzle-cube drizzle-orm</code></pre><h2 id=\"database-setup\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Database Setup</h2><h3 id=\"postgresql\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">PostgreSQL</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-bash\">npm install postgres\n# or for Neon serverless\nnpm install @neondatabase/serverless</code></pre><h3 id=\"mysql\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">MySQL</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-bash\">npm install mysql2</code></pre><h3 id=\"sqlite\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">SQLite</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-bash\">npm install better-sqlite3</code></pre><h2 id=\"framework-adapters\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Framework Adapters</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Choose the adapter for your web framework:</p><h3 id=\"hono-recommended\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Hono (Recommended)</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-bash\">npm install hono</code></pre><h3 id=\"custom-framework\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Framework</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">You can create custom adapters for other frameworks. See <a href=\"#\" data-help-link=\"adapters/custom\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Custom Adapters</a> for details.</p><h2 id=\"react-components-optional\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">React Components (Optional)</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">For dashboard and chart components:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-bash\">npm install react react-dom recharts react-grid-layout</code></pre><h2 id=\"typescript-configuration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">TypeScript Configuration</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Update your <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">tsconfig.json</code> to include proper module resolution:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-json\">{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"lib\": [\"ES2023\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"react-jsx\",\n    \"strict\": true,\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"src/**/*.ts\", \"src/**/*.tsx\"]\n}</code></pre><h2 id=\"project-structure\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Project Structure</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Here&#39;s the recommended project structure:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-text\">your-project/\n├── src/\n│   ├── schema.ts              # Drizzle schema definition\n│   ├── cubes.ts               # Semantic layer cubes\n│   ├── server.ts              # Server setup with adapter\n│   └── client/                # React components (optional)\n│       ├── components/\n│       └── pages/\n├── drizzle.config.ts          # Drizzle configuration\n├── package.json\n└── tsconfig.json</code></pre><h2 id=\"environment-variables\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Environment Variables</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Create a <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">.env</code> file with your database connection details:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-env\"># PostgreSQL (currently supported)\nDATABASE_URL=\"postgresql://user:password@localhost:5432/mydb\"\n\n# Neon PostgreSQL (currently supported)\nDATABASE_URL=\"postgresql://user:password@ep-example-123456.us-east-1.aws.neon.tech/dbname\"\n\n# MySQL (coming soon)\n# DATABASE_URL=\"mysql://user:password@localhost:3306/mydb\"\n\n# SQLite (coming soon)  \n# DATABASE_URL=\"file:./dev.db\"</code></pre><h2 id=\"verification\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Verification</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Create a simple test file to verify your installation:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// test.ts\nimport { createDatabaseExecutor } from 'drizzle-cube/server';\nimport { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\n\nconst client = postgres(process.env.DATABASE_URL!);\nconst db = drizzle(client);\n\nconst executor = createDatabaseExecutor(db, {}, 'postgres');\nconsole.log('✅ Drizzle Cube installed successfully!');</code></pre><p class=\"mb-4 text-gray-600 leading-relaxed\">Run the test:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-bash\">npx tsx test.ts</code></pre><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Now that Drizzle Cube is installed, you can:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/quick-start\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Set up your first cube</strong></a></li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/concepts\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Learn core concepts</strong></a>  </li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"adapters/hono\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Explore the Hono adapter</strong></a></li></ol><h2 id=\"troubleshooting\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Troubleshooting</h2><h3 id=\"common-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Common Issues</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Module not found errors</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Ensure you&#39;re using TypeScript 5.0+ and have proper module resolution configured</li><li class=\"leading-relaxed\">Check that all peer dependencies are installed</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Database connection issues</strong>  </p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Verify your DATABASE_URL is correct</li><li class=\"leading-relaxed\">Make sure your database server is running</li><li class=\"leading-relaxed\">Check firewall and network settings</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">TypeScript compilation errors</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Update to the latest version of TypeScript</li><li class=\"leading-relaxed\">Ensure your tsconfig.json includes the proper compiler options</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">Need more help? Check our <a href=\"#\" data-help-link=\"advanced/troubleshooting\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Troubleshooting Guide</a> or <a href=\"https://github.com/cliftonc/drizzle-cube/issues\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">report an issue</a>.</p>",
    "path": "getting-started/installation.md"
  },
  {
    "slug": "getting-started/quick-start",
    "title": "Quick Start",
    "content": "<h1 id=\"quick-start\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Quick Start</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Build your first semantic layer with Drizzle Cube in under 10 minutes.</p><h2 id=\"step-1-database-schema\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 1: Database Schema</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">First, define your database schema using Drizzle ORM:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// src/schema.ts\nimport { pgTable, serial, text, timestamp, decimal, integer } from 'drizzle-orm/pg-core';\n\nexport const organisations = pgTable('organisations', {\n  id: serial('id').primaryKey(),\n  name: text('name').notNull(),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n\nexport const products = pgTable('products', {\n  id: serial('id').primaryKey(),\n  organisationId: integer('organisation_id').references(() => organisations.id),\n  name: text('name').notNull(),\n  category: text('category').notNull(),\n  price: decimal('price', { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n\nexport const sales = pgTable('sales', {\n  id: serial('id').primaryKey(),\n  organisationId: integer('organisation_id').references(() => organisations.id),\n  productId: integer('product_id').references(() => products.id),\n  quantity: integer('quantity').notNull(),\n  amount: decimal('amount', { precision: 10, scale: 2 }).notNull(),\n  orderDate: timestamp('order_date').defaultNow(),\n  customerName: text('customer_name'),\n});</code></pre><h2 id=\"step-2-define-cubes\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 2: Define Cubes</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Create your semantic layer by defining cubes:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// src/cubes.ts\nimport { defineCube } from 'drizzle-cube/server';\nimport { eq } from 'drizzle-orm';\nimport * as schema from './schema';\n\nexport const salesCube = defineCube(schema, {\n  name: 'Sales',\n  sql: ({ db, securityContext }) => \n    db.select()\n      .from(schema.sales)\n      .innerJoin(schema.products, eq(schema.sales.productId, schema.products.id))\n      .where(eq(schema.sales.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    customerName: { \n      sql: schema.sales.customerName, \n      type: 'string' \n    },\n    productName: { \n      sql: schema.products.name, \n      type: 'string' \n    },\n    productCategory: { \n      sql: schema.products.category, \n      type: 'string' \n    },\n    orderDate: { \n      sql: schema.sales.orderDate, \n      type: 'time' \n    },\n  },\n  \n  measures: {\n    totalSales: { \n      sql: schema.sales.amount, \n      type: 'sum',\n      title: 'Total Sales'\n    },\n    orderCount: { \n      sql: schema.sales.id, \n      type: 'count',\n      title: 'Number of Orders'\n    },\n    averageOrderValue: { \n      sql: schema.sales.amount, \n      type: 'avg',\n      title: 'Average Order Value'\n    },\n    totalQuantity: { \n      sql: schema.sales.quantity, \n      type: 'sum',\n      title: 'Total Quantity Sold'\n    },\n  }\n});\n\nexport const productsCube = defineCube(schema, {\n  name: 'Products',\n  sql: ({ db, securityContext }) => \n    db.select()\n      .from(schema.products)\n      .where(eq(schema.products.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    name: { \n      sql: schema.products.name, \n      type: 'string' \n    },\n    category: { \n      sql: schema.products.category, \n      type: 'string' \n    },\n    createdAt: { \n      sql: schema.products.createdAt, \n      type: 'time' \n    },\n  },\n  \n  measures: {\n    count: { \n      sql: schema.products.id, \n      type: 'count',\n      title: 'Product Count'\n    },\n    averagePrice: { \n      sql: schema.products.price, \n      type: 'avg',\n      title: 'Average Price'\n    },\n  }\n});</code></pre><h2 id=\"step-3-server-setup\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 3: Server Setup</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Set up your server with the Hono adapter:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// src/server.ts\nimport { Hono } from 'hono';\nimport { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport { createCubeApp } from 'drizzle-cube/adapters/hono';\nimport { SemanticLayerCompiler, createDatabaseExecutor } from 'drizzle-cube/server';\nimport * as schema from './schema';\nimport { salesCube, productsCube } from './cubes';\n\n// Database connection\nconst client = postgres(process.env.DATABASE_URL!);\nconst db = drizzle(client, { schema });\n\n// Create semantic layer\nconst databaseExecutor = createDatabaseExecutor(db, schema, 'postgres');\nconst semanticLayer = new SemanticLayerCompiler({ \n  databaseExecutor \n});\n\n// Register cubes\nsemanticLayer.registerCube(salesCube);\nsemanticLayer.registerCube(productsCube);\n\n// Create Hono app\nconst app = new Hono();\n\n// Add authentication middleware (example)\napp.use('/api/cube/*', async (c, next) => {\n  // In a real app, validate JWT token, session, etc.\n  const orgId = c.req.header('X-Organisation-ID');\n  if (!orgId) {\n    return c.json({ error: 'Organisation ID required' }, 401);\n  }\n  c.set('organisationId', parseInt(orgId));\n  await next();\n});\n\n// Mount Cube API\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) => ({\n    organisationId: c.get('organisationId')\n  })\n});\n\napp.route('/api/cube', cubeApp);\n\nexport default app;</code></pre><h2 id=\"step-4-query-your-data\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 4: Query Your Data</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Now you can query your semantic layer:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// Query example\nconst query = {\n  measures: ['Sales.totalSales', 'Sales.orderCount'],\n  dimensions: ['Sales.productCategory'],\n  timeDimensions: [{\n    dimension: 'Sales.orderDate',\n    granularity: 'month'\n  }],\n  filters: [{\n    member: 'Sales.orderDate',\n    operator: 'inDateRange',\n    values: ['2024-01-01', '2024-12-31']\n  }]\n};\n\n// Make request to your API\nconst response = await fetch('/api/cube/load', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-Organisation-ID': '1'\n  },\n  body: JSON.stringify({ query })\n});\n\nconst data = await response.json();\nconsole.log(data);</code></pre><h2 id=\"step-5-react-dashboard-optional\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 5: React Dashboard (Optional)</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Add a React dashboard using Drizzle Cube&#39;s components:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">// src/Dashboard.tsx\nimport React from 'react';\nimport { CubeProvider } from 'drizzle-cube/client';\nimport { AnalyticsDashboard } from 'drizzle-cube/client';\n\nconst Dashboard: React.FC = () => {\n  const cubeApi = {\n    url: '/api/cube',\n    headers: {\n      'X-Organisation-ID': '1'\n    }\n  };\n\n  return (\n    <CubeProvider cubeApi={cubeApi}>\n      <div className=\"p-6\">\n        <h1 className=\"text-3xl font-bold mb-6\">Sales Dashboard</h1>\n        \n        <AnalyticsDashboard\n          initialLayout={[\n            {\n              id: 'sales-by-category',\n              title: 'Sales by Category',\n              chartType: 'bar',\n              query: {\n                measures: ['Sales.totalSales'],\n                dimensions: ['Sales.productCategory']\n              }\n            },\n            {\n              id: 'sales-over-time',\n              title: 'Sales Over Time',\n              chartType: 'line',\n              query: {\n                measures: ['Sales.totalSales'],\n                timeDimensions: [{\n                  dimension: 'Sales.orderDate',\n                  granularity: 'month'\n                }]\n              }\n            }\n          ]}\n        />\n      </div>\n    </CubeProvider>\n  );\n};\n\nexport default Dashboard;</code></pre><h2 id=\"whats-next\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">What&#39;s Next?</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Congratulations! You&#39;ve created your first semantic layer with Drizzle Cube. Here&#39;s what you can explore next:</p><h3 id=\"learn-more\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Learn More</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/concepts\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Core Concepts</strong></a> - Deep dive into cubes, dimensions, and measures</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Semantic Layer</strong></a> - Advanced semantic layer features</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Security</strong></a> - Multi-tenant security patterns</li></ul><h3 id=\"explore-components\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Explore Components</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">React Client</strong></a> - Dashboard and chart components</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/charts\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Charts</strong></a> - Available visualization types</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/hooks\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Hooks</strong></a> - React hooks for data fetching</li></ul><h3 id=\"advanced-features\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Advanced Features</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/joins\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Joins</strong></a> - Multi-cube queries</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"advanced/performance\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Performance</strong></a> - Optimization techniques</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"adapters/custom\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Custom Adapters</strong></a> - Framework integration</li></ul><h2 id=\"example-projects\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Example Projects</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Check out complete example implementations:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\"><a href=\"https://github.com/cliftonc/drizzle-cube/tree/main/examples/basic\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Basic Example</a></strong> - Simple analytics setup</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\"><a href=\"https://github.com/cliftonc/drizzle-cube/tree/main/examples/hono\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Hono Example</a></strong> - Full-featured application</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">Need help? <a href=\"https://github.com/cliftonc/drizzle-cube/discussions\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Join our community</a> or <a href=\"https://github.com/cliftonc/drizzle-cube/issues\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">report issues</a>!</p>",
    "path": "getting-started/quick-start.md"
  },
  {
    "slug": "semantic-layer",
    "title": "Semantic Layer",
    "content": "<h1 id=\"semantic-layer\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Semantic Layer</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">The semantic layer is the heart of Drizzle Cube. It provides a business-friendly abstraction over your database that enables consistent, secure, and performant analytics across your organization.</p><h2 id=\"what-is-a-semantic-layer\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">What is a Semantic Layer?</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">A semantic layer is a <strong class=\"font-semibold text-slate-700\">business representation</strong> of your data that:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Abstracts complexity</strong> - Hide database schema details behind business terms</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Ensures consistency</strong> - Single source of truth for metrics and definitions</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Provides security</strong> - Row and column-level access control</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Enables self-service</strong> - Non-technical users can explore data safely</li></ul><h2 id=\"architecture-overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Architecture Overview</h2><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-text\">┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐\n│   Applications  │────│  Semantic Layer  │────│    Database     │\n│                 │    │                  │    │                 │\n│ • Dashboards    │    │ • Cubes         │    │ • Tables        │\n│ • Reports       │    │ • Dimensions    │    │ • Views         │\n│ • APIs          │    │ • Measures      │    │ • Indexes       │\n└─────────────────┘    └──────────────────┘    └─────────────────┘</code></pre><h2 id=\"key-components\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Key Components</h2><h3 id=\"cubes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Cubes</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Business entities that represent your data models:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">export const salesCube = defineCube(schema, {\n  name: 'Sales',\n  title: 'Sales Transactions',\n  description: 'All sales transactions with product and customer information',\n  \n  sql: ({ db, securityContext }) => \n    db.select()\n      .from(schema.sales)\n      .innerJoin(schema.products, eq(schema.sales.productId, schema.products.id))\n      .where(eq(schema.sales.organisationId, securityContext.organisationId)),\n  \n  dimensions: { /* ... */ },\n  measures: { /* ... */ }\n});</code></pre><h3 id=\"database-executor\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Database Executor</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Handles different database engines:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">const executor = createDatabaseExecutor(db, schema, 'postgres');\n// Currently supports: 'postgres' (including Neon)\n// Coming soon: 'mysql', 'sqlite'</code></pre><h3 id=\"semantic-layer-compiler\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Semantic Layer Compiler</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Orchestrates cubes and query execution:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">const semanticLayer = new SemanticLayerCompiler({ \n  databaseExecutor: executor \n});\n\nsemanticLayer.registerCube(salesCube);\nsemanticLayer.registerCube(productsCube);\nsemanticLayer.registerCube(customersCube);</code></pre><h2 id=\"advanced-features\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Features</h2><h3 id=\"multi-cube-queries\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Multi-Cube Queries</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Query across multiple cubes with automatic join resolution:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-json\">{\n  \"measures\": [\"Sales.totalRevenue\", \"Products.averagePrice\"],\n  \"dimensions\": [\"Products.category\", \"Sales.customerSegment\"]\n}</code></pre><h3 id=\"time-intelligence\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Time Intelligence</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Automatic time-based calculations:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">measures: {\n  revenueGrowth: {\n    sql: schema.sales.amount,\n    type: 'sum',\n    timeComparison: 'previousPeriod' // Compare to previous period\n  },\n  \n  runningTotal: {\n    sql: schema.sales.amount,\n    type: 'runningSum' // Cumulative sum over time\n  }\n}</code></pre><h3 id=\"calculated-members\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Calculated Members</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create complex business logic:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">measures: {\n  customerLifetimeValue: {\n    sql: sql`\n      (${schema.sales.amount} / ${schema.customers.acquisitionCost}) * \n      ${schema.customers.retentionRate}\n    `,\n    type: 'avg',\n    title: 'Customer Lifetime Value'\n  }\n}</code></pre><h3 id=\"hierarchical-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Hierarchical Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Support drill-down analytics:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">dimensions: {\n  location: {\n    sql: schema.sales.region,\n    type: 'string',\n    hierarchy: ['country', 'region', 'city']\n  }\n}</code></pre><h2 id=\"security-model\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Security Model</h2><h3 id=\"multi-tenant-isolation\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Multi-Tenant Isolation</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Every cube must implement tenant isolation:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">sql: ({ db, securityContext }) => \n  db.select()\n    .from(schema.data)\n    .where(eq(schema.data.organisationId, securityContext.organisationId))</code></pre><h3 id=\"role-based-access\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Role-Based Access</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Control access based on user roles:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">dimensions: {\n  sensitiveData: {\n    sql: securityContext.hasRole('admin') \n      ? schema.table.sensitiveColumn\n      : sql`NULL`,\n    type: 'string'\n  }\n}</code></pre><h3 id=\"dynamic-filtering\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dynamic Filtering</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Apply filters based on user context:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">sql: ({ db, securityContext }) => {\n  let query = db.select().from(schema.sales);\n  \n  if (securityContext.role === 'salesperson') {\n    query = query.where(eq(schema.sales.salesPersonId, securityContext.userId));\n  }\n  \n  return query.where(eq(schema.sales.organisationId, securityContext.organisationId));\n}</code></pre><h2 id=\"performance-optimization\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Optimization</h2><h3 id=\"pre-aggregations\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Pre-aggregations</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create summary tables for fast queries:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">preAggregations: {\n  monthlySales: {\n    measures: ['Sales.totalRevenue', 'Sales.orderCount'],\n    dimensions: ['Sales.productCategory'],\n    timeDimension: 'Sales.orderDate',\n    granularity: 'month',\n    refreshKey: {\n      every: '1 hour'\n    }\n  }\n}</code></pre><h3 id=\"indexes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Indexes</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Ensure proper database indexes:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// In your Drizzle schema\nexport const salesIndex = index('sales_org_date_idx')\n  .on(sales.organisationId, sales.orderDate);</code></pre><h3 id=\"query-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Optimization</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Use efficient SQL patterns:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// ✅ Good - use joins instead of subqueries when possible\nsql: ({ db }) => \n  db.select()\n    .from(schema.sales)\n    .innerJoin(schema.products, eq(schema.sales.productId, schema.products.id))\n\n// ❌ Slower - subqueries can be less efficient  \nsql: ({ db }) =>\n  db.select()\n    .from(schema.sales)\n    .where(inArray(schema.sales.productId, \n      db.select({ id: schema.products.id }).from(schema.products)\n    ))</code></pre><h2 id=\"data-modeling-best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Data Modeling Best Practices</h2><h3 id=\"star-schema-design\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Star Schema Design</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Organize cubes around business processes:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-text\">    Customers ───┐\n                 │\n    Products ────┼──── Sales (Fact)\n                 │\n    Time ────────┘</code></pre><h3 id=\"dimensional-modeling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dimensional Modeling</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Fact tables</strong> - Events, transactions, measurements</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dimension tables</strong> - Descriptive attributes, hierarchies</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Bridge tables</strong> - Many-to-many relationships</li></ul><h3 id=\"naming-conventions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Naming Conventions</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// Cubes: Business entities (PascalCase)\nexport const CustomerOrders = defineCube(/* ... */);\n\n// Dimensions: Attributes (camelCase)  \ndimensions: {\n  customerName: { /* ... */ },\n  orderDate: { /* ... */ }\n}\n\n// Measures: Metrics (camelCase)\nmeasures: {\n  totalRevenue: { /* ... */ },\n  averageOrderValue: { /* ... */ }\n}</code></pre><h2 id=\"testing-your-semantic-layer\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Your Semantic Layer</h2><h3 id=\"unit-tests\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Unit Tests</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Test cube definitions:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">import { describe, it, expect } from 'vitest';\nimport { salesCube } from './cubes';\n\ndescribe('Sales Cube', () => {\n  it('should have required dimensions', () => {\n    expect(salesCube.dimensions.customerName).toBeDefined();\n    expect(salesCube.dimensions.orderDate).toBeDefined();\n  });\n  \n  it('should have required measures', () => {\n    expect(salesCube.measures.totalRevenue).toBeDefined();\n    expect(salesCube.measures.orderCount).toBeDefined();\n  });\n});</code></pre><h3 id=\"integration-tests\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Integration Tests</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Test query execution:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">it('should execute queries correctly', async () => {\n  const result = await semanticLayer.executeQuery({\n    measures: ['Sales.totalRevenue'],\n    dimensions: ['Sales.productCategory']\n  }, { organisationId: 1 });\n  \n  expect(result.data).toHaveLength(3);\n  expect(result.data[0]).toHaveProperty('Sales.totalRevenue');\n});</code></pre><h2 id=\"migration-and-interoperability\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Migration and Interoperability</h2><h3 id=\"drizzle-cube-cubejshttpscubedev-migration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Drizzle Cube ↔ <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> Migration</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube and <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> are designed to be compatible, allowing migration in both directions depending on your needs:</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Drizzle Cube → <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a></strong>: As your analytics requirements become more complex, you might need <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a>&#39;s advanced features like pre-aggregations, caching layers, or enterprise tooling. The similar schema structure makes this transition smooth.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\"><a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> → Drizzle Cube</strong>: If you want stronger type safety, Drizzle ORM integration, or simpler deployment patterns, you can migrate to Drizzle Cube while maintaining API compatibility.</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// [Cube.js](https://cube.dev) schema\ncube(`Sales`, {\n  sql: `SELECT * FROM sales`,\n  dimensions: {\n    customerName: {\n      sql: `customer_name`,\n      type: `string`\n    }\n  },\n  measures: {\n    count: {\n      type: `count`\n    }\n  }\n});\n\n// Equivalent Drizzle Cube (bidirectional compatibility)\nexport const salesCube = defineCube(schema, {\n  name: 'Sales',\n  sql: ({ db }) => db.select().from(schema.sales),\n  dimensions: {\n    customerName: {\n      sql: schema.sales.customerName,\n      type: 'string'\n    }\n  },\n  measures: {\n    count: {\n      sql: schema.sales.id,\n      type: 'count'\n    }\n  }\n});</code></pre><h3 id=\"when-to-choose-each-platform\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">When to Choose Each Platform</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Choose Drizzle Cube when:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">You want type safety and Drizzle ORM integration</li><li class=\"leading-relaxed\">You prefer simpler deployment (single process, no Redis)</li><li class=\"leading-relaxed\">You need strong SQL injection protection</li><li class=\"leading-relaxed\">Your analytics needs are moderate complexity</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Consider <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> when:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">You need advanced pre-aggregation strategies</li><li class=\"leading-relaxed\">You require horizontal scaling with caching layers</li><li class=\"leading-relaxed\">You want enterprise features and commercial support</li><li class=\"leading-relaxed\">You have complex analytics requirements across large datasets</li></ul><h3 id=\"migration-path\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Migration Path</h3><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Start small</strong> - Begin with one cube in either direction</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Maintain compatibility</strong> - Both platforms support similar query APIs</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Gradual transition</strong> - Migrate cubes and queries incrementally  </li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Test thoroughly</strong> - Validate query results during migration</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Update clients</strong> - Frontend applications often require minimal changes</li></ol><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/cubes\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Cubes</strong></a> - Deep dive into cube definitions</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/dimensions\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Dimensions</strong></a> - Advanced dimension patterns</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/measures\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Measures</strong></a> - Custom calculations and aggregations</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/joins\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Joins</strong></a> - Multi-cube query patterns</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Security</strong></a> - Advanced security patterns</li></ul>",
    "path": "semantic-layer/index.md"
  }
];

export const helpContentMap: Record<string, HelpTopic> = {
  'adapters/hono': {"slug":"adapters/hono","title":"Hono Adapter","content":"<h1 id=\"hono-adapter\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Hono Adapter</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">The Hono adapter provides a complete <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a>-compatible API for the <a href=\"https://hono.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Hono</a> web framework, making it easy to add analytics capabilities to your Hono applications.</p><h2 id=\"installation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Installation</h2><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-bash\">npm install drizzle-cube hono drizzle-orm</code></pre><h2 id=\"quick-start\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Quick Start</h2><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">import { Hono } from 'hono';\nimport { createCubeApp } from 'drizzle-cube/adapters/hono';\nimport { SemanticLayerCompiler, createDatabaseExecutor } from 'drizzle-cube/server';\nimport { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from './schema';\nimport { salesCube } from './cubes';\n\n// Database connection\nconst client = postgres(process.env.DATABASE_URL!);\nconst db = drizzle(client, { schema });\n\n// Create semantic layer\nconst databaseExecutor = createDatabaseExecutor(db, schema, 'postgres');\nconst semanticLayer = new SemanticLayerCompiler({ databaseExecutor });\nsemanticLayer.registerCube(salesCube);\n\n// Create main Hono app\nconst app = new Hono();\n\n// Authentication middleware\napp.use('/api/cube/*', async (c, next) => {\n  const token = c.req.header('Authorization');\n  if (!token) {\n    return c.json({ error: 'Unauthorized' }, 401);\n  }\n  \n  // Validate token and set user context\n  const user = await validateToken(token);\n  c.set('user', user);\n  await next();\n});\n\n// Create and mount Cube API\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) => {\n    const user = c.get('user');\n    return {\n      organisationId: user.organisationId,\n      userId: user.id,\n      roles: user.roles\n    };\n  }\n});\n\napp.route('/api/cube', cubeApp);\n\nexport default app;</code></pre><h2 id=\"configuration-options\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Configuration Options</h2><h3 id=\"basic-configuration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Configuration</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">const cubeApp = createCubeApp({\n  // Required\n  semanticLayer: semanticLayerInstance,\n  drizzle: dbInstance,\n  schema: schemaObject,\n  getSecurityContext: async (c) => ({ /* context */ }),\n  \n  // Optional\n  corsOptions: {\n    origin: ['http://localhost:3000'],\n    credentials: true\n  },\n  \n  enablePlayground: process.env.NODE_ENV === 'development',\n  \n  queryTimeout: 30000, // 30 seconds\n  \n  onError: (error, c) => {\n    console.error('Cube API Error:', error);\n    return c.json({ error: 'Internal server error' }, 500);\n  }\n});</code></pre><h3 id=\"advanced-configuration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Advanced Configuration</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">const cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  \n  getSecurityContext: async (c) => {\n    const user = c.get('user');\n    const tenant = c.req.header('X-Tenant-ID');\n    \n    return {\n      organisationId: parseInt(tenant!),\n      userId: user.id,\n      roles: user.roles,\n      permissions: user.permissions,\n      // Custom context\n      region: user.region,\n      hasRole: (role: string) => user.roles.includes(role)\n    };\n  },\n  \n  // Custom middleware for all cube routes\n  middleware: [\n    // Rate limiting\n    async (c, next) => {\n      const userId = c.get('user')?.id;\n      if (await isRateLimited(userId)) {\n        return c.json({ error: 'Rate limited' }, 429);\n      }\n      await next();\n    },\n    \n    // Audit logging\n    async (c, next) => {\n      const start = Date.now();\n      await next();\n      const duration = Date.now() - start;\n      \n      await logQuery({\n        userId: c.get('user')?.id,\n        path: c.req.path,\n        duration,\n        status: c.res.status\n      });\n    }\n  ],\n  \n  // Transform queries before execution\n  queryTransform: async (query, context) => {\n    // Add automatic filters based on user\n    if (context.hasRole('sales')) {\n      query.filters = query.filters || [];\n      query.filters.push({\n        member: 'Sales.salesPersonId',\n        operator: 'equals',\n        values: [context.userId.toString()]\n      });\n    }\n    \n    return query;\n  }\n});</code></pre><h2 id=\"api-endpoints\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">API Endpoints</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The Hono adapter provides these <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a>-compatible endpoints:</p><h3 id=\"load-data\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Load Data</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-http\">POST /api/cube/load\nContent-Type: application/json\n\n{\n  \"query\": {\n    \"measures\": [\"Sales.totalRevenue\"],\n    \"dimensions\": [\"Sales.productCategory\"],\n    \"timeDimensions\": [{\n      \"dimension\": \"Sales.orderDate\",\n      \"granularity\": \"month\"\n    }]\n  }\n}</code></pre><h3 id=\"get-metadata\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Get Metadata</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-http\">GET /api/cube/meta</code></pre><p class=\"mb-4 text-gray-600 leading-relaxed\">Returns available cubes, dimensions, and measures.</p><h3 id=\"execute-sql\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Execute SQL</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-http\">POST /api/cube/sql\nContent-Type: application/json\n\n{\n  \"query\": {\n    \"measures\": [\"Sales.totalRevenue\"],\n    \"dimensions\": [\"Sales.productCategory\"]\n  }\n}</code></pre><p class=\"mb-4 text-gray-600 leading-relaxed\">Returns the generated SQL without executing it.</p><h3 id=\"query-validation\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Validation</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-http\">POST /api/cube/validate\nContent-Type: application/json\n\n{\n  \"query\": {\n    \"measures\": [\"Sales.totalRevenue\"],\n    \"dimensions\": [\"InvalidDimension\"]\n  }\n}</code></pre><h2 id=\"security-context\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Security Context</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">The <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">getSecurityContext</code> function is crucial for multi-tenant security:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">getSecurityContext: async (c) => {\n  const token = c.req.header('Authorization')?.replace('Bearer ', '');\n  const user = await verifyJWT(token);\n  \n  // Extract tenant from subdomain\n  const host = c.req.header('Host');\n  const subdomain = host?.split('.')[0];\n  const tenant = await getTenantBySubdomain(subdomain);\n  \n  return {\n    organisationId: tenant.id,\n    userId: user.id,\n    roles: user.roles,\n    permissions: user.permissions,\n    \n    // Custom helpers\n    hasRole: (role: string) => user.roles.includes(role),\n    hasPermission: (permission: string) => user.permissions.includes(permission),\n    \n    // Regional filtering\n    region: user.region,\n    allowedRegions: user.allowedRegions\n  };\n}</code></pre><h2 id=\"authentication-patterns\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Authentication Patterns</h2><h3 id=\"jwt-authentication\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">JWT Authentication</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">import { jwt } from 'hono/jwt';\n\napp.use('/api/cube/*', jwt({\n  secret: process.env.JWT_SECRET!,\n  cookie: 'auth-token' // Optional: read from cookie\n}));\n\napp.use('/api/cube/*', async (c, next) => {\n  const payload = c.get('jwtPayload');\n  const user = await getUserById(payload.sub);\n  c.set('user', user);\n  await next();\n});</code></pre><h3 id=\"api-key-authentication\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">API Key Authentication</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">app.use('/api/cube/*', async (c, next) => {\n  const apiKey = c.req.header('X-API-Key');\n  if (!apiKey) {\n    return c.json({ error: 'API key required' }, 401);\n  }\n  \n  const client = await validateApiKey(apiKey);\n  if (!client) {\n    return c.json({ error: 'Invalid API key' }, 401);\n  }\n  \n  c.set('client', client);\n  await next();\n});</code></pre><h3 id=\"session-based-authentication\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Session-based Authentication</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">import { getCookie } from 'hono/cookie';\n\napp.use('/api/cube/*', async (c, next) => {\n  const sessionId = getCookie(c, 'session_id');\n  if (!sessionId) {\n    return c.json({ error: 'Not authenticated' }, 401);\n  }\n  \n  const session = await getSession(sessionId);\n  if (!session || session.expired) {\n    return c.json({ error: 'Session expired' }, 401);\n  }\n  \n  c.set('user', session.user);\n  await next();\n});</code></pre><h2 id=\"error-handling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Handling</h2><h3 id=\"custom-error-handler\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Error Handler</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">const cubeApp = createCubeApp({\n  // ... other options\n  \n  onError: (error, c) => {\n    console.error('Cube API Error:', {\n      error: error.message,\n      stack: error.stack,\n      user: c.get('user')?.id,\n      query: c.req.json(),\n      timestamp: new Date().toISOString()\n    });\n    \n    // Don't expose internal errors to clients\n    if (process.env.NODE_ENV === 'production') {\n      return c.json({ \n        error: 'An error occurred processing your request',\n        requestId: generateRequestId()\n      }, 500);\n    }\n    \n    return c.json({ \n      error: error.message,\n      stack: error.stack\n    }, 500);\n  }\n});</code></pre><h3 id=\"query-timeout\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Timeout</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">const cubeApp = createCubeApp({\n  // ... other options\n  queryTimeout: 60000, // 60 seconds\n  \n  onTimeout: (c) => {\n    return c.json({\n      error: 'Query timeout',\n      message: 'The query took too long to execute. Try reducing the date range or adding filters.'\n    }, 408);\n  }\n});</code></pre><h2 id=\"caching\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Caching</h2><h3 id=\"query-result-caching\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Result Caching</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">import { cache } from 'hono/cache';\n\n// Cache GET requests for 5 minutes\napp.get('/api/cube/meta', cache({\n  cacheName: 'cube-meta',\n  cacheControl: 'max-age=300'\n}));\n\n// Custom caching logic\napp.use('/api/cube/load', async (c, next) => {\n  const query = await c.req.json();\n  const cacheKey = generateCacheKey(query, c.get('user'));\n  \n  const cached = await getFromCache(cacheKey);\n  if (cached) {\n    return c.json(cached);\n  }\n  \n  await next();\n  \n  // Cache the response\n  const response = await c.res.json();\n  await setCache(cacheKey, response, 300); // 5 minutes\n});</code></pre><h2 id=\"development-tools\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Development Tools</h2><h3 id=\"cube-playground\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Cube Playground</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Enable the playground in development:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">const cubeApp = createCubeApp({\n  // ... other options\n  enablePlayground: process.env.NODE_ENV === 'development'\n});\n\n// Access at: http://localhost:3000/api/cube/playground</code></pre><h3 id=\"query-logging\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Logging</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">app.use('/api/cube/*', async (c, next) => {\n  if (process.env.NODE_ENV === 'development') {\n    const query = c.req.method === 'POST' ? await c.req.json() : null;\n    console.log('Cube Query:', {\n      method: c.req.method,\n      path: c.req.path,\n      query,\n      user: c.get('user')?.id\n    });\n  }\n  \n  await next();\n});</code></pre><h2 id=\"deployment\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Deployment</h2><h3 id=\"cloudflare-workers\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Cloudflare Workers</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// src/worker.ts\nimport app from './server';\n\nexport default {\n  fetch: app.fetch\n};\n\n// wrangler.toml\n[env.production]\nvars = { NODE_ENV = \"production\" }\n\n[[env.production.bindings]]\nname = \"DATABASE_URL\"\ntype = \"secret\"</code></pre><h3 id=\"nodejs-server\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Node.js Server</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">import { serve } from '@hono/node-server';\nimport app from './server';\n\nconst port = process.env.PORT || 3000;\n\nserve({\n  fetch: app.fetch,\n  port: Number(port)\n});\n\nconsole.log(`Server running on port ${port}`);</code></pre><h3 id=\"vercel\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Vercel</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// api/cube/[...path].ts\nimport { handle } from '@hono/vercel';\nimport app from '../../src/server';\n\nexport default handle(app);</code></pre><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"adapters/custom\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Custom Adapters</strong></a> - Build adapters for other frameworks</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Security</strong></a> - Advanced security patterns  </li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"advanced/performance\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Performance</strong></a> - Optimization techniques</li></ul>","path":"adapters/hono.md"},
  'client': {"slug":"client","title":"React Client","content":"<h1 id=\"react-client\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">React Client</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">The Drizzle Cube React client provides pre-built components and hooks for creating analytics dashboards and data visualizations with minimal code.</p><h2 id=\"installation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Installation</h2><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-bash\">npm install drizzle-cube react react-dom recharts react-grid-layout</code></pre><h2 id=\"quick-start\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Quick Start</h2><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import React from 'react';\nimport { CubeProvider, AnalyticsDashboard } from 'drizzle-cube/client';\n\nfunction App() {\n  const cubeApi = {\n    url: '/api/cube',\n    headers: {\n      'Authorization': 'Bearer your-token',\n      'X-Organisation-ID': '1'\n    }\n  };\n\n  return (\n    <CubeProvider cubeApi={cubeApi}>\n      <AnalyticsDashboard\n        initialLayout={[\n          {\n            id: 'revenue-chart',\n            title: 'Monthly Revenue',\n            chartType: 'line',\n            query: {\n              measures: ['Sales.totalRevenue'],\n              timeDimensions: [{\n                dimension: 'Sales.orderDate',\n                granularity: 'month'\n              }]\n            }\n          }\n        ]}\n      />\n    </CubeProvider>\n  );\n}</code></pre><h2 id=\"core-components\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Core Components</h2><h3 id=\"cubeprovider\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">CubeProvider</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The foundation component that provides cube API context:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { CubeProvider } from 'drizzle-cube/client';\n\nfunction App() {\n  const cubeApi = {\n    url: '/api/cube',\n    headers: {\n      'Authorization': 'Bearer your-jwt-token',\n      'X-Organisation-ID': '123'\n    }\n  };\n\n  return (\n    <CubeProvider cubeApi={cubeApi}>\n      {/* Your dashboard components */}\n    </CubeProvider>\n  );\n}</code></pre><h3 id=\"analyticsdashboard\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">AnalyticsDashboard</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">A complete dashboard with drag-and-drop layout:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { AnalyticsDashboard } from 'drizzle-cube/client';\n\n<AnalyticsDashboard\n  initialLayout={[\n    {\n      id: 'sales-overview',\n      title: 'Sales Overview', \n      chartType: 'bar',\n      query: {\n        measures: ['Sales.totalRevenue', 'Sales.orderCount'],\n        dimensions: ['Sales.productCategory']\n      },\n      layout: { x: 0, y: 0, w: 6, h: 4 }\n    },\n    {\n      id: 'sales-trend',\n      title: 'Sales Trend',\n      chartType: 'line', \n      query: {\n        measures: ['Sales.totalRevenue'],\n        timeDimensions: [{\n          dimension: 'Sales.orderDate',\n          granularity: 'day'\n        }]\n      },\n      layout: { x: 6, y: 0, w: 6, h: 4 }\n    }\n  ]}\n  \n  onLayoutChange={(layout) => {\n    // Save layout to user preferences\n    localStorage.setItem('dashboard-layout', JSON.stringify(layout));\n  }}\n  \n  showEditControls={true}\n  allowResize={true}\n  allowDrag={true}\n/></code></pre><h3 id=\"analyticspage\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">AnalyticsPage</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">A complete page with sidebar filters and charts:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { AnalyticsPage } from 'drizzle-cube/client';\n\n<AnalyticsPage\n  title=\"Sales Analytics\"\n  description=\"Comprehensive sales performance metrics\"\n  \n  filters={[\n    {\n      member: 'Sales.productCategory',\n      title: 'Product Category',\n      type: 'select'\n    },\n    {\n      member: 'Sales.orderDate',\n      title: 'Date Range', \n      type: 'dateRange'\n    }\n  ]}\n  \n  charts={[\n    {\n      id: 'revenue-by-category',\n      title: 'Revenue by Category',\n      chartType: 'pie',\n      query: {\n        measures: ['Sales.totalRevenue'],\n        dimensions: ['Sales.productCategory']\n      }\n    }\n  ]}\n/></code></pre><h3 id=\"analyticsportlet\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">AnalyticsPortlet</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Individual chart components:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { AnalyticsPortlet } from 'drizzle-cube/client';\n\n<AnalyticsPortlet\n  title=\"Monthly Sales Trend\"\n  chartType=\"line\"\n  query={{\n    measures: ['Sales.totalRevenue'],\n    timeDimensions: [{\n      dimension: 'Sales.orderDate',\n      granularity: 'month'\n    }]\n  }}\n  \n  showControls={true}\n  allowExport={true}\n  refreshInterval={30000} // Refresh every 30 seconds\n  \n  onDataLoad={(data) => {\n    console.log('Chart data loaded:', data);\n  }}\n/></code></pre><h2 id=\"chart-types\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Chart Types</h2><h3 id=\"line-charts\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Line Charts</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Perfect for time series data:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\"><AnalyticsPortlet\n  chartType=\"line\"\n  query={{\n    measures: ['Sales.totalRevenue'],\n    timeDimensions: [{ \n      dimension: 'Sales.orderDate', \n      granularity: 'day' \n    }]\n  }}\n/></code></pre><h3 id=\"bar-charts\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Bar Charts</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Great for comparing categories:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\"><AnalyticsPortlet\n  chartType=\"bar\"\n  query={{\n    measures: ['Sales.totalRevenue', 'Sales.orderCount'],\n    dimensions: ['Sales.productCategory']\n  }}\n/></code></pre><h3 id=\"pie-charts\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Pie Charts</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Show proportions:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\"><AnalyticsPortlet\n  chartType=\"pie\"\n  query={{\n    measures: ['Sales.totalRevenue'],\n    dimensions: ['Sales.region']\n  }}\n/></code></pre><h3 id=\"data-tables\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Data Tables</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Detailed data views:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\"><AnalyticsPortlet\n  chartType=\"table\"\n  query={{\n    measures: ['Sales.totalRevenue', 'Sales.orderCount'],\n    dimensions: ['Sales.customerName', 'Sales.productCategory']\n  }}\n  \n  pageSize={20}\n  sortable={true}\n  searchable={true}\n/></code></pre><h2 id=\"hooks\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Hooks</h2><h3 id=\"usecubequery\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">useCubeQuery</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Execute queries and get real-time data:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { useCubeQuery } from 'drizzle-cube/client';\n\nfunction SalesMetric() {\n  const { data, isLoading, error } = useCubeQuery({\n    measures: ['Sales.totalRevenue'],\n    dimensions: ['Sales.productCategory'],\n    filters: [{\n      member: 'Sales.orderDate',\n      operator: 'inDateRange',\n      values: ['2024-01-01', '2024-12-31']\n    }]\n  });\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n\n  return (\n    <div>\n      <h2>Total Revenue: ${data.totalRevenue}</h2>\n      {/* Render your data */}\n    </div>\n  );\n}</code></pre><h3 id=\"usecubemeta\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">useCubeMeta</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Access cube metadata:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { useCubeMeta } from 'drizzle-cube/client';\n\nfunction MetricSelector() {\n  const { cubes, isLoading } = useCubeMeta();\n\n  if (isLoading) return <div>Loading cubes...</div>;\n\n  return (\n    <select>\n      {cubes.map(cube => \n        cube.measures.map(measure => (\n          <option key={`${cube.name}.${measure.name}`} \n                  value={`${cube.name}.${measure.name}`}>\n            {measure.title || measure.name}\n          </option>\n        ))\n      )}\n    </select>\n  );\n}</code></pre><h2 id=\"customization\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Customization</h2><h3 id=\"custom-chart-components\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Chart Components</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create your own visualizations:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { useCubeQuery } from 'drizzle-cube/client';\nimport { ResponsiveContainer, ComposedChart, Bar, Line, XAxis, YAxis } from 'recharts';\n\nfunction CustomChart({ query }) {\n  const { data, isLoading } = useCubeQuery(query);\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <ComposedChart data={data}>\n        <XAxis dataKey=\"Sales.orderDate\" />\n        <YAxis />\n        <Bar dataKey=\"Sales.orderCount\" fill=\"#8884d8\" />\n        <Line dataKey=\"Sales.totalRevenue\" stroke=\"#82ca9d\" />\n      </ComposedChart>\n    </ResponsiveContainer>\n  );\n}</code></pre><h3 id=\"theme-customization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Theme Customization</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Customize the appearance:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { CubeProvider } from 'drizzle-cube/client';\n\nconst theme = {\n  colors: {\n    primary: '#3b82f6',\n    secondary: '#64748b', \n    success: '#10b981',\n    warning: '#f59e0b',\n    error: '#ef4444'\n  },\n  fonts: {\n    body: 'Inter, sans-serif',\n    mono: 'Fira Code, monospace'\n  }\n};\n\n<CubeProvider cubeApi={cubeApi} theme={theme}>\n  {/* Your components */}\n</CubeProvider></code></pre><h2 id=\"real-time-updates\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Real-time Updates</h2><h3 id=\"websocket-support\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">WebSocket Support</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Enable real-time data updates:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">const cubeApi = {\n  url: '/api/cube',\n  websocketUrl: 'ws://localhost:3000/ws',\n  headers: {\n    'Authorization': 'Bearer token'\n  }\n};\n\n<CubeProvider cubeApi={cubeApi}>\n  <AnalyticsPortlet\n    query={query}\n    realtime={true}\n    refreshInterval={5000}\n  />\n</CubeProvider></code></pre><h3 id=\"manual-refresh\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Manual Refresh</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Trigger updates programmatically:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { useCubeQuery } from 'drizzle-cube/client';\n\nfunction RefreshableChart() {\n  const { data, isLoading, refetch } = useCubeQuery(query);\n\n  return (\n    <div>\n      <button onClick={() => refetch()}>\n        Refresh Data\n      </button>\n      {/* Chart content */}\n    </div>\n  );\n}</code></pre><h2 id=\"error-handling\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Error Handling</h2><h3 id=\"error-boundaries\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Error Boundaries</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Handle errors gracefully:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { ChartErrorBoundary } from 'drizzle-cube/client';\n\n<ChartErrorBoundary\n  fallback={({ error, resetError }) => (\n    <div className=\"error-state\">\n      <h3>Something went wrong</h3>\n      <p>{error.message}</p>\n      <button onClick={resetError}>Try again</button>\n    </div>\n  )}\n>\n  <AnalyticsPortlet query={query} />\n</ChartErrorBoundary></code></pre><h3 id=\"query-validation\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Validation</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Validate queries before execution:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">import { validateQuery } from 'drizzle-cube/client';\n\nfunction QueryBuilder({ query, onChange }) {\n  const validation = validateQuery(query);\n  \n  if (!validation.isValid) {\n    return (\n      <div className=\"validation-errors\">\n        {validation.errors.map(error => (\n          <div key={error.field}>{error.message}</div>\n        ))}\n      </div>\n    );\n  }\n\n  return <AnalyticsPortlet query={query} />;\n}</code></pre><h2 id=\"performance-tips\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Tips</h2><h3 id=\"query-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Optimization</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Use appropriate granularities for time dimensions</li><li class=\"leading-relaxed\">Limit result sets with filters</li><li class=\"leading-relaxed\">Cache frequently used queries</li></ul><h3 id=\"component-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Component Optimization</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Memoize expensive calculations</li><li class=\"leading-relaxed\">Use React.memo for pure components</li><li class=\"leading-relaxed\">Implement virtualization for large datasets</li></ul><h3 id=\"bundle-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Bundle Optimization</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Tree shake unused chart types</li><li class=\"leading-relaxed\">Code split dashboard components</li><li class=\"leading-relaxed\">Lazy load visualization libraries</li></ul><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/charts\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Charts</strong></a> - Detailed chart documentation</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/dashboards\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Dashboards</strong></a> - Dashboard customization  </li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/hooks\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Hooks</strong></a> - Advanced hook usage</li></ul>","path":"client/index.md"},
  'getting-started': {"slug":"getting-started","title":"Getting Started with Drizzle Cube","content":"<h1 id=\"getting-started-with-drizzle-cube\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Getting Started with Drizzle Cube</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube is a <strong class=\"font-semibold text-slate-700\">Drizzle ORM-first semantic layer</strong> with <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> compatibility. It provides type-safe analytics and dashboards with SQL injection protection by leveraging Drizzle ORM as its core SQL building engine.</p><h2 id=\"what-is-drizzle-cube\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">What is Drizzle Cube?</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube bridges the gap between your database and your analytics applications by providing:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type-safe semantic layer</strong> - Define cubes, dimensions, and measures with full TypeScript support</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">SQL injection protection</strong> - All queries use Drizzle&#39;s parameterized query system</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\"><a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> compatibility</strong> - Drop-in replacement for existing <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> implementations</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">PostgreSQL support</strong> - Currently supports PostgreSQL (including Neon), with MySQL and SQLite coming soon</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">React components</strong> - Pre-built dashboard and chart components</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Framework agnostic</strong> - Use with any web framework via adapters</li></ul><h2 id=\"core-concepts\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Core Concepts</h2><h3 id=\"semantic-layer\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Semantic Layer</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">The semantic layer is where you define your business logic and data models. Instead of writing raw SQL queries throughout your application, you define <strong class=\"font-semibold text-slate-700\">cubes</strong> that encapsulate your data models.</p><h3 id=\"cubes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Cubes</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Cubes are the building blocks of your semantic layer. Each cube represents a table or a set of joined tables with defined dimensions and measures.</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">export const salesCube = defineCube(schema, {\n  name: 'Sales',\n  sql: ({ db, securityContext }) => \n    db.select()\n      .from(schema.sales)\n      .where(eq(schema.sales.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    productName: { \n      sql: schema.sales.productName, \n      type: 'string' \n    },\n    orderDate: { \n      sql: schema.sales.orderDate, \n      type: 'time' \n    }\n  },\n  \n  measures: {\n    totalSales: { \n      sql: schema.sales.amount, \n      type: 'sum' \n    },\n    orderCount: { \n      sql: schema.sales.id, \n      type: 'count' \n    }\n  }\n});</code></pre><h3 id=\"dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Dimensions are attributes of your data that you can filter, group, and segment by. They are typically categorical data like product names, dates, or customer segments.</p><h3 id=\"measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Measures are the quantitative values you want to analyze - things like revenue, count of orders, average order value, etc.</p><h2 id=\"architecture\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Architecture</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube follows a <strong class=\"font-semibold text-slate-700\">Drizzle-first architecture</strong>:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Database Schema</strong> - Define your database structure using Drizzle ORM</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Semantic Layer</strong> - Create cubes that reference your schema</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Query Execution</strong> - Drizzle generates type-safe, parameterized SQL</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Framework Integration</strong> - Use adapters to integrate with your web framework</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Client Components</strong> - Render data using React components</li></ol><h2 id=\"security-model\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Security Model</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Security is built into every layer:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">SQL Injection Protection</strong> - Drizzle&#39;s parameterized queries prevent SQL injection</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Multi-tenant Security</strong> - Every cube should filter by security context</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Type Safety</strong> - TypeScript prevents runtime errors and data inconsistencies</li></ul><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Ready to get started? Here&#39;s what to do next:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/installation\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Installation</strong></a> - Install Drizzle Cube in your project</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/quick-start\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Quick Start</strong></a> - Build your first semantic layer</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/concepts\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Core Concepts</strong></a> - Understand cubes, dimensions, and measures in detail</li></ol><h2 id=\"example-applications\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Example Applications</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Check out these example implementations:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Basic Example</strong> - Simple analytics dashboard</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\"><a href=\"https://github.com/cliftonc/drizzle-cube/tree/main/examples/hono\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Hono Example</a></strong> - Full-featured application with Cloudflare Workers</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Multi-tenant Example</strong> - Enterprise-ready multi-tenant setup</li></ul><h2 id=\"community-and-support\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Community and Support</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">GitHub Repository</strong> - <a href=\"https://github.com/cliftonc/drizzle-cube\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">github.com/cliftonc/drizzle-cube</a></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Issues and Bug Reports</strong> - <a href=\"https://github.com/cliftonc/drizzle-cube/issues\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Issues</a></li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Discussions</strong> - <a href=\"https://github.com/cliftonc/drizzle-cube/discussions\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Discussions</a></li></ul>","path":"getting-started/index.md"},
  'getting-started/concepts': {"slug":"getting-started/concepts","title":"Core Concepts","content":"<h1 id=\"core-concepts\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Core Concepts</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Understanding the fundamental concepts of Drizzle Cube is essential for building effective semantic layers. This guide covers the key concepts you&#39;ll work with.</p><h2 id=\"semantic-layer-overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Semantic Layer Overview</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">A <strong class=\"font-semibold text-slate-700\">semantic layer</strong> sits between your database and your analytics applications. It provides a business-friendly abstraction over your raw data, allowing you to:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Define business logic once and reuse it everywhere</li><li class=\"leading-relaxed\">Ensure consistent metrics across your organization</li><li class=\"leading-relaxed\">Provide security and access control</li><li class=\"leading-relaxed\">Enable self-service analytics for non-technical users</li></ul><h2 id=\"cubes\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Cubes</h2><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Cubes</strong> are the core building blocks of your semantic layer. Each cube represents a logical business entity (like Sales, Users, Products) and contains:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">SQL definition</strong> - How to retrieve the data</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dimensions</strong> - Attributes you can filter and group by</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Measures</strong> - Numeric values you want to analyze</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Joins</strong> - Relationships to other cubes</li></ul><h3 id=\"basic-cube-structure\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Basic Cube Structure</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">export const salesCube = defineCube(schema, {\n  name: 'Sales',\n  sql: ({ db, securityContext }) => \n    db.select()\n      .from(schema.sales)\n      .where(eq(schema.sales.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    // Categorical data\n  },\n  \n  measures: {\n    // Numeric aggregations\n  }\n});</code></pre><h3 id=\"security-context\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Security Context</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Every cube <strong class=\"font-semibold text-slate-700\">must</strong> include security filtering to ensure multi-tenant isolation:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// ✅ Good - includes security context\nsql: ({ db, securityContext }) => \n  db.select()\n    .from(schema.sales)\n    .where(eq(schema.sales.organisationId, securityContext.organisationId))\n\n// ❌ Bad - no security filtering\nsql: ({ db }) => db.select().from(schema.sales)</code></pre><h2 id=\"dimensions\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Dimensions</h2><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dimensions</strong> are the attributes of your data that you can:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Filter by (WHERE clauses)</li><li class=\"leading-relaxed\">Group by (GROUP BY clauses)  </li><li class=\"leading-relaxed\">Use in charts as categories</li></ul><h3 id=\"dimension-types\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dimension Types</h3><h4 id=\"string-dimensions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">String Dimensions</h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Categorical text data:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">dimensions: {\n  customerName: { \n    sql: schema.sales.customerName, \n    type: 'string' \n  },\n  productCategory: { \n    sql: schema.products.category, \n    type: 'string' \n  }\n}</code></pre><h4 id=\"time-dimensions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Time Dimensions</h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Date and timestamp fields:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">dimensions: {\n  orderDate: { \n    sql: schema.sales.orderDate, \n    type: 'time' \n  },\n  createdAt: { \n    sql: schema.users.createdAt, \n    type: 'time' \n  }\n}</code></pre><p class=\"mb-4 text-gray-600 leading-relaxed\">Time dimensions support automatic granularity:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">year</code> - 2024</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">quarter</code> - 2024-Q1  </li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">month</code> - 2024-01</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">week</code> - 2024-W01</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">day</code> - 2024-01-15</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">hour</code> - 2024-01-15 14:00</li></ul><h4 id=\"number-dimensions\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Number Dimensions</h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Numeric values used as categories:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">dimensions: {\n  quantity: { \n    sql: schema.sales.quantity, \n    type: 'number' \n  },\n  userId: { \n    sql: schema.sessions.userId, \n    type: 'number' \n  }\n}</code></pre><h3 id=\"computed-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Computed Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">You can create computed dimensions using SQL expressions:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">dimensions: {\n  fullName: {\n    sql: sql`CONCAT(${schema.users.firstName}, ' ', ${schema.users.lastName})`,\n    type: 'string',\n    title: 'Full Name'\n  },\n  ageGroup: {\n    sql: sql`\n      CASE \n        WHEN age < 18 THEN 'Under 18'\n        WHEN age < 35 THEN '18-34'\n        WHEN age < 55 THEN '35-54'\n        ELSE '55+'\n      END\n    `,\n    type: 'string',\n    title: 'Age Group'\n  }\n}</code></pre><h2 id=\"measures\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Measures</h2><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Measures</strong> are the numeric values you want to analyze. They represent aggregated data and support various aggregation types.</p><h3 id=\"aggregation-types\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Aggregation Types</h3><h4 id=\"count\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Count</h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Count the number of rows:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">measures: {\n  orderCount: { \n    sql: schema.sales.id, \n    type: 'count',\n    title: 'Total Orders'\n  }\n}</code></pre><h4 id=\"sum\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Sum</h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Add up numeric values:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">measures: {\n  totalRevenue: { \n    sql: schema.sales.amount, \n    type: 'sum',\n    title: 'Total Revenue'\n  }\n}</code></pre><h4 id=\"average\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Average</h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Calculate the mean value:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">measures: {\n  averageOrderValue: { \n    sql: schema.sales.amount, \n    type: 'avg',\n    title: 'Average Order Value'\n  }\n}</code></pre><h4 id=\"minmax\" class=\"text-xl font-medium text-gray-700 mt-4 mb-2\">Min/Max</h4><p class=\"mb-4 text-gray-600 leading-relaxed\">Find minimum or maximum values:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">measures: {\n  minOrderAmount: { \n    sql: schema.sales.amount, \n    type: 'min',\n    title: 'Smallest Order'\n  },\n  maxOrderAmount: { \n    sql: schema.sales.amount, \n    type: 'max', \n    title: 'Largest Order'\n  }\n}</code></pre><h3 id=\"custom-measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create complex calculations using SQL expressions:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">measures: {\n  profitMargin: {\n    sql: sql`(${schema.sales.amount} - ${schema.sales.cost}) / ${schema.sales.amount} * 100`,\n    type: 'avg',\n    title: 'Profit Margin %',\n    format: 'percent'\n  },\n  \n  conversionRate: {\n    sql: sql`\n      COUNT(CASE WHEN ${schema.events.type} = 'purchase' THEN 1 END) * 100.0 / \n      COUNT(CASE WHEN ${schema.events.type} = 'visit' THEN 1 END)\n    `,\n    type: 'number',\n    title: 'Conversion Rate %'\n  }\n}</code></pre><h2 id=\"data-types-and-formats\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Data Types and Formats</h2><h3 id=\"dimension-data-types\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dimension Data Types</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">string</code> - Text values</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">number</code> - Numeric values  </li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">time</code> - Dates and timestamps</li><li class=\"leading-relaxed\"><code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">boolean</code> - True/false values</li></ul><h3 id=\"measure-formats\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Measure Formats</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Control how measures are displayed:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">measures: {\n  revenue: {\n    sql: schema.sales.amount,\n    type: 'sum',\n    format: 'currency' // $1,234.56\n  },\n  \n  growth: {\n    sql: schema.metrics.growth,\n    type: 'avg',\n    format: 'percent' // 12.3%\n  }\n}</code></pre><h2 id=\"query-structure\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Query Structure</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">When querying cubes, you specify:</p><h3 id=\"measures\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Measures</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">What you want to calculate:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-json\">{\n  \"measures\": [\"Sales.totalRevenue\", \"Sales.orderCount\"]\n}</code></pre><h3 id=\"dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">How you want to group/filter the data:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-json\">{\n  \"dimensions\": [\"Sales.productCategory\", \"Sales.customerName\"]\n}</code></pre><h3 id=\"time-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Time Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Time-based grouping with granularity:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-json\">{\n  \"timeDimensions\": [{\n    \"dimension\": \"Sales.orderDate\",\n    \"granularity\": \"month\"\n  }]\n}</code></pre><h3 id=\"filters\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Filters</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Restrict the data returned:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-json\">{\n  \"filters\": [\n    {\n      \"member\": \"Sales.productCategory\",\n      \"operator\": \"equals\",\n      \"values\": [\"Electronics\"]\n    },\n    {\n      \"member\": \"Sales.orderDate\",\n      \"operator\": \"inDateRange\", \n      \"values\": [\"2024-01-01\", \"2024-12-31\"]\n    }\n  ]\n}</code></pre><h2 id=\"security-and-multi-tenancy\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Security and Multi-tenancy</h2><h3 id=\"organisation-based-security\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Organisation-based Security</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Every cube should filter by organisation:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">sql: ({ db, securityContext }) => \n  db.select()\n    .from(schema.sales)\n    .where(eq(schema.sales.organisationId, securityContext.organisationId))</code></pre><h3 id=\"row-level-security\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Row-level Security</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Filter based on user permissions:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">sql: ({ db, securityContext }) => \n  db.select()\n    .from(schema.sales)\n    .where(and(\n      eq(schema.sales.organisationId, securityContext.organisationId),\n      eq(schema.sales.salesPersonId, securityContext.userId) // User can only see their sales\n    ))</code></pre><h3 id=\"column-level-security\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Column-level Security</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Conditionally include sensitive data:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">dimensions: {\n  customerEmail: {\n    sql: securityContext.hasRole('admin') \n      ? schema.customers.email \n      : sql`'[HIDDEN]'`,\n    type: 'string'\n  }\n}</code></pre><h2 id=\"best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Best Practices</h2><h3 id=\"naming-conventions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Naming Conventions</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Use descriptive names: <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">totalRevenue</code> not <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">sum_amount</code></li><li class=\"leading-relaxed\">Be consistent: <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">orderCount</code>, <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">customerCount</code>, <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">productCount</code></li><li class=\"leading-relaxed\">Use camelCase for cube members</li></ul><h3 id=\"performance\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Performance</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Add database indexes for commonly filtered dimensions</li><li class=\"leading-relaxed\">Use appropriate data types in your schema</li><li class=\"leading-relaxed\">Consider pre-aggregated tables for large datasets</li></ul><h3 id=\"documentation\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Documentation</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Add <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">title</code> and <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">description</code> to cube members</li><li class=\"leading-relaxed\">Use meaningful cube and measure names</li><li class=\"leading-relaxed\">Document business logic in comments</li></ul><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Now that you understand the core concepts:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Explore the Semantic Layer</strong></a> - Advanced cube features</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/joins\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Learn about Joins</strong></a> - Multi-cube queries  </li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Security Deep Dive</strong></a> - Advanced security patterns</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"advanced/performance\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Performance Optimization</strong></a> - Scale your semantic layer</li></ol>","path":"getting-started/concepts.md"},
  'getting-started/installation': {"slug":"getting-started/installation","title":"Installation","content":"<h1 id=\"installation\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Installation</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Get Drizzle Cube up and running in your project in just a few steps.</p><h2 id=\"requirements\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Requirements</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Before installing Drizzle Cube, make sure you have:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Node.js</strong> 18 or higher</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">TypeScript</strong> 5.0 or higher  </li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Drizzle ORM</strong> 0.44.4 or higher</li><li class=\"leading-relaxed\">A PostgreSQL database (MySQL and SQLite support coming soon)</li></ul><h2 id=\"package-installation\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Package Installation</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Install Drizzle Cube using your preferred package manager:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-bash\"># npm\nnpm install drizzle-cube drizzle-orm\n\n# yarn\nyarn add drizzle-cube drizzle-orm\n\n# pnpm\npnpm add drizzle-cube drizzle-orm</code></pre><h2 id=\"database-setup\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Database Setup</h2><h3 id=\"postgresql\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">PostgreSQL</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-bash\">npm install postgres\n# or for Neon serverless\nnpm install @neondatabase/serverless</code></pre><h3 id=\"mysql\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">MySQL</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-bash\">npm install mysql2</code></pre><h3 id=\"sqlite\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">SQLite</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-bash\">npm install better-sqlite3</code></pre><h2 id=\"framework-adapters\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Framework Adapters</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Choose the adapter for your web framework:</p><h3 id=\"hono-recommended\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Hono (Recommended)</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-bash\">npm install hono</code></pre><h3 id=\"custom-framework\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Custom Framework</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">You can create custom adapters for other frameworks. See <a href=\"#\" data-help-link=\"adapters/custom\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Custom Adapters</a> for details.</p><h2 id=\"react-components-optional\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">React Components (Optional)</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">For dashboard and chart components:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-bash\">npm install react react-dom recharts react-grid-layout</code></pre><h2 id=\"typescript-configuration\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">TypeScript Configuration</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Update your <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">tsconfig.json</code> to include proper module resolution:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-json\">{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"lib\": [\"ES2023\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"react-jsx\",\n    \"strict\": true,\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"src/**/*.ts\", \"src/**/*.tsx\"]\n}</code></pre><h2 id=\"project-structure\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Project Structure</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Here&#39;s the recommended project structure:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-text\">your-project/\n├── src/\n│   ├── schema.ts              # Drizzle schema definition\n│   ├── cubes.ts               # Semantic layer cubes\n│   ├── server.ts              # Server setup with adapter\n│   └── client/                # React components (optional)\n│       ├── components/\n│       └── pages/\n├── drizzle.config.ts          # Drizzle configuration\n├── package.json\n└── tsconfig.json</code></pre><h2 id=\"environment-variables\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Environment Variables</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Create a <code class=\"bg-gray-100 text-drizzle-700 px-2 py-1 rounded text-sm font-mono\">.env</code> file with your database connection details:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-env\"># PostgreSQL (currently supported)\nDATABASE_URL=\"postgresql://user:password@localhost:5432/mydb\"\n\n# Neon PostgreSQL (currently supported)\nDATABASE_URL=\"postgresql://user:password@ep-example-123456.us-east-1.aws.neon.tech/dbname\"\n\n# MySQL (coming soon)\n# DATABASE_URL=\"mysql://user:password@localhost:3306/mydb\"\n\n# SQLite (coming soon)  \n# DATABASE_URL=\"file:./dev.db\"</code></pre><h2 id=\"verification\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Verification</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Create a simple test file to verify your installation:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// test.ts\nimport { createDatabaseExecutor } from 'drizzle-cube/server';\nimport { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\n\nconst client = postgres(process.env.DATABASE_URL!);\nconst db = drizzle(client);\n\nconst executor = createDatabaseExecutor(db, {}, 'postgres');\nconsole.log('✅ Drizzle Cube installed successfully!');</code></pre><p class=\"mb-4 text-gray-600 leading-relaxed\">Run the test:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-bash\">npx tsx test.ts</code></pre><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Now that Drizzle Cube is installed, you can:</p><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/quick-start\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Set up your first cube</strong></a></li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/concepts\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Learn core concepts</strong></a>  </li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"adapters/hono\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Explore the Hono adapter</strong></a></li></ol><h2 id=\"troubleshooting\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Troubleshooting</h2><h3 id=\"common-issues\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Common Issues</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Module not found errors</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Ensure you&#39;re using TypeScript 5.0+ and have proper module resolution configured</li><li class=\"leading-relaxed\">Check that all peer dependencies are installed</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Database connection issues</strong>  </p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Verify your DATABASE_URL is correct</li><li class=\"leading-relaxed\">Make sure your database server is running</li><li class=\"leading-relaxed\">Check firewall and network settings</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">TypeScript compilation errors</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">Update to the latest version of TypeScript</li><li class=\"leading-relaxed\">Ensure your tsconfig.json includes the proper compiler options</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">Need more help? Check our <a href=\"#\" data-help-link=\"advanced/troubleshooting\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" >Troubleshooting Guide</a> or <a href=\"https://github.com/cliftonc/drizzle-cube/issues\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">report an issue</a>.</p>","path":"getting-started/installation.md"},
  'getting-started/quick-start': {"slug":"getting-started/quick-start","title":"Quick Start","content":"<h1 id=\"quick-start\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Quick Start</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">Build your first semantic layer with Drizzle Cube in under 10 minutes.</p><h2 id=\"step-1-database-schema\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 1: Database Schema</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">First, define your database schema using Drizzle ORM:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// src/schema.ts\nimport { pgTable, serial, text, timestamp, decimal, integer } from 'drizzle-orm/pg-core';\n\nexport const organisations = pgTable('organisations', {\n  id: serial('id').primaryKey(),\n  name: text('name').notNull(),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n\nexport const products = pgTable('products', {\n  id: serial('id').primaryKey(),\n  organisationId: integer('organisation_id').references(() => organisations.id),\n  name: text('name').notNull(),\n  category: text('category').notNull(),\n  price: decimal('price', { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n\nexport const sales = pgTable('sales', {\n  id: serial('id').primaryKey(),\n  organisationId: integer('organisation_id').references(() => organisations.id),\n  productId: integer('product_id').references(() => products.id),\n  quantity: integer('quantity').notNull(),\n  amount: decimal('amount', { precision: 10, scale: 2 }).notNull(),\n  orderDate: timestamp('order_date').defaultNow(),\n  customerName: text('customer_name'),\n});</code></pre><h2 id=\"step-2-define-cubes\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 2: Define Cubes</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Create your semantic layer by defining cubes:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// src/cubes.ts\nimport { defineCube } from 'drizzle-cube/server';\nimport { eq } from 'drizzle-orm';\nimport * as schema from './schema';\n\nexport const salesCube = defineCube(schema, {\n  name: 'Sales',\n  sql: ({ db, securityContext }) => \n    db.select()\n      .from(schema.sales)\n      .innerJoin(schema.products, eq(schema.sales.productId, schema.products.id))\n      .where(eq(schema.sales.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    customerName: { \n      sql: schema.sales.customerName, \n      type: 'string' \n    },\n    productName: { \n      sql: schema.products.name, \n      type: 'string' \n    },\n    productCategory: { \n      sql: schema.products.category, \n      type: 'string' \n    },\n    orderDate: { \n      sql: schema.sales.orderDate, \n      type: 'time' \n    },\n  },\n  \n  measures: {\n    totalSales: { \n      sql: schema.sales.amount, \n      type: 'sum',\n      title: 'Total Sales'\n    },\n    orderCount: { \n      sql: schema.sales.id, \n      type: 'count',\n      title: 'Number of Orders'\n    },\n    averageOrderValue: { \n      sql: schema.sales.amount, \n      type: 'avg',\n      title: 'Average Order Value'\n    },\n    totalQuantity: { \n      sql: schema.sales.quantity, \n      type: 'sum',\n      title: 'Total Quantity Sold'\n    },\n  }\n});\n\nexport const productsCube = defineCube(schema, {\n  name: 'Products',\n  sql: ({ db, securityContext }) => \n    db.select()\n      .from(schema.products)\n      .where(eq(schema.products.organisationId, securityContext.organisationId)),\n  \n  dimensions: {\n    name: { \n      sql: schema.products.name, \n      type: 'string' \n    },\n    category: { \n      sql: schema.products.category, \n      type: 'string' \n    },\n    createdAt: { \n      sql: schema.products.createdAt, \n      type: 'time' \n    },\n  },\n  \n  measures: {\n    count: { \n      sql: schema.products.id, \n      type: 'count',\n      title: 'Product Count'\n    },\n    averagePrice: { \n      sql: schema.products.price, \n      type: 'avg',\n      title: 'Average Price'\n    },\n  }\n});</code></pre><h2 id=\"step-3-server-setup\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 3: Server Setup</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Set up your server with the Hono adapter:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// src/server.ts\nimport { Hono } from 'hono';\nimport { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport { createCubeApp } from 'drizzle-cube/adapters/hono';\nimport { SemanticLayerCompiler, createDatabaseExecutor } from 'drizzle-cube/server';\nimport * as schema from './schema';\nimport { salesCube, productsCube } from './cubes';\n\n// Database connection\nconst client = postgres(process.env.DATABASE_URL!);\nconst db = drizzle(client, { schema });\n\n// Create semantic layer\nconst databaseExecutor = createDatabaseExecutor(db, schema, 'postgres');\nconst semanticLayer = new SemanticLayerCompiler({ \n  databaseExecutor \n});\n\n// Register cubes\nsemanticLayer.registerCube(salesCube);\nsemanticLayer.registerCube(productsCube);\n\n// Create Hono app\nconst app = new Hono();\n\n// Add authentication middleware (example)\napp.use('/api/cube/*', async (c, next) => {\n  // In a real app, validate JWT token, session, etc.\n  const orgId = c.req.header('X-Organisation-ID');\n  if (!orgId) {\n    return c.json({ error: 'Organisation ID required' }, 401);\n  }\n  c.set('organisationId', parseInt(orgId));\n  await next();\n});\n\n// Mount Cube API\nconst cubeApp = createCubeApp({\n  semanticLayer,\n  drizzle: db,\n  schema,\n  getSecurityContext: async (c) => ({\n    organisationId: c.get('organisationId')\n  })\n});\n\napp.route('/api/cube', cubeApp);\n\nexport default app;</code></pre><h2 id=\"step-4-query-your-data\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 4: Query Your Data</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Now you can query your semantic layer:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// Query example\nconst query = {\n  measures: ['Sales.totalSales', 'Sales.orderCount'],\n  dimensions: ['Sales.productCategory'],\n  timeDimensions: [{\n    dimension: 'Sales.orderDate',\n    granularity: 'month'\n  }],\n  filters: [{\n    member: 'Sales.orderDate',\n    operator: 'inDateRange',\n    values: ['2024-01-01', '2024-12-31']\n  }]\n};\n\n// Make request to your API\nconst response = await fetch('/api/cube/load', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-Organisation-ID': '1'\n  },\n  body: JSON.stringify({ query })\n});\n\nconst data = await response.json();\nconsole.log(data);</code></pre><h2 id=\"step-5-react-dashboard-optional\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Step 5: React Dashboard (Optional)</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Add a React dashboard using Drizzle Cube&#39;s components:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-tsx\">// src/Dashboard.tsx\nimport React from 'react';\nimport { CubeProvider } from 'drizzle-cube/client';\nimport { AnalyticsDashboard } from 'drizzle-cube/client';\n\nconst Dashboard: React.FC = () => {\n  const cubeApi = {\n    url: '/api/cube',\n    headers: {\n      'X-Organisation-ID': '1'\n    }\n  };\n\n  return (\n    <CubeProvider cubeApi={cubeApi}>\n      <div className=\"p-6\">\n        <h1 className=\"text-3xl font-bold mb-6\">Sales Dashboard</h1>\n        \n        <AnalyticsDashboard\n          initialLayout={[\n            {\n              id: 'sales-by-category',\n              title: 'Sales by Category',\n              chartType: 'bar',\n              query: {\n                measures: ['Sales.totalSales'],\n                dimensions: ['Sales.productCategory']\n              }\n            },\n            {\n              id: 'sales-over-time',\n              title: 'Sales Over Time',\n              chartType: 'line',\n              query: {\n                measures: ['Sales.totalSales'],\n                timeDimensions: [{\n                  dimension: 'Sales.orderDate',\n                  granularity: 'month'\n                }]\n              }\n            }\n          ]}\n        />\n      </div>\n    </CubeProvider>\n  );\n};\n\nexport default Dashboard;</code></pre><h2 id=\"whats-next\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">What&#39;s Next?</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Congratulations! You&#39;ve created your first semantic layer with Drizzle Cube. Here&#39;s what you can explore next:</p><h3 id=\"learn-more\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Learn More</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"getting-started/concepts\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Core Concepts</strong></a> - Deep dive into cubes, dimensions, and measures</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Semantic Layer</strong></a> - Advanced semantic layer features</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Security</strong></a> - Multi-tenant security patterns</li></ul><h3 id=\"explore-components\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Explore Components</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">React Client</strong></a> - Dashboard and chart components</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/charts\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Charts</strong></a> - Available visualization types</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"client/hooks\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Hooks</strong></a> - React hooks for data fetching</li></ul><h3 id=\"advanced-features\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Advanced Features</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/joins\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Joins</strong></a> - Multi-cube queries</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"advanced/performance\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Performance</strong></a> - Optimization techniques</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"adapters/custom\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Custom Adapters</strong></a> - Framework integration</li></ul><h2 id=\"example-projects\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Example Projects</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">Check out complete example implementations:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\"><a href=\"https://github.com/cliftonc/drizzle-cube/tree/main/examples/basic\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Basic Example</a></strong> - Simple analytics setup</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\"><a href=\"https://github.com/cliftonc/drizzle-cube/tree/main/examples/hono\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Hono Example</a></strong> - Full-featured application</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\">Need help? <a href=\"https://github.com/cliftonc/drizzle-cube/discussions\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Join our community</a> or <a href=\"https://github.com/cliftonc/drizzle-cube/issues\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">report issues</a>!</p>","path":"getting-started/quick-start.md"},
  'semantic-layer': {"slug":"semantic-layer","title":"Semantic Layer","content":"<h1 id=\"semantic-layer\" class=\"text-4xl font-bold text-gray-900 mb-6 pb-2 border-b-2 border-drizzle-500\">Semantic Layer</h1><p class=\"mb-4 text-gray-600 leading-relaxed\">The semantic layer is the heart of Drizzle Cube. It provides a business-friendly abstraction over your database that enables consistent, secure, and performant analytics across your organization.</p><h2 id=\"what-is-a-semantic-layer\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">What is a Semantic Layer?</h2><p class=\"mb-4 text-gray-600 leading-relaxed\">A semantic layer is a <strong class=\"font-semibold text-slate-700\">business representation</strong> of your data that:</p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Abstracts complexity</strong> - Hide database schema details behind business terms</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Ensures consistency</strong> - Single source of truth for metrics and definitions</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Provides security</strong> - Row and column-level access control</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Enables self-service</strong> - Non-technical users can explore data safely</li></ul><h2 id=\"architecture-overview\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Architecture Overview</h2><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-text\">┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐\n│   Applications  │────│  Semantic Layer  │────│    Database     │\n│                 │    │                  │    │                 │\n│ • Dashboards    │    │ • Cubes         │    │ • Tables        │\n│ • Reports       │    │ • Dimensions    │    │ • Views         │\n│ • APIs          │    │ • Measures      │    │ • Indexes       │\n└─────────────────┘    └──────────────────┘    └─────────────────┘</code></pre><h2 id=\"key-components\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Key Components</h2><h3 id=\"cubes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Cubes</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Business entities that represent your data models:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">export const salesCube = defineCube(schema, {\n  name: 'Sales',\n  title: 'Sales Transactions',\n  description: 'All sales transactions with product and customer information',\n  \n  sql: ({ db, securityContext }) => \n    db.select()\n      .from(schema.sales)\n      .innerJoin(schema.products, eq(schema.sales.productId, schema.products.id))\n      .where(eq(schema.sales.organisationId, securityContext.organisationId)),\n  \n  dimensions: { /* ... */ },\n  measures: { /* ... */ }\n});</code></pre><h3 id=\"database-executor\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Database Executor</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Handles different database engines:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">const executor = createDatabaseExecutor(db, schema, 'postgres');\n// Currently supports: 'postgres' (including Neon)\n// Coming soon: 'mysql', 'sqlite'</code></pre><h3 id=\"semantic-layer-compiler\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Semantic Layer Compiler</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Orchestrates cubes and query execution:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">const semanticLayer = new SemanticLayerCompiler({ \n  databaseExecutor: executor \n});\n\nsemanticLayer.registerCube(salesCube);\nsemanticLayer.registerCube(productsCube);\nsemanticLayer.registerCube(customersCube);</code></pre><h2 id=\"advanced-features\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Advanced Features</h2><h3 id=\"multi-cube-queries\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Multi-Cube Queries</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Query across multiple cubes with automatic join resolution:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-json\">{\n  \"measures\": [\"Sales.totalRevenue\", \"Products.averagePrice\"],\n  \"dimensions\": [\"Products.category\", \"Sales.customerSegment\"]\n}</code></pre><h3 id=\"time-intelligence\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Time Intelligence</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Automatic time-based calculations:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">measures: {\n  revenueGrowth: {\n    sql: schema.sales.amount,\n    type: 'sum',\n    timeComparison: 'previousPeriod' // Compare to previous period\n  },\n  \n  runningTotal: {\n    sql: schema.sales.amount,\n    type: 'runningSum' // Cumulative sum over time\n  }\n}</code></pre><h3 id=\"calculated-members\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Calculated Members</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create complex business logic:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">measures: {\n  customerLifetimeValue: {\n    sql: sql`\n      (${schema.sales.amount} / ${schema.customers.acquisitionCost}) * \n      ${schema.customers.retentionRate}\n    `,\n    type: 'avg',\n    title: 'Customer Lifetime Value'\n  }\n}</code></pre><h3 id=\"hierarchical-dimensions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Hierarchical Dimensions</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Support drill-down analytics:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">dimensions: {\n  location: {\n    sql: schema.sales.region,\n    type: 'string',\n    hierarchy: ['country', 'region', 'city']\n  }\n}</code></pre><h2 id=\"security-model\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Security Model</h2><h3 id=\"multi-tenant-isolation\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Multi-Tenant Isolation</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Every cube must implement tenant isolation:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">sql: ({ db, securityContext }) => \n  db.select()\n    .from(schema.data)\n    .where(eq(schema.data.organisationId, securityContext.organisationId))</code></pre><h3 id=\"role-based-access\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Role-Based Access</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Control access based on user roles:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">dimensions: {\n  sensitiveData: {\n    sql: securityContext.hasRole('admin') \n      ? schema.table.sensitiveColumn\n      : sql`NULL`,\n    type: 'string'\n  }\n}</code></pre><h3 id=\"dynamic-filtering\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dynamic Filtering</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Apply filters based on user context:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">sql: ({ db, securityContext }) => {\n  let query = db.select().from(schema.sales);\n  \n  if (securityContext.role === 'salesperson') {\n    query = query.where(eq(schema.sales.salesPersonId, securityContext.userId));\n  }\n  \n  return query.where(eq(schema.sales.organisationId, securityContext.organisationId));\n}</code></pre><h2 id=\"performance-optimization\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Performance Optimization</h2><h3 id=\"pre-aggregations\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Pre-aggregations</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Create summary tables for fast queries:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">preAggregations: {\n  monthlySales: {\n    measures: ['Sales.totalRevenue', 'Sales.orderCount'],\n    dimensions: ['Sales.productCategory'],\n    timeDimension: 'Sales.orderDate',\n    granularity: 'month',\n    refreshKey: {\n      every: '1 hour'\n    }\n  }\n}</code></pre><h3 id=\"indexes\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Indexes</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Ensure proper database indexes:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// In your Drizzle schema\nexport const salesIndex = index('sales_org_date_idx')\n  .on(sales.organisationId, sales.orderDate);</code></pre><h3 id=\"query-optimization\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Query Optimization</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Use efficient SQL patterns:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// ✅ Good - use joins instead of subqueries when possible\nsql: ({ db }) => \n  db.select()\n    .from(schema.sales)\n    .innerJoin(schema.products, eq(schema.sales.productId, schema.products.id))\n\n// ❌ Slower - subqueries can be less efficient  \nsql: ({ db }) =>\n  db.select()\n    .from(schema.sales)\n    .where(inArray(schema.sales.productId, \n      db.select({ id: schema.products.id }).from(schema.products)\n    ))</code></pre><h2 id=\"data-modeling-best-practices\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Data Modeling Best Practices</h2><h3 id=\"star-schema-design\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Star Schema Design</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Organize cubes around business processes:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-text\">    Customers ───┐\n                 │\n    Products ────┼──── Sales (Fact)\n                 │\n    Time ────────┘</code></pre><h3 id=\"dimensional-modeling\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Dimensional Modeling</h3><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Fact tables</strong> - Events, transactions, measurements</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Dimension tables</strong> - Descriptive attributes, hierarchies</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Bridge tables</strong> - Many-to-many relationships</li></ul><h3 id=\"naming-conventions\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Naming Conventions</h3><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// Cubes: Business entities (PascalCase)\nexport const CustomerOrders = defineCube(/* ... */);\n\n// Dimensions: Attributes (camelCase)  \ndimensions: {\n  customerName: { /* ... */ },\n  orderDate: { /* ... */ }\n}\n\n// Measures: Metrics (camelCase)\nmeasures: {\n  totalRevenue: { /* ... */ },\n  averageOrderValue: { /* ... */ }\n}</code></pre><h2 id=\"testing-your-semantic-layer\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Testing Your Semantic Layer</h2><h3 id=\"unit-tests\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Unit Tests</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Test cube definitions:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">import { describe, it, expect } from 'vitest';\nimport { salesCube } from './cubes';\n\ndescribe('Sales Cube', () => {\n  it('should have required dimensions', () => {\n    expect(salesCube.dimensions.customerName).toBeDefined();\n    expect(salesCube.dimensions.orderDate).toBeDefined();\n  });\n  \n  it('should have required measures', () => {\n    expect(salesCube.measures.totalRevenue).toBeDefined();\n    expect(salesCube.measures.orderCount).toBeDefined();\n  });\n});</code></pre><h3 id=\"integration-tests\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Integration Tests</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Test query execution:</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">it('should execute queries correctly', async () => {\n  const result = await semanticLayer.executeQuery({\n    measures: ['Sales.totalRevenue'],\n    dimensions: ['Sales.productCategory']\n  }, { organisationId: 1 });\n  \n  expect(result.data).toHaveLength(3);\n  expect(result.data[0]).toHaveProperty('Sales.totalRevenue');\n});</code></pre><h2 id=\"migration-and-interoperability\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Migration and Interoperability</h2><h3 id=\"drizzle-cube-cubejshttpscubedev-migration\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Drizzle Cube ↔ <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> Migration</h3><p class=\"mb-4 text-gray-600 leading-relaxed\">Drizzle Cube and <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> are designed to be compatible, allowing migration in both directions depending on your needs:</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Drizzle Cube → <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a></strong>: As your analytics requirements become more complex, you might need <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a>&#39;s advanced features like pre-aggregations, caching layers, or enterprise tooling. The similar schema structure makes this transition smooth.</p><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\"><a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> → Drizzle Cube</strong>: If you want stronger type safety, Drizzle ORM integration, or simpler deployment patterns, you can migrate to Drizzle Cube while maintaining API compatibility.</p><pre class=\"bg-white rounded-lg p-4 overflow-x-auto mb-4 border\"><code class=\"text-xs text-gray-800 language-typescript\">// [Cube.js](https://cube.dev) schema\ncube(`Sales`, {\n  sql: `SELECT * FROM sales`,\n  dimensions: {\n    customerName: {\n      sql: `customer_name`,\n      type: `string`\n    }\n  },\n  measures: {\n    count: {\n      type: `count`\n    }\n  }\n});\n\n// Equivalent Drizzle Cube (bidirectional compatibility)\nexport const salesCube = defineCube(schema, {\n  name: 'Sales',\n  sql: ({ db }) => db.select().from(schema.sales),\n  dimensions: {\n    customerName: {\n      sql: schema.sales.customerName,\n      type: 'string'\n    }\n  },\n  measures: {\n    count: {\n      sql: schema.sales.id,\n      type: 'count'\n    }\n  }\n});</code></pre><h3 id=\"when-to-choose-each-platform\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">When to Choose Each Platform</h3><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Choose Drizzle Cube when:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">You want type safety and Drizzle ORM integration</li><li class=\"leading-relaxed\">You prefer simpler deployment (single process, no Redis)</li><li class=\"leading-relaxed\">You need strong SQL injection protection</li><li class=\"leading-relaxed\">Your analytics needs are moderate complexity</li></ul><p class=\"mb-4 text-gray-600 leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Consider <a href=\"https://cube.dev\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" target=\"_blank\" rel=\"noopener noreferrer\">Cube.js</a> when:</strong></p><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\">You need advanced pre-aggregation strategies</li><li class=\"leading-relaxed\">You require horizontal scaling with caching layers</li><li class=\"leading-relaxed\">You want enterprise features and commercial support</li><li class=\"leading-relaxed\">You have complex analytics requirements across large datasets</li></ul><h3 id=\"migration-path\" class=\"text-2xl font-medium text-gray-700 mt-6 mb-3\">Migration Path</h3><ol class=\"list-decimal list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Start small</strong> - Begin with one cube in either direction</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Maintain compatibility</strong> - Both platforms support similar query APIs</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Gradual transition</strong> - Migrate cubes and queries incrementally  </li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Test thoroughly</strong> - Validate query results during migration</li><li class=\"leading-relaxed\"><strong class=\"font-semibold text-slate-700\">Update clients</strong> - Frontend applications often require minimal changes</li></ol><h2 id=\"next-steps\" class=\"text-3xl font-semibold text-gray-800 mt-8 mb-4\">Next Steps</h2><ul class=\"list-disc list-inside mb-4 space-y-2 text-gray-600 ml-4\"><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/cubes\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Cubes</strong></a> - Deep dive into cube definitions</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/dimensions\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Dimensions</strong></a> - Advanced dimension patterns</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/measures\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Measures</strong></a> - Custom calculations and aggregations</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/joins\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Joins</strong></a> - Multi-cube query patterns</li><li class=\"leading-relaxed\"><a href=\"#\" data-help-link=\"semantic-layer/security\" class=\"text-drizzle-600 hover:text-drizzle-700 underline font-medium\" ><strong class=\"font-semibold text-slate-700\">Security</strong></a> - Advanced security patterns</li></ul>","path":"semantic-layer/index.md"}
};

// Export for search functionality
export const searchableContent = helpContent.map(item => ({
  slug: item.slug,
  title: item.title,
  content: item.content.replace(/<[^>]*>/g, ' ').replace(/\s+/g, ' ').trim()
}));
